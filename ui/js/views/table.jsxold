var React = require('react');
var WebAPI = require("../utils/WebAPI.js");
var td = require("throttle-debounce");

var ReportActions = require('../actions/ReportActions');
var ReportFilterActions = require('../actions/ReportFilterActions');
var ReportStore = require('../stores/ReportStore');
var ReportFilterStore = require('../stores/ReportFilterStore');
var numeral = require("numeral");
numeral.language("en-gb", require("numeral/languages/en-gb.js"));

var ReportGrid = require('./report/reportGrid.jsx');
//var SortColumns = require('./report/sortColumns.jsx');
//var SortRows = require('./report/sortRows.jsx');

var Table = React.createClass({
    getInitialState: function() {
        return {
            isLoading: ReportStore.getLoadingStatus(),
            columnDims: ReportStore.getColumnDims(),
            columnMetrics: ReportStore.getColumnMetrics(),
            columnHeaders: ReportStore.getColumnHeaders(),
            columns: ReportStore.getColumns(),
            rows: ReportStore.getRows(),
            headers: ReportStore.getHeaders(),
            rowHeaders: ReportStore.getRowHeaders(),
            rowDims: ReportStore.getRowDims(),
            rowMetrics: ReportStore.getRowMetrics(),
            sorted: ReportStore.getSorted(),
            isLocked: ReportStore.getLockedStatus(),
        }
    },
    
    componentWillMount: function() {
		$(window).on('hashchange',function(){
			ReportActions.repivot();
		});
	},
    

    componentDidMount: function() {
        var thisComponent = this;
        $("#exportReport").on("click", function(e) {
            if (thisComponent.exportReport($(this))) {
            	e.preventDefault();
            };
        });

        //REGISTER STORE CHANGE LISTENERS
        ReportStore.addChangeListener(this._onReportStoreChange);
        ReportFilterStore.addChangeListener(this._onReportFilterStoreChange);

        //MAKE INITIAL ACTION CALLS HERE
        ReportActions.repivot();
    },

    componentWillUnmount: function() {
        ReportStore.removeChangeListener(this._onReportStoreChange);
        ReportFilterStore.removeChangeListener(this._onReportFilterStoreChange);
    },

    _onReportStoreChange: function() {
        this.setState({
            isLoading: ReportStore.getLoadingStatus(),
            columnDims: ReportStore.getColumnDims(),
            columnMetrics: ReportStore.getColumnMetrics(),
            rowDims: ReportStore.getRowDims(),
            rowMetrics: ReportStore.getRowMetrics(),
            isLocked: ReportStore.getLockedStatus(),
            columnHeaders: ReportStore.getColumnHeaders(),
            columns: ReportStore.getColumns(),
            rows: ReportStore.getRows(),
            rowHeaders: ReportStore.getRowHeaders(),
            headers: ReportStore.getHeaders(),
            sorted: ReportStore.getSorted()
        });
    },
    _onReportFilterStoreChange: function() {
        this.setState({
            reportFilters: ReportFilterStore.getReportFilters()
        });
    },
    render: function() {
        if(this.state.isLoading){
        	return (
            <div className="uk-width-9-10 uk-panel-box uk-panel-box-secondary uk-margin-large-bottom expandheight">
                <section key="reporttable" ref="reporttable" id="reporttable" className="uk-width-9-10 expandheight">
                    <div className="uk-grid">
                        <div className="uk-width-1-1">
                            <i className="icon-spinner icon-pulse icon-5x" /> Loading...
                        </div>
                    </div>
                </section>
            </div>);
	    } else {
	    	return (<ReportGrid
					ref="reporttable"
                    isLoading={this.state.isLoading}
                    drillIn={this.drillIn}
                    columnHeaders={this.state.columnHeaders}
                    columns={this.state.columns}
                    rowHeaders={this.state.rowHeaders}
                    headers={this.state.headers}
                    rows={this.state.rows} 
                    sorted={this.state.sorted}
                    />
            );
	    }
    },
    exportReport: function(a) {		
        //The Report Store is in charge of output
        var exportData = ReportStore.exportData();

		if (exportData.length > 10000) {
			var downloadForm = $("#warehouse-downloadform");
			if(!downloadForm.length) {
				downloadForm = $('<div id="warehouse-downloadform" style="display: none"><form method="POST" action="/download" /></div>').appendTo("body");
			}
			var inputtitle = $('<input type="hidden" name="title" value="Datawarehouse Export.csv"/>');
			var inputdata = $('<input type="hidden" name="data" />');
			inputdata.val(exportData);
			downloadForm.find("form").attr("action", "/download").empty().append(inputtitle).append(inputdata).submit();
			return true;
		} else {
    		a.attr("download","Datawarehouse Export.csv").attr("href", "data:text/csv;charset=utf-8,\ufeff" + encodeURIComponent(exportData));
    	}
    }
});


module.exports = {
	init: function(element, input) {
		var table = React.render(
			<Table />,
			element
		);
		ReportActions.initReport({
			columnDims: input.columnDims || [],
			columnMetrics: input.columnMetrics || [],
			rowDims: input.rowDims || [],
			rowMetrics: input.rowMetrics || [],
			showMissingDims: input.showMissingDims || [],
			sort: input.sort || [],
			locked: true
		});
		ReportFilterActions.initReportFilters( input.filters );
		ReportActions.repivot();
		return table;
	},
	/*
    addFilter: function(filter) {
    	ReportFilterActions.removeReportFilter(filter.id);
       	ReportFilterActions.addReportFilter(filter);
        return this;
    },*/

    removeFilter: function(columnId) {
        ReportFilterActions.removeReportFilter(columnId);
        return this;
    },
    
    updateFilter: function(filter) {
        ReportFilterActions.updateReportFilter(filter);
        return this;
    },

    addDimension: function(to, position, dimension) {
        ReportActions.addDimension(to, position, dimension);
        return this;
    },
	
    removeDimension: function(from, dimension) {
        ReportActions.removeDimension(from, dimension);
        return this;
    },

    addMetric: function (to, position, metric) {
        ReportActions.addMetric(to, position, metric);
        return this;
    },
	
    removeMetric: function(from, metric) {
        ReportActions.removeMetric(from, metric);
        return this;
    },
	
    updateSort: function(column, sortOrder) {
    	sortOrder = sortOrder || 'asc';
        ReportActions.sort(column, sortOrder);
        return this;
    },
    redraw: function() {
    	ReportActions.repivot()
    },
    setEndpoint: WebAPI.setEndpoint,
    setLocale: numeral.language
};
