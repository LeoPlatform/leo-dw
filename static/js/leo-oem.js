(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f();}else if(typeof define==="function"&&define.amd){define([],f);}else{var g;if(typeof window!=="undefined"){g=window;}else if(typeof global!=="undefined"){g=global;}else if(typeof self!=="undefined"){g=self;}else{g=this;}g.LEO = f();}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f;}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s;})({1:[function(require,module,exports){
	'use strict';

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var ReactDom = require('react-dom');

	var React = require('react');

	var Filters = require('./views/filters.jsx');
	var OptionActions = require("./actions/options.js");
	var DataActions = require("./actions/data.js");
	var TableView = require('./views/controls/tableView.jsx');

	var chartFigure = require("./lib/chartFigure.js");

	var Highcharts = require('highcharts');

	var charts = [];

	var LEO = require("./lib/leo.js");
	var self = module.exports = $.extend({}, LEO, {
		init: function init(opts) {
			if (opts) {
				window.leo = $.extend(true, window.leo || {}, opts);
				window.apiEndpoint = opts.apiEndpoint;
				window.apiKey = undefined;
			}
			doStart();
		},
		initDashboard: function initDashboard(element, filterBarId) {
			element = $(element);
			var filterBar = $("#" + filterBarId);

			if (!element.length) {
				return;
			}

			if (element.find('#tool-bar').length > 0) {
				element.find(".leo-charts-wrapper").addClass('has-header');
			}

			if (element.find('#leo-viewfilter').length > 0) {
				element.find(".leo-charts-wrapper").addClass('has-footer');
			}

			element.find(".leo-filters").each(function (i, filterSection) {
				var leoGroup = $(filterSection).data("leo-group");
				if (!leoGroup) {
					leoGroup = 'default';
				}

				if ($(filterSection).find(".leo-timeframe").length) {
					OptionActions.setTimeFilter(leoGroup, $(filterSection).find(".leo-timeframe").val());
				}
				if ($(filterSection).find(".leo-timeframe-breakdown").length) {
					OptionActions.setTimeBreakdown(leoGroup, $(filterSection).find(".leo-timeframe-breakdown").val());
				}

				$(filterSection).find(".leo-filter").each(function (i, f) {
					var filter = $(f);
					var label = filter.find("label").remove().text();
					var checkboxes = null;
					var values = [];
					var api = $(f).data('api');
					var isRequired = $(f).data('required') || false;
					var singleValue = $(f).data('single-value') || false;
					var comparison = $(f).data('comparison') || 'in';

					if (filter.find("select").length) {
						checkboxes = {};
						filter.find("select").find("option").each(function (i, o) {
							var option = $(o);
							if (option.attr("selected")) {
								values.push(option.val());
								checkboxes[option.val()] = true;
							} else {
								checkboxes[option.val()] = false;
							}
						});
					}
					OptionActions.setFilter(leoGroup, filter.data("column"), comparison, values, label, checkboxes, api, isRequired, singleValue);
				});

				$(filterSection).remove();
			});

			for (var f in leo.reportFilters) {
				var filter = leo.reportFilters[f];
				if (!filter.checkboxes && filter.value) {
					filter.checkboxes = {};
					if (typeof filter.value == "string") {
						filter.checkboxes[filter.value] = true;
					} else {
						filter.value.map(function (f) {
							return filter.checkboxes[f] = true;
						});
					}
				}
				OptionActions.setFilter(filter.group || 'default', filter.id, filter.comparison, filter.value, filter.label, filter.checkboxes, filter.api, filter.isRequired, filter.singleValue, true);
			}

			charts = chartFigure.initAll($(element));

			if (filterBar.length) {
				ReactDom.render(React.createElement(Filters, null), document.getElementById(filterBarId));
			}

			if ($(element).find("#leo-viewfilter").length) {
				var Legend = require('./views/controls/legend.jsx');

				var toggles = [];
				$(element).find("#leo-viewfilter input").each(function (i, input) {
					input = $(input);
					toggles.push({
						name: input.attr('name'),
						checked: input.is(":checked"),
						color: input.inlineStyle('color') || null
					});
				});
				OptionActions.setLegendToggles('default', toggles);
				ReactDom.render(React.createElement(Legend, null), $(element).find("#leo-viewfilter").get(0));
			}
		},

		showDashboard: function showDashboard(dashboard, params) {
			charts.map(function (chart) {
				chart.destroy();
			});
			DataActions.reset();
			OptionActions.reset();

			$.get(window.leodashboardurl + "dashboards/" + dashboard, function (result) {
				$("#leo-dashboard").html(result.replace(/^[\s\S]*<body[^>]*>/im, "").replace(/<\/body>[\s\S]*$/im, ""));
				module.exports.initDashboard("#leo-dashboard", 'tool-bar');
			});

			$('[data-dashboard].active').removeClass('active');
			$('[data-dashboard="' + dashboard + '"]').addClass('active');
			$('[data-dashboard="' + dashboard + '"]').closest('ul').closest('li').children('a').addClass('active-parent');
		},

		initMenu: function initMenu(id) {
			window.onhashchange = function () {
				var _location$hash$replac = location.hash.replace(/^#/, '').split('|');

				var _location$hash$replac2 = _slicedToArray(_location$hash$replac, 2);

				var dashboard = _location$hash$replac2[0];
				var params = _location$hash$replac2[1];

				self.showDashboard(dashboard, params);
			};

			$('body').on('click', '[data-dashboard]', function (e) {
				e.preventDefault();
				if (window.location.hash == "#" + $(this).data('dashboard')) {
					window.onhashchange();
				} else {
					window.location = "#" + $(this).data('dashboard');
				}
			});

			if (window.location.hash) {
				var _window$location$hash = window.location.hash.replace(/^#/, '').split('|');

				var _window$location$hash2 = _slicedToArray(_window$location$hash, 2);

				var dashboard = _window$location$hash2[0];
				var params = _window$location$hash2[1];

				self.showDashboard(dashboard, params);
			} else {
				$($('nav').find('a')[0]).trigger('click');
			}
		},
		initChart: function initChart(figure, filters) {
			return chartFigure.init(figure, filters);
		}

	});

	/*yepnope1.5.x|WTFPL*/
	(function (a, b, c) {
		function d(a) {
			return "[object Function]" == o.call(a);
		}

		function e(a) {
			return "string" == typeof a;
		}

		function f() {}

		function g(a) {
			return !a || "loaded" == a || "complete" == a || "uninitialized" == a;
		}

		function h() {
			var a = p.shift();
			q = 1, a ? a.t ? m(function () {
				("c" == a.t ? _B.injectCss : _B.injectJs)(a.s, 0, a.a, a.x, a.e, 1);
			}, 0) : (a(), h()) : q = 0;
		}

		function i(a, c, d, e, f, i, j) {
			function k(b) {
				if (!o && g(l.readyState) && (u.r = o = 1, !q && h(), l.onload = l.onreadystatechange = null, b)) {
					"img" != a && m(function () {
						t.removeChild(l);
					}, 50);
					for (var d in y[c]) {
						y[c].hasOwnProperty(d) && y[c][d].onload();
					}
				}
			}
			var j = j || _B.errorTimeout,
		    l = b.createElement(a),
		    o = 0,
		    r = 0,
		    u = {
					t: d,
					s: c,
					e: f,
					a: i,
					x: j
				};
			1 === y[c] && (r = 1, y[c] = []), "object" == a ? l.data = c : (l.src = c, l.type = a), l.width = l.height = "0", l.onerror = l.onload = l.onreadystatechange = function () {
				k.call(this, r);
			}, p.splice(e, 0, u), "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), m(k, j)) : y[c].push(l));
		}

		function j(a, b, c, d, f) {
			return q = 0, b = b || "j", e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 1 == p.length && h()), this;
		}

		function k() {
			var a = _B;
			return a.loader = {
				load: j,
				i: 0
			}, a;
		}
		var l = b.documentElement,
	    m = a.setTimeout,
	    n = b.getElementsByTagName("script")[0],
	    o = {}.toString,
	    p = [],
	    q = 0,
	    r = "MozAppearance" in l.style,
	    s = r && !!b.createRange().compareNode,
	    t = s ? l : n.parentNode,
	    l = a.opera && "[object Opera]" == o.call(a.opera),
	    l = !!b.attachEvent && !l,
	    u = r ? "object" : l ? "script" : "img",
	    v = l ? "script" : u,
	    w = Array.isArray || function (a) {
				return "[object Array]" == o.call(a);
			},
	    x = [],
	    y = {},
	    z = {
				timeout: function timeout(a, b) {
					return b.length && (a.timeout = b[0]), a;
				}
			},
	    _A,
	    _B;
		_B = function B(a) {
			function b(a) {
				var a = a.split("!"),
			    b = x.length,
			    c = a.pop(),
			    d = a.length,
			    c = {
						url: c,
						origUrl: c,
						prefixes: a
					},
			    e,
			    f,
			    g;
				for (f = 0; f < d; f++) {
					g = a[f].split("="), (e = z[g.shift()]) && (c = e(c, g));
				}for (f = 0; f < b; f++) {
					c = x[f](c);
				}return c;
			}

			function g(a, e, f, g, h) {
				var i = b(a),
			    j = i.autoCallback;
				i.url.split(".").pop().split("?").shift(), i.bypass || (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]), i.instead ? i.instead(a, e, f, g, h) : (y[i.url] ? i.noexec = !0 : y[i.url] = 1, f.load(i.url, i.forceCSS || !i.forceJS && "css" == i.url.split(".").pop().split("?").shift() ? "c" : c, i.noexec, i.attrs, i.timeout), (d(e) || d(j)) && f.load(function () {
					k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), y[i.url] = 2;
				})));
			}

			function h(a, b) {
				function c(a, c) {
					if (a) {
						if (e(a)) c || (j = function j() {
							var a = [].slice.call(arguments);
							k.apply(this, a), l();
						}), g(a, j, b, 0, h);else if (Object(a) === a) for (n in m = function () {
							var b = 0,
						    c;
							for (c in a) {
								a.hasOwnProperty(c) && b++;
							}return b;
						}(), a) {
							a.hasOwnProperty(n) && (!c && ! --m && (d(j) ? j = function j() {
								var a = [].slice.call(arguments);
								k.apply(this, a), l();
							} : j[n] = function (a) {
								return function () {
									var b = [].slice.call(arguments);
									a && a.apply(this, b), l();
								};
							}(k[n])), g(a[n], j, b, n, h));
						}
					} else !c && l();
				}
				var h = !!a.test,
			    i = a.load || a.both,
			    j = a.callback || f,
			    k = j,
			    l = a.complete || f,
			    m,
			    n;
				c(h ? a.yep : a.nope, !!i), i && c(i);
			}
			var i,
		    j,
		    l = window.yepnope.loader;
			if (e(a)) g(a, 0, l, 0);else if (w(a)) for (i = 0; i < a.length; i++) {
				j = a[i], e(j) ? g(j, 0, l, 0) : w(j) ? _B(j) : Object(j) === j && h(j, l);
			} else Object(a) === a && h(a, l);
		}, _B.addPrefix = function (a, b) {
			z[a] = b;
		}, _B.addFilter = function (a) {
			x.push(a);
		}, _B.errorTimeout = 1e4, null == b.readyState && b.addEventListener && (b.readyState = "loading", b.addEventListener("DOMContentLoaded", _A = function A() {
			b.removeEventListener("DOMContentLoaded", _A, 0), b.readyState = "complete";
		}, 0)), a.yepnope = k(), a.yepnope.executeStack = h, a.yepnope.injectJs = function (a, c, d, e, i, j) {
			var k = b.createElement("script"),
		    l,
		    o,
		    e = e || _B.errorTimeout;
			k.src = a;
			for (o in d) {
				k.setAttribute(o, d[o]);
			}c = j ? h : c || f, k.onreadystatechange = k.onload = function () {
				!l && g(k.readyState) && (l = 1, c(), k.onload = k.onreadystatechange = null);
			}, m(function () {
				l || (l = 1, c(1));
			}, e), i ? k.onload() : n.parentNode.insertBefore(k, n);
		}, a.yepnope.injectCss = function (a, c, d, e, g, i) {
			var e = b.createElement("link"),
		    j,
		    c = i ? h : c || f;
			e.href = a, e.rel = "stylesheet", e.type = "text/css";
			for (j in d) {
				e.setAttribute(j, d[j]);
			}g || (n.parentNode.insertBefore(e, n), m(c, 0));
		};
	})(window, document);

	function doStart() {

		window.Highcharts = Highcharts;

		$("#leo-dashboard").show();

		/*
 // close on mouse out
 hs.Expander.prototype.onMouseOut = function (sender) {
 	sender.close();
 };
 // close if mouse is not over on expand (using the internal mouseIsOver property)
 hs.Expander.prototype.onAfterExpand = function (sender) {
 	if (!sender.mouseIsOver) sender.close();
 };
 */

		var DateRangePicker = require('../../static/js/jquery.leo.daterangepicker.js');
		var DateRangePicker = require('../../static/js/vendor/jquery-ui.multidatespicker.js');

		chartFigure.runScripts();

		module.exports.initDashboard("body", 'tool-bar');
		module.exports.initMenu("leo-menu");

		$("body").on({
			click: function click(e) {
				var data = $(this).data();
				var checkboxes = JSON.parse(decodeURIComponent(data.checkboxes));
				OptionActions.setFilter(data.group, data.id, data.comparison, data.value, data.label, checkboxes);
			}
		}, '#leoChartDetails header a.leo-addFilter');

		$('body').on({
			click: function click(e) {
				var div = $("body #dialog-box");
				if (div.length == 0) {
					div = $('<div id="dialog-box"/>');
					$('body').append(div);
				}
				var params = JSON.parse(decodeURIComponent($(this).data('params')));
				var userClicked = JSON.parse(decodeURIComponent($(this).data('user_clicked')));
				ReactDom.render(React.createElement(TableView, { params: params, userClicked: userClicked }), div.get(0));
			}
		}, '#leoChartDetails header a.leo-tableView');
	}

	yepnope([{
		load: ["https://s3-us-west-2.amazonaws.com/cdnleo/css/leo-oem.1.10.21.css"]
	}]);
	$(function () {
		$("#leo-dashboard").hide();
	});

},{"../../static/js/jquery.leo.daterangepicker.js":847,"../../static/js/vendor/jquery-ui.multidatespicker.js":848,"./actions/data.js":793,"./actions/options.js":794,"./lib/chartFigure.js":815,"./lib/leo.js":816,"./views/controls/legend.jsx":824,"./views/controls/tableView.jsx":825,"./views/filters.jsx":826,"highcharts":107,"react":785,"react-dom":616}],2:[function(require,module,exports){
	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var moment = require('moment');
	var util = require("util");

	var format = "YYYY-MM-DD";
	// These date presets should match what is in system.js
	var epochDate = new Date(1400, 0, 1, 0, 0, 0, 0);
	var epochDateTime = epochDate.getTime();
	var oneDayInverse = 1 / (24 * 60 * 60 * 1000);
	var dimensionSurrogateOffset = 10000;
	var reusableDate = new Date(1400, 0, 1, 0, 0, 0, 0);

	function getGroups(source) {
	// The regex below may change, and Javascript doesn't support named groups. So fake it:
		var named_groups = {
			"prefix": 1,
			"func": 3,
			"funcParams": 5,
			"fieldName": 7,
			"suffix": 8
		};
		var chunks = source.match(/^([ 0-9+-]*)?@(([a-z_]+)(\(([a-z0-9\-_,]+)\))?)(\.([a-z0-9_]+))?([+-][ 0-9+-]*)?$/i);
		var groups = {};
		for (gname in named_groups) {
			groups[gname] = chunks[named_groups[gname]];
		}
		return groups;
	}

	function parse_special(datestr, today) {
		today = today || undefined;
		var groups = getGroups(datestr);
		switch (groups.func.toLowerCase()) {
		case "today":
			return [moment(today).format(format)];
			break;
		case "yesterday":
			return [moment(today).subtract(1, 'day').format(format)];
			break;
		case "tomorrow":
			return [moment(today).subtract(-1, 'day').format(format)];
			break;
		case "date":
			return [groups.funcParams];
			break;
		default:
			return [];
		}
	}

	function getLagDate(datestr) {
		var ftime;
		switch (typeof datestr === "undefined" ? "undefined" : _typeof(datestr)) {
		case "string":
			var matches = datestr.match(/^\s*(\d+)\-(\d+)\-(\d+)/);
			reusableDate.setFullYear(matches[1], matches[2] - 1, matches[3]);
			ftime = reusableDate.getTime();
			break;
		case "number":
			ftime = datestr;
			break;
		}
		return Math.round((ftime - epochDateTime) * oneDayInverse) + dimensionSurrogateOffset;
	}

	function parse_date(datestr, asOfDate) {
		var today;
		if (!asOfDate) {
			today = moment();
		} else if (moment.isMoment(asOfDate)) {
			today = moment(asOfDate);
		} else {
			today = moment(asOfDate).utcOffset(asOfDate);
		}

		datestr = datestr.toLowerCase().trim();
		if (datestr.match(/^\d+-\d+-\d+$/)) {
			return datestr;
		}
		if (datestr.match(/^@daterange/)) {
			var matches = datestr.match(/@daterange\((\d+)[\- ]*(\d+)? ?(\w+)/);
			if (matches[1] && matches[2] && matches[3]) {
				return [moment(today).subtract(Math.max(matches[1], matches[2]), matches[3]).startOf(matches[3]).format(format), moment(today).subtract(Math.min(matches[1], matches[2]), matches[3]).endOf(matches[3]).format(format)];
			} else if (matches[1] && matches[3]) {
				return [moment(today).subtract(matches[1], matches[3]).startOf(matches[3]).format(format), moment(today).subtract(matches[1], matches[3]).endOf(matches[3]).format(format)];
			}
			return moment(today);
		}
		if (datestr.match(/^@/)) {
			return parse_special(datestr, today);
		}
		var part1 = datestr.match(/^(today|yesterday|this|last|since|next)( [0-9]+)?( (month|week|year|quarter|day)s?)?/);
		datestr = datestr.replace(part1[0], '');
		var plusCurrent = !!datestr.match(/(plus|\+) ?current/);
		var plusFuture = !!datestr.match(/(plus|\+) ?future/);
		var toDate = !!datestr.match(/(to( |-)date|to( |-)now)/);
		var toYesterday = !!datestr.match(/to( |-)yesterday/);
		var agoTime = 0;
		var agoMeasure = "";
		var lastx;
		var lastAmt;
		if (!!(lastx = datestr.match(/([0-9]+) ([a-z]+) ago$/)) && !datestr.match(/^since/)) {
			lastAmt = parseInt(lastx[1]);
			lastx = lastx[2].replace(/s$/, '');
		} else if (['today', 'yesterday'].indexOf(part1[1]) > -1 && !!(lastx = (part1[0] + datestr).match(/([0-9]+) ([a-z]+) ago$/))) {
			lastAmt = parseInt(lastx[1]);
			lastx = lastx[2].replace(/s$/, '');
		} else if (lastx = datestr.match(/last ([a-z]+)$/)) {
			lastx = lastx[1];
			lastAmt = 1;
		} else {
			lastx = false;
		}

		var num_back = part1[2] === "0" ? 0 : parseInt(part1[2] || 1);

		function get_end_date() {
			if (plusFuture) {
				return '9999-01-01';
			} else if (plusCurrent) {
				if (toDate) return moment(today).format(format); // this combination essentially means the end date is always today
				if (toYesterday) return moment(today).subtract(1, 'days').format(format);
				switch (part1[4]) {
				case "day":
					// toYesterday is ignored here.
					return moment(today).format(format);
					break;
				case "week":
					return moment(today).endOf('week').format(format);
					break;
				case "month":
				case "year":
				case "quarter":
					return moment(today).endOf(part1[4] + 's').format(format);
					break;
				}
			} else if (toYesterday) {
				switch (part1[4]) {
				case "day":
					return moment(today).subtract(1, 'days').format(format);
					break;
				case "week":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(1, 'days').subtract(subtract_num, 'week').format(format);
					break;
				case "month":
				case "year":
				case "quarter":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(1, 'days').subtract(subtract_num, part1[4] + 's').format(format);
					break;
				}
			} else if (toDate) {
				switch (part1[4]) {
				case "day":
					return moment(today).format(format);
					break;
				case "week":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(subtract_num, 'week').format(format);
					break;
				case "month":
				case "year":
				case "quarter":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(subtract_num, part1[4] + 's').format(format);
					break;
				}
			} else {
				switch (part1[1]) {
				case "this":
					switch (part1[4]) {
					// Day should never get here
					case "week":
						// equivalent of a +current
						return moment(today).endOf("week").format(format);
						break;
					case "month":
					case "year":
					case "quarter":
						return moment(today).endOf(part1[4] + 's').format(format);
						break;
					}
				case "last":
					switch (part1[4]) {
					case "week":
						var subtract_num = num_back == 0 ? 0 : 1;
						return moment(today).subtract(subtract_num, "week").endOf("week").format(format);
						break;
					case "day":
					case "month":
					case "year":
					case "quarter":
						var subtract_num = num_back == 0 ? 0 : 1;
						return moment(today).subtract(subtract_num, part1[4] + 's').endOf(part1[4] + 's').format(format);
						break;
					}
				}
			}
		}

		function get_dates() {
			switch (part1[1]) {
			case 'today':
				return [moment(today).format(format)];
				break;
			case 'this':
				num_back = 0;
				switch (part1[4]) {
				case "day":
					// plus current and to date are meaningless here.
					return [moment(today).format(format)];
					break;
				case "week":
					return [moment(today).startOf('week').format(format), get_end_date()];
					break;
				case "month":
				case "year":
				case "quarter":
					return [moment(today).startOf(part1[4] + 's').format(format), get_end_date()];
					break;
				}
				break;
			case 'yesterday':
				return [moment(today).subtract(1, 'days').format(format)];
				break;
			case 'last':
				switch (part1[4]) {
				case "week":
					return [moment(today).startOf('week').subtract(num_back, 'week').format(format), get_end_date()];
					break;
				case "day":
					if (num_back == 0) return [moment(today).format(format)]; // same as "today"
					// fallthru
				default:
					return [moment(today).startOf(part1[4] + 's').subtract(num_back, part1[4] + 's').format(format), get_end_date()];
				}
				break;
			case 'since':
				return [moment(today).subtract(num_back, part1[4] + 's').format(format), plusCurrent || toDate ? moment(today).format(format) : moment(today).subtract(1, 'days').format(format)];
				break;
			case 'next':

				break;
			}
		}
		var mydates = get_dates();
		if (mydates[1] == undefined) mydates = [mydates[0]];
		if (mydates[0] > mydates[1] && mydates[1] != undefined) return [];
		if (lastx) {
			if (mydates[0]) mydates[0] = moment(mydates[0]).subtract(lastAmt, lastx).format(format);
			if (mydates[1] && !plusCurrent && !plusFuture) mydates[1] = moment(mydates[1]).subtract(lastAmt, lastx).format(format);
		}

		return mydates;
	}

	function group_dates(datestr) {
		var ranges = datestr.split(/,|-/);
		var operations = datestr.match(/,|-/g);
		var result_fields;
		var last = "";
		for (var i = 0; i < operations.length; i++) {
			if (last == operations[i] && last == "-") return "Unexpected '-' in " + datestr;
			last = operations[i];
		}
		for (var i = 0; i < ranges.length; i++) {
			ranges[i] = parse_date(ranges[i]);
		}
		console.log(parse_date("this month last year"));
		console.log(ranges);
		console.log(operations);
		return true;
	}

	if (require.main == module) {
		console.log(group_dates("today-yesterday,last year,last 2 days"));
	}

	module.exports = {
		parse_date: parse_date,
		group_dates: group_dates,
		getGroups: getGroups,
		getLagDate: getLagDate,
		parse_special: parse_special
	};

},{"moment":611,"util":792}],3:[function(require,module,exports){
	"use strict";

	var numeral = require("numeral");

	module.exports = function () {
		var that = {};
		that.getComparator = function (column, field, useNullMultiplier) {

			if (column.type == 'metric') {
				if (useNullMultiplier) {
					return function (a, b, nullMultiplier) {
						if (a[field] === b[field]) {
							return 0;
						} else if (b[field] === null || b[field] === undefined) {
							return nullMultiplier;
						} else if (a[field] === null || a[field] === undefined) {
							return -nullMultiplier;
						} else {
							return a[field] - b[field];
						}
					};
				} else {
					return function (a, b) {
						if (a[field] === b[field]) {
							return 0;
						} else if (b[field] === null || b[field] === undefined) {
							return 1;
						} else if (a[field] === null || a[field] === undefined) {
							return -1;
						} else {
							return a[field] - b[field];
						}
					};
				}
			} else if (column.sort && column.sort.type) {
				switch (column.sort.type) {
				case "enum":
					var order = {};
					var order_count = 0;
					for (var i = 0; i < column.sort.values.length; i++) {
						order[column.sort.values[i].toLowerCase()] = i;
						order_count++;
					}
					return function (a, b) {
						var af = a[field].toLowerCase();
						var bf = b[field].toLowerCase();
						var sortA = order[af];
						var sortB = order[bf];
						if (sortA === undefined) {
							order[af] = ++order_count;
							sortA = order[af];
						}
						if (sortB === undefined) {
							order[bf] = ++order_count;
							sortB = order[bf];
						}
						return sortA - sortB;
					};
					break;
				case "integer":
				case "int":
					if (useNullMultiplier) {
						return function (a, b, nullMultiplier) {
							if (a[field] === b[field]) {
								return 0;
							} else if (b[field] === null || b[field] === undefined || b[field] === "") {
								return nullMultiplier;
							} else if (a[field] === null || a[field] === undefined || a[field] === "") {
								return -nullMultiplier;
							} else {
								return parseInt(a[field]) - parseInt(b[field]);
							}
						};
					} else {
						return function (a, b) {
							if (a[field] === b[field]) {
								return 0;
							} else if (b[field] === null || b[field] === undefined || b[field] === "") {
								return 1;
							} else if (a[field] === null || a[field] === undefined || a[field] === "") {
								return -1;
							} else {
								return parseInt(a[field]) - parseInt(b[field]);
							}
						};
					}
					break;

				case "float":
				case "money":
					if (useNullMultiplier) {
						return function (a, b, nullMultiplier) {
							if (a[field] === b[field]) {
								return 0;
							} else if (b[field] === null || b[field] === undefined || b[field] === "") {
								return nullMultiplier;
							} else if (a[field] === null || a[field] === undefined || a[field] === "") {
								return -nullMultiplier;
							} else {
								return parseFloat(numeral().unformat(a[field])) - parseFloat(numeral().unformat(b[field]));
							}
						};
					} else {
						return function (a, b) {
							if (a[field] === b[field]) {
								return 0;
							} else if (b[field] === null || b[field] === undefined || b[field] === "") {
								return 1;
							} else if (a[field] === null || a[field] === undefined || a[field] === "") {
								return -1;
							} else {
								return parseFloat(numeral().unformat(a[field])) - parseFloat(numeral().unformat(b[field]));
							}
						};
					}
					break;

				case "pattern":
					var sort = column.sort;
					// ex. 2014 December -- /^(\d+) (\W)$/, "int", "enum"
					// {
					// type: 'pattern',
					// pattern: '(d+) (.*)',
					// order: [
					// {group: 1, type: 'int'},
					// {group: 2, type: 'enum', values: ['January','February','March','April','May','June','July','August','September':'October','November','December']}
					// ]
					// }
					// ex. 2014 Q4 -- /^(\d+) Q(\d)$/, "int", "int"
					// ex. 2014-Q4 -- /^(\d+)\-Q(\d)$/, "int", "int"
					// ex.
					var pattern = new RegExp("^\\s*" + sort.pattern + "\\s*$");
					var sorts = [];
					for (var i = 0; i < sort.order.length; i++) {
						var s = sort.order[i];
						var order = {};
						var count = 0;
						if (s.values) {
							for (var x = 0; x < s.values.length; x++) {
								order[s.values[x].toLowerCase()] = x;
								count++;
							}
						}

						sorts.push({
							type: s.type,
							group: s.group,
							order: order,
							order_count: count
						});
					}
					var sortLength = sorts.length;
					return function (a, b) {
						var aMatches = pattern.exec(a[field]);
						var bMatches = pattern.exec(b[field]);

						if (aMatches == null || bMatches == null) {
							return a[field].toString().localeCompare(b[field]);
						}

						var sort, one, two;
						for (var i = 0; i < sortLength; i++) {
							sort = sorts[i];
							one = aMatches[sort.group];
							two = bMatches[sort.group];
							if (sort.type == "int" || sort.type == "float") {
								if (one !== two) {
									return one - two;
								}
							} else if (sort.type == "enum") {
								var oneLC = one.toLowerCase();
								var twoLC = two.toLowerCase();
								var sortA = sort.order[oneLC];
								var sortB = sort.order[twoLC];
								if (sortA === undefined) {
									sort.order[oneLC] = ++sort.order_count;
									sortA = sort.order[oneLC];
								}
								if (sortB === undefined) {
									sort.order[twoLC] = ++sort.order_count;
									sortB = sort.order[twoLC];
								}
								if (one !== two) {
									return sortA - sortB;
								}
							} else {
								if (one !== two) {
									return one.toString().localeCompare(two);
								}
							}
						}
						return 0;
					};
					break;

				default:
					// "String"
					return function (a, b) {
						if (b[field] === undefined || b[field] === null) {
							return -1;
						} else if (a[field] === undefined || a[field] === null) {
							return 1;
						}
						return a[field].toString().localeCompare(b[field]);
					};
					break;
				}
			} else {
				// "String"
				return function (a, b) {
					if (b[field] === undefined || b[field] === null) {
						return -1;
					} else if (a[field] === undefined || a[field] === null) {
						return 1;
					}
					return a[field].toString().localeCompare(b[field]);
				};
			}
		};
		that.getMultiCompare = function (sorts, mapping) {
			var comparators = [];
			var directions = [];
			if (sorts == undefined) sorts = [];
			var length = sorts.length;
			for (var i = 0; i < length; i++) {
				var sort = sorts[i];
				if (!sort.direction) {
					sort.direction = 'asc';
				}
				if (sort.column in mapping) {
					comparators.push(that.getComparator(mapping[sort.column], sort.column, true));
					directions.push(sort.direction.toLowerCase() == 'asc' ? 1 : -1);
				}
			}
			return function (a, b) {
				var v = 0;
				for (i = 0; i < length; i++) {
					v = comparators[i](a, b, directions[i] * -1);
					if (v !== 0) {
						return directions[i] * v;
					}
				}
				return 0;
			};
		};
		return that;
	}();

},{"numeral":612}],4:[function(require,module,exports){
	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var moment = require('moment');
	var util = require("util");

	var format = "YYYY-MM-DD";
	// These date presets should match what is in system.js
	var epochDate = new Date(1400, 0, 1, 0, 0, 0, 0);
	var epochDateTime = epochDate.getTime();
	var oneDayInverse = 1 / (24 * 60 * 60 * 1000);
	var dimensionSurrogateOffset = 10000;
	var reusableDate = new Date(1400, 0, 1, 0, 0, 0, 0);

	function getGroups(source) {
	// The regex below may change, and Javascript doesn't support named groups. So fake it:
		var named_groups = {
			"prefix": 1,
			"func": 3,
			"funcParams": 5,
			"fieldName": 7,
			"suffix": 8
		};
		var chunks = source.match(/^([ 0-9+-]*)?@(([a-z_]+)(\(([a-z0-9\-_,]+)\))?)(\.([a-z0-9_]+))?([+-][ 0-9+-]*)?$/i);
		var groups = {};
		for (gname in named_groups) {
			groups[gname] = chunks[named_groups[gname]];
		}
		return groups;
	}

	function parse_special(datestr, asOfDate) {
		asOfDate = asOfDate || undefined;
		var groups = getGroups(datestr);
		switch (groups.func.toLowerCase()) {
		case "today":
			return [moment(asOfDate).format(format)];
			break;
		case "yesterday":
			return [moment(asOfDate).subtract(1, 'day').format(format)];
			break;
		case "tomorrow":
			return [moment(asOfDate).subtract(-1, 'day').format(format)];
			break;
		case "date":
			return [groups.funcParams];
			break;
		default:
			return [];
		}
	}

	function getLagDate(datestr) {
		var ftime;
		switch (typeof datestr === "undefined" ? "undefined" : _typeof(datestr)) {
		case "string":
			var matches = datestr.match(/^\s*(\d+)\-(\d+)\-(\d+)/);
			reusableDate.setFullYear(matches[1], matches[2] - 1, matches[3]);
			ftime = reusableDate.getTime();
			break;
		case "number":
			ftime = datestr;
			break;
		}
		return Math.round((ftime - epochDateTime) * oneDayInverse) + dimensionSurrogateOffset;
	}

	function parse_date(datestr, asOfDate) {
		var today;
		if (!asOfDate) {
			today = moment();
		} else if (moment.isMoment(asOfDate)) {
			today = moment(asOfDate);
		} else {
			today = moment(asOfDate).utcOffset(asOfDate);
		}

		datestr = datestr.toLowerCase().trim();
		if (datestr.match(/^\d+-\d+-\d+$/)) {
			return datestr;
		}
		if (datestr.match(/^@daterange/)) {
			var matches = datestr.match(/@daterange\((\d+)[\- ]*(\d+)? ?(\w+)/);
			if (matches[1] && matches[2] && matches[3]) {
				return [moment(today).subtract(Math.max(matches[1], matches[2]), matches[3]).startOf(matches[3]).format(format), moment(today).subtract(Math.min(matches[1], matches[2]), matches[3]).endOf(matches[3]).format(format)];
			} else if (matches[1] && matches[3]) {
				return [moment(today).subtract(matches[1], matches[3]).startOf(matches[3]).format(format), moment(today).subtract(matches[1], matches[3]).endOf(matches[3]).format(format)];
			}
			return moment(today);
		}
		if (datestr.match(/^@/)) {
			return parse_special(datestr, today);
		}
		var part1 = datestr.match(/^(today|yesterday|this|last|since|next)( [0-9]+)?( (month|week|year|quarter|day)s?)?/);
		if (!part1) {
			return datestr;
		}
		datestr = datestr.replace(part1[0], '');
		var plusCurrent = !!datestr.match(/(plus|\+) ?current/);
		var plusFuture = !!datestr.match(/(plus|\+) ?future/);
		var toDate = !!datestr.match(/(to( |-)date|to( |-)now)/);
		var toYesterday = !!datestr.match(/to( |-)yesterday/);
		var agoTime = 0;
		var agoMeasure = "";
		var lastx;
		var lastAmt;
		if (!!(lastx = datestr.match(/([0-9]+) ([a-z]+) ago$/)) && !datestr.match(/^since/)) {
			lastAmt = parseInt(lastx[1]);
			lastx = lastx[2].replace(/s$/, '');
		} else if (['today', 'yesterday'].indexOf(part1[1]) > -1 && !!(lastx = (part1[0] + datestr).match(/([0-9]+) ([a-z]+) ago$/))) {
			lastAmt = parseInt(lastx[1]);
			lastx = lastx[2].replace(/s$/, '');
		} else if (lastx = datestr.match(/last ([a-z]+)$/)) {
			lastx = lastx[1];
			lastAmt = 1;
		} else {
			lastx = false;
		}

		var num_back = part1[2] === "0" ? 0 : parseInt(part1[2] || 1);

		function get_end_date() {
			if (plusFuture) {
				return '9999-01-01';
			} else if (plusCurrent) {
				if (toDate) return moment(today).format(format); // this combination essentially means the end date is always today
				if (toYesterday) return moment(today).subtract(1, 'days').format(format);
				switch (part1[4]) {
				case "day":
					// toYesterday is ignored here.
					return moment(today).format(format);
					break;
				case "week":
					return moment(today).endOf('week').format(format);
					break;
				case "month":
				case "year":
				case "quarter":
					return moment(today).endOf(part1[4] + 's').format(format);
					break;
				}
			} else if (toYesterday) {
				switch (part1[4]) {
				case "day":
					return moment(today).subtract(1, 'days').format(format);
					break;
				case "week":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(1, 'days').subtract(subtract_num, 'week').format(format);
					break;
				case "month":
				case "year":
				case "quarter":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(1, 'days').subtract(subtract_num, part1[4] + 's').format(format);
					break;
				}
			} else if (toDate) {
				switch (part1[4]) {
				case "day":
					return moment(today).format(format);
					break;
				case "week":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(subtract_num, 'week').format(format);
					break;
				case "month":
				case "year":
				case "quarter":
					var subtract_num = num_back == 0 ? 0 : 1;
					return moment(today).subtract(subtract_num, part1[4] + 's').format(format);
					break;
				}
			} else {
				switch (part1[1]) {
				case "this":
					switch (part1[4]) {
					// Day should never get here
					case "week":
						// equivalent of a +current
						return moment(today).endOf("week").format(format);
						break;
					case "month":
					case "year":
					case "quarter":
						return moment(today).endOf(part1[4] + 's').format(format);
						break;
					}
				case "last":
					switch (part1[4]) {
					case "week":
						var subtract_num = num_back == 0 ? 0 : 1;
						return moment(today).subtract(subtract_num, "week").endOf("week").format(format);
						break;
					case "day":
					case "month":
					case "year":
					case "quarter":
						var subtract_num = num_back == 0 ? 0 : 1;
						return moment(today).subtract(subtract_num, part1[4] + 's').endOf(part1[4] + 's').format(format);
						break;
					}
				}
			}
		}

		function get_dates() {
			switch (part1[1]) {
			case 'today':
				return [moment(today).format(format)];
				break;
			case 'this':
				num_back = 0;
				switch (part1[4]) {
				case "day":
					// plus current and to date are meaningless here.
					return [moment(today).format(format)];
					break;
				case "week":
					return [moment(today).startOf('week').format(format), get_end_date()];
					break;
				case "month":
				case "year":
				case "quarter":
					return [moment(today).startOf(part1[4] + 's').format(format), get_end_date()];
					break;
				}
				break;
			case 'yesterday':
				return [moment(today).subtract(1, 'days').format(format)];
				break;
			case 'last':
				switch (part1[4]) {
				case "week":
					return [moment(today).startOf('week').subtract(num_back, 'week').format(format), get_end_date()];
					break;
				case "day":
					if (num_back == 0) return [moment(today).format(format)]; // same as "today"
					// fallthru
				default:
					return [moment(today).startOf(part1[4] + 's').subtract(num_back, part1[4] + 's').format(format), get_end_date()];
				}
				break;
			case 'since':
				return [moment(today).subtract(num_back, part1[4] + 's').format(format), plusCurrent || toDate ? moment(today).format(format) : moment(today).subtract(1, 'days').format(format)];
				break;
			case 'next':

				break;
			}
		}
		var mydates = get_dates();
		if (mydates[1] == undefined) mydates = [mydates[0]];
		if (mydates[0] > mydates[1] && mydates[1] != undefined) return [];
		if (lastx) {
			if (mydates[0]) mydates[0] = moment(mydates[0]).subtract(lastAmt, lastx).format(format);
			if (mydates[1] && !plusCurrent && !plusFuture) mydates[1] = moment(mydates[1]).subtract(lastAmt, lastx).format(format);
		}

		return mydates;
	}

	function group_dates(datestr) {
		var ranges = datestr.split(/,|-/);
		var operations = datestr.match(/,|-/g);
		var result_fields;
		var last = "";
		for (var i = 0; i < operations.length; i++) {
			if (last == operations[i] && last == "-") return "Unexpected '-' in " + datestr;
			last = operations[i];
		}
		for (var i = 0; i < ranges.length; i++) {
			ranges[i] = parse_date(ranges[i]);
		}
		console.log(parse_date("this month last year"));
		console.log(ranges);
		console.log(operations);
		return true;
	}

	if (require.main == module) {
		console.log(group_dates("today-yesterday,last year,last 2 days"));
	}

	module.exports = {
		parse_date: parse_date,
		group_dates: group_dates,
		getGroups: getGroups,
		getLagDate: getLagDate,
		parse_special: parse_special
	};

},{"moment":611,"util":792}],5:[function(require,module,exports){
	(function (process,__filename){
		/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 1.0.0 Copyright (c) 2011-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

		/*jslint node: true */
		/*global module, process */
		'use strict';

		/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requireFn]. Node's require function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.require
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
		function amdefine(module, requireFn) {
			'use strict';
			var defineCache = {},
				loaderCache = {},
				alreadyCalled = false,
				path = require('path'),
				makeRequire, stringRequire;

			/**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
			function trimDots(ary) {
				var i, part;
				for (i = 0; ary[i]; i+= 1) {
					part = ary[i];
					if (part === '.') {
						ary.splice(i, 1);
						i -= 1;
					} else if (part === '..') {
						if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
							//End of the line. Keep at least one non-dot
							//path segment at the front so it can be mapped
							//correctly to disk. Otherwise, there is likely
							//no path mapping for a path starting with '..'.
							//This can still fail, but catches the most reasonable
							//uses of ..
							break;
						} else if (i > 0) {
							ary.splice(i - 1, 2);
							i -= 2;
						}
					}
				}
			}

			function normalize(name, baseName) {
				var baseParts;

				//Adjust any relative paths.
				if (name && name.charAt(0) === '.') {
					//If have a base name, try to normalize against it,
					//otherwise, assume it is a top-level require that will
					//be relative to baseUrl in the end.
					if (baseName) {
						baseParts = baseName.split('/');
						baseParts = baseParts.slice(0, baseParts.length - 1);
						baseParts = baseParts.concat(name.split('/'));
						trimDots(baseParts);
						name = baseParts.join('/');
					}
				}

				return name;
			}

			/**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
			function makeNormalize(relName) {
				return function (name) {
					return normalize(name, relName);
				};
			}

			function makeLoad(id) {
				function load(value) {
					loaderCache[id] = value;
				}

				load.fromText = function (id, text) {
					//This one is difficult because the text can/probably uses
					//define, and any relative paths and requires should be relative
					//to that id was it would be found on disk. But this would require
					//bootstrapping a module/require fairly deeply from node core.
					//Not sure how best to go about that yet.
					throw new Error('amdefine does not implement load.fromText');
				};

				return load;
			}

			makeRequire = function (systemRequire, exports, module, relId) {
				function amdRequire(deps, callback) {
					if (typeof deps === 'string') {
						//Synchronous, single module require('')
						return stringRequire(systemRequire, exports, module, deps, relId);
					} else {
						//Array of dependencies with a callback.

						//Convert the dependencies to modules.
						deps = deps.map(function (depName) {
							return stringRequire(systemRequire, exports, module, depName, relId);
						});

						//Wait for next tick to call back the require call.
						if (callback) {
							process.nextTick(function () {
								callback.apply(null, deps);
							});
						}
					}
				}

				amdRequire.toUrl = function (filePath) {
					if (filePath.indexOf('.') === 0) {
						return normalize(filePath, path.dirname(module.filename));
					} else {
						return filePath;
					}
				};

				return amdRequire;
			};

			//Favor explicit value, passed in if the module wants to support Node 0.4.
			requireFn = requireFn || function req() {
				return module.require.apply(module, arguments);
			};

			function runFactory(id, deps, factory) {
				var r, e, m, result;

				if (id) {
					e = loaderCache[id] = {};
					m = {
						id: id,
						uri: __filename,
						exports: e
					};
					r = makeRequire(requireFn, e, m, id);
				} else {
					//Only support one define call per file
					if (alreadyCalled) {
						throw new Error('amdefine with no module ID cannot be called more than once per file.');
					}
					alreadyCalled = true;

					//Use the real variables from node
					//Use module.exports for exports, since
					//the exports in here is amdefine exports.
					e = module.exports;
					m = module;
					r = makeRequire(requireFn, e, m, module.id);
				}

				//If there are dependencies, they are strings, so need
				//to convert them to dependency values.
				if (deps) {
					deps = deps.map(function (depName) {
						return r(depName);
					});
				}

				//Call the factory with the right dependencies.
				if (typeof factory === 'function') {
					result = factory.apply(m.exports, deps);
				} else {
					result = factory;
				}

				if (result !== undefined) {
					m.exports = result;
					if (id) {
						loaderCache[id] = m.exports;
					}
				}
			}

			stringRequire = function (systemRequire, exports, module, id, relId) {
				//Split the ID by a ! so that
				var index = id.indexOf('!'),
					originalId = id,
					prefix, plugin;

				if (index === -1) {
					id = normalize(id, relId);

					//Straight module lookup. If it is one of the special dependencies,
					//deal with it, otherwise, delegate to node.
					if (id === 'require') {
						return makeRequire(systemRequire, exports, module, relId);
					} else if (id === 'exports') {
						return exports;
					} else if (id === 'module') {
						return module;
					} else if (loaderCache.hasOwnProperty(id)) {
						return loaderCache[id];
					} else if (defineCache[id]) {
						runFactory.apply(null, defineCache[id]);
						return loaderCache[id];
					} else {
						if(systemRequire) {
							return systemRequire(originalId);
						} else {
							throw new Error('No module with ID: ' + id);
						}
					}
				} else {
					//There is a plugin in play.
					prefix = id.substring(0, index);
					id = id.substring(index + 1, id.length);

					plugin = stringRequire(systemRequire, exports, module, prefix, relId);

					if (plugin.normalize) {
						id = plugin.normalize(id, makeNormalize(relId));
					} else {
						//Normalize the ID normally.
						id = normalize(id, relId);
					}

					if (loaderCache[id]) {
						return loaderCache[id];
					} else {
						plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

						return loaderCache[id];
					}
				}
			};

			//Create a define function specific to the module asking for amdefine.
			function define(id, deps, factory) {
				if (Array.isArray(id)) {
					factory = deps;
					deps = id;
					id = undefined;
				} else if (typeof id !== 'string') {
					factory = id;
					id = deps = undefined;
				}

				if (deps && !Array.isArray(deps)) {
					factory = deps;
					deps = undefined;
				}

				if (!deps) {
					deps = ['require', 'exports', 'module'];
				}

				//Set up properties for this module. If an ID, then use
				//internal cache. If no ID, then use the external variables
				//for this node module.
				if (id) {
					//Put the module in deep freeze until there is a
					//require call for it.
					defineCache[id] = [id, deps, factory];
				} else {
					runFactory(id, deps, factory);
				}
			}

			//define.require, which has access to all the values in the
			//cache. Useful for AMD modules that all have IDs in the file,
			//but need to finally export a value to node based on one of those
			//IDs.
			define.require = function (id) {
				if (loaderCache[id]) {
					return loaderCache[id];
				}

				if (defineCache[id]) {
					runFactory.apply(null, defineCache[id]);
					return loaderCache[id];
				}
			};

			define.amd = {};

			return define;
		}

		module.exports = amdefine;

	}).call(this,require('_process'),"/..\\..\\..\\..\\bus\\dw\\node_modules\\amdefine\\amdefine.js");
},{"_process":615,"path":614}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
/**
 * @license Complex.js v2.0.1 11/02/2016
 *
 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/

	/**
 *
 * This class allows the manipilation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * "23.1337" - Simple real number
 * "15+3i" - a simple complex number
 * "3-i" - a simple complex number
 *
 * Example:
 *
 * var c = new Complex("99.3+8i");
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */

	(function(root) {

		"use strict";

		var P = {'re': 0, 'im': 0};

		Math.cosh = Math.cosh || function(x) {
			return (Math.exp(x) + Math.exp(-x)) * 0.5;
		};

		Math.sinh = Math.sinh || function(x) {
			return (Math.exp(x) - Math.exp(-x)) * 0.5;
		};

		var parser_exit = function() {
			throw SyntaxError("Invalid Param");
		};

		/**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
		function logHypot(a, b) {

			var _a = Math.abs(a);
			var _b = Math.abs(b);

			if (a === 0) {
				return Math.log(_b);
			}

			if (b === 0) {
				return Math.log(_a);
			}

			if (_a < 3000 && _b < 3000) {
				return Math.log(a * a + b * b) * 0.5;
			}

			/* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

     Math.log(a * a + b * b) / 2

     *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

     var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;

     return Math.log(a) + Math.log(1 + t * t) / 2;
     };

     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

     Math.log(a / Math.cos(Math.atan2(b, a)))

     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

     */

			return Math.log(a / Math.cos(Math.atan2(b, a)));
		}

		var parse = function(a, b) {

			if (a === undefined || a === null) {
				P["re"] =
      P["im"] = 0;
			} else if (b !== undefined) {
				P["re"] = a;
				P["im"] = b;
			} else switch (typeof a) {

			case "object":

				if ("im" in a && "re" in a) {
					P["re"] = a["re"];
					P["im"] = a["im"];
				} else if ("abs" in a && "arg" in a) {
					P["re"] = a["abs"] * Math.cos(a["arg"]);
					P["im"] = a["abs"] * Math.sin(a["arg"]);
				} else if ("r" in a && "phi" in a) {
					P["re"] = a["r"] * Math.cos(a["phi"]);
					P["im"] = a["r"] * Math.sin(a["phi"]);
				} else {
					parser_exit();
				}
				break;

			case "string":

				P["im"] = /* void */
        P["re"] = 0;

				var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
				var plus = 1;
				var minus = 0;

				if (tokens === null) {
					parser_exit();
				}

				for (var i = 0; i < tokens.length; i++) {

					var c = tokens[i];

					if (c === ' ' || c === '\t' || c === '\n') {
						/* void */
					} else if (c === '+') {
						plus++;
					} else if (c === '-') {
						minus++;
					} else if (c === 'i' || c === 'I') {

						if (plus + minus === 0) {
							parser_exit();
						}

						if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
							P["im"]+= parseFloat((minus % 2 ? "-" : "") + tokens[i + 1]);
							i++;
						} else {
							P["im"]+= parseFloat((minus % 2 ? "-" : "") + "1");
						}
						plus = minus = 0;

					} else {

						if (plus + minus === 0 || isNaN(c)) {
							parser_exit();
						}

						if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
							P["im"]+= parseFloat((minus % 2 ? "-" : "") + c);
							i++;
						} else {
							P["re"]+= parseFloat((minus % 2 ? "-" : "") + c);
						}
						plus = minus = 0;
					}
				}

				// Still something on the stack
				if (plus + minus > 0) {
					parser_exit();
				}
				break;

			case "number":
				P["im"] = 0;
				P["re"] = a;
				break;

			default:
				parser_exit();
			}

			if (isNaN(P["re"]) || isNaN(P["im"])) {
				// If a calculation is NaN, we treat it as NaN and don't throw
				//parser_exit();
			}
		};

		/**
   * @constructor
   * @returns {Complex}
   */
		function Complex(a, b) {

			if (!(this instanceof Complex)) {
				return new Complex(a, b);
			}

			parse(a, b); // mutates P

			this["re"] = P["re"];
			this["im"] = P["im"];
		}

		Complex.prototype = {

			"re": 0,
			"im": 0,

			/**
     * Calculates the sign of a complex number
     *
     * @returns {Complex}
     */
			"sign": function() {

				var abs = this["abs"]();

				return new Complex(
					this["re"] / abs,
					this["im"] / abs);
			},

			/**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
			"add": function(a, b) {

				parse(a, b); // mutates P

				return new Complex(
					this["re"] + P["re"],
					this["im"] + P["im"]);
			},

			/**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
			"sub": function(a, b) {

				parse(a, b); // mutates P

				return new Complex(
					this["re"] - P["re"],
					this["im"] - P["im"]);
			},

			/**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
			"mul": function(a, b) {

				parse(a, b); // mutates P

				// Besides the addition/subtraction, this helps having a solution for rational Infinity
				if (P['im'] === 0 && this['im'] === 0) {
					return new Complex(this['re'] * P['re'], 0);
				}

				return new Complex(
					this["re"] * P["re"] - this["im"] * P["im"],
					this["re"] * P["im"] + this["im"] * P["re"]);
			},

			/**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
			"div": function(a, b) {

				parse(a, b); // mutates P

				a = this["re"];
				b = this["im"];

				var c = P["re"];
				var d = P["im"];
				var t, x;

				// Divisor is zero
				if (0 === c && 0 === d) {
					return new Complex(
						(a !== 0) ? (a / 0) : 0,
						(b !== 0) ? (b / 0) : 0);
				}

				// Divisor is rational
				if (0 === d) {
					return new Complex(a / c, b / c);
				}

				if (Math.abs(c) < Math.abs(d)) {

					x = c / d;
					t = c * x + d;

					return new Complex(
						(a * x + b) / t,
						(b * x - a) / t);

				} else {

					x = d / c;
					t = d * x + c;

					return new Complex(
						(a + b * x) / t,
						(b - a * x) / t);
				}
			},

			/**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
			"pow": function(a, b) {

				parse(a, b); // mutates P

				a = this["re"];
				b = this["im"];

				if (a === 0 && b === 0) {
					return new Complex(0, 0);
				}

				var arg = Math.atan2(b, a);
				var loh = logHypot(a, b);

				if (P["im"] === 0) {

					if (b === 0 && a >= 0) {

						return new Complex(Math.pow(a, P["re"]), 0);

					} else if (a === 0) {

						switch (P["re"] % 4) {
						case 0:
							return new Complex(Math.pow(b, P["re"]), 0);
						case 1:
							return new Complex(0, Math.pow(b, P["re"]));
						case 2:
							return new Complex(-Math.pow(b, P["re"]), 0);
						case 3:
							return new Complex(0, -Math.pow(b, P["re"]));
						}
					}
				}

				/* I couldn"t find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */

				a = Math.exp(P["re"] * loh - P["im"] * arg);
				b = P["im"] * loh + P["re"] * arg;
				return new Complex(
					a * Math.cos(b),
					a * Math.sin(b));
			},

			/**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
			"sqrt": function() {

				var a = this["re"];
				var b = this["im"];
				var r = this["abs"]();

				var re, im;

				if (a >= 0 && b === 0) {
					return new Complex(Math.sqrt(a), 0);
				}

				if (a >= 0) {
					re = 0.5 * Math.sqrt(2.0 * (r + a));
				} else {
					re = Math.abs(b) / Math.sqrt(2 * (r - a));
				}

				if (a <= 0) {
					im = 0.5 * Math.sqrt(2.0 * (r - a));
				} else {
					im = Math.abs(b) / Math.sqrt(2 * (r + a));
				}

				return new Complex(re, b >= 0 ? im : -im);
			},

			/**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
			"exp": function() {

				var tmp = Math.exp(this["re"]);

				if (this["im"] === 0) {
					//return new Complex(tmp, 0);
				}
				return new Complex(
					tmp * Math.cos(this["im"]),
					tmp * Math.sin(this["im"]));
			},

			/**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
			"log": function() {

				var a = this["re"];
				var b = this["im"];
      
				if (b === 0 && a > 0) {
					//return new Complex(Math.log(a), 0);
				}

				return new Complex(
					logHypot(a, b),
					Math.atan2(b, a));
			},

			/**
     * Calculate the magniture of the complex number
     *
     * @returns {number}
     */
			"abs": function() {

				var a = Math.abs(this["re"]);
				var b = Math.abs(this["im"]);

				if (a < 3000 && b < 3000) {
					return Math.sqrt(a * a + b * b);
				}

				if (a < b) {
					a = b;
					b = this["re"] / this["im"];
				} else {
					b = this["im"] / this["re"];
				}
				return a * Math.sqrt(1 + b * b);
			},

			/**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
			"arg": function() {

				return Math.atan2(this["im"], this["re"]);
			},

			/**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
			"sin": function() {

				var a = this["re"];
				var b = this["im"];

				return new Complex(
					Math.sin(a) * Math.cosh(b),
					Math.cos(a) * Math.sinh(b));
			},

			/**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
			"cos": function() {

				var a = this["re"];
				var b = this["im"];

				return new Complex(
					Math.cos(a) * Math.cosh(b),
					-Math.sin(a) * Math.sinh(b));
			},

			/**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
			"tan": function() {

				var a = 2 * this["re"];
				var b = 2 * this["im"];
				var d = Math.cos(a) + Math.cosh(b);

				return new Complex(
					Math.sin(a) / d,
					Math.sinh(b) / d);
			},

			/**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
			"cot": function() {

				var a = 2 * this["re"];
				var b = 2 * this["im"];
				var d = Math.cos(a) - Math.cosh(b);

				return new Complex(
					-Math.sin(a) / d,
					Math.sinh(b) / d);
			},

			/**
     * Calculate the secant
     *
     * @returns {Complex}
     */
			"sec": function() {

				var a = this["re"];
				var b = this["im"];
				var d = 0.5 * Math.cosh(2 * b) + 0.5 * Math.cos(2 * a);

				return new Complex(
					Math.cos(a) * Math.cosh(b) / d,
					Math.sin(a) * Math.sinh(b) / d);
			},

			/**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
			"csc": function() {

				var a = this["re"];
				var b = this["im"];
				var d = 0.5 * Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);

				return new Complex(
					Math.sin(a) * Math.cosh(b) / d,
					-Math.cos(a) * Math.sinh(b) / d);
			},

			/**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
			"asin": function() {

				var a = this["re"];
				var b = this["im"];

				var t1 = new Complex(
					b * b - a * a + 1,
					-2 * a * b)['sqrt']();

				var t2 = new Complex(
					t1['re'] - b,
					t1['im'] + a)['log']();

				return new Complex(t2['im'], -t2['re']);
			},

			/**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
			"acos": function() {

				var a = this["re"];
				var b = this["im"];

				var t1 = new Complex(
					b * b - a * a + 1,
					-2 * a * b)['sqrt']();

				var t2 = new Complex(
					t1["re"] - b,
					t1["im"] + a)['log']();

				return new Complex(Math.PI / 2 - t2["im"], t2["re"]);
			},

			/**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
			"atan": function() {

				var a = this["re"];
				var b = this["im"];

				if (a === 0) {

					if (b === 1) {
						return new Complex(0, Infinity);
					}

					if (b === -1) {
						return new Complex(0, -Infinity);
					}
				}

				var d = a * a + (1.0 - b) * (1.0 - b);

				var t1 = new Complex(
					(1 - b * b - a * a) / d,
					-2 * a / d).log();

				return new Complex(-0.5 * t1["im"], 0.5 * t1["re"]);
			},

			/**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
			"acot": function() {

				var a = this["re"];
				var b = this["im"];

				if (b === 0) {
					return new Complex(Math.atan2(1, a), 0);
				}

				var d = a * a + b * b;
				return (d !== 0)
					? new Complex(
						a / d,
						-b / d).atan()
					: new Complex(
						(a !== 0) ? a / 0 : 0,
						(b !== 0) ?-b / 0 : 0).atan();
			},

			/**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
			"asec": function() {

				var a = this["re"];
				var b = this["im"];

				if (a === 0 && b === 0) {
					return new Complex(0, Infinity);
				}

				var d = a * a + b * b;
				return (d !== 0)
					? new Complex(
						a / d,
						-b / d).acos()
					: new Complex(
						(a !== 0) ? a / 0 : 0,
						(b !== 0) ?-b / 0 : 0).acos();
			},

			/**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
			"acsc": function() {

				var a = this["re"];
				var b = this["im"];

				if (a === 0 && b === 0) {
					return new Complex(Math.PI / 2, Infinity);
				}

				var d = a * a + b * b;
				return (d !== 0)
					? new Complex(
						a / d,
						-b / d).asin()
					: new Complex(
						(a !== 0) ? a / 0 : 0,
						(b !== 0) ?-b / 0 : 0).asin();
			},

			/**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
			"sinh": function() {

				var a = this["re"];
				var b = this["im"];

				return new Complex(
					Math.sinh(a) * Math.cos(b),
					Math.cosh(a) * Math.sin(b));
			},

			/**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
			"cosh": function() {

				var a = this["re"];
				var b = this["im"];

				return new Complex(
					Math.cosh(a) * Math.cos(b),
					Math.sinh(a) * Math.sin(b));
			},

			/**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
			"tanh": function() {

				var a = 2 * this["re"];
				var b = 2 * this["im"];
				var d = Math.cosh(a) + Math.cos(b);

				return new Complex(
					Math.sinh(a) / d,
					Math.sin(b) / d);
			},

			/**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
			"coth": function() {

				var a = 2 * this["re"];
				var b = 2 * this["im"];
				var d = Math.cosh(a) - Math.cos(b);

				return new Complex(
					Math.sinh(a) / d,
					-Math.sin(b) / d);
			},

			/**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
			"csch": function() {

				var a = this["re"];
				var b = this["im"];
				var d = Math.cos(2 * b) - Math.cosh(2 * a);

				return new Complex(
					-2 * Math.sinh(a) * Math.cos(b) / d, 
					2 * Math.cosh(a) * Math.sin(b) / d);
			},

			/**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
			"sech": function() {

				var a = this["re"];
				var b = this["im"];
				var d = Math.cos(2 * b) + Math.cosh(2 * a);

				return new Complex(
					2 * Math.cosh(a) * Math.cos(b) / d, 
					-2 * Math.sinh(a) * Math.sin(b) / d);
			},

			/**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
			"asinh": function() {

				var tmp = this["im"];
				this["im"] = -this["re"];
				this["re"] = tmp;
				var res = this["asin"]();

				this["re"] = -this["im"];
				this["im"] = tmp;
				tmp = res["re"];

				res["re"] = -res["im"];
				res["im"] = tmp;
				return res;
			},

			/**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
			"acosh": function() {

				var tmp;
				var res = this["acos"]();
				if (res["im"] <= 0) {
					tmp = res["re"];
					res["re"] = -res["im"];
					res["im"] = tmp;
				} else {
					tmp = res["im"];
					res["im"] = -res["re"];
					res["re"] = tmp;
				}
				return res;
			},

			/**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
			"atanh": function() {

				var a = this["re"];
				var b = this["im"];

				var noIM = a > 1 && b === 0;
				var oneMinus = 1 - a;
				var onePlus = 1 + a;
				var d = oneMinus * oneMinus + b * b;

				var x = (d !== 0)
					? new Complex(
						(onePlus * oneMinus - b * b) / d,
						(b * oneMinus + onePlus * b) / d)
					: new Complex(
						(a !== -1) ? (a / 0) : 0,
						(b !== 0) ? (b / 0) : 0);

				var temp = x["re"];
				x["re"] = logHypot(x["re"], x["im"]) / 2;
				x["im"] = Math.atan2(x["im"], temp) / 2;
				if (noIM) {
					x["im"] = -x["im"];
				}
				return x;
			},

			/**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
			"acoth": function() {

				var a = this["re"];
				var b = this["im"];

				if (a === 0 && b === 0) {

					return new Complex(0, Math.PI / 2);
				}

				var d = a * a + b * b;
				return (d !== 0)
					? new Complex(
						a / d,
						-b / d).atanh()
					: new Complex(
						(a !== 0) ? a / 0 : 0,
						(b !== 0) ?-b / 0 : 0).atanh();
			},

			/**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
			"acsch": function() {

				var a = this["re"];
				var b = this["im"];

				if (b === 0) {

					return new Complex(
						(a !== 0)
							? Math.log(a + Math.sqrt(a * a + 1))
							: Infinity, 0);
				}

				var d = a * a + b * b;
				return (d !== 0)
					? new Complex(
						a / d,
						-b / d).asinh()
					: new Complex(
						(a !== 0) ? a / 0 : 0,
						(b !== 0) ?-b / 0 : 0).asinh();
			},

			/**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
			"asech": function() {

				var a = this["re"];
				var b = this["im"];

				if (a === 0 && b === 0) {
					return new Complex(Infinity, 0);
				}

				var d = a * a + b * b;
				return (d !== 0)
					? new Complex(
						a / d,
						-b / d).acosh()
					: new Complex(
						(a !== 0) ? a / 0 : 0,
						(b !== 0) ?-b / 0 : 0).acosh();
			},

			/**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
			"inverse": function() {

				var a = this["re"];
				var b = this["im"];

				var d = a * a + b * b;

				return new Complex(
					a !== 0 ? a / d : 0,
					b !== 0 ?-b / d : 0);
			},

			/**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
			"conjugate": function() {

				return new Complex(this["re"], -this["im"]);
			},

			/**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
			"neg": function() {

				return new Complex(-this["re"], -this["im"]);
			},

			/**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
			"ceil": function(places) {

				places = Math.pow(10, places || 0);

				return new Complex(
					Math.ceil(this["re"] * places) / places,
					Math.ceil(this["im"] * places) / places);
			},

			/**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
			"floor": function(places) {

				places = Math.pow(10, places || 0);

				return new Complex(
					Math.floor(this["re"] * places) / places,
					Math.floor(this["im"] * places) / places);
			},

			/**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
			"round": function(places) {

				places = Math.pow(10, places || 0);

				return new Complex(
					Math.round(this["re"] * places) / places,
					Math.round(this["im"] * places) / places);
			},

			/**
     * Compares two complex numbers
     *
     * @returns {boolean}
     */
			"equals": function(a, b) {

				parse(a, b); // mutates P

				return Math.abs(P["re"] - this["re"]) <= Complex["EPSILON"] &&
             Math.abs(P["im"] - this["im"]) <= Complex["EPSILON"];
			},

			/**
     * Clones the actual object
     *
     * @returns {Complex}
     */
			"clone": function() {

				return new Complex(this["re"], this["im"]);
			},

			/**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
			"toString": function() {

				var a = this["re"];
				var b = this["im"];
				var ret = "";

				if (isNaN(a) || isNaN(b)) {
					return "NaN";
				}

				if (a !== 0) {
					ret+= a;
				}

				if (b !== 0) {

					if (a !== 0) {
						ret+= b < 0 ? " - " : " + ";
					} else if (b < 0) {
						ret+= "-";
					}

					b = Math.abs(b);

					if (1 !== b) {
						ret+= b;
					}
					ret+= "i";
				}

				if (!ret)
					return "0";

				return ret;
			},

			/**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
			"toVector": function() {

				return [this["re"], this["im"]];
			},

			/**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
			"valueOf": function() {

				if (this["im"] === 0) {
					return this["re"];
				}
				return null;
			},

			/**
     * Checks if the given complex number is not a number
     *
     * @returns {boolean}
     */
			isNaN: function() {
				return isNaN(this['re']) || isNaN(this['im']);
			}
		};

		Complex["ZERO"] = new Complex(0, 0);
		Complex["ONE"] = new Complex(1, 0);
		Complex["I"] = new Complex(0, 1);
		Complex["PI"] = new Complex(Math.PI, 0);
		Complex["E"] = new Complex(Math.E, 0);
		Complex['EPSILON'] = 1e-16;

		if (typeof define === "function" && define["amd"]) {
			define([], function() {
				return Complex;
			});
		} else if (typeof exports === "object") {
			module["exports"] = Complex;
		} else {
			root["Complex"] = Complex;
		}
  
	})(this);

},{}],8:[function(require,module,exports){
/*! decimal.js v5.0.8 https://github.com/MikeMcl/decimal.js/LICENCE */
	(function (globalScope) {
		'use strict';


		/*
   *  decimal.js v5.0.8
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Expat Licence
   */


		// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


		// The maximum exponent magnitude.
		// The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
		var EXP_LIMIT = 9e15,                      // 0 to 9e15

			// The limit on the value of `precision`, and on the value of the first argument to
			// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
			MAX_DIGITS = 1e9,                        // 0 to 1e9

			// The base 88 alphabet used by `toJSON` and `fromJSON`.
			// 7 printable ASCII characters omitted (space) \ " & ' < >
			NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~',

			// The natural logarithm of 10 (1025 digits).
			LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

			// Pi (1025 digits).
			PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


			// The initial configuration properties of the Decimal constructor.
			Decimal = {

				// These values must be integers within the stated ranges (inclusive).
				// Most of these values can be changed during run-time using `Decimal.config`.

				// The maximum number of significant digits of the result of a calculation or base conversion.
				// E.g. `Decimal.config({ precision: 20 });`
				precision: 20,                         // 1 to MAX_DIGITS

				// The rounding mode used when rounding to `precision`.
				//
				// ROUND_UP         0 Away from zero.
				// ROUND_DOWN       1 Towards zero.
				// ROUND_CEIL       2 Towards +Infinity.
				// ROUND_FLOOR      3 Towards -Infinity.
				// ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
				// ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
				// ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
				// ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
				// ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
				//
				// E.g.
				// `Decimal.rounding = 4;`
				// `Decimal.rounding = Decimal.ROUND_HALF_UP;`
				rounding: 4,                           // 0 to 8

				// The modulo mode used when calculating the modulus: a mod n.
				// The quotient (q = a / n) is calculated according to the corresponding rounding mode.
				// The remainder (r) is calculated as: r = a - n * q.
				//
				// UP         0 The remainder is positive if the dividend is negative, else is negative.
				// DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
				// FLOOR      3 The remainder has the same sign as the divisor (Python %).
				// HALF_EVEN  6 The IEEE 754 remainder function.
				// EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
				//
				// Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
				// division (9) are commonly used for the modulus operation. The other rounding modes can also
				// be used, but they may not give useful results.
				modulo: 1,                             // 0 to 9

				// The exponent value at and beneath which `toString` returns exponential notation.
				// JavaScript numbers: -7
				toExpNeg: -7,                          // 0 to -EXP_LIMIT

				// The exponent value at and above which `toString` returns exponential notation.
				// JavaScript numbers: 21
				toExpPos:  21,                         // 0 to EXP_LIMIT

				// The minimum exponent value, beneath which underflow to zero occurs.
				// JavaScript numbers: -324  (5e-324)
				minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

				// The maximum exponent value, above which overflow to Infinity occurs.
				// JavaScript numbers: 308  (1.7976931348623157e+308)
				maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

				// Whether to use cryptographically-secure random number generation, if available.
				crypto: void 0                         // true/false/undefined
			},


			// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


			inexact, noConflict, quadrant,
			cryptoObject = typeof crypto != 'undefined' ? crypto : null,
			external = true,

			decimalError = '[DecimalError] ',
			invalidArgument = decimalError + 'Invalid argument: ',
			precisionLimitExceeded = decimalError + 'Precision limit exceeded',

			mathfloor = Math.floor,
			mathpow = Math.pow,

			isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
			isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
			isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
			isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

			BASE = 1e7,
			LOG_BASE = 7,
			MAX_SAFE_INTEGER = 9007199254740991,

			LN10_PRECISION = LN10.length - 1,
			PI_PRECISION = PI.length - 1,

			// Decimal.prototype object
			P = {};


		// Decimal prototype methods


		/*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toJSON
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf
   */


		/*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
		P.absoluteValue = P.abs = function () {
			var x = new this.constructor(this);
			if (x.s < 0) x.s = 1;
			return finalise(x);
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
		P.ceil = function () {
			return finalise(new this.constructor(this), this.e + 1, 2);
		};


		/*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
		P.comparedTo = P.cmp = function (y) {
			var i, j, xdL, ydL,
				x = this,
				xd = x.d,
				yd = (y = new x.constructor(y)).d,
				xs = x.s,
				ys = y.s;

			// Either NaN or ±Infinity?
			if (!xd || !yd) {
				return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
			}

			// Either zero?
			if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

			// Signs differ?
			if (xs !== ys) return xs;

			// Compare exponents.
			if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

			xdL = xd.length;
			ydL = yd.length;

			// Compare digit by digit.
			for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
				if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
			}

			// Compare lengths.
			return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
		};


		/*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
		P.cosine = P.cos = function () {
			var pr, rm,
				x = this,
				Ctor = x.constructor;

			if (!x.d) return new Ctor(NaN);

			// cos(0) = cos(-0) = 1
			if (!x.d[0]) return new Ctor(1);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
			Ctor.rounding = 1;

			x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
		};


		/*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
		P.cubeRoot = P.cbrt = function () {
			var e, m, n, r, rep, s, sd, t, t3, t3plusx,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite() || x.isZero()) return new Ctor(x);
			external = false;

			// Initial estimate.
			s = x.s * Math.pow(x.s * x, 1 / 3);

			// Math.cbrt underflow/overflow?
			// Pass x to Math.pow as integer, then adjust the exponent of the result.
			if (!s || Math.abs(s) == 1 / 0) {
				n = digitsToString(x.d);
				e = x.e;

				// Adjust n exponent so it is a multiple of 3 away from x exponent.
				if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
				s = Math.pow(n, 1 / 3);

				// Rarely, e may be one less than the result exponent value.
				e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

				if (s == 1 / 0) {
					n = '5e' + e;
				} else {
					n = s.toExponential();
					n = n.slice(0, n.indexOf('e') + 1) + e;
				}

				r = new Ctor(n);
				r.s = x.s;
			} else {
				r = new Ctor(s.toString());
			}

			sd = (e = Ctor.precision) + 3;

			// Halley's method.
			// TODO? Compare Newton's method.
			for (;;) {
				t = r;
				t3 = t.times(t).times(t);
				t3plusx = t3.plus(x);
				r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

				// TODO? Replace with for-loop and checkRoundingDigits.
				if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
					n = n.slice(sd - 3, sd + 1);

					// The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
					// , i.e. approaching a rounding boundary, continue the iteration.
					if (n == '9999' || !rep && n == '4999') {

						// On the first iteration only, check to see if rounding up gives the exact result as the
						// nines may infinitely repeat.
						if (!rep) {
							finalise(t, e + 1, 0);

							if (t.times(t).times(t).eq(x)) {
								r = t;
								break;
							}
						}

						sd += 4;
						rep = 1;
					} else {

						// If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
						// If not, then there are further digits and m will be truthy.
						if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

							// Truncate to the first rounding digit.
							finalise(r, e + 1, 1);
							m = !r.times(r).times(r).eq(x);
						}

						break;
					}
				}
			}

			external = true;

			return finalise(r, e, Ctor.rounding, m);
		};


		/*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
		P.decimalPlaces = P.dp = function () {
			var w,
				d = this.d,
				n = NaN;

			if (d) {
				w = d.length - 1;
				n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

				// Subtract the number of trailing zeros of the last word.
				w = d[w];
				if (w) for (; w % 10 == 0; w /= 10) n--;
				if (n < 0) n = 0;
			}

			return n;
		};


		/*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
		P.dividedBy = P.div = function (y) {
			return divide(this, new this.constructor(y));
		};


		/*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
		P.dividedToIntegerBy = P.divToInt = function (y) {
			var x = this,
				Ctor = x.constructor;
			return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
		};


		/*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
		P.equals = P.eq = function (y) {
			return this.cmp(y) === 0;
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
		P.floor = function () {
			return finalise(new this.constructor(this), this.e + 1, 3);
		};


		/*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
		P.greaterThan = P.gt = function (y) {
			return this.cmp(y) > 0;
		};


		/*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
		P.greaterThanOrEqualTo = P.gte = function (y) {
			var k = this.cmp(y);
			return k == 1 || k === 0;
		};


		/*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
		P.hyperbolicCosine = P.cosh = function () {
			var k, n, pr, rm, len,
				x = this,
				Ctor = x.constructor,
				one = new Ctor(1);

			if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
			if (x.isZero()) return one;

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
			Ctor.rounding = 1;
			len = x.d.length;

			// Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
			// i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

			// Estimate the optimum number of times to use the argument reduction.
			// TODO? Estimation reused from cosine() and may not be optimal here.
			if (len < 32) {
				k = Math.ceil(len / 3);
				n = Math.pow(4, -k).toString();
			} else {
				k = 16;
				n = '2.3283064365386962890625e-10';
			}

			x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

			// Reverse argument reduction
			var cosh2_x,
				i = k,
				d8 = new Ctor(8);
			for (; i--;) {
				cosh2_x = x.times(x);
				x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
			}

			return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
		};


		/*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
		P.hyperbolicSine = P.sinh = function () {
			var k, pr, rm, len,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite() || x.isZero()) return new Ctor(x);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
			Ctor.rounding = 1;
			len = x.d.length;

			if (len < 3) {
				x = taylorSeries(Ctor, 2, x, x, true);
			} else {

				// Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
				// i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
				// 3 multiplications and 1 addition

				// Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
				// i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
				// 4 multiplications and 2 additions

				// Estimate the optimum number of times to use the argument reduction.
				k = 1.4 * Math.sqrt(len);
				k = k > 16 ? 16 : k | 0;

				x = x.times(Math.pow(5, -k));

				x = taylorSeries(Ctor, 2, x, x, true);

				// Reverse argument reduction
				var sinh2_x,
					d5 = new Ctor(5),
					d16 = new Ctor(16),
					d20 = new Ctor(20);
				for (; k--;) {
					sinh2_x = x.times(x);
					x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
				}
			}

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return finalise(x, pr, rm, true);
		};


		/*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
		P.hyperbolicTangent = P.tanh = function () {
			var pr, rm,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite()) return new Ctor(x.s);
			if (x.isZero()) return new Ctor(x);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + 7;
			Ctor.rounding = 1;

			return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
		};


		/*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
		P.inverseCosine = P.acos = function () {
			var halfPi,
				x = this,
				Ctor = x.constructor,
				k = x.abs().cmp(1),
				pr = Ctor.precision,
				rm = Ctor.rounding;

			if (k !== -1) {
				return k === 0
				// |x| is 1
					? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
				// |x| > 1 or x is NaN
					: new Ctor(NaN);
			}

			if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

			// TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

			Ctor.precision = pr + 6;
			Ctor.rounding = 1;

			x = x.asin();
			halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return halfPi.minus(x);
		};


		/*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
		P.inverseHyperbolicCosine = P.acosh = function () {
			var pr, rm,
				x = this,
				Ctor = x.constructor;

			if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
			if (!x.isFinite()) return new Ctor(x);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
			Ctor.rounding = 1;
			external = false;

			x = x.times(x).minus(1).sqrt().plus(x);

			external = true;
			Ctor.precision = pr;
			Ctor.rounding = rm;

			return x.ln();
		};


		/*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
		P.inverseHyperbolicSine = P.asinh = function () {
			var pr, rm,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite() || x.isZero()) return new Ctor(x);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
			Ctor.rounding = 1;
			external = false;

			x = x.times(x).plus(1).sqrt().plus(x);

			external = true;
			Ctor.precision = pr;
			Ctor.rounding = rm;

			return x.ln();
		};


		/*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
		P.inverseHyperbolicTangent = P.atanh = function () {
			var pr, rm, wpr, xsd,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite()) return new Ctor(NaN);
			if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			xsd = x.sd();

			if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

			Ctor.precision = wpr = xsd - x.e;

			x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

			Ctor.precision = pr + 4;
			Ctor.rounding = 1;

			x = x.ln();

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return x.times(0.5);
		};


		/*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
		P.inverseSine = P.asin = function () {
			var halfPi, k,
				pr, rm,
				x = this,
				Ctor = x.constructor;

			if (x.isZero()) return new Ctor(x);

			k = x.abs().cmp(1);
			pr = Ctor.precision;
			rm = Ctor.rounding;

			if (k !== -1) {

				// |x| is 1
				if (k === 0) {
					halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
					halfPi.s = x.s;
					return halfPi;
				}

				// |x| > 1 or x is NaN
				return new Ctor(NaN);
			}

			// TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

			Ctor.precision = pr + 6;
			Ctor.rounding = 1;

			x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return x.times(2);
		};


		/*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
		P.inverseTangent = P.atan = function () {
			var i, j, k, n, px, t, r, wpr, x2,
				x = this,
				Ctor = x.constructor,
				pr = Ctor.precision,
				rm = Ctor.rounding;

			if (!x.isFinite()) {
				if (!x.s) return new Ctor(NaN);
				if (pr + 4 <= PI_PRECISION) {
					r = getPi(Ctor, pr + 4, rm).times(0.5);
					r.s = x.s;
					return r;
				}
			} else if (x.isZero()) {
				return new Ctor(x);
			} else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
				r = getPi(Ctor, pr + 4, rm).times(0.25);
				r.s = x.s;
				return r;
			}

			Ctor.precision = wpr = pr + 10;
			Ctor.rounding = 1;

			// TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

			// Argument reduction
			// Ensure |x| < 0.42
			// atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

			k = Math.min(28, wpr / LOG_BASE + 2 | 0);

			for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

			external = false;

			j = Math.ceil(wpr / LOG_BASE);
			n = 1;
			x2 = x.times(x);
			r = new Ctor(x);
			px = x;

			// atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
			for (; i !== -1;) {
				px = px.times(x2);
				t = r.minus(px.div(n += 2));

				px = px.times(x2);
				r = t.plus(px.div(n += 2));

				if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
			}

			if (k) r = r.times(2 << (k - 1));

			external = true;

			return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
		};


		/*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
		P.isFinite = function () {
			return !!this.d;
		};


		/*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
		P.isInteger = P.isInt = function () {
			return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
		};


		/*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
		P.isNaN = function () {
			return !this.s;
		};


		/*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
		P.isNegative = P.isNeg = function () {
			return this.s < 0;
		};


		/*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
		P.isPositive = P.isPos = function () {
			return this.s > 0;
		};


		/*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
		P.isZero = function () {
			return !!this.d && this.d[0] === 0;
		};


		/*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
		P.lessThan = P.lt = function (y) {
			return this.cmp(y) < 0;
		};


		/*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
		P.lessThanOrEqualTo = P.lte = function (y) {
			return this.cmp(y) < 1;
		};


		/*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
		P.logarithm = P.log = function (base) {
			var isBase10, d, denominator, k, inf, num, sd, r,
				arg = this,
				Ctor = arg.constructor,
				pr = Ctor.precision,
				rm = Ctor.rounding,
				guard = 5;

			// Default base is 10.
			if (base == null) {
				base = new Ctor(10);
				isBase10 = true;
			} else {
				base = new Ctor(base);
				d = base.d;

				// Return NaN if base is negative, or non-finite, or is 0 or 1.
				if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

				isBase10 = base.eq(10);
			}

			d = arg.d;

			// Is arg negative, non-finite, 0 or 1?
			if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
				return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
			}

			// The result will have a non-terminating decimal expansion if base is 10 and arg is not an
			// integer power of 10.
			if (isBase10) {
				if (d.length > 1) {
					inf = true;
				} else {
					for (k = d[0]; k % 10 === 0;) k /= 10;
					inf = k !== 1;
				}
			}

			external = false;
			sd = pr + guard;
			num = naturalLogarithm(arg, sd);
			denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

			// The result will have 5 rounding digits.
			r = divide(num, denominator, sd, 1);

			// If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
			// calculate 10 further digits.
			//
			// If the result is known to have an infinite decimal expansion, repeat this until it is clear
			// that the result is above or below the boundary. Otherwise, if after calculating the 10
			// further digits, the last 14 are nines, round up and assume the result is exact.
			// Also assume the result is exact if the last 14 are zero.
			//
			// Example of a result that will be incorrectly rounded:
			// log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
			// The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
			// will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
			// the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
			// place is still 2.6.
			if (checkRoundingDigits(r.d, k = pr, rm)) {

				do {
					sd += 10;
					num = naturalLogarithm(arg, sd);
					denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
					r = divide(num, denominator, sd, 1);

					if (!inf) {

						// Check for 14 nines from the 2nd rounding digit, as the first may be 4.
						if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
							r = finalise(r, pr + 1, 0);
						}

						break;
					}
				} while (checkRoundingDigits(r.d, k += 10, rm));
			}

			external = true;

			return finalise(r, pr, rm);
		};


		/*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


		/*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


		/*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
		P.minus = P.sub = function (y) {
			var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
				x = this,
				Ctor = x.constructor;

			y = new Ctor(y);

			// If either is not finite...
			if (!x.d || !y.d) {

				// Return NaN if either is NaN.
				if (!x.s || !y.s) y = new Ctor(NaN);

				// Return y negated if x is finite and y is ±Infinity.
				else if (x.d) y.s = -y.s;

				// Return x if y is finite and x is ±Infinity.
				// Return x if both are ±Infinity with different signs.
				// Return NaN if both are ±Infinity with the same sign.
				else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

				return y;
			}

			// If signs differ...
			if (x.s != y.s) {
				y.s = -y.s;
				return x.plus(y);
			}

			xd = x.d;
			yd = y.d;
			pr = Ctor.precision;
			rm = Ctor.rounding;

			// If either is zero...
			if (!xd[0] || !yd[0]) {

				// Return y negated if x is zero and y is non-zero.
				if (yd[0]) y.s = -y.s;

				// Return x if y is zero and x is non-zero.
				else if (xd[0]) y = new Ctor(x);

				// Return zero if both are zero.
				// From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
				else return new Ctor(rm === 3 ? -0 : 0);

				return external ? finalise(y, pr, rm) : y;
			}

			// x and y are finite, non-zero numbers with the same sign.

			// Calculate base 1e7 exponents.
			e = mathfloor(y.e / LOG_BASE);
			xe = mathfloor(x.e / LOG_BASE);

			xd = xd.slice();
			k = xe - e;

			// If base 1e7 exponents differ...
			if (k) {
				xLTy = k < 0;

				if (xLTy) {
					d = xd;
					k = -k;
					len = yd.length;
				} else {
					d = yd;
					e = xe;
					len = xd.length;
				}

				// Numbers with massively different exponents would result in a very high number of
				// zeros needing to be prepended, but this can be avoided while still ensuring correct
				// rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
				i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

				if (k > i) {
					k = i;
					d.length = 1;
				}

				// Prepend zeros to equalise exponents.
				d.reverse();
				for (i = k; i--;) d.push(0);
				d.reverse();

				// Base 1e7 exponents equal.
			} else {

				// Check digits to determine which is the bigger number.

				i = xd.length;
				len = yd.length;
				xLTy = i < len;
				if (xLTy) len = i;

				for (i = 0; i < len; i++) {
					if (xd[i] != yd[i]) {
						xLTy = xd[i] < yd[i];
						break;
					}
				}

				k = 0;
			}

			if (xLTy) {
				d = xd;
				xd = yd;
				yd = d;
				y.s = -y.s;
			}

			len = xd.length;

			// Append zeros to `xd` if shorter.
			// Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
			for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

			// Subtract yd from xd.
			for (i = yd.length; i > k;) {

				if (xd[--i] < yd[i]) {
					for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
					--xd[j];
					xd[i] += BASE;
				}

				xd[i] -= yd[i];
			}

			// Remove trailing zeros.
			for (; xd[--len] === 0;) xd.pop();

			// Remove leading zeros and adjust exponent accordingly.
			for (; xd[0] === 0; xd.shift()) --e;

			// Zero?
			if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

			y.d = xd;
			y.e = getBase10Exponent(xd, e);

			return external ? finalise(y, pr, rm) : y;
		};


		/*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
		P.modulo = P.mod = function (y) {
			var q,
				x = this,
				Ctor = x.constructor;

			y = new Ctor(y);

			// Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
			if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

			// Return x if y is ±Infinity or x is ±0.
			if (!y.d || x.d && !x.d[0]) {
				return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
			}

			// Prevent rounding of intermediate calculations.
			external = false;

			if (Ctor.modulo == 9) {

				// Euclidian division: q = sign(y) * floor(x / abs(y))
				// result = x - q * y    where  0 <= result < abs(y)
				q = divide(x, y.abs(), 0, 3, 1);
				q.s *= y.s;
			} else {
				q = divide(x, y, 0, Ctor.modulo, 1);
			}

			q = q.times(y);

			external = true;

			return x.minus(q);
		};


		/*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
		P.naturalExponential = P.exp = function () {
			return naturalExponential(this);
		};


		/*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
		P.naturalLogarithm = P.ln = function () {
			return naturalLogarithm(this);
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
		P.negated = P.neg = function () {
			var x = new this.constructor(this);
			x.s = -x.s;
			return finalise(x);
		};


		/*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
		P.plus = P.add = function (y) {
			var carry, d, e, i, k, len, pr, rm, xd, yd,
				x = this,
				Ctor = x.constructor;

			y = new Ctor(y);

			// If either is not finite...
			if (!x.d || !y.d) {

				// Return NaN if either is NaN.
				if (!x.s || !y.s) y = new Ctor(NaN);

				// Return x if y is finite and x is ±Infinity.
				// Return x if both are ±Infinity with the same sign.
				// Return NaN if both are ±Infinity with different signs.
				// Return y if x is finite and y is ±Infinity.
				else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

				return y;
			}

			// If signs differ...
			if (x.s != y.s) {
				y.s = -y.s;
				return x.minus(y);
			}

			xd = x.d;
			yd = y.d;
			pr = Ctor.precision;
			rm = Ctor.rounding;

			// If either is zero...
			if (!xd[0] || !yd[0]) {

				// Return x if y is zero.
				// Return y if y is non-zero.
				if (!yd[0]) y = new Ctor(x);

				return external ? finalise(y, pr, rm) : y;
			}

			// x and y are finite, non-zero numbers with the same sign.

			// Calculate base 1e7 exponents.
			k = mathfloor(x.e / LOG_BASE);
			e = mathfloor(y.e / LOG_BASE);

			xd = xd.slice();
			i = k - e;

			// If base 1e7 exponents differ...
			if (i) {

				if (i < 0) {
					d = xd;
					i = -i;
					len = yd.length;
				} else {
					d = yd;
					e = k;
					len = xd.length;
				}

				// Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
				k = Math.ceil(pr / LOG_BASE);
				len = k > len ? k + 1 : len + 1;

				if (i > len) {
					i = len;
					d.length = 1;
				}

				// Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
				d.reverse();
				for (; i--;) d.push(0);
				d.reverse();
			}

			len = xd.length;
			i = yd.length;

			// If yd is longer than xd, swap xd and yd so xd points to the longer array.
			if (len - i < 0) {
				i = len;
				d = yd;
				yd = xd;
				xd = d;
			}

			// Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
			for (carry = 0; i;) {
				carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
				xd[i] %= BASE;
			}

			if (carry) {
				xd.unshift(carry);
				++e;
			}

			// Remove trailing zeros.
			// No need to check for zero, as +x + +y != 0 && -x + -y != 0
			for (len = xd.length; xd[--len] == 0;) xd.pop();

			y.d = xd;
			y.e = getBase10Exponent(xd, e);

			return external ? finalise(y, pr, rm) : y;
		};


		/*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
		P.precision = P.sd = function (z) {
			var k,
				x = this;

			if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

			if (x.d) {
				k = getPrecision(x.d);
				if (z && x.e + 1 > k) k = x.e + 1;
			} else {
				k = NaN;
			}

			return k;
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
		P.round = function () {
			var x = this,
				Ctor = x.constructor;

			return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
		};


		/*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
		P.sine = P.sin = function () {
			var pr, rm,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite()) return new Ctor(NaN);
			if (x.isZero()) return new Ctor(x);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
			Ctor.rounding = 1;

			x = sine(Ctor, toLessThanHalfPi(Ctor, x));

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
		};


		/*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
		P.squareRoot = P.sqrt = function () {
			var m, n, sd, r, rep, t,
				x = this,
				d = x.d,
				e = x.e,
				s = x.s,
				Ctor = x.constructor;

			// Negative/NaN/Infinity/zero?
			if (s !== 1 || !d || !d[0]) {
				return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
			}

			external = false;

			// Initial estimate.
			s = Math.sqrt(+x);

			// Math.sqrt underflow/overflow?
			// Pass x to Math.sqrt as integer, then adjust the exponent of the result.
			if (s == 0 || s == 1 / 0) {
				n = digitsToString(d);

				if ((n.length + e) % 2 == 0) n += '0';
				s = Math.sqrt(n);
				e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

				if (s == 1 / 0) {
					n = '1e' + e;
				} else {
					n = s.toExponential();
					n = n.slice(0, n.indexOf('e') + 1) + e;
				}

				r = new Ctor(n);
			} else {
				r = new Ctor(s.toString());
			}

			sd = (e = Ctor.precision) + 3;

			// Newton-Raphson iteration.
			for (;;) {
				t = r;
				r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

				// TODO? Replace with for-loop and checkRoundingDigits.
				if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
					n = n.slice(sd - 3, sd + 1);

					// The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
					// 4999, i.e. approaching a rounding boundary, continue the iteration.
					if (n == '9999' || !rep && n == '4999') {

						// On the first iteration only, check to see if rounding up gives the exact result as the
						// nines may infinitely repeat.
						if (!rep) {
							finalise(t, e + 1, 0);

							if (t.times(t).eq(x)) {
								r = t;
								break;
							}
						}

						sd += 4;
						rep = 1;
					} else {

						// If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
						// If not, then there are further digits and m will be truthy.
						if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

							// Truncate to the first rounding digit.
							finalise(r, e + 1, 1);
							m = !r.times(r).eq(x);
						}

						break;
					}
				}
			}

			external = true;

			return finalise(r, e, Ctor.rounding, m);
		};


		/*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
		P.tangent = P.tan = function () {
			var pr, rm,
				x = this,
				Ctor = x.constructor;

			if (!x.isFinite()) return new Ctor(NaN);
			if (x.isZero()) return new Ctor(x);

			pr = Ctor.precision;
			rm = Ctor.rounding;
			Ctor.precision = pr + 10;
			Ctor.rounding = 1;

			x = x.sin();
			x.s = 1;
			x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

			Ctor.precision = pr;
			Ctor.rounding = rm;

			return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
		};


		/*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
		P.times = P.mul = function (y) {
			var carry, e, i, k, r, rL, t, xdL, ydL,
				x = this,
				Ctor = x.constructor,
				xd = x.d,
				yd = (y = new Ctor(y)).d;

			y.s *= x.s;

			// If either is NaN, ±Infinity or ±0...
			if (!xd || !xd[0] || !yd || !yd[0]) {

				return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

				// Return NaN if either is NaN.
				// Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
					? NaN

				// Return ±Infinity if either is ±Infinity.
				// Return ±0 if either is ±0.
					: !xd || !yd ? y.s / 0 : y.s * 0);
			}

			e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
			xdL = xd.length;
			ydL = yd.length;

			// Ensure xd points to the longer array.
			if (xdL < ydL) {
				r = xd;
				xd = yd;
				yd = r;
				rL = xdL;
				xdL = ydL;
				ydL = rL;
			}

			// Initialise the result array with zeros.
			r = [];
			rL = xdL + ydL;
			for (i = rL; i--;) r.push(0);

			// Multiply!
			for (i = ydL; --i >= 0;) {
				carry = 0;
				for (k = xdL + i; k > i;) {
					t = r[k] + yd[i] * xd[k - i - 1] + carry;
					r[k--] = t % BASE | 0;
					carry = t / BASE | 0;
				}

				r[k] = (r[k] + carry) % BASE | 0;
			}

			// Remove trailing zeros.
			for (; !r[--rL];) r.pop();

			if (carry) ++e;
			else r.shift();

			// Remove trailing zeros.
			for (i = r.length; !r[--i];) r.pop();

			y.d = r;
			y.e = getBase10Exponent(r, e);

			return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
		};


		/*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
		P.toBinary = function (sd, rm) {
			return toStringBinary(this, 2, sd, rm);
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
		P.toDecimalPlaces = P.toDP = function (dp, rm) {
			var x = this,
				Ctor = x.constructor;

			x = new Ctor(x);
			if (dp === void 0) return x;

			checkInt32(dp, 0, MAX_DIGITS);

			if (rm === void 0) rm = Ctor.rounding;
			else checkInt32(rm, 0, 8);

			return finalise(x, dp + x.e + 1, rm);
		};


		/*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
		P.toExponential = function (dp, rm) {
			var str,
				x = this,
				Ctor = x.constructor;

			if (dp === void 0) {
				str = finiteToString(x, true);
			} else {
				checkInt32(dp, 0, MAX_DIGITS);

				if (rm === void 0) rm = Ctor.rounding;
				else checkInt32(rm, 0, 8);

				x = finalise(new Ctor(x), dp + 1, rm);
				str = finiteToString(x, true, dp + 1);
			}

			return x.isNeg() && !x.isZero() ? '-' + str : str;
		};


		/*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
		P.toFixed = function (dp, rm) {
			var str, y,
				x = this,
				Ctor = x.constructor;

			if (dp === void 0) {
				str = finiteToString(x);
			} else {
				checkInt32(dp, 0, MAX_DIGITS);

				if (rm === void 0) rm = Ctor.rounding;
				else checkInt32(rm, 0, 8);

				y = finalise(new Ctor(x), dp + x.e + 1, rm);
				str = finiteToString(y, false, dp + y.e + 1);
			}

			// To determine whether to add the minus sign look at the value before it was rounded,
			// i.e. look at `x` rather than `y`.
			return x.isNeg() && !x.isZero() ? '-' + str : str;
		};


		/*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
		P.toFraction = function (maxD) {
			var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
				x = this,
				xd = x.d,
				Ctor = x.constructor;

			if (!xd) return new Ctor(x);

			n1 = d0 = new Ctor(1);
			d1 = n0 = new Ctor(0);

			d = new Ctor(d1);
			e = d.e = getPrecision(xd) - x.e - 1;
			k = e % LOG_BASE;
			d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

			if (maxD == null) {

				// d is 10**e, the minimum max-denominator needed.
				maxD = e > 0 ? d : n1;
			} else {
				n = new Ctor(maxD);
				if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
				maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
			}

			external = false;
			n = new Ctor(digitsToString(xd));
			pr = Ctor.precision;
			Ctor.precision = e = xd.length * LOG_BASE * 2;

			for (;;)  {
				q = divide(n, d, 0, 1, 1);
				d2 = d0.plus(q.times(d1));
				if (d2.cmp(maxD) == 1) break;
				d0 = d1;
				d1 = d2;
				d2 = n1;
				n1 = n0.plus(q.times(d2));
				n0 = d2;
				d2 = d;
				d = n.minus(q.times(d2));
				n = d2;
			}

			d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
			n0 = n0.plus(d2.times(n1));
			d0 = d0.plus(d2.times(d1));
			n0.s = n1.s = x.s;

			// Determine which fraction is closer to x, n0/d0 or n1/d1?
			r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
				? [n1, d1] : [n0, d0];

			Ctor.precision = pr;
			external = true;

			return r;
		};


		/*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
		P.toHexadecimal = P.toHex = function (sd, rm) {
			return toStringBinary(this, 16, sd, rm);
		};


		/*
   * Return a string representing the exact value of this Decimal in a compact base-88 based format.
   *
   * The number of characters of the string will always be equal to or less than the number of
   * characters returned by `toString` or `toExponential` - usually just over half as many.
   *
   * The original Decimal value can be recreated by passing the string to `Decimal.fromJSON`.
   *
   * Base 88 alphabet:
   * 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~
   *
   * The following 7 printable ASCII characters are not used
   * (space) \ " & ' < >
   * so the return value is safe for strings, HTML, JSON, and XML.
   *
   *     0   0     g  16    w  32    M  48    $  64    ]  80
   *     1   1     h  17    x  33    N  49    %  65    ^  81
   *     2   2     i  18    y  34    O  50    (  66    _  82
   *     3   3     j  19    z  35    P  51    )  67    `  83
   *     4   4     k  20    A  36    Q  52    *  68    {  84
   *     5   5     l  21    B  37    R  53    +  69    |  85
   *     6   6     m  22    C  38    S  54    ,  70    }  86
   *     7   7     n  23    D  39    T  55    -  71    ~  87
   *     8   8     o  24    E  40    U  56    .  72
   *     9   9     p  25    F  41    V  57    /  73
   *     a  10     q  26    G  42    W  58    :  74
   *     b  11     r  27    H  43    X  59    ;  75
   *     c  12     s  28    I  44    Y  60    =  76
   *     d  13     t  29    J  45    Z  61    ?  77
   *     e  14     u  30    K  46    !  62    @  78
   *     f  15     v  31    L  47    #  63    [  79
   *
   * If the return value is just one character, it represents:
   * 0-81  [[0, 40][-0, -40]]
   * 82    -Infinity
   * 83    +Infinity
   * 84    NaN
   * 85-87 free
   *
   *   64 32 16  8  4  2  1
   *    1  0  1  0  1  1  1 = 87
   *
   */
		P.toJSON = function () {
			var arr, e, i, k, len, n, r, str,
				x = this,
				isNeg = x.s < 0;

			// -Infinity/Infinity/NaN.
			if (!x.d) return NUMERALS.charAt(x.s ? isNeg ? 82 : 83 : 84);
			e = x.e;

			// Small integer.
			if (x.d.length === 1 && e < 4 && e >= 0) {
				n = x.d[0];

				if (n < 2857) {

					// One character.
					// [[0, 40][-0, -40]]
					if (n < 41) return NUMERALS.charAt(isNeg ? n + 41 : n);

					// Two characters. High bit of first character unset.
					// 0XXXXXX
					// 63*88 + 87 = 5631 = 5632 values, 5632/2 = 2816
					// [[0, 2815][2816, 5631]]  (2816 * 2 = 5632 values)
					// [[0, 2815][-0, -2815]]
					// [[41, 2856][-41, -2856]]
					n -= 41;
					if (isNeg) n += 2816;
					k = n / 88 | 0;

					return NUMERALS.charAt(k) + NUMERALS.charAt(n - k * 88);
				}
			}

			str = digitsToString(x.d);
			r = '';

			// Values with a small exponent. Set high bit.
			// Positive value: 100XXXX
			// 1 0 0 {exponent [0, 15] -> [-7, 8]}
			if (!isNeg && e <= 8 && e >= -7) {
				k = 64 + e + 7;

				// Negative value: 1010XXX
				// 1 0 1 0 {exponent [0, 7] -> [-3, 4]}
			} else if (isNeg && e <= 4 && e >= -3) {
				k = 64 + 16 + e + 3;

				// Integer without trailing zeros: 0X00000
				// 0 {is negative} 0 0 0 0 0
			} else if (str.length === e + 1) {
				k = 32 * isNeg;

				// All remaining values: 0XXXXXX
				// Result will have at least 3 characters.
				// 0 {is negative} {is exponent negative} {exponent character count [1, 15]}
			} else {
				k = 32 * isNeg + 16 * (e < 0);
				e = Math.abs(e);

				// One character to represent the exponent.
				if (e < 88)  {
					k += 1;
					r = NUMERALS.charAt(e);

					// Two characters to represent the exponent.
					// 87*88 + 87 = 7743
				} else if (e < 7744) {
					k += 2;
					n = e / 88 | 0;
					r = NUMERALS.charAt(n) + NUMERALS.charAt(e - n * 88);

					// More than two characters to represent the exponent.
				} else {
					arr = convertBase(String(e), 10, 88);
					len = arr.length;
					k += len;
					for (i = 0; i < len; i++) r += NUMERALS.charAt(arr[i]);
				}
			}

			// At this point r contains the characters in base 88 representing the exponent value.
			// Prepend the first character, which describes the sign, the exponent sign, and the number of
			// characters that follow which represent the exponent value.
			r = NUMERALS.charAt(k) + r;
			arr = convertBase(str, 10, 88);
			len = arr.length;

			// Add the base 88 characters that represent the significand.
			for (i = 0; i < len; i++) r += NUMERALS.charAt(arr[i]);

			return r;
		};


		/*
   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value
   * of this Decimal.
   *
   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,
   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.
   *
   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
   * (ROUND_UP), and so on.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
		P.toNearest = function (y, rm) {
			var x = this,
				Ctor = x.constructor;

			x = new Ctor(x);

			if (y == null) {

				// If x is not finite, return x.
				if (!x.d) return x;

				y = new Ctor(1);
				rm = Ctor.rounding;
			} else {
				y = new Ctor(y);
				if (rm !== void 0) checkInt32(rm, 0, 8);

				// If x is not finite, return x if y is not NaN, else NaN.
				if (!x.d) return y.s ? x : y;

				// If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
				if (!y.d) {
					if (y.s) y.s = x.s;
					return y;
				}
			}

			// If y is not zero, calculate the nearest multiple of y to x.
			if (y.d[0]) {
				external = false;
				if (rm < 4) rm = [4, 5, 7, 8][rm];
				x = divide(x, y, 0, rm, 1).times(y);
				external = true;
				finalise(x);

				// If y is zero, return zero with the sign of x.
			} else {
				y.s = x.s;
				x = y;
			}

			return x;
		};


		/*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
		P.toNumber = function () {
			return +this;
		};


		/*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
		P.toOctal = function (sd, rm) {
			return toStringBinary(this, 8, sd, rm);
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
		P.toPower = P.pow = function (y) {
			var e, k, pr, r, rm, sign, yIsInt,
				x = this,
				Ctor = x.constructor,
				yn = +(y = new Ctor(y));

			// Either ±Infinity, NaN or ±0?
			if (!x.d || !y.d || !x.d[0] || !y.d[0]) return  new Ctor(mathpow(+x, yn));

			x = new Ctor(x);

			if (x.eq(1)) return x;

			pr = Ctor.precision;
			rm = Ctor.rounding;

			if (y.eq(1)) return finalise(x, pr, rm);

			e = mathfloor(y.e / LOG_BASE);
			k = y.d.length - 1;
			yIsInt = e >= k;
			sign = x.s;

			if (!yIsInt) {
				if (sign < 0) return new Ctor(NaN);

				// If y is a small integer use the 'exponentiation by squaring' algorithm.
			} else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
				r = intPow(Ctor, x, k, pr);
				return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
			}

			// Result is negative if x is negative and the last digit of integer y is odd.
			sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;

			// Estimate result exponent.
			// x^y = 10^e,  where e = y * log10(x)
			// log10(x) = log10(x_significand) + x_exponent
			// log10(x_significand) = ln(x_significand) / ln(10)
			k = mathpow(+x, yn);
			e = k == 0 || !isFinite(k)
				? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
				: new Ctor(k + '').e;

			// Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

			// Overflow/underflow?
			if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? sign / 0 : 0);

			external = false;
			Ctor.rounding = x.s = 1;

			// Estimate the extra guard digits needed to ensure five correct rounding digits from
			// naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
			// new Decimal(2.32456).pow('2087987436534566.46411')
			// should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
			k = Math.min(12, (e + '').length);

			// r = x^y = exp(y*ln(x))
			r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

			// Truncate to the required precision plus five rounding digits.
			r = finalise(r, pr + 5, 1);

			// If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
			// the result.
			if (checkRoundingDigits(r.d, pr, rm)) {
				e = pr + 10;

				// Truncate to the increased precision plus five rounding digits.
				r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

				// Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
				if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
					r = finalise(r, pr + 1, 0);
				}
			}

			r.s = sign;
			external = true;
			Ctor.rounding = rm;

			return finalise(r, pr, rm);
		};


		/*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
		P.toPrecision = function (sd, rm) {
			var str,
				x = this,
				Ctor = x.constructor;

			if (sd === void 0) {
				str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
			} else {
				checkInt32(sd, 1, MAX_DIGITS);

				if (rm === void 0) rm = Ctor.rounding;
				else checkInt32(rm, 0, 8);

				x = finalise(new Ctor(x), sd, rm);
				str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
			}

			return x.isNeg() && !x.isZero() ? '-' + str : str;
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
		P.toSignificantDigits = P.toSD = function (sd, rm) {
			var x = this,
				Ctor = x.constructor;

			if (sd === void 0) {
				sd = Ctor.precision;
				rm = Ctor.rounding;
			} else {
				checkInt32(sd, 1, MAX_DIGITS);

				if (rm === void 0) rm = Ctor.rounding;
				else checkInt32(rm, 0, 8);
			}

			return finalise(new Ctor(x), sd, rm);
		};


		/*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
		P.toString = function () {
			var x = this,
				Ctor = x.constructor,
				str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

			return x.isNeg() && !x.isZero() ? '-' + str : str;
		};


		/*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
		P.truncated = P.trunc = function () {
			return finalise(new this.constructor(this), this.e + 1, 1);
		};


		/*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
		P.valueOf = function () {
			var x = this,
				Ctor = x.constructor,
				str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

			return x.isNeg() ? '-' + str : str;
		};


		/*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */


		// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


		/*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toJSON,
   *                           P.toPower, finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              P.toJSON, toStringBinary, fromJSON, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, fromJSON, parseOther, random, Decimal           *
   */


		function digitsToString(d) {
			var i, k, ws,
				indexOfLastWord = d.length - 1,
				str = '',
				w = d[0];

			if (indexOfLastWord > 0) {
				str += w;
				for (i = 1; i < indexOfLastWord; i++) {
					ws = d[i] + '';
					k = LOG_BASE - ws.length;
					if (k) str += getZeroString(k);
					str += ws;
				}

				w = d[i];
				ws = w + '';
				k = LOG_BASE - ws.length;
				if (k) str += getZeroString(k);
			} else if (w === 0) {
				return '0';
			}

			// Remove trailing zeros of last w.
			for (; w % 10 === 0;) w /= 10;

			return str + w;
		}


		function checkInt32(i, min, max) {
			if (i !== ~~i || i < min || i > max) {
				throw Error(invalidArgument + i);
			}
		}


		/*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
		function checkRoundingDigits(d, i, rm, repeating) {
			var di, k, r, rd;

			// Get the length of the first word of the array d.
			for (k = d[0]; k >= 10; k /= 10) --i;

			// Is the rounding digit in the first word of d?
			if (--i < 0) {
				i += LOG_BASE;
				di = 0;
			} else {
				di = Math.ceil((i + 1) / LOG_BASE);
				i %= LOG_BASE;
			}

			// i is the index (0 - 6) of the rounding digit.
			// E.g. if within the word 3487563 the first rounding digit is 5,
			// then i = 4, k = 1000, rd = 3487563 % 1000 = 563
			k = mathpow(10, LOG_BASE - i);
			rd = d[di] % k | 0;

			if (repeating == null) {
				if (i < 3) {
					if (i == 0) rd = rd / 100 | 0;
					else if (i == 1) rd = rd / 10 | 0;
					r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
				} else {
					r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
				}
			} else {
				if (i < 4) {
					if (i == 0) rd = rd / 1000 | 0;
					else if (i == 1) rd = rd / 100 | 0;
					else if (i == 2) rd = rd / 10 | 0;
					r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
				} else {
					r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
				}
			}

			return r;
		}


		// Convert string of `baseIn` to an array of numbers of `baseOut`.
		// Eg. convertBase('255', 10, 16) returns [15, 15].
		// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
		function convertBase(str, baseIn, baseOut) {
			var j,
				arr = [0],
				arrL,
				i = 0,
				strL = str.length;

			for (; i < strL;) {
				for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
				arr[0] += NUMERALS.indexOf(str.charAt(i++));
				for (j = 0; j < arr.length; j++) {
					if (arr[j] > baseOut - 1) {
						if (arr[j + 1] === void 0) arr[j + 1] = 0;
						arr[j + 1] += arr[j] / baseOut | 0;
						arr[j] %= baseOut;
					}
				}
			}

			return arr.reverse();
		}


		/*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
		function cosine(Ctor, x) {
			var k, y,
				len = x.d.length;

			// Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
			// i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

			// Estimate the optimum number of times to use the argument reduction.
			if (len < 32) {
				k = Math.ceil(len / 3);
				y = Math.pow(4, -k).toString();
			} else {
				k = 16;
				y = '2.3283064365386962890625e-10';
			}

			Ctor.precision += k;

			x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

			// Reverse argument reduction
			for (var i = k; i--;) {
				var cos2x = x.times(x);
				x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
			}

			Ctor.precision -= k;

			return x;
		}


		/*
   * Perform division in the specified base.
   */
		var divide = (function () {

			// Assumes non-zero x and k, and hence non-zero result.
			function multiplyInteger(x, k, base) {
				var temp,
					carry = 0,
					i = x.length;

				for (x = x.slice(); i--;) {
					temp = x[i] * k + carry;
					x[i] = temp % base | 0;
					carry = temp / base | 0;
				}

				if (carry) x.unshift(carry);

				return x;
			}

			function compare(a, b, aL, bL) {
				var i, r;

				if (aL != bL) {
					r = aL > bL ? 1 : -1;
				} else {
					for (i = r = 0; i < aL; i++) {
						if (a[i] != b[i]) {
							r = a[i] > b[i] ? 1 : -1;
							break;
						}
					}
				}

				return r;
			}

			function subtract(a, b, aL, base) {
				var i = 0;

				// Subtract b from a.
				for (; aL--;) {
					a[aL] -= i;
					i = a[aL] < b[aL] ? 1 : 0;
					a[aL] = i * base + a[aL] - b[aL];
				}

				// Remove leading zeros.
				for (; !a[0] && a.length > 1;) a.shift();
			}

			return function (x, y, pr, rm, dp, base) {
				var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
					yL, yz,
					Ctor = x.constructor,
					sign = x.s == y.s ? 1 : -1,
					xd = x.d,
					yd = y.d;

				// Either NaN, Infinity or 0?
				if (!xd || !xd[0] || !yd || !yd[0]) {

					return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
						!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

						// Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
							xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
				}

				if (base) {
					logBase = 1;
					e = x.e - y.e;
				} else {
					base = BASE;
					logBase = LOG_BASE;
					e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
				}

				yL = yd.length;
				xL = xd.length;
				q = new Ctor(sign);
				qd = q.d = [];

				// Result exponent may be one less than e.
				// The digit array of a Decimal from toStringBinary may have trailing zeros.
				for (i = 0; yd[i] == (xd[i] || 0); i++);

				if (yd[i] > (xd[i] || 0)) e--;

				if (pr == null) {
					sd = pr = Ctor.precision;
					rm = Ctor.rounding;
				} else if (dp) {
					sd = pr + (x.e - y.e) + 1;
				} else {
					sd = pr;
				}

				if (sd < 0) {
					qd.push(1);
					more = true;
				} else {

					// Convert precision in number of base 10 digits to base 1e7 digits.
					sd = sd / logBase + 2 | 0;
					i = 0;

					// divisor < 1e7
					if (yL == 1) {
						k = 0;
						yd = yd[0];
						sd++;

						// k is the carry.
						for (; (i < xL || k) && sd--; i++) {
							t = k * base + (xd[i] || 0);
							qd[i] = t / yd | 0;
							k = t % yd | 0;
						}

						more = k || i < xL;

						// divisor >= 1e7
					} else {

						// Normalise xd and yd so highest order digit of yd is >= base/2
						k = base / (yd[0] + 1) | 0;

						if (k > 1) {
							yd = multiplyInteger(yd, k, base);
							xd = multiplyInteger(xd, k, base);
							yL = yd.length;
							xL = xd.length;
						}

						xi = yL;
						rem = xd.slice(0, yL);
						remL = rem.length;

						// Add zeros to make remainder as long as divisor.
						for (; remL < yL;) rem[remL++] = 0;

						yz = yd.slice();
						yz.unshift(0);
						yd0 = yd[0];

						if (yd[1] >= base / 2) ++yd0;

						do {
							k = 0;

							// Compare divisor and remainder.
							cmp = compare(yd, rem, yL, remL);

							// If divisor < remainder.
							if (cmp < 0) {

								// Calculate trial digit, k.
								rem0 = rem[0];
								if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

								// k will be how many times the divisor goes into the current remainder.
								k = rem0 / yd0 | 0;

								//  Algorithm:
								//  1. product = divisor * trial digit (k)
								//  2. if product > remainder: product -= divisor, k--
								//  3. remainder -= product
								//  4. if product was < remainder at 2:
								//    5. compare new remainder and divisor
								//    6. If remainder > divisor: remainder -= divisor, k++

								if (k > 1) {
									if (k >= base) k = base - 1;

									// product = divisor * trial digit.
									prod = multiplyInteger(yd, k, base);
									prodL = prod.length;
									remL = rem.length;

									// Compare product and remainder.
									cmp = compare(prod, rem, prodL, remL);

									// product > remainder.
									if (cmp == 1) {
										k--;

										// Subtract divisor from product.
										subtract(prod, yL < prodL ? yz : yd, prodL, base);
									}
								} else {

									// cmp is -1.
									// If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
									// to avoid it. If k is 1 there is a need to compare yd and rem again below.
									if (k == 0) cmp = k = 1;
									prod = yd.slice();
								}

								prodL = prod.length;
								if (prodL < remL) prod.unshift(0);

								// Subtract product from remainder.
								subtract(rem, prod, remL, base);

								// If product was < previous remainder.
								if (cmp == -1) {
									remL = rem.length;

									// Compare divisor and new remainder.
									cmp = compare(yd, rem, yL, remL);

									// If divisor < new remainder, subtract divisor from remainder.
									if (cmp < 1) {
										k++;

										// Subtract divisor from remainder.
										subtract(rem, yL < remL ? yz : yd, remL, base);
									}
								}

								remL = rem.length;
							} else if (cmp === 0) {
								k++;
								rem = [0];
							}    // if cmp === 1, k will be 0

							// Add the next digit, k, to the result array.
							qd[i++] = k;

							// Update the remainder.
							if (cmp && rem[0]) {
								rem[remL++] = xd[xi] || 0;
							} else {
								rem = [xd[xi]];
								remL = 1;
							}

						} while ((xi++ < xL || rem[0] !== void 0) && sd--);

						more = rem[0] !== void 0;
					}

					// Leading zero?
					if (!qd[0]) qd.shift();
				}

				// logBase is 1 when divide is being used for base conversion.
				if (logBase == 1) {
					q.e = e;
					inexact = more;
				} else {

					// To calculate q.e, first get the number of digits of qd[0].
					for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
					q.e = i + e * logBase - 1;

					finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
				}

				return q;
			};
		})();


		/*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
		function finalise(x, sd, rm, isTruncated) {
			var digits, i, j, k, rd, roundUp, w, xd, xdi,
				Ctor = x.constructor;

			// Don't round if sd is null or undefined.
			out: if (sd != null) {
				xd = x.d;

				// Infinity/NaN.
				if (!xd) return x;

				// rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
				// w: the word of xd containing rd, a base 1e7 number.
				// xdi: the index of w within xd.
				// digits: the number of digits of w.
				// i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
				// they had leading zeros)
				// j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

				// Get the length of the first word of the digits array xd.
				for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
				i = sd - digits;

				// Is the rounding digit in the first word of xd?
				if (i < 0) {
					i += LOG_BASE;
					j = sd;
					w = xd[xdi = 0];

					// Get the rounding digit at index j of w.
					rd = w / mathpow(10, digits - j - 1) % 10 | 0;
				} else {
					xdi = Math.ceil((i + 1) / LOG_BASE);
					k = xd.length;
					if (xdi >= k) {
						if (isTruncated) {

							// Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
							for (; k++ <= xdi;) xd.push(0);
							w = rd = 0;
							digits = 1;
							i %= LOG_BASE;
							j = i - LOG_BASE + 1;
						} else {
							break out;
						}
					} else {
						w = k = xd[xdi];

						// Get the number of digits of w.
						for (digits = 1; k >= 10; k /= 10) digits++;

						// Get the index of rd within w.
						i %= LOG_BASE;

						// Get the index of rd within w, adjusted for leading zeros.
						// The number of leading zeros of w is given by LOG_BASE - digits.
						j = i - LOG_BASE + digits;

						// Get the rounding digit at index j of w.
						rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
					}
				}

				// Are there any non-zero digits after the rounding digit?
				isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

				// The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
				// of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
				// will give 714.

				roundUp = rm < 4
					? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
					: rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

				if (sd < 1 || !xd[0]) {
					xd.length = 0;
					if (roundUp) {

						// Convert sd to decimal places.
						sd -= x.e + 1;

						// 1, 0.1, 0.01, 0.001, 0.0001 etc.
						xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
						x.e = -sd || 0;
					} else {

						// Zero.
						xd[0] = x.e = 0;
					}

					return x;
				}

				// Remove excess digits.
				if (i == 0) {
					xd.length = xdi;
					k = 1;
					xdi--;
				} else {
					xd.length = xdi + 1;
					k = mathpow(10, LOG_BASE - i);

					// E.g. 56700 becomes 56000 if 7 is the rounding digit.
					// j > 0 means i > number of leading zeros of w.
					xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
				}

				if (roundUp) {
					for (;;) {

						// Is the digit to be rounded up in the first word of xd?
						if (xdi == 0) {

							// i will be the length of xd[0] before k is added.
							for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
							j = xd[0] += k;
							for (k = 1; j >= 10; j /= 10) k++;

							// if i != k the length has increased.
							if (i != k) {
								x.e++;
								if (xd[0] == BASE) xd[0] = 1;
							}

							break;
						} else {
							xd[xdi] += k;
							if (xd[xdi] != BASE) break;
							xd[xdi--] = 0;
							k = 1;
						}
					}
				}

				// Remove trailing zeros.
				for (i = xd.length; xd[--i] === 0;) xd.pop();
			}

			if (external) {

				// Overflow?
				if (x.e > Ctor.maxE) {

					// Infinity.
					x.d = null;
					x.e = NaN;

					// Underflow?
				} else if (x.e < Ctor.minE) {

					// Zero.
					x.e = 0;
					x.d = [0];
					// Ctor.underflow = true;
				} // else Ctor.underflow = false;
			}

			return x;
		}


		function finiteToString(x, isExp, sd) {
			if (!x.isFinite()) return nonFiniteToString(x);
			var k,
				e = x.e,
				str = digitsToString(x.d),
				len = str.length;

			if (isExp) {
				if (sd && (k = sd - len) > 0) {
					str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
				} else if (len > 1) {
					str = str.charAt(0) + '.' + str.slice(1);
				}

				str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
			} else if (e < 0) {
				str = '0.' + getZeroString(-e - 1) + str;
				if (sd && (k = sd - len) > 0) str += getZeroString(k);
			} else if (e >= len) {
				str += getZeroString(e + 1 - len);
				if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
			} else {
				if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
				if (sd && (k = sd - len) > 0) {
					if (e + 1 === len) str += '.';
					str += getZeroString(k);
				}
			}

			return str;
		}


		// Calculate the base 10 exponent from the base 1e7 exponent.
		function getBase10Exponent(digits, e) {

			// First get the number of digits of the first word of the digits array.
			for (var i = 1, w = digits[0]; w >= 10; w /= 10) i++;
			return i + e * LOG_BASE - 1;
		}


		function getLn10(Ctor, sd, pr) {
			if (sd > LN10_PRECISION) {

				// Reset global state in case the exception is caught.
				external = true;
				if (pr) Ctor.precision = pr;
				throw Error(precisionLimitExceeded);
			}
			return finalise(new Ctor(LN10), sd, 1, true);
		}


		function getPi(Ctor, sd, rm) {
			if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
			return finalise(new Ctor(PI), sd, rm, true);
		}


		function getPrecision(digits) {
			var w = digits.length - 1,
				len = w * LOG_BASE + 1;

			w = digits[w];

			// If non-zero...
			if (w) {

				// Subtract the number of trailing zeros of the last word.
				for (; w % 10 == 0; w /= 10) len--;

				// Add the number of digits of the first word.
				for (w = digits[0]; w >= 10; w /= 10) len++;
			}

			return len;
		}


		function getZeroString(k) {
			var zs = '';
			for (; k--;) zs += '0';
			return zs;
		}


		/*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
		function intPow(Ctor, x, n, pr) {
			var isTruncated,
				r = new Ctor(1),

				// Max n of 9007199254740991 takes 53 loop iterations.
				// Maximum digits array length; leaves [28, 34] guard digits.
				k = Math.ceil(pr / LOG_BASE + 4);

			external = false;

			for (;;) {
				if (n % 2) {
					r = r.times(x);
					if (truncate(r.d, k)) isTruncated = true;
				}

				n = mathfloor(n / 2);
				if (n === 0) {

					// To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
					n = r.d.length - 1;
					if (isTruncated && r.d[n] === 0) ++r.d[n];
					break;
				}

				x = x.times(x);
				truncate(x.d, k);
			}

			external = true;

			return r;
		}


		function isOdd(n) {
			return n.d[n.d.length - 1] & 1;
		}


		/*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
		function maxOrMin(Ctor, args, ltgt) {
			var y,
				x = new Ctor(args[0]),
				i = 0;

			for (; ++i < args.length;) {
				y = new Ctor(args[i]);
				if (!y.s) {
					x = y;
					break;
				} else if (x[ltgt](y)) {
					x = y;
				}
			}

			return x;
		}


		/*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
		function naturalExponential(x, sd) {
			var denominator, guard, j, pow, sum, t, wpr,
				rep = 0,
				i = 0,
				k = 0,
				Ctor = x.constructor,
				rm = Ctor.rounding,
				pr = Ctor.precision;

			// 0/NaN/Infinity?
			if (!x.d || !x.d[0] || x.e > 17) {

				return new Ctor(x.d
					? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
					: x.s ? x.s < 0 ? 0 : x : 0 / 0);
			}

			if (sd == null) {
				external = false;
				wpr = pr;
			} else {
				wpr = sd;
			}

			t = new Ctor(0.03125);

			// while abs(x) >= 0.1
			while (x.e > -2) {

				// x = x / 2^5
				x = x.times(t);
				k += 5;
			}

			// Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
			// necessary to ensure the first 4 rounding digits are correct.
			guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
			wpr += guard;
			denominator = pow = sum = new Ctor(1);
			Ctor.precision = wpr;

			for (;;) {
				pow = finalise(pow.times(x), wpr, 1);
				denominator = denominator.times(++i);
				t = sum.plus(divide(pow, denominator, wpr, 1));

				if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
					j = k;
					while (j--) sum = finalise(sum.times(sum), wpr, 1);

					// Check to see if the first 4 rounding digits are [49]999.
					// If so, repeat the summation with a higher precision, otherwise
					// e.g. with precision: 18, rounding: 1
					// exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
					// `wpr - guard` is the index of first rounding digit.
					if (sd == null) {

						if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
							Ctor.precision = wpr += 10;
							denominator = pow = t = new Ctor(1);
							i = 0;
							rep++;
						} else {
							return finalise(sum, Ctor.precision = pr, rm, external = true);
						}
					} else {
						Ctor.precision = pr;
						return sum;
					}
				}

				sum = t;
			}
		}


		/*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
		function naturalLogarithm(y, sd) {
			var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
				n = 1,
				guard = 10,
				x = y,
				xd = x.d,
				Ctor = x.constructor,
				rm = Ctor.rounding,
				pr = Ctor.precision;

			// Is x negative or Infinity, NaN, 0 or 1?
			if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
				return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
			}

			if (sd == null) {
				external = false;
				wpr = pr;
			} else {
				wpr = sd;
			}

			Ctor.precision = wpr += guard;
			c = digitsToString(xd);
			c0 = c.charAt(0);

			if (Math.abs(e = x.e) < 1.5e15) {

				// Argument reduction.
				// The series converges faster the closer the argument is to 1, so using
				// ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
				// multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
				// 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
				// later be divided by this number, then separate out the power of 10 using
				// ln(a*10^b) = ln(a) + b*ln(10).

				// max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
				//while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
				// max n is 6 (gives 0.7 - 1.3)
				while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
					x = x.times(y);
					c = digitsToString(x.d);
					c0 = c.charAt(0);
					n++;
				}

				e = x.e;

				if (c0 > 1) {
					x = new Ctor('0.' + c);
					e++;
				} else {
					x = new Ctor(c0 + '.' + c.slice(1));
				}
			} else {

				// The argument reduction method above may result in overflow if the argument y is a massive
				// number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
				// function using ln(x*10^e) = ln(x) + e*ln(10).
				t = getLn10(Ctor, wpr + 2, pr).times(e + '');
				x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
				Ctor.precision = pr;

				return sd == null ? finalise(x, pr, rm, external = true) : x;
			}

			// x1 is x reduced to a value near 1.
			x1 = x;

			// Taylor series.
			// ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
			// where x = (y - 1)/(y + 1)    (|x| < 1)
			sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
			x2 = finalise(x.times(x), wpr, 1);
			denominator = 3;

			for (;;) {
				numerator = finalise(numerator.times(x2), wpr, 1);
				t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

				if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
					sum = sum.times(2);

					// Reverse the argument reduction. Check that e is not 0 because, besides preventing an
					// unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
					if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
					sum = divide(sum, new Ctor(n), wpr, 1);

					// Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
					// been repeated previously) and the first 4 rounding digits 9999?
					// If so, restart the summation with a higher precision, otherwise
					// e.g. with precision: 12, rounding: 1
					// ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
					// `wpr - guard` is the index of first rounding digit.
					if (sd == null) {
						if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
							Ctor.precision = wpr += guard;
							t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
							x2 = finalise(x.times(x), wpr, 1);
							denominator = rep = 1;
						} else {
							return finalise(sum, Ctor.precision = pr, rm, external = true);
						}
					} else {
						Ctor.precision = pr;
						return sum;
					}
				}

				sum = t;
				denominator += 2;
			}
		}


		// ±Infinity, NaN.
		function nonFiniteToString(x) {
			// Unsigned.
			return String(x.s * x.s / 0);
		}


		/*
   * Parse the value of a new Decimal `x` from string `str`.
   */
		function parseDecimal(x, str) {
			var e, i, len;

			// Decimal point?
			if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

			// Exponential form?
			if ((i = str.search(/e/i)) > 0) {

				// Determine exponent.
				if (e < 0) e = i;
				e += +str.slice(i + 1);
				str = str.substring(0, i);
			} else if (e < 0) {

				// Integer.
				e = str.length;
			}

			// Determine leading zeros.
			for (i = 0; str.charCodeAt(i) === 48; i++);

			// Determine trailing zeros.
			for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
			str = str.slice(i, len);

			if (str) {
				len -= i;
				x.e = e = e - i - 1;
				x.d = [];

				// Transform base

				// e is the base 10 exponent.
				// i is where to slice str to get the first word of the digits array.
				i = (e + 1) % LOG_BASE;
				if (e < 0) i += LOG_BASE;

				if (i < len) {
					if (i) x.d.push(+str.slice(0, i));
					for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
					str = str.slice(i);
					i = LOG_BASE - str.length;
				} else {
					i -= len;
				}

				for (; i--;) str += '0';
				x.d.push(+str);

				if (external) {

					// Overflow?
					if (x.e > x.constructor.maxE) {

						// Infinity.
						x.d = null;
						x.e = NaN;

						// Underflow?
					} else if (x.e < x.constructor.minE) {

						// Zero.
						x.e = 0;
						x.d = [0];
						// x.constructor.underflow = true;
					} // else x.constructor.underflow = false;
				}
			} else {

				// Zero.
				x.e = 0;
				x.d = [0];
			}

			return x;
		}


		/*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
		function parseOther(x, str) {
			var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

			if (str === 'Infinity' || str === 'NaN') {
				if (!+str) x.s = NaN;
				x.e = NaN;
				x.d = null;
				return x;
			}

			if (isHex.test(str))  {
				base = 16;
				str = str.toLowerCase();
			} else if (isBinary.test(str))  {
				base = 2;
			} else if (isOctal.test(str))  {
				base = 8;
			} else {
				throw Error(invalidArgument + str);
			}

			// Is there a binary exponent part?
			i = str.search(/p/i);

			if (i > 0) {
				p = +str.slice(i + 1);
				str = str.substring(2, i);
			} else {
				str = str.slice(2);
			}

			// Convert `str` as an integer then divide the result by `base` raised to a power such that the
			// fraction part will be restored.
			i = str.indexOf('.');
			isFloat = i >= 0;
			Ctor = x.constructor;

			if (isFloat) {
				str = str.replace('.', '');
				len = str.length;
				i = len - i;

				// log[10](16) = 1.2041... , log[10](88) = 1.9444....
				divisor = intPow(Ctor, new Ctor(base), i, i * 2);
			}

			xd = convertBase(str, base, BASE);
			xe = xd.length - 1;

			// Remove trailing zeros.
			for (i = xe; xd[i] === 0; --i) xd.pop();
			if (i < 0) return new Ctor(x.s * 0);
			x.e = getBase10Exponent(xd, xe);
			x.d = xd;
			external = false;

			// At what precision to perform the division to ensure exact conversion?
			// maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
			// log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
			// E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
			// maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
			// Therefore using 4 * the number of digits of str will always be enough.
			if (isFloat) x = divide(x, divisor, len * 4);

			// Multiply by the binary exponent part if present.
			if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
			external = true;

			return x;
		}


		/*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
		function sine(Ctor, x) {
			var k,
				len = x.d.length;

			if (len < 3) return taylorSeries(Ctor, 2, x, x);

			// Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
			// i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
			// and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

			// Estimate the optimum number of times to use the argument reduction.
			k = 1.4 * Math.sqrt(len);
			k = k > 16 ? 16 : k | 0;

			// Max k before Math.pow precision loss is 22
			x = x.times(Math.pow(5, -k));
			x = taylorSeries(Ctor, 2, x, x);

			// Reverse argument reduction
			var sin2_x,
				d5 = new Ctor(5),
				d16 = new Ctor(16),
				d20 = new Ctor(20);
			for (; k--;) {
				sin2_x = x.times(x);
				x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
			}

			return x;
		}


		// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
		function taylorSeries(Ctor, n, x, y, isHyperbolic) {
			var j, t, u, x2,
				i = 1,
				pr = Ctor.precision,
				k = Math.ceil(pr / LOG_BASE);

			external = false;
			x2 = x.times(x);
			u = new Ctor(y);

			for (;;) {
				t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
				u = isHyperbolic ? y.plus(t) : y.minus(t);
				y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
				t = u.plus(y);

				if (t.d[k] !== void 0) {
					for (j = k; t.d[j] === u.d[j] && j--;);
					if (j == -1) break;
				}

				j = u;
				u = y;
				y = t;
				t = j;
				i++;
			}

			external = true;
			t.d.length = k + 1;

			return t;
		}


		// Return the absolute value of `x` reduced to less than or equal to half pi.
		function toLessThanHalfPi(Ctor, x) {
			var t,
				isNeg = x.s < 0,
				pi = getPi(Ctor, Ctor.precision, 1),
				halfPi = pi.times(0.5);

			x = x.abs();

			if (x.lte(halfPi)) {
				quadrant = isNeg ? 4 : 1;
				return x;
			}

			t = x.divToInt(pi);

			if (t.isZero()) {
				quadrant = isNeg ? 3 : 2;
			} else {
				x = x.minus(t.times(pi));

				// 0 <= x < pi
				if (x.lte(halfPi)) {
					quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
					return x;
				}

				quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
			}

			return x.minus(pi).abs();
		}


		/*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
		function toStringBinary(x, baseOut, sd, rm) {
			var base, e, i, k, len, roundUp, str, xd, y,
				Ctor = x.constructor,
				isExp = sd !== void 0;

			if (isExp) {
				checkInt32(sd, 1, MAX_DIGITS);
				if (rm === void 0) rm = Ctor.rounding;
				else checkInt32(rm, 0, 8);
			} else {
				sd = Ctor.precision;
				rm = Ctor.rounding;
			}

			if (!x.isFinite()) {
				str = nonFiniteToString(x);
			} else {
				str = finiteToString(x);
				i = str.indexOf('.');

				// Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
				// maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
				// minBinaryExponent = floor(decimalExponent * log[2](10))
				// log[2](10) = 3.321928094887362347870319429489390175864

				if (isExp) {
					base = 2;
					if (baseOut == 16) {
						sd = sd * 4 - 3;
					} else if (baseOut == 8) {
						sd = sd * 3 - 2;
					}
				} else {
					base = baseOut;
				}

				// Convert the number as an integer then divide the result by its base raised to a power such
				// that the fraction part will be restored.

				// Non-integer.
				if (i >= 0) {
					str = str.replace('.', '');
					y = new Ctor(1);
					y.e = str.length - i;
					y.d = convertBase(finiteToString(y), 10, base);
					y.e = y.d.length;
				}

				xd = convertBase(str, 10, base);
				e = len = xd.length;

				// Remove trailing zeros.
				for (; xd[--len] == 0;) xd.pop();

				if (!xd[0]) {
					str = isExp ? '0p+0' : '0';
				} else {
					if (i < 0) {
						e--;
					} else {
						x = new Ctor(x);
						x.d = xd;
						x.e = e;
						x = divide(x, y, sd, rm, 0, base);
						xd = x.d;
						e = x.e;
						roundUp = inexact;
					}

					// The rounding digit, i.e. the digit after the digit that may be rounded up.
					i = xd[sd];
					k = base / 2;
					roundUp = roundUp || xd[sd + 1] !== void 0;

					roundUp = rm < 4
						? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
						: i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

					xd.length = sd;

					if (roundUp) {

						// Rounding up may mean the previous digit has to be rounded up and so on.
						for (; ++xd[--sd] > base - 1;) {
							xd[sd] = 0;
							if (!sd) {
								++e;
								xd.unshift(1);
							}
						}
					}

					// Determine trailing zeros.
					for (len = xd.length; !xd[len - 1]; --len);

					// E.g. [4, 11, 15] becomes 4bf.
					for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

					// Add binary exponent suffix?
					if (isExp) {
						if (len > 1) {
							if (baseOut == 16 || baseOut == 8) {
								i = baseOut == 16 ? 4 : 3;
								for (--len; len % i; len++) str += '0';
								xd = convertBase(str, base, baseOut);
								for (len = xd.length; !xd[len - 1]; --len);

								// xd[0] will always be be 1
								for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
							} else {
								str = str.charAt(0) + '.' + str.slice(1);
							}
						}

						str =  str + (e < 0 ? 'p' : 'p+') + e;
					} else if (e < 0) {
						for (; ++e;) str = '0' + str;
						str = '0.' + str;
					} else {
						if (++e > len) for (e -= len; e-- ;) str += '0';
						else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
					}
				}

				str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
			}

			return x.s < 0 ? '-' + str : str;
		}


		// Does not strip trailing zeros.
		function truncate(arr, len) {
			if (arr.length > len) {
				arr.length = len;
				return true;
			}
		}


		// Decimal methods


		/*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  fromJSON
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */


		/*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
		function abs(x) {
			return new this(x).abs();
		}


		/*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
		function acos(x) {
			return new this(x).acos();
		}


		/*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function acosh(x) {
			return new this(x).acosh();
		}


		/*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
		function add(x, y) {
			return new this(x).plus(y);
		}


		/*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function asin(x) {
			return new this(x).asin();
		}


		/*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function asinh(x) {
			return new this(x).asinh();
		}


		/*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function atan(x) {
			return new this(x).atan();
		}


		/*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function atanh(x) {
			return new this(x).atanh();
		}


		/*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
		function atan2(y, x) {
			y = new this(y);
			x = new this(x);
			var r,
				pr = this.precision,
				rm = this.rounding,
				wpr = pr + 4;

			// Either NaN
			if (!y.s || !x.s) {
				r = new this(NaN);

				// Both ±Infinity
			} else if (!y.d && !x.d) {
				r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
				r.s = y.s;

				// x is ±Infinity or y is ±0
			} else if (!x.d || y.isZero()) {
				r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
				r.s = y.s;

				// y is ±Infinity or x is ±0
			} else if (!y.d || x.isZero()) {
				r = getPi(this, wpr, 1).times(0.5);
				r.s = y.s;

				// Both non-zero and finite
			} else if (x.s < 0) {
				this.precision = wpr;
				this.rounding = 1;
				r = this.atan(divide(y, x, wpr, 1));
				x = getPi(this, wpr, 1);
				this.precision = pr;
				this.rounding = rm;
				r = y.s < 0 ? r.minus(x) : r.plus(x);
			} else {
				r = this.atan(divide(y, x, wpr, 1));
			}

			return r;
		}


		/*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function cbrt(x) {
			return new this(x).cbrt();
		}


		/*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
		function ceil(x) {
			return finalise(x = new this(x), x.e + 1, 2);
		}


		/*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number|undefined}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
		function config(obj) {
			if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
			var i, p, v,
				ps = [
					'precision', 1, MAX_DIGITS,
					'rounding', 0, 8,
					'toExpNeg', -EXP_LIMIT, 0,
					'toExpPos', 0, EXP_LIMIT,
					'maxE', 0, EXP_LIMIT,
					'minE', -EXP_LIMIT, 0,
					'modulo', 0, 9
				];

			for (i = 0; i < ps.length; i += 3) {
				if ((v = obj[p = ps[i]]) !== void 0) {
					if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
					else throw Error(invalidArgument + p + ': ' + v);
				}
			}

			if (obj.hasOwnProperty(p = 'crypto')) {
				if ((v = obj[p]) === void 0) {
					this[p] = v;
				} else if (v === true || v === false || v === 0 || v === 1) {
					this[p] = !!(v && cryptoObject &&
            (cryptoObject.getRandomValues || cryptoObject.randomBytes));
				} else {
					throw Error(invalidArgument + p + ': ' + v);
				}
			}

			return this;
		}


		/*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function cos(x) {
			return new this(x).cos();
		}


		/*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function cosh(x) {
			return new this(x).cosh();
		}


		/*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
		function clone(obj) {
			var i, p, ps;

			/*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
			function Decimal(v) {
				var e, i, t,
					x = this;

				// Decimal called without new.
				if (!(x instanceof Decimal)) return new Decimal(v);

				// Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
				// which points to Object.
				x.constructor = Decimal;

				// Duplicate.
				if (v instanceof Decimal) {
					x.s = v.s;
					x.e = v.e;
					x.d = (v = v.d) ? v.slice() : v;
					return;
				}

				t = typeof v;

				if (t === 'number') {
					if (v === 0) {
						x.s = 1 / v < 0 ? -1 : 1;
						x.e = 0;
						x.d = [0];
						return;
					}

					if (v < 0) {
						v = -v;
						x.s = -1;
					} else {
						x.s = 1;
					}

					// Fast path for small integers.
					if (v === ~~v && v < 1e7) {
						for (e = 0, i = v; i >= 10; i /= 10) e++;
						x.e = e;
						x.d = [v];
						return;

						// Infinity, NaN.
					} else if (v * 0 !== 0) {
						if (!v) x.s = NaN;
						x.e = NaN;
						x.d = null;
						return;
					}

					return parseDecimal(x, v.toString());

				} else if (t !== 'string') {
					throw Error(invalidArgument + v);
				}

				// Minus sign?
				if (v.charCodeAt(0) === 45) {
					v = v.slice(1);
					x.s = -1;
				} else {
					x.s = 1;
				}

				return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
			}

			Decimal.prototype = P;

			Decimal.ROUND_UP = 0;
			Decimal.ROUND_DOWN = 1;
			Decimal.ROUND_CEIL = 2;
			Decimal.ROUND_FLOOR = 3;
			Decimal.ROUND_HALF_UP = 4;
			Decimal.ROUND_HALF_DOWN = 5;
			Decimal.ROUND_HALF_EVEN = 6;
			Decimal.ROUND_HALF_CEIL = 7;
			Decimal.ROUND_HALF_FLOOR = 8;
			Decimal.EUCLID = 9;

			Decimal.config = config;
			Decimal.clone = clone;

			Decimal.abs = abs;
			Decimal.acos = acos;
			Decimal.acosh = acosh;        // ES6
			Decimal.add = add;
			Decimal.asin = asin;
			Decimal.asinh = asinh;        // ES6
			Decimal.atan = atan;
			Decimal.atanh = atanh;        // ES6
			Decimal.atan2 = atan2;
			Decimal.cbrt = cbrt;          // ES6
			Decimal.ceil = ceil;
			Decimal.cos = cos;
			Decimal.cosh = cosh;          // ES6
			Decimal.div = div;
			Decimal.exp = exp;
			Decimal.floor = floor;
			Decimal.fromJSON = fromJSON;
			Decimal.hypot = hypot;        // ES6
			Decimal.ln = ln;
			Decimal.log = log;
			Decimal.log10 = log10;        // ES6
			Decimal.log2 = log2;          // ES6
			Decimal.max = max;
			Decimal.min = min;
			Decimal.mod = mod;
			Decimal.mul = mul;
			Decimal.pow = pow;
			Decimal.random = random;
			Decimal.round = round;
			Decimal.sign = sign;          // ES6
			Decimal.sin = sin;
			Decimal.sinh = sinh;          // ES6
			Decimal.sqrt = sqrt;
			Decimal.sub = sub;
			Decimal.tan = tan;
			Decimal.tanh = tanh;          // ES6
			Decimal.trunc = trunc;        // ES6

			if (obj === void 0) obj = {};
			if (obj) {
				ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
				for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
			}

			Decimal.config(obj);

			return Decimal;
		}


		/*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
		function div(x, y) {
			return new this(x).div(y);
		}


		/*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
		function exp(x) {
			return new this(x).exp();
		}


		/*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
		function floor(x) {
			return finalise(x = new this(x), x.e + 1, 3);
		}


		/*
   * Return a new Decimal from `str`, a string value created by `toJSON`.
   *
   * Base 88 alphabet:
   * 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%()*+,-./:;=?@[]^_`{|}~
   *
   * If `str` is just one character:
   * 0-81  [[0, 40][-0, -40]]
   * 82    -Infinity
   * 83    +Infinity
   * 84    NaN
   *
   *   64 32 16  8  4  2  1
   *    1  0  1  0  1  1  1 = 87
   *
   */
		function fromJSON(str) {
			var e, isNeg, k, n;

			if (typeof str !== 'string' || !str) throw Error(invalidArgument + str);
			k = str.length;
			n = NUMERALS.indexOf(str.charAt(0));

			//  [0, 81] -> [[0, 40][-0, -40]]
			if (k === 1) {
				return new this(n > 81 ? [-1 / 0, 1 / 0, 0 / 0][n - 82] : n > 40 ? -(n - 41) : n);
			} else if (n & 64) {
				isNeg = n & 16;

				// e = isNeg ? [-3, 4] : [-7, 8]
				e = isNeg ? (n & 7) - 3 : (n & 15) - 7;
				k = 1;
			} else if (k === 2) {
				n = n * 88 + NUMERALS.indexOf(str.charAt(1));

				// [0, 5631] -> [[0, 2815][-0, -2815]] -> [[41, 2856][-41, -2856]]
				return new this(n >= 2816 ? -(n - 2816) - 41 : n + 41);
			} else {

				// 0XXXXXX
				// 0 {is negative} {is exponent negative} {exponent digit count [0, 15]}
				isNeg = n & 32;

				// Has an exponent been specified?
				if (n & 31) {
					e = n & 15;    // Exponent character count [1, 15]
					k = e + 1;     // Index of first character of the significand.

					if (e === 1)  {
						e = NUMERALS.indexOf(str.charAt(1));
					} else if (e === 2) {
						e = NUMERALS.indexOf(str.charAt(1)) * 88 +
            NUMERALS.indexOf(str.charAt(2));
					} else {
						e = +convertBase(str.slice(1, k), 88, 10).join('');
					}

					// Negative exponent?
					if (n & 16) e = -e;
				} else {

					// Integer without trailing zeros.
					// 0X00000
					// 0 {is negative} 0 0 0 0 0
					str = convertBase(str.slice(1), 88, 10).join('');
					return new this(isNeg ? '-' + str : str);
				}
			}

			str = convertBase(str.slice(k), 88, 10).join('');
			e = e - str.length + 1;
			str = str + 'e' + e;

			return new this(isNeg ? '-' + str : str);
		}


		/*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   */
		function hypot() {
			var i, n,
				t = new this(0);

			external = false;

			for (i = 0; i < arguments.length;) {
				n = new this(arguments[i++]);
				if (!n.d) {
					if (n.s) {
						external = true;
						return new this(1 / 0);
					}
					t = n;
				} else if (t.d) {
					t = t.plus(n.times(n));
				}
			}

			external = true;

			return t.sqrt();
		}


		/*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function ln(x) {
			return new this(x).ln();
		}


		/*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
		function log(x, y) {
			return new this(x).log(y);
		}


		/*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function log2(x) {
			return new this(x).log(2);
		}


		/*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function log10(x) {
			return new this(x).log(10);
		}


		/*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
		function max() {
			return maxOrMin(this, arguments, 'lt');
		}


		/*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
		function min() {
			return maxOrMin(this, arguments, 'gt');
		}


		/*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
		function mod(x, y) {
			return new this(x).mod(y);
		}


		/*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
		function mul(x, y) {
			return new this(x).mul(y);
		}


		/*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
		function pow(x, y) {
			return new this(x).pow(y);
		}


		/*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
		function random(sd) {
			var d, e, k, n,
				i = 0,
				r = new this(1),
				rd = [];

			if (sd === void 0) sd = this.precision;
			else checkInt32(sd, 1, MAX_DIGITS);

			k = Math.ceil(sd / LOG_BASE);

			if (this.crypto === false) {
				for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

				// Browsers supporting crypto.getRandomValues.
			} else if (cryptoObject && cryptoObject.getRandomValues) {
				d = cryptoObject.getRandomValues(new Uint32Array(k));

				for (; i < k;) {
					n = d[i];

					// 0 <= n < 4294967296
					// Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
					if (n >= 4.29e9) {
						d[i] = cryptoObject.getRandomValues(new Uint32Array(1))[0];
					} else {

						// 0 <= n <= 4289999999
						// 0 <= (n % 1e7) <= 9999999
						rd[i++] = n % 1e7;
					}
				}

				// Node.js supporting crypto.randomBytes.
			} else if (cryptoObject && cryptoObject.randomBytes) {

				// buffer
				d = cryptoObject.randomBytes(k *= 4);

				for (; i < k;) {

					// 0 <= n < 2147483648
					n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

					// Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
					if (n >= 2.14e9) {
						cryptoObject.randomBytes(4).copy(d, i);
					} else {

						// 0 <= n <= 2139999999
						// 0 <= (n % 1e7) <= 9999999
						rd.push(n % 1e7);
						i += 4;
					}
				}

				i = k / 4;
			} else if (this.crypto) {
				throw Error(decimalError + 'crypto unavailable');
			} else {
				for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;
			}

			k = rd[--i];
			sd %= LOG_BASE;

			// Convert trailing digits to zeros according to sd.
			if (k && sd) {
				n = mathpow(10, LOG_BASE - sd);
				rd[i] = (k / n | 0) * n;
			}

			// Remove trailing words which are zero.
			for (; rd[i] === 0; i--) rd.pop();

			// Zero?
			if (i < 0) {
				e = 0;
				rd = [0];
			} else {
				e = -1;

				// Remove leading words which are zero and adjust exponent accordingly.
				for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

				// Count the digits of the first word of rd to determine leading zeros.
				for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

				// Adjust the exponent for leading zeros of the first word of rd.
				if (k < LOG_BASE) e -= LOG_BASE - k;
			}

			r.e = e;
			r.d = rd;

			return r;
		}


		/*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
		function round(x) {
			return finalise(x = new this(x), x.e + 1, this.rounding);
		}


		/*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   */
		function sign(x) {
			x = new this(x);
			return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
		}


		/*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function sin(x) {
			return new this(x).sin();
		}


		/*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function sinh(x) {
			return new this(x).sinh();
		}


		/*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
		function sqrt(x) {
			return new this(x).sqrt();
		}


		/*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
		function sub(x, y) {
			return new this(x).sub(y);
		}


		/*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function tan(x) {
			return new this(x).tan();
		}


		/*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
		function tanh(x) {
			return new this(x).tanh();
		}


		/*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
		function trunc(x) {
			return finalise(x = new this(x), x.e + 1, 1);
		}


		// Create and configure initial Decimal constructor.
		Decimal = clone(Decimal);

		// Create the internal constants from their string values.
		LN10 = new Decimal(LN10);
		PI = new Decimal(PI);


		// Export.


		// AMD.
		if (typeof define == 'function' && define.amd) {
			define(function () {
				return Decimal;
			});

			// Node and other environments that support module.exports.
		} else if (typeof module != 'undefined' && module.exports) {
			module.exports = Decimal;

			if (!cryptoObject) {
				try {
					cryptoObject = require('cry' + 'pto');
				} catch (e) {
					// Ignore.
				}
			}

			// Browser.
		} else {
			if (!globalScope) {
				globalScope = typeof self != 'undefined' && self && self.self == self
					? self : Function('return this')();
			}

			noConflict = globalScope.Decimal;
			Decimal.noConflict = function () {
				globalScope.Decimal = noConflict;
				return Decimal;
			};

			globalScope.Decimal = Decimal;
		}
	})(this);

},{}],9:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
		this._events = this._events || {};
		this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
		if (!isNumber(n) || n < 0 || isNaN(n))
			throw TypeError('n must be a positive number');
		this._maxListeners = n;
		return this;
	};

	EventEmitter.prototype.emit = function(type) {
		var er, handler, len, args, i, listeners;

		if (!this._events)
			this._events = {};

		// If there is no 'error' event listener then throw.
		if (type === 'error') {
			if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
				er = arguments[1];
				if (er instanceof Error) {
					throw er; // Unhandled 'error' event
				} else {
					// At least give some kind of context to the user
					var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
					err.context = er;
					throw err;
				}
			}
		}

		handler = this._events[type];

		if (isUndefined(handler))
			return false;

		if (isFunction(handler)) {
			switch (arguments.length) {
			// fast cases
			case 1:
				handler.call(this);
				break;
			case 2:
				handler.call(this, arguments[1]);
				break;
			case 3:
				handler.call(this, arguments[1], arguments[2]);
				break;
				// slower
			default:
				args = Array.prototype.slice.call(arguments, 1);
				handler.apply(this, args);
			}
		} else if (isObject(handler)) {
			args = Array.prototype.slice.call(arguments, 1);
			listeners = handler.slice();
			len = listeners.length;
			for (i = 0; i < len; i++)
				listeners[i].apply(this, args);
		}

		return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
		var m;

		if (!isFunction(listener))
			throw TypeError('listener must be a function');

		if (!this._events)
			this._events = {};

		// To avoid recursion in the case that type === "newListener"! Before
		// adding it to the listeners, first emit "newListener".
		if (this._events.newListener)
			this.emit('newListener', type,
				isFunction(listener.listener) ?
					listener.listener : listener);

		if (!this._events[type])
		// Optimize the case of one listener. Don't need the extra array object.
			this._events[type] = listener;
		else if (isObject(this._events[type]))
		// If we've already got an array, just append.
			this._events[type].push(listener);
		else
		// Adding the second element, need to change to array.
			this._events[type] = [this._events[type], listener];

		// Check for listener leak
		if (isObject(this._events[type]) && !this._events[type].warned) {
			if (!isUndefined(this._maxListeners)) {
				m = this._maxListeners;
			} else {
				m = EventEmitter.defaultMaxListeners;
			}

			if (m && m > 0 && this._events[type].length > m) {
				this._events[type].warned = true;
				console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
				this._events[type].length);
				if (typeof console.trace === 'function') {
					// not supported in IE 10
					console.trace();
				}
			}
		}

		return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
		if (!isFunction(listener))
			throw TypeError('listener must be a function');

		var fired = false;

		function g() {
			this.removeListener(type, g);

			if (!fired) {
				fired = true;
				listener.apply(this, arguments);
			}
		}

		g.listener = listener;
		this.on(type, g);

		return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
		var list, position, length, i;

		if (!isFunction(listener))
			throw TypeError('listener must be a function');

		if (!this._events || !this._events[type])
			return this;

		list = this._events[type];
		length = list.length;
		position = -1;

		if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
			delete this._events[type];
			if (this._events.removeListener)
				this.emit('removeListener', type, listener);

		} else if (isObject(list)) {
			for (i = length; i-- > 0;) {
				if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
					position = i;
					break;
				}
			}

			if (position < 0)
				return this;

			if (list.length === 1) {
				list.length = 0;
				delete this._events[type];
			} else {
				list.splice(position, 1);
			}

			if (this._events.removeListener)
				this.emit('removeListener', type, listener);
		}

		return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
		var key, listeners;

		if (!this._events)
			return this;

		// not listening for removeListener, no need to emit
		if (!this._events.removeListener) {
			if (arguments.length === 0)
				this._events = {};
			else if (this._events[type])
				delete this._events[type];
			return this;
		}

		// emit removeListener for all listeners on all events
		if (arguments.length === 0) {
			for (key in this._events) {
				if (key === 'removeListener') continue;
				this.removeAllListeners(key);
			}
			this.removeAllListeners('removeListener');
			this._events = {};
			return this;
		}

		listeners = this._events[type];

		if (isFunction(listeners)) {
			this.removeListener(type, listeners);
		} else if (listeners) {
			// LIFO order
			while (listeners.length)
				this.removeListener(type, listeners[listeners.length - 1]);
		}
		delete this._events[type];

		return this;
	};

	EventEmitter.prototype.listeners = function(type) {
		var ret;
		if (!this._events || !this._events[type])
			ret = [];
		else if (isFunction(this._events[type]))
			ret = [this._events[type]];
		else
			ret = this._events[type].slice();
		return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
		if (this._events) {
			var evlistener = this._events[type];

			if (isFunction(evlistener))
				return 1;
			else if (evlistener)
				return evlistener.length;
		}
		return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
		return emitter.listenerCount(type);
	};

	function isFunction(arg) {
		return typeof arg === 'function';
	}

	function isNumber(arg) {
		return typeof arg === 'number';
	}

	function isObject(arg) {
		return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
		return arg === void 0;
	}

},{}],10:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

		"use strict";

		/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

		var invariant = function (condition, format, a, b, c, d, e, f) {
			if (process.env.NODE_ENV !== 'production') {
				if (format === undefined) {
					throw new Error('invariant requires an error message argument');
				}
			}

			if (!condition) {
				var error;
				if (format === undefined) {
					error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
				} else {
					var args = [a, b, c, d, e, f];
					var argIndex = 0;
					error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
						return args[argIndex++];
					}));
				}

				error.framesToPop = 1; // we don't care about invariant's own frame
				throw error;
			}
		};

		module.exports = invariant;
	}).call(this,require('_process'));
},{"_process":615}],11:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BrowserSupportCore
 */

	'use strict';

	var getVendorPrefixedName = require('./getVendorPrefixedName');

	var BrowserSupportCore = {
		/**
   * @return {bool} True if browser supports css animations.
   */
		hasCSSAnimations: function hasCSSAnimations() {
			return !!getVendorPrefixedName('animationName');
		},

		/**
   * @return {bool} True if browser supports css transforms.
   */
		hasCSSTransforms: function hasCSSTransforms() {
			return !!getVendorPrefixedName('transform');
		},

		/**
   * @return {bool} True if browser supports css 3d transforms.
   */
		hasCSS3DTransforms: function hasCSS3DTransforms() {
			return !!getVendorPrefixedName('perspective');
		},

		/**
   * @return {bool} True if browser supports css transitions.
   */
		hasCSSTransitions: function hasCSSTransitions() {
			return !!getVendorPrefixedName('transition');
		}
	};

	module.exports = BrowserSupportCore;
},{"./getVendorPrefixedName":51}],12:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * This class listens to events on the document and then updates a react
 * component through callbacks.
 * Please note that captureMouseMove must be called in
 * order to initialize listeners on mousemove and mouseup.
 * releaseMouseMove must be called to remove them. It is important to
 * call releaseMouseMoves since mousemove is expensive to listen to.
 *
 * @providesModule DOMMouseMoveTracker
 * @typechecks
 */

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var EventListener = require('./EventListener');

	var cancelAnimationFramePolyfill = require('./cancelAnimationFramePolyfill');
	var requestAnimationFramePolyfill = require('./requestAnimationFramePolyfill');

	var DOMMouseMoveTracker = (function () {
		/**
   * onMove is the callback that will be called on every mouse move.
   * onMoveEnd is called on mouse up when movement has ended.
   */

		function DOMMouseMoveTracker(
			/*function*/onMove,
			/*function*/onMoveEnd,
			/*DOMElement*/domNode) {
			_classCallCheck(this, DOMMouseMoveTracker);

			this._isDragging = false;
			this._animationFrameID = null;
			this._domNode = domNode;
			this._onMove = onMove;
			this._onMoveEnd = onMoveEnd;
			this._onMouseMove = this._onMouseMove.bind(this);
			this._onMouseUp = this._onMouseUp.bind(this);
			this._didMouseMove = this._didMouseMove.bind(this);
		}

		/**
   * This is to set up the listeners for listening to mouse move
   * and mouse up signaling the movement has ended. Please note that these
   * listeners are added at the document.body level. It takes in an event
   * in order to grab inital state.
   */

		_createClass(DOMMouseMoveTracker, [{
			key: 'captureMouseMoves',
			value: function captureMouseMoves( /*object*/event) {
				if (!this._eventMoveToken && !this._eventUpToken) {
					this._eventMoveToken = EventListener.listen(this._domNode, 'mousemove', this._onMouseMove);
					this._eventUpToken = EventListener.listen(this._domNode, 'mouseup', this._onMouseUp);
				}

				if (!this._isDragging) {
					this._deltaX = 0;
					this._deltaY = 0;
					this._isDragging = true;
					this._x = event.clientX;
					this._y = event.clientY;
				}
				event.preventDefault();
			}

			/**
     * These releases all of the listeners on document.body.
     */
		}, {
			key: 'releaseMouseMoves',
			value: function releaseMouseMoves() {
				if (this._eventMoveToken && this._eventUpToken) {
					this._eventMoveToken.remove();
					this._eventMoveToken = null;
					this._eventUpToken.remove();
					this._eventUpToken = null;
				}

				if (this._animationFrameID !== null) {
					cancelAnimationFramePolyfill(this._animationFrameID);
					this._animationFrameID = null;
				}

				if (this._isDragging) {
					this._isDragging = false;
					this._x = null;
					this._y = null;
				}
			}

			/**
     * Returns whether or not if the mouse movement is being tracked.
     */
		}, {
			key: 'isDragging',
			value: function isDragging() /*boolean*/{
				return this._isDragging;
			}

			/**
     * Calls onMove passed into constructor and updates internal state.
     */
		}, {
			key: '_onMouseMove',
			value: function _onMouseMove( /*object*/event) {
				var x = event.clientX;
				var y = event.clientY;

				this._deltaX += x - this._x;
				this._deltaY += y - this._y;

				if (this._animationFrameID === null) {
					// The mouse may move faster then the animation frame does.
					// Use `requestAnimationFramePolyfill` to avoid over-updating.
					this._animationFrameID = requestAnimationFramePolyfill(this._didMouseMove);
				}

				this._x = x;
				this._y = y;
				event.preventDefault();
			}
		}, {
			key: '_didMouseMove',
			value: function _didMouseMove() {
				this._animationFrameID = null;
				this._onMove(this._deltaX, this._deltaY);
				this._deltaX = 0;
				this._deltaY = 0;
			}

			/**
     * Calls onMoveEnd passed into constructor and updates internal state.
     */
		}, {
			key: '_onMouseUp',
			value: function _onMouseUp() {
				if (this._animationFrameID) {
					this._didMouseMove();
				}
				this._onMoveEnd();
			}
		}]);

		return DOMMouseMoveTracker;
	})();

	module.exports = DOMMouseMoveTracker;
},{"./EventListener":13,"./cancelAnimationFramePolyfill":45,"./requestAnimationFramePolyfill":57}],13:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventListener
 * @typechecks
 */

		'use strict';

		var emptyFunction = require('./emptyFunction');

		/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
		var EventListener = {
			/**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
			listen: function listen(target, eventType, callback) {
				if (target.addEventListener) {
					target.addEventListener(eventType, callback, false);
					return {
						remove: function remove() {
							target.removeEventListener(eventType, callback, false);
						}
					};
				} else if (target.attachEvent) {
					target.attachEvent('on' + eventType, callback);
					return {
						remove: function remove() {
							target.detachEvent('on' + eventType, callback);
						}
					};
				}
			},

			/**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
			capture: function capture(target, eventType, callback) {
				if (target.addEventListener) {
					target.addEventListener(eventType, callback, true);
					return {
						remove: function remove() {
							target.removeEventListener(eventType, callback, true);
						}
					};
				} else {
					if (process.env.NODE_ENV !== 'production') {
						console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
					}
					return {
						remove: emptyFunction
					};
				}
			},

			registerDefault: function registerDefault() {}
		};

		module.exports = EventListener;
	}).call(this,require('_process'));
},{"./emptyFunction":50,"_process":615}],14:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

	/*jslint evil: true */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
	var ExecutionEnvironment = {

		canUseDOM: canUseDOM,

		canUseWorkers: typeof Worker !== 'undefined',

		canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

		canUseViewport: canUseDOM && !!window.screen,

		isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;
},{}],15:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTable.react
 */

		/**
 * TRANSITION SHIM
 * This acts to provide an intermediate mapping from the old API to the new API
 *
 * Remove this entire file and replace the two lines in FixedDataTableRoot
 * when ready to continue to the new API.
 */

		'use strict';

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var React = require('./React');

		var ReactChildren = React.Children;

		var PropTypes = React.PropTypes;

		// New Table API
		var Table = require('./FixedDataTableNew.react');
		var Column = require('./FixedDataTableColumnNew.react');
		var ColumnGroup = require('./FixedDataTableColumnGroupNew.react');

		// Transition Cell
		var TransitionCell = require('./FixedDataTableCellTransition.react');

		var NEXT_VERSION = '0.7.0';
		var DOCUMENTATION_URL = 'https://fburl.com/FixedDataTable-v0.6';

		var EMPTY_OBJECT = {};

		/**
 * Notify in console that some prop has been deprecated.
 */
		var notified = {};
		function notifyDeprecated(prop, reason) {
			if (process.env.NODE_ENV !== 'production') {
				if (!notified[prop]) {
					console.warn('`' + prop + '` will be DEPRECATED in version ' + NEXT_VERSION + ' of FixedDataTable and beyond. \n' + reason + '\n' + 'Read the docs at: ' + DOCUMENTATION_URL);
					notified[prop] = true;
				}
			}
		}

		/**
 * Data grid component with fixed or scrollable header and columns.
 *
 * This is currently in a transition mode, as the new API is used.
 * DEPRECATED endpoints work, but will not be supported in later versions.
 *
 * The layout of the data table is as follows:
 *
 * ```
 * +---------------------------------------------------+
 * | Fixed Column Group    | Scrollable Column Group   |
 * | Header                | Header                    |
 * |                       |                           |
 * +---------------------------------------------------+
 * |                       |                           |
 * | Fixed Header Columns  | Scrollable Header Columns |
 * |                       |                           |
 * +-----------------------+---------------------------+
 * |                       |                           |
 * | Fixed Body Columns    | Scrollable Body Columns   |
 * |                       |                           |
 * +-----------------------+---------------------------+
 * |                       |                           |
 * | Fixed Footer Columns  | Scrollable Footer Columns |
 * |                       |                           |
 * +-----------------------+---------------------------+
 * ```
 *
 * - Fixed Column Group Header: These are the headers for a group
 *   of columns if included in the table that do not scroll
 *   vertically or horizontally.
 *
 * - Scrollable Column Group Header: The header for a group of columns
 *   that do not move while scrolling vertically, but move horizontally
 *   with the horizontal scrolling.
 *
 * - Fixed Header Columns: The header columns that do not move while scrolling
 *   vertically or horizontally.
 *
 * - Scrollable Header Columns: The header columns that do not move
 *   while scrolling vertically, but move horizontally with the horizontal
 *   scrolling.
 *
 * - Fixed Body Columns: The body columns that do not move while scrolling
 *   horizontally, but move vertically with the vertical scrolling.
 *
 * - Scrollable Body Columns: The body columns that move while scrolling
 *   vertically or horizontally.
 */
		var TransitionTable = React.createClass({
			displayName: 'TransitionTable',

			propTypes: {
				/**
     * Pixel width of table. If all columns do not fit,
     * a horizontal scrollbar will appear.
     */
				width: PropTypes.number.isRequired,

				/**
     * Pixel height of table. If all rows do not fit,
     * a vertical scrollbar will appear.
     *
     * Either `height` or `maxHeight` must be specified.
     */
				height: PropTypes.number,

				/**
     * Maximum pixel height of table. If all rows do not fit,
     * a vertical scrollbar will appear.
     *
     * Either `height` or `maxHeight` must be specified.
     */
				maxHeight: PropTypes.number,

				/**
     * Pixel height of table's owner, this is used in a managed scrolling
     * situation when you want to slide the table up from below the fold
     * without having to constantly update the height on every scroll tick.
     * Instead, vary this property on scroll. By using `ownerHeight`, we
     * over-render the table while making sure the footer and horizontal
     * scrollbar of the table are visible when the current space for the table
     * in view is smaller than the final, over-flowing height of table. It
     * allows us to avoid resizing and reflowing table when it is moving in the
     * view.
     *
     * This is used if `ownerHeight < height` (or `maxHeight`).
     */
				ownerHeight: PropTypes.number,

				overflowX: PropTypes.oneOf(['hidden', 'auto']),
				overflowY: PropTypes.oneOf(['hidden', 'auto']),

				/**
     * Number of rows in the table.
     */
				rowsCount: PropTypes.number.isRequired,

				/**
     * Pixel height of rows unless `rowHeightGetter` is specified and returns
     * different value.
     */
				rowHeight: PropTypes.number.isRequired,

				/**
     * If specified, `rowHeightGetter(index)` is called for each row and the
     * returned value overrides `rowHeight` for particular row.
     */
				rowHeightGetter: PropTypes.func,

				/**
     * DEPRECATED
     *
     * To get rows to display in table, `rowGetter(index)`
     * is called. `rowGetter` should be smart enough to handle async
     * fetching of data and return temporary objects
     * while data is being fetched.
     */
				rowGetter: PropTypes.func,

				/**
     * To get any additional CSS classes that should be added to a row,
     * `rowClassNameGetter(index)` is called.
     */
				rowClassNameGetter: PropTypes.func,

				/**
     * Pixel height of the column group header.
     */
				groupHeaderHeight: PropTypes.number,

				/**
     * Pixel height of header.
     */
				headerHeight: PropTypes.number.isRequired,

				/**
     * DEPRECATED
     *
     * Function that is called to get the data for the header row.
     * If the function returns null, the header will be set to the
     * Column's label property.
     */
				headerDataGetter: PropTypes.func,

				/**
     * Pixel height of footer.
     */
				footerHeight: PropTypes.number,

				/**
     * DEPRECATED - use footerDataGetter instead.
     * Data that will be passed to footer cell renderers.
     */
				footerData: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),

				/**
     * DEPRECATED
     *
     * Function that is called to get the data for the footer row.
     */
				footerDataGetter: PropTypes.func,

				/**
     * Value of horizontal scroll.
     */
				scrollLeft: PropTypes.number,

				/**
     * Index of column to scroll to.
     */
				scrollToColumn: PropTypes.number,

				/**
     * Value of vertical scroll.
     */
				scrollTop: PropTypes.number,

				/**
     * Index of row to scroll to.
     */
				scrollToRow: PropTypes.number,

				/**
     * Callback that is called when scrolling starts with current horizontal
     * and vertical scroll values.
     */
				onScrollStart: PropTypes.func,

				/**
     * Callback that is called when scrolling ends or stops with new horizontal
     * and vertical scroll values.
     */
				onScrollEnd: PropTypes.func,

				/**
     * Callback that is called when `rowHeightGetter` returns a different height
     * for a row than the `rowHeight` prop. This is necessary because initially
     * table estimates heights of some parts of the content.
     */
				onContentHeightChange: PropTypes.func,

				/**
     * Callback that is called when a row is clicked.
     */
				onRowClick: PropTypes.func,

				/**
     * Callback that is called when a row is double clicked.
     */
				onRowDoubleClick: PropTypes.func,

				/**
     * Callback that is called when a mouse-down event happens on a row.
     */
				onRowMouseDown: PropTypes.func,

				/**
     * Callback that is called when a mouse-enter event happens on a row.
     */
				onRowMouseEnter: PropTypes.func,

				/**
     * Callback that is called when a mouse-leave event happens on a row.
     */
				onRowMouseLeave: PropTypes.func,

				/**
     * Callback that is called when resizer has been released
     * and column needs to be updated.
     *
     * Required if the isResizable property is true on any column.
     *
     * ```
     * function(
     *   newColumnWidth: number,
     *   dataKey: string,
     * )
     * ```
     */
				onColumnResizeEndCallback: PropTypes.func,

				/**
     * Whether a column is currently being resized.
     */
				isColumnResizing: PropTypes.bool
			},

			getInitialState: function getInitialState() {
				// Throw warnings on deprecated props.
				var state = {};
				state.needsMigration = this._checkDeprecations();

				return state;
			},

			_checkDeprecations: function _checkDeprecations() {
				var needsMigration = false;

				if (this.props.rowGetter) {
					notifyDeprecated('rowGetter', 'Please use the cell API in Column to fetch data for your cells.');

					// ROWGETTER??? You need to migrate.
					needsMigration = true;
				}

				if (this.props.headerDataGetter) {
					notifyDeprecated('headerDataGetter', 'Please use the header API in Column to ' + 'fetch data for your header cells.');
				}

				if (this.props.footerData) {
					notifyDeprecated('footerData', 'Please use the footer API in Column to ' + 'fetch data for your footer cells.');
				}

				if (this.props.footerDataGetter) {
					notifyDeprecated('footerDataGetter', 'Please use the footer API in Column to ' + 'fetch data for your footer cells.');
				}

				ReactChildren.forEach(this.props.children, function (child) {
					if (!child || !child.props) {
						return;
					}

					var props = child.props;

					if (props.label) {
						notifyDeprecated('label', 'Please use `header` instead.');
					}

					if (props.dataKey) {
						notifyDeprecated('dataKey', 'Please use the `cell` API to pass in a dataKey');
					}

					if (props.cellRenderer) {
						notifyDeprecated('cellRenderer', 'Please use the `cell` API to pass in a React Element instead.');
					}

					if (props.headerRenderer) {
						notifyDeprecated('headerRenderer', 'Please use the `header` API to pass in a React Element instead.');
					}

					if (props.columnData) {
						notifyDeprecated('columnData', 'Please pass data in through props to your header, cell or footer.');
					}

					if (props.groupHeaderRenderer) {
						notifyDeprecated('groupHeaderRenderer', 'Please use the `header` API in ColumnGroup to ' + 'pass in a React Element instead of a function that creates one.');
					}

					if (props.groupHeaderData) {
						notifyDeprecated('groupHeaderData', 'Please pass in any data through props to your header.');
					}
				});

				return needsMigration;
			},

			// Wrapper for onRow callbacks, since we don't have rowData at that level.
			_onRowAction: function _onRowAction(props, callback) {
				if (!callback) {
					return undefined;
				}

				return function (e, rowIndex) {
					callback(e, rowIndex, props.rowGetter && props.rowGetter(rowIndex) || EMPTY_OBJECT);
				};
			},

			_transformColumn: function _transformColumn(column, tableProps, key) {

				var props = column.props;

				if (column.type.__TableColumn__) {
					// Constuct the cell to be used using the rowGetter
					return React.createElement(Column, _extends({
						key: 'column_' + key
					}, props, {
						header: React.createElement(TransitionCell, {
							isHeaderCell: true,
							label: props.label,
							width: props.width,
							dataKey: props.dataKey,
							className: props.headerClassName,
							columnData: props.columnData || EMPTY_OBJECT,
							cellRenderer: props.headerRenderer,
							headerDataGetter: tableProps.headerDataGetter
						}),
						columnKey: props.dataKey,
						cell: React.createElement(TransitionCell, {
							dataKey: props.dataKey,
							className: props.cellClassName,
							rowGetter: tableProps.rowGetter,
							width: props.width,
							columnData: props.columnData || EMPTY_OBJECT,
							cellDataGetter: props.cellDataGetter,
							cellRenderer: props.cellRenderer
						}),
						footer: React.createElement(TransitionCell, {
							isFooterCell: true,
							className: props.footerClassName,
							dataKey: props.dataKey,
							cellRenderer: props.footerRenderer,
							footerDataGetter: tableProps.footerDataGetter,
							footerData: tableProps.footerData || EMPTY_OBJECT
						})
					}));
				}
			},

			_transformColumnGroup: function _transformColumnGroup(group, tableProps, key, labels) {
				var _this = this;

				var props = group.props;

				var j = 0;
				var columns = ReactChildren.map(props.children, function (child) {
					j++;
					return _this._transformColumn(child, tableProps, key + '_' + j);
				});

				return React.createElement(
					ColumnGroup,
					_extends({}, props, {
						key: 'group_' + key,
						header: React.createElement(TransitionCell, {
							isHeaderCell: true,
							label: group.props.label,
							dataKey: key,
							groupHeaderRenderer: props.groupHeaderRenderer,
							groupHeaderLabels: labels,
							groupHeaderData: props.columnGroupData || EMPTY_OBJECT
						}) }),
					columns
				);
			},

			_convertedColumns: function _convertedColumns(needsMigration) {
				var _this2 = this;

				// If we don't need to migrate, map directly to the new API.
				if (!needsMigration) {
					return ReactChildren.map(this.props.children, function (child) {

						if (!child) {
							return null;
						}

						if (child.type.__TableColumn__) {
							return React.createElement(Column, child.props);
						}

						if (child.type.__TableColumnGroup__) {
							return React.createElement(ColumnGroup, child.props);
						}
					});
				}

				var tableProps = this.props;

				// Otherwise, if a migration is needed, we need to transform each Column
				// or ColumnGroup.
				var i = 0;
				return ReactChildren.map(this.props.children, function (child) {

					if (!child) {
						return null;
					}

					if (child.type.__TableColumn__) {
						child = _this2._transformColumn(child, tableProps, i);
					}

					if (child.type.__TableColumnGroup__) {
						// Since we apparently give an array of labels to groupHeaderRenderer
						var labels = [];
						ReactChildren.forEach(_this2.props.children, function (child) {
							labels.push(child.props.label);
						});

						child = _this2._transformColumnGroup(child, tableProps, i, labels);
					}

					i++;
					return child;
				});
			},

			render: function render() {
				var props = this.props;
				return React.createElement(
					Table,
					_extends({}, props, {
						onRowMouseDown: this._onRowAction(props, props.onRowMouseDown),
						onRowClick: this._onRowAction(props, props.onRowClick),
						onRowDoubleClick: this._onRowAction(props, props.onRowDoubleClick),
						onRowMouseEnter: this._onRowAction(props, props.onRowMouseEnter),
						onRowMouseLeave: this._onRowAction(props, props.onRowMouseLeave)
					}),
					this._convertedColumns(this.state.needsMigration)
				);
			}
		});

		module.exports = TransitionTable;
	}).call(this,require('_process'));
},{"./FixedDataTableCellTransition.react":20,"./FixedDataTableColumnGroupNew.react":23,"./FixedDataTableColumnNew.react":24,"./FixedDataTableNew.react":27,"./React":38,"_process":615}],16:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableBufferedRows.react
 * @typechecks
 */

	'use strict';

	var React = require('./React');
	var FixedDataTableRowBuffer = require('./FixedDataTableRowBuffer');
	var FixedDataTableRow = require('./FixedDataTableRow.react');

	var cx = require('./cx');
	var emptyFunction = require('./emptyFunction');
	var joinClasses = require('./joinClasses');
	var translateDOMPositionXY = require('./translateDOMPositionXY');

	var PropTypes = React.PropTypes;

	var FixedDataTableBufferedRows = React.createClass({
		displayName: 'FixedDataTableBufferedRows',

		propTypes: {
			isScrolling: PropTypes.bool,
			defaultRowHeight: PropTypes.number.isRequired,
			firstRowIndex: PropTypes.number.isRequired,
			firstRowOffset: PropTypes.number.isRequired,
			fixedColumns: PropTypes.array.isRequired,
			height: PropTypes.number.isRequired,
			offsetTop: PropTypes.number.isRequired,
			onRowClick: PropTypes.func,
			onRowDoubleClick: PropTypes.func,
			onRowMouseDown: PropTypes.func,
			onRowMouseEnter: PropTypes.func,
			onRowMouseLeave: PropTypes.func,
			rowClassNameGetter: PropTypes.func,
			rowsCount: PropTypes.number.isRequired,
			rowHeightGetter: PropTypes.func,
			rowPositionGetter: PropTypes.func.isRequired,
			scrollLeft: PropTypes.number.isRequired,
			scrollableColumns: PropTypes.array.isRequired,
			showLastRowBorder: PropTypes.bool,
			width: PropTypes.number.isRequired
		},

		getInitialState: function getInitialState() /*object*/{
			this._rowBuffer = new FixedDataTableRowBuffer(this.props.rowsCount, this.props.defaultRowHeight, this.props.height, this._getRowHeight);
			return {
				rowsToRender: this._rowBuffer.getRows(this.props.firstRowIndex, this.props.firstRowOffset)
			};
		},

		componentWillMount: function componentWillMount() {
			this._staticRowArray = [];
		},

		componentDidMount: function componentDidMount() {
			setTimeout(this._updateBuffer, 1000);
		},

		componentWillReceiveProps: function componentWillReceiveProps( /*object*/nextProps) {
			if (nextProps.rowsCount !== this.props.rowsCount || nextProps.defaultRowHeight !== this.props.defaultRowHeight || nextProps.height !== this.props.height) {
				this._rowBuffer = new FixedDataTableRowBuffer(nextProps.rowsCount, nextProps.defaultRowHeight, nextProps.height, this._getRowHeight);
			}
			if (this.props.isScrolling && !nextProps.isScrolling) {
				this._updateBuffer();
			} else {
				this.setState({
					rowsToRender: this._rowBuffer.getRows(nextProps.firstRowIndex, nextProps.firstRowOffset)
				});
			}
		},

		_updateBuffer: function _updateBuffer() {
			if (this.isMounted()) {
				this.setState({
					rowsToRender: this._rowBuffer.getRowsWithUpdatedBuffer()
				});
			}
		},

		shouldComponentUpdate: function shouldComponentUpdate() /*boolean*/{
			// Don't add PureRenderMixin to this component please.
			return true;
		},

		componentWillUnmount: function componentWillUnmount() {
			this._staticRowArray.length = 0;
		},

		render: function render() /*object*/{
			var props = this.props;
			var rowClassNameGetter = props.rowClassNameGetter || emptyFunction;
			var rowPositionGetter = props.rowPositionGetter;

			var rowsToRender = this.state.rowsToRender;
			this._staticRowArray.length = rowsToRender.length;

			for (var i = 0; i < rowsToRender.length; ++i) {
				var rowIndex = rowsToRender[i];
				var currentRowHeight = this._getRowHeight(rowIndex);
				var rowOffsetTop = rowPositionGetter(rowIndex);

				var hasBottomBorder = rowIndex === props.rowsCount - 1 && props.showLastRowBorder;

				this._staticRowArray[i] = React.createElement(FixedDataTableRow, {
					key: i,
					isScrolling: props.isScrolling,
					index: rowIndex,
					width: props.width,
					height: currentRowHeight,
					scrollLeft: Math.round(props.scrollLeft),
					offsetTop: Math.round(rowOffsetTop),
					fixedColumns: props.fixedColumns,
					scrollableColumns: props.scrollableColumns,
					onClick: props.onRowClick,
					onDoubleClick: props.onRowDoubleClick,
					onMouseDown: props.onRowMouseDown,
					onMouseEnter: props.onRowMouseEnter,
					onMouseLeave: props.onRowMouseLeave,
					className: joinClasses(rowClassNameGetter(rowIndex), cx('public/fixedDataTable/bodyRow'), cx({
						'fixedDataTableLayout/hasBottomBorder': hasBottomBorder,
						'public/fixedDataTable/hasBottomBorder': hasBottomBorder
					}))
				});
			}

			var firstRowPosition = props.rowPositionGetter(props.firstRowIndex);

			var style = {
				position: 'absolute',
				pointerEvents: props.isScrolling ? 'none' : 'auto'
			};

			translateDOMPositionXY(style, 0, props.firstRowOffset - firstRowPosition + props.offsetTop);

			return React.createElement(
				'div',
				{ style: style },
				this._staticRowArray
			);
		},

		_getRowHeight: function _getRowHeight( /*number*/index) /*number*/{
			return this.props.rowHeightGetter ? this.props.rowHeightGetter(index) : this.props.defaultRowHeight;
		}
	});

	module.exports = FixedDataTableBufferedRows;
},{"./FixedDataTableRow.react":29,"./FixedDataTableRowBuffer":30,"./React":38,"./cx":48,"./emptyFunction":50,"./joinClasses":54,"./translateDOMPositionXY":59}],17:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableCell.react
 * @typechecks
 */

	'use strict';

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var FixedDataTableCellDefault = require('./FixedDataTableCellDefault.react');
	var FixedDataTableHelper = require('./FixedDataTableHelper');
	var React = require('./React');
	var cx = require('./cx');
	var joinClasses = require('./joinClasses');

	var DIR_SIGN = FixedDataTableHelper.DIR_SIGN;

	var PropTypes = React.PropTypes;

	var DEFAULT_PROPS = {
		align: 'left',
		highlighted: false
	};

	var FixedDataTableCell = React.createClass({
		displayName: 'FixedDataTableCell',

		/**
   * PropTypes are disabled in this component, because having them on slows
   * down the FixedDataTable hugely in DEV mode. You can enable them back for
   * development, but please don't commit this component with enabled propTypes.
   */
		propTypes_DISABLED_FOR_PERFORMANCE: {
			isScrolling: PropTypes.bool,
			align: PropTypes.oneOf(['left', 'center', 'right']),
			className: PropTypes.string,
			highlighted: PropTypes.bool,
			width: PropTypes.number.isRequired,
			minWidth: PropTypes.number,
			maxWidth: PropTypes.number,
			height: PropTypes.number.isRequired,

			cell: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]),

			columnKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

			/**
     * The row index that will be passed to `cellRenderer` to render.
     */
			rowIndex: PropTypes.number.isRequired,

			/**
     * Callback for when resizer knob (in FixedDataTableCell) is clicked
     * to initialize resizing. Please note this is only on the cells
     * in the header.
     * @param number combinedWidth
     * @param number left
     * @param number width
     * @param number minWidth
     * @param number maxWidth
     * @param number|string columnKey
     * @param object event
     */
			onColumnResize: PropTypes.func,

			/**
     * The left offset in pixels of the cell.
     */
			left: PropTypes.number
		},

		shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
			return !nextProps.isScrolling || this.props.rowIndex !== nextProps.rowIndex;
		},

		getDefaultProps: function getDefaultProps() /*object*/{
			return DEFAULT_PROPS;
		},

		render: function render() /*object*/{
			var _props = this.props;
			var height = _props.height;
			var width = _props.width;
			var columnKey = _props.columnKey;

			var props = _objectWithoutProperties(_props, ['height', 'width', 'columnKey']);

			var style = {
				height: height,
				width: width
			};

			if (DIR_SIGN === 1) {
				style.left = props.left;
			} else {
				style.right = props.left;
			}

			var className = joinClasses(cx({
				'fixedDataTableCellLayout/main': true,
				'fixedDataTableCellLayout/lastChild': props.lastChild,
				'fixedDataTableCellLayout/alignRight': props.align === 'right',
				'fixedDataTableCellLayout/alignCenter': props.align === 'center',
				'public/fixedDataTableCell/alignRight': props.align === 'right',
				'public/fixedDataTableCell/highlighted': props.highlighted,
				'public/fixedDataTableCell/main': true
			}), props.className);

			var columnResizerComponent;
			if (props.onColumnResize) {
				var columnResizerStyle = {
					height: height
				};
				columnResizerComponent = React.createElement(
					'div',
					{
						className: cx('fixedDataTableCellLayout/columnResizerContainer'),
						style: columnResizerStyle,
						onMouseDown: this._onColumnResizerMouseDown },
					React.createElement('div', {
						className: joinClasses(cx('fixedDataTableCellLayout/columnResizerKnob'), cx('public/fixedDataTableCell/columnResizerKnob')),
						style: columnResizerStyle
					})
				);
			}

			var cellProps = {
				columnKey: columnKey,
				height: height,
				width: width
			};

			if (props.rowIndex >= 0) {
				cellProps.rowIndex = props.rowIndex;
			}

			var content;
			if (React.isValidElement(props.cell)) {
				content = React.cloneElement(props.cell, cellProps);
			} else if (typeof props.cell === 'function') {
				content = props.cell(cellProps);
			} else {
				content = React.createElement(
					FixedDataTableCellDefault,
					cellProps,
					props.cell
				);
			}

			return React.createElement(
				'div',
				{ className: className, style: style },
				columnResizerComponent,
				content
			);
		},

		_onColumnResizerMouseDown: function _onColumnResizerMouseDown( /*object*/event) {
			this.props.onColumnResize(this.props.left, this.props.width, this.props.minWidth, this.props.maxWidth, this.props.columnKey, event);
		}
	});

	module.exports = FixedDataTableCell;
},{"./FixedDataTableCellDefault.react":18,"./FixedDataTableHelper":26,"./React":38,"./cx":48,"./joinClasses":54}],18:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableCellDefault.react
 * @typechecks
 */

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var React = require('./React');

	var cx = require('./cx');
	var joinClasses = require('./joinClasses');

	var PropTypes = React.PropTypes;

	/**
 * Component that handles default cell layout and styling.
 *
 * All props unless specified below will be set onto the top level `div`
 * rendered by the cell.
 *
 * Example usage via from a `Column`:
 * ```
 * const MyColumn = (
 *   <Column
 *     cell={({rowIndex, width, height}) => (
 *       <Cell
 *         width={width}
 *         height={height}
 *         className="my-class">
 *         Cell number: <span>{rowIndex}</span>
*        </Cell>
 *     )}
 *     width={100}
 *   />
 * );
 * ```
 */
	var FixedDataTableCellDefault = React.createClass({
		displayName: 'FixedDataTableCellDefault',

		propTypes: {

			/**
     * Outer height of the cell.
     */
			height: PropTypes.number,

			/**
     * Outer width of the cell.
     */
			width: PropTypes.number,

			/**
     * Optional prop that if specified on the `Column` will be passed to the
     * cell. It can be used to uniquely identify which column is the cell is in.
     */
			columnKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
		},

		render: function render() {
			var _props = this.props;
			var height = _props.height;
			var width = _props.width;
			var style = _props.style;
			var className = _props.className;
			var children = _props.children;
			var columnKey = _props.columnKey;
			var // Unused but should not be passed through
				rowIndex = _props.rowIndex;

			var props = _objectWithoutProperties(_props, ['height', 'width', 'style', 'className', 'children', 'columnKey', 'rowIndex']);

			var innerStyle = _extends({
				height: height,
				width: width
			}, style);

			return React.createElement(
				'div',
				_extends({}, props, {
					className: joinClasses(cx('fixedDataTableCellLayout/wrap1'), cx('public/fixedDataTableCell/wrap1'), className),
					style: innerStyle }),
				React.createElement(
					'div',
					{
						className: joinClasses(cx('fixedDataTableCellLayout/wrap2'), cx('public/fixedDataTableCell/wrap2')) },
					React.createElement(
						'div',
						{
							className: joinClasses(cx('fixedDataTableCellLayout/wrap3'), cx('public/fixedDataTableCell/wrap3')) },
						React.createElement(
							'div',
							{ className: cx('public/fixedDataTableCell/cellContent') },
							children
						)
					)
				)
			);
		}
	});

	module.exports = FixedDataTableCellDefault;
// Unused but should not be passed through
},{"./React":38,"./cx":48,"./joinClasses":54}],19:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableCellGroup.react
 * @typechecks
 */

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var FixedDataTableHelper = require('./FixedDataTableHelper');
	var React = require('./React');
	var FixedDataTableCell = require('./FixedDataTableCell.react');

	var cx = require('./cx');
	var translateDOMPositionXY = require('./translateDOMPositionXY');

	var PropTypes = React.PropTypes;

	var DIR_SIGN = FixedDataTableHelper.DIR_SIGN;

	var FixedDataTableCellGroupImpl = React.createClass({
		displayName: 'FixedDataTableCellGroupImpl',

		/**
   * PropTypes are disabled in this component, because having them on slows
   * down the FixedDataTable hugely in DEV mode. You can enable them back for
   * development, but please don't commit this component with enabled propTypes.
   */
		propTypes_DISABLED_FOR_PERFORMANCE: {

			/**
     * Array of <FixedDataTableColumn />.
     */
			columns: PropTypes.array.isRequired,

			isScrolling: PropTypes.bool,

			left: PropTypes.number,

			onColumnResize: PropTypes.func,

			rowHeight: PropTypes.number.isRequired,

			rowIndex: PropTypes.number.isRequired,

			width: PropTypes.number.isRequired,

			zIndex: PropTypes.number.isRequired
		},

		render: function render() /*object*/{
			var props = this.props;
			var columns = props.columns;
			var cells = new Array(columns.length);

			var currentPosition = 0;
			for (var i = 0, j = columns.length; i < j; i++) {
				var columnProps = columns[i].props;
				if (!columnProps.allowCellsRecycling || currentPosition - props.left <= props.width && currentPosition - props.left + columnProps.width >= 0) {
					var key = 'cell_' + i;
					cells[i] = this._renderCell(props.rowIndex, props.rowHeight, columnProps, currentPosition, key);
				}
				currentPosition += columnProps.width;
			}

			var contentWidth = this._getColumnsWidth(columns);

			var style = {
				height: props.height,
				position: 'absolute',
				width: contentWidth,
				zIndex: props.zIndex
			};
			translateDOMPositionXY(style, -1 * DIR_SIGN * props.left, 0);

			return React.createElement(
				'div',
				{
					className: cx('fixedDataTableCellGroupLayout/cellGroup'),
					style: style },
				cells
			);
		},

		_renderCell: function _renderCell(
			/*number*/rowIndex,
			/*number*/height,
			/*object*/columnProps,
			/*number*/left,
			/*string*/key) /*object*/{

			var cellIsResizable = columnProps.isResizable && this.props.onColumnResize;
			var onColumnResize = cellIsResizable ? this.props.onColumnResize : null;

			var className = columnProps.cellClassName;

			return React.createElement(FixedDataTableCell, {
				isScrolling: this.props.isScrolling,
				align: columnProps.align,
				className: className,
				height: height,
				key: key,
				maxWidth: columnProps.maxWidth,
				minWidth: columnProps.minWidth,
				onColumnResize: onColumnResize,
				rowIndex: rowIndex,
				columnKey: columnProps.columnKey,
				width: columnProps.width,
				left: left,
				cell: columnProps.cell
			});
		},

		_getColumnsWidth: function _getColumnsWidth( /*array*/columns) /*number*/{
			var width = 0;
			for (var i = 0; i < columns.length; ++i) {
				width += columns[i].props.width;
			}
			return width;
		}
	});

	var FixedDataTableCellGroup = React.createClass({
		displayName: 'FixedDataTableCellGroup',

		/**
   * PropTypes are disabled in this component, because having them on slows
   * down the FixedDataTable hugely in DEV mode. You can enable them back for
   * development, but please don't commit this component with enabled propTypes.
   */
		propTypes_DISABLED_FOR_PERFORMANCE: {
			isScrolling: PropTypes.bool,
			/**
     * Height of the row.
     */
			height: PropTypes.number.isRequired,

			offsetLeft: PropTypes.number,

			left: PropTypes.number,
			/**
     * Z-index on which the row will be displayed. Used e.g. for keeping
     * header and footer in front of other rows.
     */
			zIndex: PropTypes.number.isRequired
		},

		shouldComponentUpdate: function shouldComponentUpdate( /*object*/nextProps) /*boolean*/{
			return !nextProps.isScrolling || this.props.rowIndex !== nextProps.rowIndex || this.props.left !== nextProps.left;
		},

		getDefaultProps: function getDefaultProps() /*object*/{
			return {
				offsetLeft: 0
			};
		},

		render: function render() /*object*/{
			var _props = this.props;
			var offsetLeft = _props.offsetLeft;

			var props = _objectWithoutProperties(_props, ['offsetLeft']);

			var style = {
				height: props.height
			};

			if (DIR_SIGN === 1) {
				style.left = offsetLeft;
			} else {
				style.right = offsetLeft;
			}

			var onColumnResize = props.onColumnResize ? this._onColumnResize : null;

			return React.createElement(
				'div',
				{
					style: style,
					className: cx('fixedDataTableCellGroupLayout/cellGroupWrapper') },
				React.createElement(FixedDataTableCellGroupImpl, _extends({}, props, {
					onColumnResize: onColumnResize
				}))
			);
		},

		_onColumnResize: function _onColumnResize(
			/*number*/left,
			/*number*/width,
			/*?number*/minWidth,
			/*?number*/maxWidth,
			/*string|number*/columnKey,
			/*object*/event) {
			this.props.onColumnResize && this.props.onColumnResize(this.props.offsetLeft, left - this.props.left + width, width, minWidth, maxWidth, columnKey, event);
		}
	});

	module.exports = FixedDataTableCellGroup;
},{"./FixedDataTableCell.react":17,"./FixedDataTableHelper":26,"./React":38,"./cx":48,"./translateDOMPositionXY":59}],20:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableCellTransition.react
 */

	/**
 * TRANSITION SHIM
 * This acts to provide an intermediate mapping from the old API to the new API.
 *
 * When ready, remove this file and rename the providesModule in
 * FixedDataTableCellNew.react and dependency in FixedDataTableCellGroup.react
 */

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = require('./React');
	var PropTypes = React.PropTypes;

	var cx = require('./cx');
	var joinClasses = require('./joinClasses');
	var shallowEqual = require('./shallowEqual');

	var CellDefault = require('./FixedDataTableCellDefault.react');

	var TransitionCell = React.createClass({
		displayName: 'TransitionCell',

		propTypes: {
			label: PropTypes.string, // header, footer
			className: PropTypes.string,
			rowIndex: PropTypes.number,
			rowGetter: PropTypes.func, // cell
			dataKey: PropTypes.oneOfType([// cell, footer
				PropTypes.string, PropTypes.number]),
			cellRenderer: PropTypes.func,
			cellDataGetter: PropTypes.func,
			footerDataGetter: PropTypes.func, // footer
			footerData: PropTypes.any, // footer
			columnData: PropTypes.any, // cell, header
			width: PropTypes.number,
			height: PropTypes.number,
			isHeaderCell: PropTypes.bool, // header
			isFooterCell: PropTypes.bool },

		// footer
		shouldComponentUpdate: function shouldComponentUpdate( /*object*/nextProps) {
			var update = false;
			var rowData;
			if (nextProps.rowGetter) {
				rowData = nextProps.rowGetter(nextProps.rowIndex);
				if (this._rowData !== rowData) {
					update = true;
				}
			}

			var cellData;
			if (nextProps.dataKey != null) {
				if (nextProps.cellDataGetter) {
					cellData = nextProps.cellDataGetter(nextProps.dataKey, rowData);
				}
				if (!cellData && rowData) {
					cellData = rowData[nextProps.dataKey];
				}
			}
			if (this._cellData !== cellData) {
				update = true;
			}
			this._rowData = rowData;
			this._cellData = cellData;

			return update || !shallowEqual(nextProps, this.props);
		},

		_getCellData: function _getCellData(props) {
			var dataKey = props.dataKey;
			if (dataKey == null) {
				return null;
			}

			var rowData;
			if (props.rowGetter) {
				rowData = props.rowGetter(props.rowIndex);
			}

			if (props.cellDataGetter) {
				return props.cellDataGetter(dataKey, rowData);
			}

			if (rowData) {
				return rowData[dataKey];
			}

			if (props.footerDataGetter) {
				return props.footerDataGetter()[dataKey];
			}

			if (props.footerData) {
				return props.footerData[dataKey];
			}

			if (props.headerDataGetter) {
				return props.headerDataGetter[dataKey];
			}
		},

		_getRowData: function _getRowData(props) {
			if (props.rowGetter) {
				return props.rowGetter(props.rowIndex) || {};
			}

			if (props.footerDataGetter) {
				return props.footerDataGetter() || {};
			}

			if (props.footerData) {
				return props.footerData || {};
			}

			return {};
		},

		render: function render() {
			var props = this.props;

			var cellData = this._getCellData(props);
			var content = cellData;
			var rowData = this._getRowData(props);
			var usingRenderer = !!(props.cellRenderer || props.groupHeaderRenderer);

			if (props.isHeaderCell || props.isFooterCell) {
				content = content || props.label;
			}

			if (props.cellRenderer) {
				if (props.isHeaderCell || props.isFooterCell) {
					content = props.cellRenderer(props.label, props.dataKey, props.columnData, rowData, props.width) || props.label;
				} else {
					content = props.cellRenderer(cellData, props.dataKey, rowData, props.rowIndex, props.columnData, props.width);
				}
			}

			if (props.groupHeaderRenderer) {
				content = props.groupHeaderRenderer(props.label, props.dataKey, // index in children
					props.groupHeaderData, props.groupHeaderLabels, props.width) || content;
			}

			var contentClass = cx('public/fixedDataTableCell/cellContent');

			if (React.isValidElement(content) && usingRenderer) {
				content = React.cloneElement(content, {
					className: joinClasses(content.props.className, contentClass)
				});
			} else {
				return React.createElement(
					CellDefault,
					props,
					content
				);
			}

			var innerStyle = _extends({
				height: props.height,
				width: props.width
			}, props.style);

			return React.createElement(
				'div',
				_extends({}, this.props, {
					className: joinClasses(cx('fixedDataTableCellLayout/wrap1'), cx('public/fixedDataTableCell/wrap1'), this.props.className),
					style: innerStyle }),
				React.createElement(
					'div',
					{
						className: joinClasses(cx('fixedDataTableCellLayout/wrap2'), cx('public/fixedDataTableCell/wrap2')) },
					React.createElement(
						'div',
						{
							className: joinClasses(cx('fixedDataTableCellLayout/wrap3'), cx('public/fixedDataTableCell/wrap3')) },
						content
					)
				)
			);
		}
	});

	module.exports = TransitionCell;
},{"./FixedDataTableCellDefault.react":18,"./React":38,"./cx":48,"./joinClasses":54,"./shallowEqual":58}],21:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableColumn.react
 */

		/**
 * TRANSITION SHIM
 * This acts to provide an intermediate mapping from the old API to the new API.
 *
 * When ready, remove this file and rename the providesModule in
 * FixedDataTableColumnNew.react
 */

		'use strict';

		var React = require('./React');

		var TransitionColumn = React.createClass({
			displayName: 'TransitionColumn',

			statics: {
				__TableColumn__: true
			},

			render: function render() {
				if (process.env.NODE_ENV !== 'production') {
					throw new Error('Component <TransitionColumn /> should never render');
				}
				return null;
			}
		});

		module.exports = TransitionColumn;
	}).call(this,require('_process'));
},{"./React":38,"_process":615}],22:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableColumnGroup.react
 */

		/**
 * TRANSITION SHIM
 * This provides an intermediate mapping from the old API to the new API.
 *
 * When ready, remove this file and rename the providesModule in
 * FixedDataTableColumnNew.react
 */

		'use strict';

		var React = require('./React');

		var TransitionColumnGroup = React.createClass({
			displayName: 'TransitionColumnGroup',

			statics: {
				__TableColumnGroup__: true
			},

			render: function render() {
				if (process.env.NODE_ENV !== 'production') {
					throw new Error('Component <TransitionColumnGroup /> should never render');
				}
				return null;
			}
		});

		module.exports = TransitionColumnGroup;
	}).call(this,require('_process'));
},{"./React":38,"_process":615}],23:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableColumnGroupNew.react
 * @typechecks
 */

		'use strict';

		var React = require('./React');

		var PropTypes = React.PropTypes;

		/**
 * Component that defines the attributes of a table column group.
 */
		var FixedDataTableColumnGroup = React.createClass({
			displayName: 'FixedDataTableColumnGroup',

			statics: {
				__TableColumnGroup__: true
			},

			propTypes: {
				/**
     * The horizontal alignment of the table cell content.
     */
				align: PropTypes.oneOf(['left', 'center', 'right']),

				/**
     * Controls if the column group is fixed when scrolling in the X axis.
     */
				fixed: PropTypes.bool,

				/**
     * This is the header cell for this column group.
     * This can either be a string or a React element. Passing in a string
     * will render a default footer cell with that string. By default, the React
     * element passed in can expect to receive the following props:
     *
     * ```
     * props: {
     *   height: number // (supplied from the groupHeaderHeight)
     *   width: number // (supplied from the Column)
     * }
     * ```
     *
     * Because you are passing in your own React element, you can feel free to
     * pass in whatever props you may want or need.
     *
     * You can also pass in a function that returns a react elemnt, with the
     * props object above passed in as the first parameter.
     */
				header: PropTypes.oneOfType([PropTypes.node, PropTypes.func])

			},

			getDefaultProps: function getDefaultProps() /*object*/{
				return {
					fixed: false
				};
			},

			render: function render() {
				if (process.env.NODE_ENV !== 'production') {
					throw new Error('Component <FixedDataTableColumnGroup /> should never render');
				}
				return null;
			}
		});

		module.exports = FixedDataTableColumnGroup;
	}).call(this,require('_process'));
},{"./React":38,"_process":615}],24:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableColumnNew.react
 * @typechecks
 */

		'use strict';

		var React = require('./React');

		var PropTypes = React.PropTypes;

		/**
 * Component that defines the attributes of table column.
 */
		var FixedDataTableColumn = React.createClass({
			displayName: 'FixedDataTableColumn',

			statics: {
				__TableColumn__: true
			},

			propTypes: {
				/**
     * The horizontal alignment of the table cell content.
     */
				align: PropTypes.oneOf(['left', 'center', 'right']),

				/**
     * Controls if the column is fixed when scrolling in the X axis.
     */
				fixed: PropTypes.bool,

				/**
     * The header cell for this column.
     * This can either be a string a React element, or a function that generates
     * a React Element. Passing in a string will render a default header cell
     * with that string. By default, the React element passed in can expect to
     * receive the following props:
     *
     * ```
     * props: {
     *   columnKey: string // (of the column, if given)
     *   height: number // (supplied from the Table or rowHeightGetter)
     *   width: number // (supplied from the Column)
     * }
     * ```
     *
     * Because you are passing in your own React element, you can feel free to
     * pass in whatever props you may want or need.
     *
     * If you pass in a function, you will receive the same props object as the
     * first argument.
     */
				header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

				/**
     * This is the body cell that will be cloned for this column.
     * This can either be a string a React element, or a function that generates
     * a React Element. Passing in a string will render a default header cell
     * with that string. By default, the React element passed in can expect to
     * receive the following props:
     *
     * ```
     * props: {
     *   rowIndex; number // (the row index of the cell)
     *   columnKey: string // (of the column, if given)
     *   height: number // (supplied from the Table or rowHeightGetter)
     *   width: number // (supplied from the Column)
     * }
     * ```
     *
     * Because you are passing in your own React element, you can feel free to
     * pass in whatever props you may want or need.
     *
     * If you pass in a function, you will receive the same props object as the
     * first argument.
     */
				cell: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

				/**
     * This is the footer cell for this column.
     * This can either be a string a React element, or a function that generates
     * a React Element. Passing in a string will render a default header cell
     * with that string. By default, the React element passed in can expect to
     * receive the following props:
     *
     * ```
     * props: {
     *   columnKey: string // (of the column, if given)
     *   height: number // (supplied from the Table or rowHeightGetter)
     *   width: number // (supplied from the Column)
     * }
     * ```
     *
     * Because you are passing in your own React element, you can feel free to
     * pass in whatever props you may want or need.
     *
     * If you pass in a function, you will receive the same props object as the
     * first argument.
     */
				footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

				/**
     * This is used to uniquely identify the column, and is not required unless
     * you a resizing columns. This will be the key given in the
     * `onColumnResizeEndCallback` on the Table.
     */
				columnKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

				/**
     * The pixel width of the column.
     */
				width: PropTypes.number.isRequired,

				/**
     * If this is a resizable column this is its minimum pixel width.
     */
				minWidth: PropTypes.number,

				/**
     * If this is a resizable column this is its maximum pixel width.
     */
				maxWidth: PropTypes.number,

				/**
     * The grow factor relative to other columns. Same as the flex-grow API
     * from http://www.w3.org/TR/css3-flexbox/. Basically, take any available
     * extra width and distribute it proportionally according to all columns'
     * flexGrow values. Defaults to zero (no-flexing).
     */
				flexGrow: PropTypes.number,

				/**
     * Whether the column can be resized with the
     * FixedDataTableColumnResizeHandle. Please note that if a column
     * has a flex grow, once you resize the column this will be set to 0.
     *
     * This property only provides the UI for the column resizing. If this
     * is set to true, you will need to set the onColumnResizeEndCallback table
     * property and render your columns appropriately.
     */
				isResizable: PropTypes.bool,

				/**
     * Whether cells in this column can be removed from document when outside
     * of viewport as a result of horizontal scrolling.
     * Setting this property to true allows the table to not render cells in
     * particular column that are outside of viewport for visible rows. This
     * allows to create table with many columns and not have vertical scrolling
     * performance drop.
     * Setting the property to false will keep previous behaviour and keep
     * cell rendered if the row it belongs to is visible.
     */
				allowCellsRecycling: PropTypes.bool
			},

			getDefaultProps: function getDefaultProps() /*object*/{
				return {
					allowCellsRecycling: false,
					fixed: false
				};
			},

			render: function render() {
				if (process.env.NODE_ENV !== 'production') {
					throw new Error('Component <FixedDataTableColumn /> should never render');
				}
				return null;
			}
		});

		module.exports = FixedDataTableColumn;
	}).call(this,require('_process'));
},{"./React":38,"_process":615}],25:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * This is to be used with the FixedDataTable. It is a read line
 * that when you click on a column that is resizable appears and allows
 * you to resize the corresponding column.
 *
 * @providesModule FixedDataTableColumnResizeHandle.react
 * @typechecks
 */

	'use strict';

	var DOMMouseMoveTracker = require('./DOMMouseMoveTracker');
	var Locale = require('./Locale');
	var React = require('./React');
	var ReactComponentWithPureRenderMixin = require('./ReactComponentWithPureRenderMixin');

	var clamp = require('./clamp');
	var cx = require('./cx');

	var PropTypes = React.PropTypes;

	var FixedDataTableColumnResizeHandle = React.createClass({
		displayName: 'FixedDataTableColumnResizeHandle',

		mixins: [ReactComponentWithPureRenderMixin],

		propTypes: {
			visible: PropTypes.bool.isRequired,

			/**
     * This is the height of the line
     */
			height: PropTypes.number.isRequired,

			/**
     * Offset from left border of the table, please note
     * that the line is a border on diff. So this is really the
     * offset of the column itself.
     */
			leftOffset: PropTypes.number.isRequired,

			/**
     * Height of the clickable region of the line.
     * This is assumed to be at the top of the line.
     */
			knobHeight: PropTypes.number.isRequired,

			/**
     * The line is a border on a diff, so this is essentially
     * the width of column.
     */
			initialWidth: PropTypes.number,

			/**
     * The minimum width this dragger will collapse to
     */
			minWidth: PropTypes.number,

			/**
     * The maximum width this dragger will collapse to
     */
			maxWidth: PropTypes.number,

			/**
     * Initial click event on the header cell.
     */
			initialEvent: PropTypes.object,

			/**
     * When resizing is complete this is called.
     */
			onColumnResizeEnd: PropTypes.func,

			/**
     * Column key for the column being resized.
     */
			columnKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
		},

		getInitialState: function getInitialState() /*object*/{
			return {
				width: 0,
				cursorDelta: 0
			};
		},

		componentWillReceiveProps: function componentWillReceiveProps( /*object*/newProps) {
			if (newProps.initialEvent && !this._mouseMoveTracker.isDragging()) {
				this._mouseMoveTracker.captureMouseMoves(newProps.initialEvent);
				this.setState({
					width: newProps.initialWidth,
					cursorDelta: newProps.initialWidth
				});
			}
		},

		componentDidMount: function componentDidMount() {
			this._mouseMoveTracker = new DOMMouseMoveTracker(this._onMove, this._onColumnResizeEnd, document.body);
		},

		componentWillUnmount: function componentWillUnmount() {
			this._mouseMoveTracker.releaseMouseMoves();
			this._mouseMoveTracker = null;
		},

		render: function render() /*object*/{
			var style = {
				width: this.state.width,
				height: this.props.height
			};
			if (Locale.isRTL()) {
				style.right = this.props.leftOffset;
			} else {
				style.left = this.props.leftOffset;
			}
			return React.createElement(
				'div',
				{
					className: cx({
						'fixedDataTableColumnResizerLineLayout/main': true,
						'fixedDataTableColumnResizerLineLayout/hiddenElem': !this.props.visible,
						'public/fixedDataTableColumnResizerLine/main': true
					}),
					style: style },
				React.createElement('div', {
					className: cx('fixedDataTableColumnResizerLineLayout/mouseArea'),
					style: { height: this.props.height }
				})
			);
		},

		_onMove: function _onMove( /*number*/deltaX) {
			if (Locale.isRTL()) {
				deltaX = -deltaX;
			}
			var newWidth = this.state.cursorDelta + deltaX;
			var newColumnWidth = clamp(newWidth, this.props.minWidth, this.props.maxWidth);

			// Please note cursor delta is the different between the currently width
			// and the new width.
			this.setState({
				width: newColumnWidth,
				cursorDelta: newWidth
			});
		},

		_onColumnResizeEnd: function _onColumnResizeEnd() {
			this._mouseMoveTracker.releaseMouseMoves();
			this.props.onColumnResizeEnd(this.state.width, this.props.columnKey);
		}
	});

	module.exports = FixedDataTableColumnResizeHandle;
},{"./DOMMouseMoveTracker":12,"./Locale":36,"./React":38,"./ReactComponentWithPureRenderMixin":39,"./clamp":46,"./cx":48}],26:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableHelper
 * @typechecks
 */

	'use strict';

	var Locale = require('./Locale');
	var React = require('./React');
	var FixedDataTableColumnGroup = require('./FixedDataTableColumnGroup.react');
	var FixedDataTableColumn = require('./FixedDataTableColumn.react');

	var DIR_SIGN = Locale.isRTL() ? -1 : +1;
	// A cell up to 5px outside of the visible area will still be considered visible
	var CELL_VISIBILITY_TOLERANCE = 5; // used for flyouts

	function renderToString(value) /*string*/{
		if (value === null || value === undefined) {
			return '';
		} else {
			return String(value);
		}
	}

	/**
 * Helper method to execute a callback against all columns given the children
 * of a table.
 * @param {?object|array} children
 *    Children of a table.
 * @param {function} callback
 *    Function to excecute for each column. It is passed the column.
 */
	function forEachColumn(children, callback) {
		React.Children.forEach(children, function (child) {
			if (child.type === FixedDataTableColumnGroup) {
				forEachColumn(child.props.children, callback);
			} else if (child.type === FixedDataTableColumn) {
				callback(child);
			}
		});
	}

	/**
 * Helper method to map columns to new columns. This takes into account column
 * groups and will generate a new column group if its columns change.
 * @param {?object|array} children
 *    Children of a table.
 * @param {function} callback
 *    Function to excecute for each column. It is passed the column and should
 *    return a result column.
 */
	function mapColumns(children, callback) {
		var newChildren = [];
		React.Children.forEach(children, function (originalChild) {
			var newChild = originalChild;

			// The child is either a column group or a column. If it is a column group
			// we need to iterate over its columns and then potentially generate a
			// new column group
			if (originalChild.type === FixedDataTableColumnGroup) {
				var haveColumnsChanged = false;
				var newColumns = [];

				forEachColumn(originalChild.props.children, function (originalcolumn) {
					var newColumn = callback(originalcolumn);
					if (newColumn !== originalcolumn) {
						haveColumnsChanged = true;
					}
					newColumns.push(newColumn);
				});

				// If the column groups columns have changed clone the group and supply
				// new children
				if (haveColumnsChanged) {
					newChild = React.cloneElement(originalChild, {
						children: newColumns
					});
				}
			} else if (originalChild.type === FixedDataTableColumn) {
				newChild = callback(originalChild);
			}

			newChildren.push(newChild);
		});

		return newChildren;
	}

	var FixedDataTableHelper = {
		DIR_SIGN: DIR_SIGN,
		CELL_VISIBILITY_TOLERANCE: CELL_VISIBILITY_TOLERANCE,
		renderToString: renderToString,
		forEachColumn: forEachColumn,
		mapColumns: mapColumns
	};

	module.exports = FixedDataTableHelper;
},{"./FixedDataTableColumn.react":21,"./FixedDataTableColumnGroup.react":22,"./Locale":36,"./React":38}],27:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableNew.react
 * @typechecks
 * @noflow
 */

	/*eslint no-bitwise:1*/

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = require('./React');
	var ReactComponentWithPureRenderMixin = require('./ReactComponentWithPureRenderMixin');
	var ReactWheelHandler = require('./ReactWheelHandler');
	var Scrollbar = require('./Scrollbar.react');
	var FixedDataTableBufferedRows = require('./FixedDataTableBufferedRows.react');
	var FixedDataTableColumnResizeHandle = require('./FixedDataTableColumnResizeHandle.react');
	var FixedDataTableRow = require('./FixedDataTableRow.react');
	var FixedDataTableScrollHelper = require('./FixedDataTableScrollHelper');
	var FixedDataTableWidthHelper = require('./FixedDataTableWidthHelper');

	var cx = require('./cx');
	var debounceCore = require('./debounceCore');
	var emptyFunction = require('./emptyFunction');
	var invariant = require('./invariant');
	var joinClasses = require('./joinClasses');
	var shallowEqual = require('./shallowEqual');
	var translateDOMPositionXY = require('./translateDOMPositionXY');

	var PropTypes = React.PropTypes;

	var ReactChildren = React.Children;

	var EMPTY_OBJECT = {};
	var BORDER_HEIGHT = 1;
	var HEADER = 'header';
	var FOOTER = 'footer';
	var CELL = 'cell';

	/**
 * Data grid component with fixed or scrollable header and columns.
 *
 * The layout of the data table is as follows:
 *
 * ```
 * +---------------------------------------------------+
 * | Fixed Column Group    | Scrollable Column Group   |
 * | Header                | Header                    |
 * |                       |                           |
 * +---------------------------------------------------+
 * |                       |                           |
 * | Fixed Header Columns  | Scrollable Header Columns |
 * |                       |                           |
 * +-----------------------+---------------------------+
 * |                       |                           |
 * | Fixed Body Columns    | Scrollable Body Columns   |
 * |                       |                           |
 * +-----------------------+---------------------------+
 * |                       |                           |
 * | Fixed Footer Columns  | Scrollable Footer Columns |
 * |                       |                           |
 * +-----------------------+---------------------------+
 * ```
 *
 * - Fixed Column Group Header: These are the headers for a group
 *   of columns if included in the table that do not scroll
 *   vertically or horizontally.
 *
 * - Scrollable Column Group Header: The header for a group of columns
 *   that do not move while scrolling vertically, but move horizontally
 *   with the horizontal scrolling.
 *
 * - Fixed Header Columns: The header columns that do not move while scrolling
 *   vertically or horizontally.
 *
 * - Scrollable Header Columns: The header columns that do not move
 *   while scrolling vertically, but move horizontally with the horizontal
 *   scrolling.
 *
 * - Fixed Body Columns: The body columns that do not move while scrolling
 *   horizontally, but move vertically with the vertical scrolling.
 *
 * - Scrollable Body Columns: The body columns that move while scrolling
 *   vertically or horizontally.
 */
	var FixedDataTable = React.createClass({
		displayName: 'FixedDataTable',

		propTypes: {

			/**
     * Pixel width of table. If all columns do not fit,
     * a horizontal scrollbar will appear.
     */
			width: PropTypes.number.isRequired,

			/**
     * Pixel height of table. If all rows do not fit,
     * a vertical scrollbar will appear.
     *
     * Either `height` or `maxHeight` must be specified.
     */
			height: PropTypes.number,

			/**
     * Maximum pixel height of table. If all rows do not fit,
     * a vertical scrollbar will appear.
     *
     * Either `height` or `maxHeight` must be specified.
     */
			maxHeight: PropTypes.number,

			/**
     * Pixel height of table's owner, this is used in a managed scrolling
     * situation when you want to slide the table up from below the fold
     * without having to constantly update the height on every scroll tick.
     * Instead, vary this property on scroll. By using `ownerHeight`, we
     * over-render the table while making sure the footer and horizontal
     * scrollbar of the table are visible when the current space for the table
     * in view is smaller than the final, over-flowing height of table. It
     * allows us to avoid resizing and reflowing table when it is moving in the
     * view.
     *
     * This is used if `ownerHeight < height` (or `maxHeight`).
     */
			ownerHeight: PropTypes.number,

			overflowX: PropTypes.oneOf(['hidden', 'auto']),
			overflowY: PropTypes.oneOf(['hidden', 'auto']),

			/**
     * Number of rows in the table.
     */
			rowsCount: PropTypes.number.isRequired,

			/**
     * Pixel height of rows unless `rowHeightGetter` is specified and returns
     * different value.
     */
			rowHeight: PropTypes.number.isRequired,

			/**
     * If specified, `rowHeightGetter(index)` is called for each row and the
     * returned value overrides `rowHeight` for particular row.
     */
			rowHeightGetter: PropTypes.func,

			/**
     * To get any additional CSS classes that should be added to a row,
     * `rowClassNameGetter(index)` is called.
     */
			rowClassNameGetter: PropTypes.func,

			/**
     * Pixel height of the column group header.
     */
			groupHeaderHeight: PropTypes.number,

			/**
     * Pixel height of header.
     */
			headerHeight: PropTypes.number.isRequired,

			/**
     * Pixel height of footer.
     */
			footerHeight: PropTypes.number,

			/**
     * Value of horizontal scroll.
     */
			scrollLeft: PropTypes.number,

			/**
     * Index of column to scroll to.
     */
			scrollToColumn: PropTypes.number,

			/**
     * Value of vertical scroll.
     */
			scrollTop: PropTypes.number,

			/**
     * Index of row to scroll to.
     */
			scrollToRow: PropTypes.number,

			/**
     * Callback that is called when scrolling starts with current horizontal
     * and vertical scroll values.
     */
			onScrollStart: PropTypes.func,

			/**
     * Callback that is called when scrolling ends or stops with new horizontal
     * and vertical scroll values.
     */
			onScrollEnd: PropTypes.func,

			/**
     * Callback that is called when `rowHeightGetter` returns a different height
     * for a row than the `rowHeight` prop. This is necessary because initially
     * table estimates heights of some parts of the content.
     */
			onContentHeightChange: PropTypes.func,

			/**
     * Callback that is called when a row is clicked.
     */
			onRowClick: PropTypes.func,

			/**
     * Callback that is called when a row is double clicked.
     */
			onRowDoubleClick: PropTypes.func,

			/**
     * Callback that is called when a mouse-down event happens on a row.
     */
			onRowMouseDown: PropTypes.func,

			/**
     * Callback that is called when a mouse-enter event happens on a row.
     */
			onRowMouseEnter: PropTypes.func,

			/**
     * Callback that is called when a mouse-leave event happens on a row.
     */
			onRowMouseLeave: PropTypes.func,

			/**
     * Callback that is called when resizer has been released
     * and column needs to be updated.
     *
     * Required if the isResizable property is true on any column.
     *
     * ```
     * function(
     *   newColumnWidth: number,
     *   columnKey: string,
     * )
     * ```
     */
			onColumnResizeEndCallback: PropTypes.func,

			/**
     * Whether a column is currently being resized.
     */
			isColumnResizing: PropTypes.bool
		},

		getDefaultProps: function getDefaultProps() /*object*/{
			return {
				footerHeight: 0,
				groupHeaderHeight: 0,
				headerHeight: 0,
				scrollLeft: 0,
				scrollTop: 0
			};
		},

		getInitialState: function getInitialState() /*object*/{
			var props = this.props;
			var viewportHeight = (props.height === undefined ? props.maxHeight : props.height) - (props.headerHeight || 0) - (props.footerHeight || 0) - (props.groupHeaderHeight || 0);
			this._scrollHelper = new FixedDataTableScrollHelper(props.rowsCount, props.rowHeight, viewportHeight, props.rowHeightGetter);
			if (props.scrollTop) {
				this._scrollHelper.scrollTo(props.scrollTop);
			}
			this._didScrollStop = debounceCore(this._didScrollStop, 200, this);

			return this._calculateState(this.props);
		},

		componentWillMount: function componentWillMount() {
			var scrollToRow = this.props.scrollToRow;
			if (scrollToRow !== undefined && scrollToRow !== null) {
				this._rowToScrollTo = scrollToRow;
			}
			var scrollToColumn = this.props.scrollToColumn;
			if (scrollToColumn !== undefined && scrollToColumn !== null) {
				this._columnToScrollTo = scrollToColumn;
			}
			this._wheelHandler = new ReactWheelHandler(this._onWheel, this._shouldHandleWheelX, this._shouldHandleWheelY);
		},

		_shouldHandleWheelX: function _shouldHandleWheelX( /*number*/delta) /*boolean*/{
			if (this.props.overflowX === 'hidden') {
				return false;
			}

			delta = Math.round(delta);
			if (delta === 0) {
				return false;
			}

			return delta < 0 && this.state.scrollX > 0 || delta >= 0 && this.state.scrollX < this.state.maxScrollX;
		},

		_shouldHandleWheelY: function _shouldHandleWheelY( /*number*/delta) /*boolean*/{
			if (this.props.overflowY === 'hidden' || delta === 0) {
				return false;
			}

			delta = Math.round(delta);
			if (delta === 0) {
				return false;
			}

			return delta < 0 && this.state.scrollY > 0 || delta >= 0 && this.state.scrollY < this.state.maxScrollY;
		},

		_reportContentHeight: function _reportContentHeight() {
			var scrollContentHeight = this.state.scrollContentHeight;
			var reservedHeight = this.state.reservedHeight;
			var requiredHeight = scrollContentHeight + reservedHeight;
			var contentHeight;
			var useMaxHeight = this.props.height === undefined;
			if (useMaxHeight && this.props.maxHeight > requiredHeight) {
				contentHeight = requiredHeight;
			} else if (this.state.height > requiredHeight && this.props.ownerHeight) {
				contentHeight = Math.max(requiredHeight, this.props.ownerHeight);
			} else {
				contentHeight = this.state.height + this.state.maxScrollY;
			}
			if (contentHeight !== this._contentHeight && this.props.onContentHeightChange) {
				this.props.onContentHeightChange(contentHeight);
			}
			this._contentHeight = contentHeight;
		},

		componentDidMount: function componentDidMount() {
			this._reportContentHeight();
		},

		componentWillReceiveProps: function componentWillReceiveProps( /*object*/nextProps) {
			var scrollToRow = nextProps.scrollToRow;
			if (scrollToRow !== undefined && scrollToRow !== null) {
				this._rowToScrollTo = scrollToRow;
			}
			var scrollToColumn = nextProps.scrollToColumn;
			if (scrollToColumn !== undefined && scrollToColumn !== null) {
				this._columnToScrollTo = scrollToColumn;
			}

			var newOverflowX = nextProps.overflowX;
			var newOverflowY = nextProps.overflowY;
			if (newOverflowX !== this.props.overflowX || newOverflowY !== this.props.overflowY) {
				this._wheelHandler = new ReactWheelHandler(this._onWheel, newOverflowX !== 'hidden', // Should handle horizontal scroll
					newOverflowY !== 'hidden' // Should handle vertical scroll
				);
			}

			// In the case of controlled scrolling, notify.
			if (this.props.ownerHeight !== nextProps.ownerHeight || this.props.scrollTop !== nextProps.scrollTop) {
				this._didScrollStart();
			}
			this._didScrollStop();

			this.setState(this._calculateState(nextProps, this.state));
		},

		componentDidUpdate: function componentDidUpdate() {
			this._reportContentHeight();
		},

		render: function render() /*object*/{
			var state = this.state;
			var props = this.props;

			var groupHeader;
			if (state.useGroupHeader) {
				groupHeader = React.createElement(FixedDataTableRow, {
					key: 'group_header',
					isScrolling: this._isScrolling,
					className: joinClasses(cx('fixedDataTableLayout/header'), cx('public/fixedDataTable/header')),
					width: state.width,
					height: state.groupHeaderHeight,
					index: 0,
					zIndex: 1,
					offsetTop: 0,
					scrollLeft: state.scrollX,
					fixedColumns: state.groupHeaderFixedColumns,
					scrollableColumns: state.groupHeaderScrollableColumns,
					onColumnResize: this._onColumnResize
				});
			}

			var maxScrollY = this.state.maxScrollY;
			var showScrollbarX = state.maxScrollX > 0 && state.overflowX !== 'hidden';
			var showScrollbarY = maxScrollY > 0 && state.overflowY !== 'hidden';
			var scrollbarXHeight = showScrollbarX ? Scrollbar.SIZE : 0;
			var scrollbarYHeight = state.height - scrollbarXHeight - 2 * BORDER_HEIGHT - state.footerHeight;

			var headerOffsetTop = state.useGroupHeader ? state.groupHeaderHeight : 0;
			var bodyOffsetTop = headerOffsetTop + state.headerHeight;
			scrollbarYHeight -= bodyOffsetTop;
			var bottomSectionOffset = 0;
			var footOffsetTop = props.maxHeight != null ? bodyOffsetTop + state.bodyHeight : bodyOffsetTop + scrollbarYHeight;
			var rowsContainerHeight = footOffsetTop + state.footerHeight;

			if (props.ownerHeight !== undefined && props.ownerHeight < state.height) {
				bottomSectionOffset = props.ownerHeight - state.height;

				footOffsetTop = Math.min(footOffsetTop, props.ownerHeight - state.footerHeight - scrollbarXHeight);

				scrollbarYHeight = Math.max(0, footOffsetTop - bodyOffsetTop);
			}

			var verticalScrollbar;
			if (showScrollbarY) {
				verticalScrollbar = React.createElement(Scrollbar, {
					size: scrollbarYHeight,
					contentSize: scrollbarYHeight + maxScrollY,
					onScroll: this._onVerticalScroll,
					verticalTop: bodyOffsetTop,
					position: state.scrollY
				});
			}

			var horizontalScrollbar;
			if (showScrollbarX) {
				var scrollbarXWidth = state.width;
				horizontalScrollbar = React.createElement(HorizontalScrollbar, {
					contentSize: scrollbarXWidth + state.maxScrollX,
					offset: bottomSectionOffset,
					onScroll: this._onHorizontalScroll,
					position: state.scrollX,
					size: scrollbarXWidth
				});
			}

			var dragKnob = React.createElement(FixedDataTableColumnResizeHandle, {
				height: state.height,
				initialWidth: state.columnResizingData.width || 0,
				minWidth: state.columnResizingData.minWidth || 0,
				maxWidth: state.columnResizingData.maxWidth || Number.MAX_VALUE,
				visible: !!state.isColumnResizing,
				leftOffset: state.columnResizingData.left || 0,
				knobHeight: state.headerHeight,
				initialEvent: state.columnResizingData.initialEvent,
				onColumnResizeEnd: props.onColumnResizeEndCallback,
				columnKey: state.columnResizingData.key
			});

			var footer = null;
			if (state.footerHeight) {
				footer = React.createElement(FixedDataTableRow, {
					key: 'footer',
					isScrolling: this._isScrolling,
					className: joinClasses(cx('fixedDataTableLayout/footer'), cx('public/fixedDataTable/footer')),
					width: state.width,
					height: state.footerHeight,
					index: -1,
					zIndex: 1,
					offsetTop: footOffsetTop,
					fixedColumns: state.footFixedColumns,
					scrollableColumns: state.footScrollableColumns,
					scrollLeft: state.scrollX
				});
			}

			var rows = this._renderRows(bodyOffsetTop);

			var header = React.createElement(FixedDataTableRow, {
				key: 'header',
				isScrolling: this._isScrolling,
				className: joinClasses(cx('fixedDataTableLayout/header'), cx('public/fixedDataTable/header')),
				width: state.width,
				height: state.headerHeight,
				index: -1,
				zIndex: 1,
				offsetTop: headerOffsetTop,
				scrollLeft: state.scrollX,
				fixedColumns: state.headFixedColumns,
				scrollableColumns: state.headScrollableColumns,
				onColumnResize: this._onColumnResize
			});

			var topShadow;
			var bottomShadow;
			if (state.scrollY) {
				topShadow = React.createElement('div', {
					className: joinClasses(cx('fixedDataTableLayout/topShadow'), cx('public/fixedDataTable/topShadow')),
					style: { top: bodyOffsetTop }
				});
			}

			if (state.ownerHeight != null && state.ownerHeight < state.height && state.scrollContentHeight + state.reservedHeight > state.ownerHeight || state.scrollY < maxScrollY) {
				bottomShadow = React.createElement('div', {
					className: joinClasses(cx('fixedDataTableLayout/bottomShadow'), cx('public/fixedDataTable/bottomShadow')),
					style: { top: footOffsetTop }
				});
			}

			return React.createElement(
				'div',
				{
					className: joinClasses(cx('fixedDataTableLayout/main'), cx('public/fixedDataTable/main')),
					onWheel: this._wheelHandler.onWheel,
					style: { height: state.height, width: state.width } },
				React.createElement(
					'div',
					{
						className: cx('fixedDataTableLayout/rowsContainer'),
						style: { height: rowsContainerHeight, width: state.width } },
					dragKnob,
					groupHeader,
					header,
					rows,
					footer,
					topShadow,
					bottomShadow
				),
				verticalScrollbar,
				horizontalScrollbar
			);
		},

		_renderRows: function _renderRows( /*number*/offsetTop) /*object*/{
			var state = this.state;

			return React.createElement(FixedDataTableBufferedRows, {
				isScrolling: this._isScrolling,
				defaultRowHeight: state.rowHeight,
				firstRowIndex: state.firstRowIndex,
				firstRowOffset: state.firstRowOffset,
				fixedColumns: state.bodyFixedColumns,
				height: state.bodyHeight,
				offsetTop: offsetTop,
				onRowClick: state.onRowClick,
				onRowDoubleClick: state.onRowDoubleClick,
				onRowMouseDown: state.onRowMouseDown,
				onRowMouseEnter: state.onRowMouseEnter,
				onRowMouseLeave: state.onRowMouseLeave,
				rowClassNameGetter: state.rowClassNameGetter,
				rowsCount: state.rowsCount,
				rowGetter: state.rowGetter,
				rowHeightGetter: state.rowHeightGetter,
				scrollLeft: state.scrollX,
				scrollableColumns: state.bodyScrollableColumns,
				showLastRowBorder: true,
				width: state.width,
				rowPositionGetter: this._scrollHelper.getRowPosition
			});
		},

		/**
   * This is called when a cell that is in the header of a column has its
   * resizer knob clicked on. It displays the resizer and puts in the correct
   * location on the table.
   */
		_onColumnResize: function _onColumnResize(
			/*number*/combinedWidth,
			/*number*/leftOffset,
			/*number*/cellWidth,
			/*?number*/cellMinWidth,
			/*?number*/cellMaxWidth,
			/*number|string*/columnKey,
			/*object*/event) {
			this.setState({
				isColumnResizing: true,
				columnResizingData: {
					left: leftOffset + combinedWidth - cellWidth,
					width: cellWidth,
					minWidth: cellMinWidth,
					maxWidth: cellMaxWidth,
					initialEvent: {
						clientX: event.clientX,
						clientY: event.clientY,
						preventDefault: emptyFunction
					},
					key: columnKey
				}
			});
		},

		_areColumnSettingsIdentical: function _areColumnSettingsIdentical(oldColumns, newColumns) {
			if (oldColumns.length !== newColumns.length) {
				return false;
			}
			for (var index = 0; index < oldColumns.length; ++index) {
				if (!shallowEqual(oldColumns[index].props, newColumns[index].props)) {
					return false;
				}
			}
			return true;
		},

		_populateColumnsAndColumnData: function _populateColumnsAndColumnData(columns, columnGroups, oldState) {
			var canReuseColumnSettings = false;
			var canReuseColumnGroupSettings = false;

			if (oldState && oldState.columns) {
				canReuseColumnSettings = this._areColumnSettingsIdentical(columns, oldState.columns);
			}
			if (oldState && oldState.columnGroups && columnGroups) {
				canReuseColumnGroupSettings = this._areColumnSettingsIdentical(columnGroups, oldState.columnGroups);
			}

			var columnInfo = {};
			if (canReuseColumnSettings) {
				columnInfo.bodyFixedColumns = oldState.bodyFixedColumns;
				columnInfo.bodyScrollableColumns = oldState.bodyScrollableColumns;
				columnInfo.headFixedColumns = oldState.headFixedColumns;
				columnInfo.headScrollableColumns = oldState.headScrollableColumns;
				columnInfo.footFixedColumns = oldState.footFixedColumns;
				columnInfo.footScrollableColumns = oldState.footScrollableColumns;
			} else {
				var bodyColumnTypes = this._splitColumnTypes(columns);
				columnInfo.bodyFixedColumns = bodyColumnTypes.fixed;
				columnInfo.bodyScrollableColumns = bodyColumnTypes.scrollable;

				var headColumnTypes = this._splitColumnTypes(this._selectColumnElement(HEADER, columns));
				columnInfo.headFixedColumns = headColumnTypes.fixed;
				columnInfo.headScrollableColumns = headColumnTypes.scrollable;

				var footColumnTypes = this._splitColumnTypes(this._selectColumnElement(FOOTER, columns));
				columnInfo.footFixedColumns = footColumnTypes.fixed;
				columnInfo.footScrollableColumns = footColumnTypes.scrollable;
			}

			if (canReuseColumnGroupSettings) {
				columnInfo.groupHeaderFixedColumns = oldState.groupHeaderFixedColumns;
				columnInfo.groupHeaderScrollableColumns = oldState.groupHeaderScrollableColumns;
			} else {
				if (columnGroups) {
					var groupHeaderColumnTypes = this._splitColumnTypes(this._selectColumnElement(HEADER, columnGroups));
					columnInfo.groupHeaderFixedColumns = groupHeaderColumnTypes.fixed;
					columnInfo.groupHeaderScrollableColumns = groupHeaderColumnTypes.scrollable;
				}
			}

			return columnInfo;
		},

		_calculateState: function _calculateState( /*object*/props, /*?object*/oldState) /*object*/{
			invariant(props.height !== undefined || props.maxHeight !== undefined, 'You must set either a height or a maxHeight');

			var children = [];
			ReactChildren.forEach(props.children, function (child, index) {
				if (child == null) {
					return;
				}
				invariant(child.type.__TableColumnGroup__ || child.type.__TableColumn__, 'child type should be <FixedDataTableColumn /> or ' + '<FixedDataTableColumnGroup />');
				children.push(child);
			});

			var useGroupHeader = false;
			if (children.length && children[0].type.__TableColumnGroup__) {
				useGroupHeader = true;
			}

			var firstRowIndex = oldState && oldState.firstRowIndex || 0;
			var firstRowOffset = oldState && oldState.firstRowOffset || 0;
			var scrollX, scrollY;
			if (oldState && props.overflowX !== 'hidden') {
				scrollX = oldState.scrollX;
			} else {
				scrollX = props.scrollLeft;
			}
			if (oldState && props.overflowY !== 'hidden') {
				scrollY = oldState.scrollY;
			} else {
				scrollState = this._scrollHelper.scrollTo(props.scrollTop);
				firstRowIndex = scrollState.index;
				firstRowOffset = scrollState.offset;
				scrollY = scrollState.position;
			}

			if (this._rowToScrollTo !== undefined) {
				scrollState = this._scrollHelper.scrollRowIntoView(this._rowToScrollTo);
				firstRowIndex = scrollState.index;
				firstRowOffset = scrollState.offset;
				scrollY = scrollState.position;
				delete this._rowToScrollTo;
			}

			var groupHeaderHeight = useGroupHeader ? props.groupHeaderHeight : 0;

			if (oldState && props.rowsCount !== oldState.rowsCount) {
				// Number of rows changed, try to scroll to the row from before the
				// change
				var viewportHeight = (props.height === undefined ? props.maxHeight : props.height) - (props.headerHeight || 0) - (props.footerHeight || 0) - (props.groupHeaderHeight || 0);
				this._scrollHelper = new FixedDataTableScrollHelper(props.rowsCount, props.rowHeight, viewportHeight, props.rowHeightGetter);
				var scrollState = this._scrollHelper.scrollToRow(firstRowIndex, firstRowOffset);
				firstRowIndex = scrollState.index;
				firstRowOffset = scrollState.offset;
				scrollY = scrollState.position;
			} else if (oldState && props.rowHeightGetter !== oldState.rowHeightGetter) {
				this._scrollHelper.setRowHeightGetter(props.rowHeightGetter);
			}

			var columnResizingData;
			if (props.isColumnResizing) {
				columnResizingData = oldState && oldState.columnResizingData;
			} else {
				columnResizingData = EMPTY_OBJECT;
			}

			var columns;
			var columnGroups;

			if (useGroupHeader) {
				var columnGroupSettings = FixedDataTableWidthHelper.adjustColumnGroupWidths(children, props.width);
				columns = columnGroupSettings.columns;
				columnGroups = columnGroupSettings.columnGroups;
			} else {
				columns = FixedDataTableWidthHelper.adjustColumnWidths(children, props.width);
			}

			var columnInfo = this._populateColumnsAndColumnData(columns, columnGroups, oldState);

			if (this._columnToScrollTo !== undefined) {
				// If selected column is a fixed column, don't scroll
				var fixedColumnsCount = columnInfo.bodyFixedColumns.length;
				if (this._columnToScrollTo >= fixedColumnsCount) {
					var totalFixedColumnsWidth = 0;
					var i, column;
					for (i = 0; i < columnInfo.bodyFixedColumns.length; ++i) {
						column = columnInfo.bodyFixedColumns[i];
						totalFixedColumnsWidth += column.props.width;
					}

					var scrollableColumnIndex = Math.min(this._columnToScrollTo - fixedColumnsCount, columnInfo.bodyScrollableColumns.length - 1);

					var previousColumnsWidth = 0;
					for (i = 0; i < scrollableColumnIndex; ++i) {
						column = columnInfo.bodyScrollableColumns[i];
						previousColumnsWidth += column.props.width;
					}

					var availableScrollWidth = props.width - totalFixedColumnsWidth;
					var selectedColumnWidth = columnInfo.bodyScrollableColumns[scrollableColumnIndex].props.width;
					var minAcceptableScrollPosition = previousColumnsWidth + selectedColumnWidth - availableScrollWidth;

					if (scrollX < minAcceptableScrollPosition) {
						scrollX = minAcceptableScrollPosition;
					}

					if (scrollX > previousColumnsWidth) {
						scrollX = previousColumnsWidth;
					}
				}
				delete this._columnToScrollTo;
			}

			var useMaxHeight = props.height === undefined;
			var height = Math.round(useMaxHeight ? props.maxHeight : props.height);
			var totalHeightReserved = props.footerHeight + props.headerHeight + groupHeaderHeight + 2 * BORDER_HEIGHT;
			var bodyHeight = height - totalHeightReserved;
			var scrollContentHeight = this._scrollHelper.getContentHeight();
			var totalHeightNeeded = scrollContentHeight + totalHeightReserved;
			var scrollContentWidth = FixedDataTableWidthHelper.getTotalWidth(columns);

			var horizontalScrollbarVisible = scrollContentWidth > props.width && props.overflowX !== 'hidden';

			if (horizontalScrollbarVisible) {
				bodyHeight -= Scrollbar.SIZE;
				totalHeightNeeded += Scrollbar.SIZE;
				totalHeightReserved += Scrollbar.SIZE;
			}

			var maxScrollX = Math.max(0, scrollContentWidth - props.width);
			var maxScrollY = Math.max(0, scrollContentHeight - bodyHeight);
			scrollX = Math.min(scrollX, maxScrollX);
			scrollY = Math.min(scrollY, maxScrollY);

			if (!maxScrollY) {
				// no vertical scrollbar necessary, use the totals we tracked so we
				// can shrink-to-fit vertically
				if (useMaxHeight) {
					height = totalHeightNeeded;
				}
				bodyHeight = totalHeightNeeded - totalHeightReserved;
			}

			this._scrollHelper.setViewportHeight(bodyHeight);

			// The order of elements in this object metters and bringing bodyHeight,
			// height or useGroupHeader to the top can break various features
			var newState = _extends({
				isColumnResizing: oldState && oldState.isColumnResizing
			}, columnInfo, props, {

				columns: columns,
				columnGroups: columnGroups,
				columnResizingData: columnResizingData,
				firstRowIndex: firstRowIndex,
				firstRowOffset: firstRowOffset,
				horizontalScrollbarVisible: horizontalScrollbarVisible,
				maxScrollX: maxScrollX,
				maxScrollY: maxScrollY,
				reservedHeight: totalHeightReserved,
				scrollContentHeight: scrollContentHeight,
				scrollX: scrollX,
				scrollY: scrollY,

				// These properties may overwrite properties defined in
				// columnInfo and props
				bodyHeight: bodyHeight,
				height: height,
				groupHeaderHeight: groupHeaderHeight,
				useGroupHeader: useGroupHeader
			});

			return newState;
		},

		_selectColumnElement: function _selectColumnElement( /*string*/type, /*array*/columns) /*array*/{
			var newColumns = [];
			for (var i = 0; i < columns.length; ++i) {
				var column = columns[i];
				newColumns.push(React.cloneElement(column, {
					cell: type ? column.props[type] : column.props[CELL]
				}));
			}
			return newColumns;
		},

		_splitColumnTypes: function _splitColumnTypes( /*array*/columns) /*object*/{
			var fixedColumns = [];
			var scrollableColumns = [];
			for (var i = 0; i < columns.length; ++i) {
				if (columns[i].props.fixed) {
					fixedColumns.push(columns[i]);
				} else {
					scrollableColumns.push(columns[i]);
				}
			}
			return {
				fixed: fixedColumns,
				scrollable: scrollableColumns
			};
		},

		_onWheel: function _onWheel( /*number*/deltaX, /*number*/deltaY) {
			if (this.isMounted()) {
				if (!this._isScrolling) {
					this._didScrollStart();
				}
				var x = this.state.scrollX;
				if (Math.abs(deltaY) > Math.abs(deltaX) && this.props.overflowY !== 'hidden') {
					var scrollState = this._scrollHelper.scrollBy(Math.round(deltaY));
					var maxScrollY = Math.max(0, scrollState.contentHeight - this.state.bodyHeight);
					this.setState({
						firstRowIndex: scrollState.index,
						firstRowOffset: scrollState.offset,
						scrollY: scrollState.position,
						scrollContentHeight: scrollState.contentHeight,
						maxScrollY: maxScrollY
					});
				} else if (deltaX && this.props.overflowX !== 'hidden') {
					x += deltaX;
					x = x < 0 ? 0 : x;
					x = x > this.state.maxScrollX ? this.state.maxScrollX : x;
					this.setState({
						scrollX: x
					});
				}

				this._didScrollStop();
			}
		},

		_onHorizontalScroll: function _onHorizontalScroll( /*number*/scrollPos) {
			if (this.isMounted() && scrollPos !== this.state.scrollX) {
				if (!this._isScrolling) {
					this._didScrollStart();
				}
				this.setState({
					scrollX: scrollPos
				});
				this._didScrollStop();
			}
		},

		_onVerticalScroll: function _onVerticalScroll( /*number*/scrollPos) {
			if (this.isMounted() && scrollPos !== this.state.scrollY) {
				if (!this._isScrolling) {
					this._didScrollStart();
				}
				var scrollState = this._scrollHelper.scrollTo(Math.round(scrollPos));
				this.setState({
					firstRowIndex: scrollState.index,
					firstRowOffset: scrollState.offset,
					scrollY: scrollState.position,
					scrollContentHeight: scrollState.contentHeight
				});
				this._didScrollStop();
			}
		},

		_didScrollStart: function _didScrollStart() {
			if (this.isMounted() && !this._isScrolling) {
				this._isScrolling = true;
				if (this.props.onScrollStart) {
					this.props.onScrollStart(this.state.scrollX, this.state.scrollY);
				}
			}
		},

		_didScrollStop: function _didScrollStop() {
			if (this.isMounted() && this._isScrolling) {
				this._isScrolling = false;
				this.setState({ redraw: true });
				if (this.props.onScrollEnd) {
					this.props.onScrollEnd(this.state.scrollX, this.state.scrollY);
				}
			}
		}
	});

	var HorizontalScrollbar = React.createClass({
		displayName: 'HorizontalScrollbar',

		mixins: [ReactComponentWithPureRenderMixin],
		propTypes: {
			contentSize: PropTypes.number.isRequired,
			offset: PropTypes.number.isRequired,
			onScroll: PropTypes.func.isRequired,
			position: PropTypes.number.isRequired,
			size: PropTypes.number.isRequired
		},

		render: function render() /*object*/{
			var outerContainerStyle = {
				height: Scrollbar.SIZE,
				width: this.props.size
			};
			var innerContainerStyle = {
				height: Scrollbar.SIZE,
				position: 'absolute',
				overflow: 'hidden',
				width: this.props.size
			};
			translateDOMPositionXY(innerContainerStyle, 0, this.props.offset);

			return React.createElement(
				'div',
				{
					className: joinClasses(cx('fixedDataTableLayout/horizontalScrollbar'), cx('public/fixedDataTable/horizontalScrollbar')),
					style: outerContainerStyle },
				React.createElement(
					'div',
					{ style: innerContainerStyle },
					React.createElement(Scrollbar, _extends({}, this.props, {
						isOpaque: true,
						orientation: 'horizontal',
						offset: undefined
					}))
				)
			);
		}
	});

	module.exports = FixedDataTable;
// isColumnResizing should be overwritten by value from props if
// avaialble
},{"./FixedDataTableBufferedRows.react":16,"./FixedDataTableColumnResizeHandle.react":25,"./FixedDataTableRow.react":29,"./FixedDataTableScrollHelper":31,"./FixedDataTableWidthHelper":32,"./React":38,"./ReactComponentWithPureRenderMixin":39,"./ReactWheelHandler":41,"./Scrollbar.react":42,"./cx":48,"./debounceCore":49,"./emptyFunction":50,"./invariant":52,"./joinClasses":54,"./shallowEqual":58,"./translateDOMPositionXY":59}],28:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableRoot
 */

	'use strict';

	var FixedDataTable = require('./FixedDataTable.react');
	var FixedDataTableCellDefault = require('./FixedDataTableCellDefault.react');
	var FixedDataTableColumn = require('./FixedDataTableColumn.react');
	var FixedDataTableColumnGroup = require('./FixedDataTableColumnGroup.react');

	var FixedDataTableRoot = {
		Cell: FixedDataTableCellDefault,
		Column: FixedDataTableColumn,
		ColumnGroup: FixedDataTableColumnGroup,
		Table: FixedDataTable
	};

	FixedDataTableRoot.version = '0.6.3';
	module.exports = FixedDataTableRoot;
},{"./FixedDataTable.react":15,"./FixedDataTableCellDefault.react":18,"./FixedDataTableColumn.react":21,"./FixedDataTableColumnGroup.react":22}],29:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableRow.react
 * @typechecks
 */

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = require('./React');
	var FixedDataTableCellGroup = require('./FixedDataTableCellGroup.react');

	var cx = require('./cx');
	var joinClasses = require('./joinClasses');
	var translateDOMPositionXY = require('./translateDOMPositionXY');

	var PropTypes = React.PropTypes;

	/**
 * Component that renders the row for <FixedDataTable />.
 * This component should not be used directly by developer. Instead,
 * only <FixedDataTable /> should use the component internally.
 */
	var FixedDataTableRowImpl = React.createClass({
		displayName: 'FixedDataTableRowImpl',

		propTypes: {

			isScrolling: PropTypes.bool,

			/**
     * Array of <FixedDataTableColumn /> for the fixed columns.
     */
			fixedColumns: PropTypes.array.isRequired,

			/**
     * Height of the row.
     */
			height: PropTypes.number.isRequired,

			/**
     * The row index.
     */
			index: PropTypes.number.isRequired,

			/**
     * Array of <FixedDataTableColumn /> for the scrollable columns.
     */
			scrollableColumns: PropTypes.array.isRequired,

			/**
     * The distance between the left edge of the table and the leftmost portion
     * of the row currently visible in the table.
     */
			scrollLeft: PropTypes.number.isRequired,

			/**
     * Width of the row.
     */
			width: PropTypes.number.isRequired,

			/**
     * Fire when a row is clicked.
     */
			onClick: PropTypes.func,

			/**
     * Fire when a row is double clicked.
     */
			onDoubleClick: PropTypes.func,

			/**
     * Callback for when resizer knob (in FixedDataTableCell) is clicked
     * to initialize resizing. Please note this is only on the cells
     * in the header.
     * @param number combinedWidth
     * @param number leftOffset
     * @param number cellWidth
     * @param number|string columnKey
     * @param object event
     */
			onColumnResize: PropTypes.func
		},

		render: function render() /*object*/{
			var style = {
				width: this.props.width,
				height: this.props.height
			};

			var className = cx({
				'fixedDataTableRowLayout/main': true,
				'public/fixedDataTableRow/main': true,
				'public/fixedDataTableRow/highlighted': this.props.index % 2 === 1,
				'public/fixedDataTableRow/odd': this.props.index % 2 === 1,
				'public/fixedDataTableRow/even': this.props.index % 2 === 0
			});

			var fixedColumnsWidth = this._getColumnsWidth(this.props.fixedColumns);
			var fixedColumns = React.createElement(FixedDataTableCellGroup, {
				key: 'fixed_cells',
				isScrolling: this.props.isScrolling,
				height: this.props.height,
				left: 0,
				width: fixedColumnsWidth,
				zIndex: 2,
				columns: this.props.fixedColumns,
				onColumnResize: this.props.onColumnResize,
				rowHeight: this.props.height,
				rowIndex: this.props.index
			});
			var columnsShadow = this._renderColumnsShadow(fixedColumnsWidth);
			var scrollableColumns = React.createElement(FixedDataTableCellGroup, {
				key: 'scrollable_cells',
				isScrolling: this.props.isScrolling,
				height: this.props.height,
				left: this.props.scrollLeft,
				offsetLeft: fixedColumnsWidth,
				width: this.props.width - fixedColumnsWidth,
				zIndex: 0,
				columns: this.props.scrollableColumns,
				onColumnResize: this.props.onColumnResize,
				rowHeight: this.props.height,
				rowIndex: this.props.index
			});

			return React.createElement(
				'div',
				{
					className: joinClasses(className, this.props.className),
					onClick: this.props.onClick ? this._onClick : null,
					onDoubleClick: this.props.onDoubleClick ? this._onDoubleClick : null,
					onMouseDown: this.props.onMouseDown ? this._onMouseDown : null,
					onMouseEnter: this.props.onMouseEnter ? this._onMouseEnter : null,
					onMouseLeave: this.props.onMouseLeave ? this._onMouseLeave : null,
					style: style },
				React.createElement(
					'div',
					{ className: cx('fixedDataTableRowLayout/body') },
					fixedColumns,
					scrollableColumns,
					columnsShadow
				)
			);
		},

		_getColumnsWidth: function _getColumnsWidth( /*array*/columns) /*number*/{
			var width = 0;
			for (var i = 0; i < columns.length; ++i) {
				width += columns[i].props.width;
			}
			return width;
		},

		_renderColumnsShadow: function _renderColumnsShadow( /*number*/left) /*?object*/{
			if (left > 0) {
				var className = cx({
					'fixedDataTableRowLayout/fixedColumnsDivider': true,
					'fixedDataTableRowLayout/columnsShadow': this.props.scrollLeft > 0,
					'public/fixedDataTableRow/fixedColumnsDivider': true,
					'public/fixedDataTableRow/columnsShadow': this.props.scrollLeft > 0
				});
				var style = {
					left: left,
					height: this.props.height
				};
				return React.createElement('div', { className: className, style: style });
			}
		},

		_onClick: function _onClick( /*object*/event) {
			this.props.onClick(event, this.props.index);
		},

		_onDoubleClick: function _onDoubleClick( /*object*/event) {
			this.props.onDoubleClick(event, this.props.index);
		},

		_onMouseDown: function _onMouseDown( /*object*/event) {
			this.props.onMouseDown(event, this.props.index);
		},

		_onMouseEnter: function _onMouseEnter( /*object*/event) {
			this.props.onMouseEnter(event, this.props.index);
		},

		_onMouseLeave: function _onMouseLeave( /*object*/event) {
			this.props.onMouseLeave(event, this.props.index);
		}
	});

	var FixedDataTableRow = React.createClass({
		displayName: 'FixedDataTableRow',

		propTypes: {

			isScrolling: PropTypes.bool,

			/**
     * Height of the row.
     */
			height: PropTypes.number.isRequired,

			/**
     * Z-index on which the row will be displayed. Used e.g. for keeping
     * header and footer in front of other rows.
     */
			zIndex: PropTypes.number,

			/**
     * The vertical position where the row should render itself
     */
			offsetTop: PropTypes.number.isRequired,

			/**
     * Width of the row.
     */
			width: PropTypes.number.isRequired
		},

		render: function render() /*object*/{
			var style = {
				width: this.props.width,
				height: this.props.height,
				zIndex: this.props.zIndex ? this.props.zIndex : 0
			};
			translateDOMPositionXY(style, 0, this.props.offsetTop);

			return React.createElement(
				'div',
				{
					style: style,
					className: cx('fixedDataTableRowLayout/rowWrapper') },
				React.createElement(FixedDataTableRowImpl, _extends({}, this.props, {
					offsetTop: undefined,
					zIndex: undefined
				}))
			);
		}
	});

	module.exports = FixedDataTableRow;
},{"./FixedDataTableCellGroup.react":19,"./React":38,"./cx":48,"./joinClasses":54,"./translateDOMPositionXY":59}],30:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableRowBuffer
 * @typechecks
 */

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var IntegerBufferSet = require('./IntegerBufferSet');

	var clamp = require('./clamp');
	var invariant = require('./invariant');
	var MIN_BUFFER_ROWS = 3;
	var MAX_BUFFER_ROWS = 6;

	// FixedDataTableRowBuffer is a helper class that executes row buffering
	// logic for FixedDataTable. It figures out which rows should be rendered
	// and in which positions.

	var FixedDataTableRowBuffer = (function () {
		function FixedDataTableRowBuffer(
			/*number*/rowsCount,
			/*number*/defaultRowHeight,
			/*number*/viewportHeight,
			/*?function*/rowHeightGetter) {
			_classCallCheck(this, FixedDataTableRowBuffer);

			invariant(defaultRowHeight !== 0, "defaultRowHeight musn't be equal 0 in FixedDataTableRowBuffer");

			this._bufferSet = new IntegerBufferSet();
			this._defaultRowHeight = defaultRowHeight;
			this._viewportRowsBegin = 0;
			this._viewportRowsEnd = 0;
			this._maxVisibleRowCount = Math.ceil(viewportHeight / defaultRowHeight) + 1;
			this._bufferRowsCount = clamp(Math.floor(this._maxVisibleRowCount / 2), MIN_BUFFER_ROWS, MAX_BUFFER_ROWS);
			this._rowsCount = rowsCount;
			this._rowHeightGetter = rowHeightGetter;
			this._rows = [];
			this._viewportHeight = viewportHeight;

			this.getRows = this.getRows.bind(this);
			this.getRowsWithUpdatedBuffer = this.getRowsWithUpdatedBuffer.bind(this);
		}

		_createClass(FixedDataTableRowBuffer, [{
			key: 'getRowsWithUpdatedBuffer',
			value: function getRowsWithUpdatedBuffer() /*array*/{
				var remainingBufferRows = 2 * this._bufferRowsCount;
				var bufferRowIndex = Math.max(this._viewportRowsBegin - this._bufferRowsCount, 0);
				while (bufferRowIndex < this._viewportRowsBegin) {
					this._addRowToBuffer(bufferRowIndex, this._viewportRowsBegin, this._viewportRowsEnd - 1);
					bufferRowIndex++;
					remainingBufferRows--;
				}
				bufferRowIndex = this._viewportRowsEnd;
				while (bufferRowIndex < this._rowsCount && remainingBufferRows > 0) {
					this._addRowToBuffer(bufferRowIndex, this._viewportRowsBegin, this._viewportRowsEnd - 1);
					bufferRowIndex++;
					remainingBufferRows--;
				}
				return this._rows;
			}
		}, {
			key: 'getRows',
			value: function getRows(
				/*number*/firstRowIndex,
				/*number*/firstRowOffset) /*array*/{
				var top = firstRowOffset;
				var totalHeight = top;
				var rowIndex = firstRowIndex;
				var endIndex = Math.min(firstRowIndex + this._maxVisibleRowCount, this._rowsCount);

				this._viewportRowsBegin = firstRowIndex;
				while (rowIndex < endIndex || totalHeight < this._viewportHeight && rowIndex < this._rowsCount) {
					this._addRowToBuffer(rowIndex, firstRowIndex, endIndex - 1);
					totalHeight += this._rowHeightGetter(rowIndex);
					++rowIndex;
					// Store index after the last viewport row as end, to be able to
					// distinguish when there are no rows rendered in viewport
					this._viewportRowsEnd = rowIndex;
				}

				return this._rows;
			}
		}, {
			key: '_addRowToBuffer',
			value: function _addRowToBuffer(
				/*number*/rowIndex,
				/*number*/firstViewportRowIndex,
				/*number*/lastViewportRowIndex) {
				var rowPosition = this._bufferSet.getValuePosition(rowIndex);
				var viewportRowsCount = lastViewportRowIndex - firstViewportRowIndex + 1;
				var allowedRowsCount = viewportRowsCount + this._bufferRowsCount * 2;
				if (rowPosition === null && this._bufferSet.getSize() >= allowedRowsCount) {
					rowPosition = this._bufferSet.replaceFurthestValuePosition(firstViewportRowIndex, lastViewportRowIndex, rowIndex);
				}
				if (rowPosition === null) {
					// We can't reuse any of existing positions for this row. We have to
					// create new position
					rowPosition = this._bufferSet.getNewPositionForValue(rowIndex);
					this._rows[rowPosition] = rowIndex;
				} else {
					// This row already is in the table with rowPosition position or it
					// can replace row that is in that position
					this._rows[rowPosition] = rowIndex;
				}
			}
		}]);

		return FixedDataTableRowBuffer;
	})();

	module.exports = FixedDataTableRowBuffer;
},{"./IntegerBufferSet":34,"./clamp":46,"./invariant":52}],31:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableScrollHelper
 * @typechecks
 */

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var PrefixIntervalTree = require('./PrefixIntervalTree');
	var clamp = require('./clamp');

	var BUFFER_ROWS = 5;
	var NO_ROWS_SCROLL_RESULT = {
		index: 0,
		offset: 0,
		position: 0,
		contentHeight: 0
	};

	var FixedDataTableScrollHelper = (function () {
		function FixedDataTableScrollHelper(
			/*number*/rowCount,
			/*number*/defaultRowHeight,
			/*number*/viewportHeight,
			/*?function*/rowHeightGetter) {
			_classCallCheck(this, FixedDataTableScrollHelper);

			this._rowOffsets = PrefixIntervalTree.uniform(rowCount, defaultRowHeight);
			this._storedHeights = new Array(rowCount);
			for (var i = 0; i < rowCount; ++i) {
				this._storedHeights[i] = defaultRowHeight;
			}
			this._rowCount = rowCount;
			this._position = 0;
			this._contentHeight = rowCount * defaultRowHeight;
			this._defaultRowHeight = defaultRowHeight;
			this._rowHeightGetter = rowHeightGetter ? rowHeightGetter : function () {
				return defaultRowHeight;
			};
			this._viewportHeight = viewportHeight;
			this.scrollRowIntoView = this.scrollRowIntoView.bind(this);
			this.setViewportHeight = this.setViewportHeight.bind(this);
			this.scrollBy = this.scrollBy.bind(this);
			this.scrollTo = this.scrollTo.bind(this);
			this.scrollToRow = this.scrollToRow.bind(this);
			this.setRowHeightGetter = this.setRowHeightGetter.bind(this);
			this.getContentHeight = this.getContentHeight.bind(this);
			this.getRowPosition = this.getRowPosition.bind(this);

			this._updateHeightsInViewport(0, 0);
		}

		_createClass(FixedDataTableScrollHelper, [{
			key: 'setRowHeightGetter',
			value: function setRowHeightGetter( /*function*/rowHeightGetter) {
				this._rowHeightGetter = rowHeightGetter;
			}
		}, {
			key: 'setViewportHeight',
			value: function setViewportHeight( /*number*/viewportHeight) {
				this._viewportHeight = viewportHeight;
			}
		}, {
			key: 'getContentHeight',
			value: function getContentHeight() /*number*/{
				return this._contentHeight;
			}
		}, {
			key: '_updateHeightsInViewport',
			value: function _updateHeightsInViewport(
				/*number*/firstRowIndex,
				/*number*/firstRowOffset) {
				var top = firstRowOffset;
				var index = firstRowIndex;
				while (top <= this._viewportHeight && index < this._rowCount) {
					this._updateRowHeight(index);
					top += this._storedHeights[index];
					index++;
				}
			}
		}, {
			key: '_updateHeightsAboveViewport',
			value: function _updateHeightsAboveViewport( /*number*/firstRowIndex) {
				var index = firstRowIndex - 1;
				while (index >= 0 && index >= firstRowIndex - BUFFER_ROWS) {
					var delta = this._updateRowHeight(index);
					this._position += delta;
					index--;
				}
			}
		}, {
			key: '_updateRowHeight',
			value: function _updateRowHeight( /*number*/rowIndex) /*number*/{
				if (rowIndex < 0 || rowIndex >= this._rowCount) {
					return 0;
				}
				var newHeight = this._rowHeightGetter(rowIndex);
				if (newHeight !== this._storedHeights[rowIndex]) {
					var change = newHeight - this._storedHeights[rowIndex];
					this._rowOffsets.set(rowIndex, newHeight);
					this._storedHeights[rowIndex] = newHeight;
					this._contentHeight += change;
					return change;
				}
				return 0;
			}
		}, {
			key: 'getRowPosition',
			value: function getRowPosition( /*number*/rowIndex) /*number*/{
				this._updateRowHeight(rowIndex);
				return this._rowOffsets.sumUntil(rowIndex);
			}
		}, {
			key: 'scrollBy',
			value: function scrollBy( /*number*/delta) /*object*/{
				if (this._rowCount === 0) {
					return NO_ROWS_SCROLL_RESULT;
				}
				var firstRow = this._rowOffsets.greatestLowerBound(this._position);
				firstRow = clamp(firstRow, 0, Math.max(this._rowCount - 1, 0));
				var firstRowPosition = this._rowOffsets.sumUntil(firstRow);
				var rowIndex = firstRow;
				var position = this._position;

				var rowHeightChange = this._updateRowHeight(rowIndex);
				if (firstRowPosition !== 0) {
					position += rowHeightChange;
				}
				var visibleRowHeight = this._storedHeights[rowIndex] - (position - firstRowPosition);

				if (delta >= 0) {

					while (delta > 0 && rowIndex < this._rowCount) {
						if (delta < visibleRowHeight) {
							position += delta;
							delta = 0;
						} else {
							delta -= visibleRowHeight;
							position += visibleRowHeight;
							rowIndex++;
						}
						if (rowIndex < this._rowCount) {
							this._updateRowHeight(rowIndex);
							visibleRowHeight = this._storedHeights[rowIndex];
						}
					}
				} else if (delta < 0) {
					delta = -delta;
					var invisibleRowHeight = this._storedHeights[rowIndex] - visibleRowHeight;

					while (delta > 0 && rowIndex >= 0) {
						if (delta < invisibleRowHeight) {
							position -= delta;
							delta = 0;
						} else {
							position -= invisibleRowHeight;
							delta -= invisibleRowHeight;
							rowIndex--;
						}
						if (rowIndex >= 0) {
							var change = this._updateRowHeight(rowIndex);
							invisibleRowHeight = this._storedHeights[rowIndex];
							position += change;
						}
					}
				}

				var maxPosition = this._contentHeight - this._viewportHeight;
				position = clamp(position, 0, maxPosition);
				this._position = position;
				var firstRowIndex = this._rowOffsets.greatestLowerBound(position);
				firstRowIndex = clamp(firstRowIndex, 0, Math.max(this._rowCount - 1, 0));
				firstRowPosition = this._rowOffsets.sumUntil(firstRowIndex);
				var firstRowOffset = firstRowPosition - position;

				this._updateHeightsInViewport(firstRowIndex, firstRowOffset);
				this._updateHeightsAboveViewport(firstRowIndex);

				return {
					index: firstRowIndex,
					offset: firstRowOffset,
					position: this._position,
					contentHeight: this._contentHeight
				};
			}
		}, {
			key: '_getRowAtEndPosition',
			value: function _getRowAtEndPosition( /*number*/rowIndex) /*number*/{
				// We need to update enough rows above the selected one to be sure that when
				// we scroll to selected position all rows between first shown and selected
				// one have most recent heights computed and will not resize
				this._updateRowHeight(rowIndex);
				var currentRowIndex = rowIndex;
				var top = this._storedHeights[currentRowIndex];
				while (top < this._viewportHeight && currentRowIndex >= 0) {
					currentRowIndex--;
					if (currentRowIndex >= 0) {
						this._updateRowHeight(currentRowIndex);
						top += this._storedHeights[currentRowIndex];
					}
				}
				var position = this._rowOffsets.sumTo(rowIndex) - this._viewportHeight;
				if (position < 0) {
					position = 0;
				}
				return position;
			}
		}, {
			key: 'scrollTo',
			value: function scrollTo( /*number*/position) /*object*/{
				if (this._rowCount === 0) {
					return NO_ROWS_SCROLL_RESULT;
				}
				if (position <= 0) {
					// If position less than or equal to 0 first row should be fully visible
					// on top
					this._position = 0;
					this._updateHeightsInViewport(0, 0);

					return {
						index: 0,
						offset: 0,
						position: this._position,
						contentHeight: this._contentHeight
					};
				} else if (position >= this._contentHeight - this._viewportHeight) {
					// If position is equal to or greater than max scroll value, we need
					// to make sure to have bottom border of last row visible.
					var rowIndex = this._rowCount - 1;
					position = this._getRowAtEndPosition(rowIndex);
				}
				this._position = position;

				var firstRowIndex = this._rowOffsets.greatestLowerBound(position);
				firstRowIndex = clamp(firstRowIndex, 0, Math.max(this._rowCount - 1, 0));
				var firstRowPosition = this._rowOffsets.sumUntil(firstRowIndex);
				var firstRowOffset = firstRowPosition - position;

				this._updateHeightsInViewport(firstRowIndex, firstRowOffset);
				this._updateHeightsAboveViewport(firstRowIndex);

				return {
					index: firstRowIndex,
					offset: firstRowOffset,
					position: this._position,
					contentHeight: this._contentHeight
				};
			}

			/**
     * Allows to scroll to selected row with specified offset. It always
     * brings that row to top of viewport with that offset
     */
		}, {
			key: 'scrollToRow',
			value: function scrollToRow( /*number*/rowIndex, /*number*/offset) /*object*/{
				rowIndex = clamp(rowIndex, 0, Math.max(this._rowCount - 1, 0));
				offset = clamp(offset, -this._storedHeights[rowIndex], 0);
				var firstRow = this._rowOffsets.sumUntil(rowIndex);
				return this.scrollTo(firstRow - offset);
			}

			/**
     * Allows to scroll to selected row by bringing it to viewport with minimal
     * scrolling. This that if row is fully visible, scroll will not be changed.
     * If top border of row is above top of viewport it will be scrolled to be
     * fully visible on the top of viewport. If the bottom border of row is
     * below end of viewport, it will be scrolled up to be fully visible on the
     * bottom of viewport.
     */
		}, {
			key: 'scrollRowIntoView',
			value: function scrollRowIntoView( /*number*/rowIndex) /*object*/{
				rowIndex = clamp(rowIndex, 0, Math.max(this._rowCount - 1, 0));
				var rowBegin = this._rowOffsets.sumUntil(rowIndex);
				var rowEnd = rowBegin + this._storedHeights[rowIndex];
				if (rowBegin < this._position) {
					return this.scrollTo(rowBegin);
				} else if (this._position + this._viewportHeight < rowEnd) {
					var position = this._getRowAtEndPosition(rowIndex);
					return this.scrollTo(position);
				}
				return this.scrollTo(this._position);
			}
		}]);

		return FixedDataTableScrollHelper;
	})();

	module.exports = FixedDataTableScrollHelper;
},{"./PrefixIntervalTree":37,"./clamp":46}],32:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableWidthHelper
 * @typechecks
 */

	'use strict';

	var React = require('./React');

	function getTotalWidth( /*array*/columns) /*number*/{
		var totalWidth = 0;
		for (var i = 0; i < columns.length; ++i) {
			totalWidth += columns[i].props.width;
		}
		return totalWidth;
	}

	function getTotalFlexGrow( /*array*/columns) /*number*/{
		var totalFlexGrow = 0;
		for (var i = 0; i < columns.length; ++i) {
			totalFlexGrow += columns[i].props.flexGrow || 0;
		}
		return totalFlexGrow;
	}

	function distributeFlexWidth(
		/*array*/columns,
		/*number*/flexWidth) /*object*/{
		if (flexWidth <= 0) {
			return {
				columns: columns,
				width: getTotalWidth(columns)
			};
		}
		var remainingFlexGrow = getTotalFlexGrow(columns);
		var remainingFlexWidth = flexWidth;
		var newColumns = [];
		var totalWidth = 0;
		for (var i = 0; i < columns.length; ++i) {
			var column = columns[i];
			if (!column.props.flexGrow) {
				totalWidth += column.props.width;
				newColumns.push(column);
				continue;
			}
			var columnFlexWidth = Math.floor(column.props.flexGrow / remainingFlexGrow * remainingFlexWidth);
			var newColumnWidth = Math.floor(column.props.width + columnFlexWidth);
			totalWidth += newColumnWidth;

			remainingFlexGrow -= column.props.flexGrow;
			remainingFlexWidth -= columnFlexWidth;

			newColumns.push(React.cloneElement(column, { width: newColumnWidth }));
		}

		return {
			columns: newColumns,
			width: totalWidth
		};
	}

	function adjustColumnGroupWidths(
		/*array*/columnGroups,
		/*number*/expectedWidth) /*object*/{
		var allColumns = [];
		var i;
		for (i = 0; i < columnGroups.length; ++i) {
			React.Children.forEach(columnGroups[i].props.children, function (column) {
				allColumns.push(column);
			});
		}
		var columnsWidth = getTotalWidth(allColumns);
		var remainingFlexGrow = getTotalFlexGrow(allColumns);
		var remainingFlexWidth = Math.max(expectedWidth - columnsWidth, 0);

		var newAllColumns = [];
		var newColumnGroups = [];

		for (i = 0; i < columnGroups.length; ++i) {
			var columnGroup = columnGroups[i];
			var currentColumns = [];

			React.Children.forEach(columnGroup.props.children, function (column) {
				currentColumns.push(column);
			});

			var columnGroupFlexGrow = getTotalFlexGrow(currentColumns);
			var columnGroupFlexWidth = Math.floor(columnGroupFlexGrow / remainingFlexGrow * remainingFlexWidth);

			var newColumnSettings = distributeFlexWidth(currentColumns, columnGroupFlexWidth);

			remainingFlexGrow -= columnGroupFlexGrow;
			remainingFlexWidth -= columnGroupFlexWidth;

			for (var j = 0; j < newColumnSettings.columns.length; ++j) {
				newAllColumns.push(newColumnSettings.columns[j]);
			}

			newColumnGroups.push(React.cloneElement(columnGroup, { width: newColumnSettings.width }));
		}

		return {
			columns: newAllColumns,
			columnGroups: newColumnGroups
		};
	}

	function adjustColumnWidths(
		/*array*/columns,
		/*number*/expectedWidth) /*array*/{
		var columnsWidth = getTotalWidth(columns);
		if (columnsWidth < expectedWidth) {
			return distributeFlexWidth(columns, expectedWidth - columnsWidth).columns;
		}
		return columns;
	}

	var FixedDataTableWidthHelper = {
		getTotalWidth: getTotalWidth,
		getTotalFlexGrow: getTotalFlexGrow,
		distributeFlexWidth: distributeFlexWidth,
		adjustColumnWidths: adjustColumnWidths,
		adjustColumnGroupWidths: adjustColumnGroupWidths
	};

	module.exports = FixedDataTableWidthHelper;
},{"./React":38}],33:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Heap
 * @typechecks
 * @preventMunge
 */

	'use strict';

	/*
 * @param {*} a
 * @param {*} b
 * @return {boolean}
 */

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function defaultComparator(a, b) {
		return a < b;
	}

	var Heap = (function () {
		function Heap(items, comparator) {
			_classCallCheck(this, Heap);

			this._items = items || [];
			this._size = this._items.length;
			this._comparator = comparator || defaultComparator;
			this._heapify();
		}

		/*
   * @return {boolean}
   */

		_createClass(Heap, [{
			key: 'empty',
			value: function empty() {
				return this._size === 0;
			}

			/*
     * @return {*}
     */
		}, {
			key: 'pop',
			value: function pop() {
				if (this._size === 0) {
					return;
				}

				var elt = this._items[0];

				var lastElt = this._items.pop();
				this._size--;

				if (this._size > 0) {
					this._items[0] = lastElt;
					this._sinkDown(0);
				}

				return elt;
			}

			/*
     * @param {*} item
     */
		}, {
			key: 'push',
			value: function push(item) {
				this._items[this._size++] = item;
				this._bubbleUp(this._size - 1);
			}

			/*
     * @return {number}
     */
		}, {
			key: 'size',
			value: function size() {
				return this._size;
			}

			/*
     * @return {*}
     */
		}, {
			key: 'peek',
			value: function peek() {
				if (this._size === 0) {
					return;
				}

				return this._items[0];
			}
		}, {
			key: '_heapify',
			value: function _heapify() {
				for (var index = Math.floor((this._size + 1) / 2); index >= 0; index--) {
					this._sinkDown(index);
				}
			}

			/*
     * @parent {number} index
     */
		}, {
			key: '_bubbleUp',
			value: function _bubbleUp(index) {
				var elt = this._items[index];
				while (index > 0) {
					var parentIndex = Math.floor((index + 1) / 2) - 1;
					var parentElt = this._items[parentIndex];

					// if parentElt < elt, stop
					if (this._comparator(parentElt, elt)) {
						return;
					}

					// swap
					this._items[parentIndex] = elt;
					this._items[index] = parentElt;
					index = parentIndex;
				}
			}

			/*
     * @parent {number} index
     */
		}, {
			key: '_sinkDown',
			value: function _sinkDown(index) {
				var elt = this._items[index];

				while (true) {
					var leftChildIndex = 2 * (index + 1) - 1;
					var rightChildIndex = 2 * (index + 1);
					var swapIndex = -1;

					if (leftChildIndex < this._size) {
						var leftChild = this._items[leftChildIndex];
						if (this._comparator(leftChild, elt)) {
							swapIndex = leftChildIndex;
						}
					}

					if (rightChildIndex < this._size) {
						var rightChild = this._items[rightChildIndex];
						if (this._comparator(rightChild, elt)) {
							if (swapIndex === -1 || this._comparator(rightChild, this._items[swapIndex])) {
								swapIndex = rightChildIndex;
							}
						}
					}

					// if we don't have a swap, stop
					if (swapIndex === -1) {
						return;
					}

					this._items[index] = this._items[swapIndex];
					this._items[swapIndex] = elt;
					index = swapIndex;
				}
			}
		}]);

		return Heap;
	})();

	module.exports = Heap;
},{}],34:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule IntegerBufferSet
 * @typechecks
 */

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var Heap = require('./Heap');

	var invariant = require('./invariant');

	// Data structure that allows to store values and assign positions to them
	// in a way to minimize changing positions of stored values when new ones are
	// added or when some values are replaced. Stored elements are alwasy assigned
	// a consecutive set of positoins startin from 0 up to count of elements less 1
	// Following actions can be executed
	// * get position assigned to given value (null if value is not stored)
	// * create new entry for new value and get assigned position back
	// * replace value that is furthest from specified value range with new value
	//   and get it's position back
	// All operations take amortized log(n) time where n is number of elements in
	// the set.

	var IntegerBufferSet = (function () {
		function IntegerBufferSet() {
			_classCallCheck(this, IntegerBufferSet);

			this._valueToPositionMap = {};
			this._size = 0;
			this._smallValues = new Heap([], // Initial data in the heap
				this._smallerComparator);
			this._largeValues = new Heap([], // Initial data in the heap
				this._greaterComparator);

			this.getNewPositionForValue = this.getNewPositionForValue.bind(this);
			this.getValuePosition = this.getValuePosition.bind(this);
			this.getSize = this.getSize.bind(this);
			this.replaceFurthestValuePosition = this.replaceFurthestValuePosition.bind(this);
		}

		_createClass(IntegerBufferSet, [{
			key: 'getSize',
			value: function getSize() /*number*/{
				return this._size;
			}
		}, {
			key: 'getValuePosition',
			value: function getValuePosition( /*number*/value) /*?number*/{
				if (this._valueToPositionMap[value] === undefined) {
					return null;
				}
				return this._valueToPositionMap[value];
			}
		}, {
			key: 'getNewPositionForValue',
			value: function getNewPositionForValue( /*number*/value) /*number*/{
				invariant(this._valueToPositionMap[value] === undefined, "Shouldn't try to find new position for value already stored in BufferSet");
				var newPosition = this._size;
				this._size++;
				this._pushToHeaps(newPosition, value);
				this._valueToPositionMap[value] = newPosition;
				return newPosition;
			}
		}, {
			key: 'replaceFurthestValuePosition',
			value: function replaceFurthestValuePosition(
				/*number*/lowValue,
				/*number*/highValue,
				/*number*/newValue) /*?number*/{
				invariant(this._valueToPositionMap[newValue] === undefined, "Shouldn't try to replace values with value already stored value in " + "BufferSet");

				this._cleanHeaps();
				if (this._smallValues.empty() || this._largeValues.empty()) {
					// Threre are currently no values stored. We will have to create new
					// position for this value.
					return null;
				}

				var minValue = this._smallValues.peek().value;
				var maxValue = this._largeValues.peek().value;
				if (minValue >= lowValue && maxValue <= highValue) {
					// All values currently stored are necessary, we can't reuse any of them.
					return null;
				}

				var valueToReplace;
				if (lowValue - minValue > maxValue - highValue) {
					// minValue is further from provided range. We will reuse it's position.
					valueToReplace = minValue;
					this._smallValues.pop();
				} else {
					valueToReplace = maxValue;
					this._largeValues.pop();
				}
				var position = this._valueToPositionMap[valueToReplace];
				delete this._valueToPositionMap[valueToReplace];
				this._valueToPositionMap[newValue] = position;
				this._pushToHeaps(position, newValue);

				return position;
			}
		}, {
			key: '_pushToHeaps',
			value: function _pushToHeaps( /*number*/position, /*number*/value) {
				var element = {
					position: position,
					value: value
				};
				// We can reuse the same object in both heaps, because we don't mutate them
				this._smallValues.push(element);
				this._largeValues.push(element);
			}
		}, {
			key: '_cleanHeaps',
			value: function _cleanHeaps() {
				// We not usually only remove object from one heap while moving value.
				// Here we make sure that there is no stale data on top of heaps.
				this._cleanHeap(this._smallValues);
				this._cleanHeap(this._largeValues);
				var minHeapSize = Math.min(this._smallValues.size(), this._largeValues.size());
				var maxHeapSize = Math.max(this._smallValues.size(), this._largeValues.size());
				if (maxHeapSize > 10 * minHeapSize) {
					// There are many old values in one of heaps. We nned to get rid of them
					// to not use too avoid memory leaks
					this._recreateHeaps();
				}
			}
		}, {
			key: '_recreateHeaps',
			value: function _recreateHeaps() {
				var sourceHeap = this._smallValues.size() < this._largeValues.size() ? this._smallValues : this._largeValues;
				var newSmallValues = new Heap([], // Initial data in the heap
					this._smallerComparator);
				var newLargeValues = new Heap([], // Initial datat in the heap
					this._greaterComparator);
				while (!sourceHeap.empty()) {
					var element = sourceHeap.pop();
					// Push all stil valid elements to new heaps
					if (this._valueToPositionMap[element.value] !== undefined) {
						newSmallValues.push(element);
						newLargeValues.push(element);
					}
				}
				this._smallValues = newSmallValues;
				this._largeValues = newLargeValues;
			}
		}, {
			key: '_cleanHeap',
			value: function _cleanHeap( /*object*/heap) {
				while (!heap.empty() && this._valueToPositionMap[heap.peek().value] === undefined) {
					heap.pop();
				}
			}
		}, {
			key: '_smallerComparator',
			value: function _smallerComparator( /*object*/lhs, /*object*/rhs) /*boolean*/{
				return lhs.value < rhs.value;
			}
		}, {
			key: '_greaterComparator',
			value: function _greaterComparator( /*object*/lhs, /*object*/rhs) /*boolean*/{
				return lhs.value > rhs.value;
			}
		}]);

		return IntegerBufferSet;
	})();

	module.exports = IntegerBufferSet;
},{"./Heap":33,"./invariant":52}],35:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Keys
 */

	"use strict";

	module.exports = {
		BACKSPACE: 8,
		TAB: 9,
		RETURN: 13,
		ALT: 18,
		ESC: 27,
		SPACE: 32,
		PAGE_UP: 33,
		PAGE_DOWN: 34,
		END: 35,
		HOME: 36,
		LEFT: 37,
		UP: 38,
		RIGHT: 39,
		DOWN: 40,
		DELETE: 46,
		COMMA: 188,
		PERIOD: 190,
		A: 65,
		Z: 90,
		ZERO: 48,
		NUMPAD_0: 96,
		NUMPAD_9: 105
	};
},{}],36:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Locale
 */

	"use strict";

	// Hard code this for now.
	var Locale = {
		isRTL: function isRTL() {
			return false;
		},
		getDirection: function getDirection() {
			return 'LTR';
		}
	};

	module.exports = Locale;
},{}],37:[function(require,module,exports){
	(function (global){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PrefixIntervalTree
 * 
 * @typechecks
 */

		'use strict';

		var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		var invariant = require('./invariant');

		var parent = function parent(node) {
			return Math.floor(node / 2);
		};

		var Int32Array = global.Int32Array || function (size) {
			var xs = [];
			for (var i = size - 1; i >= 0; --i) {
				xs[i] = 0;
			}
			return xs;
		};

		/**
 * Computes the next power of 2 after or equal to x.
 */
		function ceilLog2(x) {
			var y = 1;
			while (y < x) {
				y *= 2;
			}
			return y;
		}

		/**
 * A prefix interval tree stores an numeric array and the partial sums of that
 * array. It is optimized for updating the values of the array without
 * recomputing all of the partial sums.
 *
 *   - O(ln n) update
 *   - O(1) lookup
 *   - O(ln n) compute a partial sum
 *   - O(n) space
 *
 * Note that the sequence of partial sums is one longer than the array, so that
 * the first partial sum is always 0, and the last partial sum is the sum of the
 * entire array.
 */

		var PrefixIntervalTree = (function () {
			function PrefixIntervalTree(xs) {
				_classCallCheck(this, PrefixIntervalTree);

				this._size = xs.length;
				this._half = ceilLog2(this._size);
				this._heap = new Int32Array(2 * this._half);

				var i;
				for (i = 0; i < this._size; ++i) {
					this._heap[this._half + i] = xs[i];
				}

				for (i = this._half - 1; i > 0; --i) {
					this._heap[i] = this._heap[2 * i] + this._heap[2 * i + 1];
				}
			}

			_createClass(PrefixIntervalTree, [{
				key: 'set',
				value: function set(index, value) {
					invariant(0 <= index && index < this._size, 'Index out of range %s', index);

					var node = this._half + index;
					this._heap[node] = value;

					node = parent(node);
					for (; node !== 0; node = parent(node)) {
						this._heap[node] = this._heap[2 * node] + this._heap[2 * node + 1];
					}
				}
			}, {
				key: 'get',
				value: function get(index) {
					invariant(0 <= index && index < this._size, 'Index out of range %s', index);

					var node = this._half + index;
					return this._heap[node];
				}
			}, {
				key: 'getSize',
				value: function getSize() {
					return this._size;
				}

				/**
     * Returns the sum get(0) + get(1) + ... + get(end - 1).
     */
			}, {
				key: 'sumUntil',
				value: function sumUntil(end) {
					invariant(0 <= end && end < this._size + 1, 'Index out of range %s', end);

					if (end === 0) {
						return 0;
					}

					var node = this._half + end - 1;
					var sum = this._heap[node];
					for (; node !== 1; node = parent(node)) {
						if (node % 2 === 1) {
							sum += this._heap[node - 1];
						}
					}

					return sum;
				}

				/**
     * Returns the sum get(0) + get(1) + ... + get(inclusiveEnd).
     */
			}, {
				key: 'sumTo',
				value: function sumTo(inclusiveEnd) {
					invariant(0 <= inclusiveEnd && inclusiveEnd < this._size, 'Index out of range %s', inclusiveEnd);
					return this.sumUntil(inclusiveEnd + 1);
				}

				/**
     * Returns the sum get(begin) + get(begin + 1) + ... + get(end - 1).
     */
			}, {
				key: 'sum',
				value: function sum(begin, end) {
					invariant(begin <= end, 'Begin must precede end');
					return this.sumUntil(end) - this.sumUntil(begin);
				}

				/**
     * Returns the smallest i such that 0 <= i <= size and sumUntil(i) <= t, or
     * -1 if no such i exists.
     */
			}, {
				key: 'greatestLowerBound',
				value: function greatestLowerBound(t) {
					if (t < 0) {
						return -1;
					}

					var node = 1;
					if (this._heap[node] <= t) {
						return this._size;
					}

					while (node < this._half) {
						var leftSum = this._heap[2 * node];
						if (t < leftSum) {
							node = 2 * node;
						} else {
							node = 2 * node + 1;
							t -= leftSum;
						}
					}

					return node - this._half;
				}

				/**
     * Returns the smallest i such that 0 <= i <= size and sumUntil(i) < t, or
     * -1 if no such i exists.
     */
			}, {
				key: 'greatestStrictLowerBound',
				value: function greatestStrictLowerBound(t) {
					if (t <= 0) {
						return -1;
					}

					var node = 1;
					if (this._heap[node] < t) {
						return this._size;
					}

					while (node < this._half) {
						var leftSum = this._heap[2 * node];
						if (t <= leftSum) {
							node = 2 * node;
						} else {
							node = 2 * node + 1;
							t -= leftSum;
						}
					}

					return node - this._half;
				}

				/**
     * Returns the smallest i such that 0 <= i <= size and t <= sumUntil(i), or
     * size + 1 if no such i exists.
     */
			}, {
				key: 'leastUpperBound',
				value: function leastUpperBound(t) {
					return this.greatestStrictLowerBound(t) + 1;
				}

				/**
     * Returns the smallest i such that 0 <= i <= size and t < sumUntil(i), or
     * size + 1 if no such i exists.
     */
			}, {
				key: 'leastStrictUpperBound',
				value: function leastStrictUpperBound(t) {
					return this.greatestLowerBound(t) + 1;
				}
			}], [{
				key: 'uniform',
				value: function uniform(size, initialValue) {
					var xs = [];
					for (var i = size - 1; i >= 0; --i) {
						xs[i] = initialValue;
					}

					return new PrefixIntervalTree(xs);
				}
			}, {
				key: 'empty',
				value: function empty(size) {
					return PrefixIntervalTree.uniform(size, 0);
				}
			}]);

			return PrefixIntervalTree;
		})();

		module.exports = PrefixIntervalTree;

		/**
 * Number of elements in the array
 */

		/**
 * Half the size of the heap. It is also the number of non-leaf nodes, and the
 * index of the first element in the heap. Always a power of 2.
 */

		/**
 * Binary heap
 */
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{"./invariant":52}],38:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

	'use strict';

	module.exports = require('react');
},{"react":785}],39:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentWithPureRenderMixin
 */

	'use strict';

	/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
	function shallowEqual(objA, objB) {
		if (objA === objB) {
			return true;
		}
		var key;
		// Test for A's keys different from B.
		for (key in objA) {
			if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
				return false;
			}
		}
		// Test for B's keys missing from A.
		for (key in objB) {
			if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
				return false;
			}
		}
		return true;
	}

	/**
 * If your React component's render function is "pure", e.g. it will render the
 * same result given the same props and state, provide this Mixin for a
 * considerable performance boost.
 *
 * Most React components have pure render functions.
 *
 * Example:
 *
 *   var ReactComponentWithPureRenderMixin =
 *     require('ReactComponentWithPureRenderMixin');
 *   React.createClass({
 *     mixins: [ReactComponentWithPureRenderMixin],
 *
 *     render: function() {
 *       return <div className={this.props.className}>foo</div>;
 *     }
 *   });
 *
 * Note: This only checks shallow equality for props and state. If these contain
 * complex data structures this mixin may have false-negatives for deeper
 * differences. Only mixin to components which have simple props and state, or
 * use `forceUpdate()` when you know deep data structures have changed.
 */
	var ReactComponentWithPureRenderMixin = {
		shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
			return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
		}
	};

	module.exports = ReactComponentWithPureRenderMixin;
},{}],40:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

	'use strict';

	module.exports = require('react-dom');
},{"react-dom":616}],41:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * This is utility that hanlds onWheel events and calls provided wheel
 * callback with correct frame rate.
 *
 * @providesModule ReactWheelHandler
 * @typechecks
 */

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var emptyFunction = require('./emptyFunction');
	var normalizeWheel = require('./normalizeWheel');
	var requestAnimationFramePolyfill = require('./requestAnimationFramePolyfill');

	var ReactWheelHandler = (function () {
		/**
   * onWheel is the callback that will be called with right frame rate if
   * any wheel events happened
   * onWheel should is to be called with two arguments: deltaX and deltaY in
   * this order
   */

		function ReactWheelHandler(
			/*function*/onWheel,
			/*boolean|function*/handleScrollX,
			/*boolean|function*/handleScrollY,
			/*?boolean|?function*/stopPropagation) {
			_classCallCheck(this, ReactWheelHandler);

			this._animationFrameID = null;
			this._deltaX = 0;
			this._deltaY = 0;
			this._didWheel = this._didWheel.bind(this);
			if (typeof handleScrollX !== 'function') {
				handleScrollX = handleScrollX ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
			}

			if (typeof handleScrollY !== 'function') {
				handleScrollY = handleScrollY ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
			}

			if (typeof stopPropagation !== 'function') {
				stopPropagation = stopPropagation ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
			}

			this._handleScrollX = handleScrollX;
			this._handleScrollY = handleScrollY;
			this._stopPropagation = stopPropagation;
			this._onWheelCallback = onWheel;
			this.onWheel = this.onWheel.bind(this);
		}

		_createClass(ReactWheelHandler, [{
			key: 'onWheel',
			value: function onWheel( /*object*/event) {
				var normalizedEvent = normalizeWheel(event);
				var deltaX = this._deltaX + normalizedEvent.pixelX;
				var deltaY = this._deltaY + normalizedEvent.pixelY;
				var handleScrollX = this._handleScrollX(deltaX, deltaY);
				var handleScrollY = this._handleScrollY(deltaY, deltaX);
				if (!handleScrollX && !handleScrollY) {
					return;
				}

				this._deltaX += handleScrollX ? normalizedEvent.pixelX : 0;
				this._deltaY += handleScrollY ? normalizedEvent.pixelY : 0;
				event.preventDefault();

				var changed;
				if (this._deltaX !== 0 || this._deltaY !== 0) {
					if (this._stopPropagation()) {
						event.stopPropagation();
					}
					changed = true;
				}

				if (changed === true && this._animationFrameID === null) {
					this._animationFrameID = requestAnimationFramePolyfill(this._didWheel);
				}
			}
		}, {
			key: '_didWheel',
			value: function _didWheel() {
				this._animationFrameID = null;
				this._onWheelCallback(this._deltaX, this._deltaY);
				this._deltaX = 0;
				this._deltaY = 0;
			}
		}]);

		return ReactWheelHandler;
	})();

	module.exports = ReactWheelHandler;
},{"./emptyFunction":50,"./normalizeWheel":56,"./requestAnimationFramePolyfill":57}],42:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Scrollbar.react
 * @typechecks
 */

	'use strict';

	var DOMMouseMoveTracker = require('./DOMMouseMoveTracker');
	var Keys = require('./Keys');
	var React = require('./React');
	var ReactDOM = require('./ReactDOM');
	var ReactComponentWithPureRenderMixin = require('./ReactComponentWithPureRenderMixin');
	var ReactWheelHandler = require('./ReactWheelHandler');

	var cssVar = require('./cssVar');
	var cx = require('./cx');
	var emptyFunction = require('./emptyFunction');
	var translateDOMPositionXY = require('./translateDOMPositionXY');

	var PropTypes = React.PropTypes;

	var UNSCROLLABLE_STATE = {
		position: 0,
		scrollable: false
	};

	var FACE_MARGIN = parseInt(cssVar('scrollbar-face-margin'), 10);
	var FACE_MARGIN_2 = FACE_MARGIN * 2;
	var FACE_SIZE_MIN = 30;
	var KEYBOARD_SCROLL_AMOUNT = 40;

	var _lastScrolledScrollbar = null;

	var Scrollbar = React.createClass({
		displayName: 'Scrollbar',

		mixins: [ReactComponentWithPureRenderMixin],

		propTypes: {
			contentSize: PropTypes.number.isRequired,
			defaultPosition: PropTypes.number,
			isOpaque: PropTypes.bool,
			orientation: PropTypes.oneOf(['vertical', 'horizontal']),
			onScroll: PropTypes.func,
			position: PropTypes.number,
			size: PropTypes.number.isRequired,
			trackColor: PropTypes.oneOf(['gray']),
			zIndex: PropTypes.number,
			verticalTop: PropTypes.number
		},

		getInitialState: function getInitialState() /*object*/{
			var props = this.props;
			return this._calculateState(props.position || props.defaultPosition || 0, props.size, props.contentSize, props.orientation);
		},

		componentWillReceiveProps: function componentWillReceiveProps( /*object*/nextProps) {
			var controlledPosition = nextProps.position;
			if (controlledPosition === undefined) {
				this._setNextState(this._calculateState(this.state.position, nextProps.size, nextProps.contentSize, nextProps.orientation));
			} else {
				this._setNextState(this._calculateState(controlledPosition, nextProps.size, nextProps.contentSize, nextProps.orientation), nextProps);
			}
		},

		getDefaultProps: function getDefaultProps() /*object*/{
			return {
				defaultPosition: 0,
				isOpaque: false,
				onScroll: emptyFunction,
				orientation: 'vertical',
				zIndex: 99
			};
		},

		render: function render() /*?object*/{
			if (!this.state.scrollable) {
				return null;
			}

			var size = this.props.size;
			var mainStyle;
			var faceStyle;
			var isHorizontal = this.state.isHorizontal;
			var isVertical = !isHorizontal;
			var isActive = this.state.focused || this.state.isDragging;
			var faceSize = this.state.faceSize;
			var isOpaque = this.props.isOpaque;
			var verticalTop = this.props.verticalTop || 0;

			var mainClassName = cx({
				'ScrollbarLayout/main': true,
				'ScrollbarLayout/mainVertical': isVertical,
				'ScrollbarLayout/mainHorizontal': isHorizontal,
				'public/Scrollbar/main': true,
				'public/Scrollbar/mainOpaque': isOpaque,
				'public/Scrollbar/mainActive': isActive
			});

			var faceClassName = cx({
				'ScrollbarLayout/face': true,
				'ScrollbarLayout/faceHorizontal': isHorizontal,
				'ScrollbarLayout/faceVertical': isVertical,
				'public/Scrollbar/faceActive': isActive,
				'public/Scrollbar/face': true
			});

			var position = this.state.position * this.state.scale + FACE_MARGIN;

			if (isHorizontal) {
				mainStyle = {
					width: size
				};
				faceStyle = {
					width: faceSize - FACE_MARGIN_2
				};
				translateDOMPositionXY(faceStyle, position, 0);
			} else {
				mainStyle = {
					top: verticalTop,
					height: size
				};
				faceStyle = {
					height: faceSize - FACE_MARGIN_2
				};
				translateDOMPositionXY(faceStyle, 0, position);
			}

			mainStyle.zIndex = this.props.zIndex;

			if (this.props.trackColor === 'gray') {
				mainStyle.backgroundColor = cssVar('fbui-desktop-background-light');
			}

			return React.createElement(
				'div',
				{
					onFocus: this._onFocus,
					onBlur: this._onBlur,
					onKeyDown: this._onKeyDown,
					onMouseDown: this._onMouseDown,
					onWheel: this._wheelHandler.onWheel,
					className: mainClassName,
					style: mainStyle,
					tabIndex: 0 },
				React.createElement('div', {
					ref: 'face',
					className: faceClassName,
					style: faceStyle
				})
			);
		},

		componentWillMount: function componentWillMount() {
			var isHorizontal = this.props.orientation === 'horizontal';
			var onWheel = isHorizontal ? this._onWheelX : this._onWheelY;

			this._wheelHandler = new ReactWheelHandler(onWheel, this._shouldHandleX, // Should hanlde horizontal scroll
				this._shouldHandleY // Should handle vertical scroll
			);
		},

		componentDidMount: function componentDidMount() {
			this._mouseMoveTracker = new DOMMouseMoveTracker(this._onMouseMove, this._onMouseMoveEnd, document.documentElement);

			if (this.props.position !== undefined && this.state.position !== this.props.position) {
				this._didScroll();
			}
		},

		componentWillUnmount: function componentWillUnmount() {
			this._nextState = null;
			this._mouseMoveTracker.releaseMouseMoves();
			if (_lastScrolledScrollbar === this) {
				_lastScrolledScrollbar = null;
			}
			delete this._mouseMoveTracker;
		},

		scrollBy: function scrollBy( /*number*/delta) {
			this._onWheel(delta);
		},

		_shouldHandleX: function _shouldHandleX( /*number*/delta) /*boolean*/{
			return this.props.orientation === 'horizontal' ? this._shouldHandleChange(delta) : false;
		},

		_shouldHandleY: function _shouldHandleY( /*number*/delta) /*boolean*/{
			return this.props.orientation !== 'horizontal' ? this._shouldHandleChange(delta) : false;
		},

		_shouldHandleChange: function _shouldHandleChange( /*number*/delta) /*boolean*/{
			var nextState = this._calculateState(this.state.position + delta, this.props.size, this.props.contentSize, this.props.orientation);
			return nextState.position !== this.state.position;
		},

		_calculateState: function _calculateState(
			/*number*/position,
			/*number*/size,
			/*number*/contentSize,
			/*string*/orientation) /*object*/{
			if (size < 1 || contentSize <= size) {
				return UNSCROLLABLE_STATE;
			}

			var stateKey = position + '_' + size + '_' + contentSize + '_' + orientation;
			if (this._stateKey === stateKey) {
				return this._stateForKey;
			}

			// There are two types of positions here.
			// 1) Phisical position: changed by mouse / keyboard
			// 2) Logical position: changed by props.
			// The logical position will be kept as as internal state and the `render()`
			// function will translate it into physical position to render.

			var isHorizontal = orientation === 'horizontal';
			var scale = size / contentSize;
			var faceSize = size * scale;

			if (faceSize < FACE_SIZE_MIN) {
				scale = (size - FACE_SIZE_MIN) / (contentSize - size);
				faceSize = FACE_SIZE_MIN;
			}

			var scrollable = true;
			var maxPosition = contentSize - size;

			if (position < 0) {
				position = 0;
			} else if (position > maxPosition) {
				position = maxPosition;
			}

			var isDragging = this._mouseMoveTracker ? this._mouseMoveTracker.isDragging() : false;

			// This function should only return flat values that can be compared quiclky
			// by `ReactComponentWithPureRenderMixin`.
			var state = {
				faceSize: faceSize,
				isDragging: isDragging,
				isHorizontal: isHorizontal,
				position: position,
				scale: scale,
				scrollable: scrollable
			};

			// cache the state for later use.
			this._stateKey = stateKey;
			this._stateForKey = state;
			return state;
		},

		_onWheelY: function _onWheelY( /*number*/deltaX, /*number*/deltaY) {
			this._onWheel(deltaY);
		},

		_onWheelX: function _onWheelX( /*number*/deltaX, /*number*/deltaY) {
			this._onWheel(deltaX);
		},

		_onWheel: function _onWheel( /*number*/delta) {
			var props = this.props;

			// The mouse may move faster then the animation frame does.
			// Use `requestAnimationFrame` to avoid over-updating.
			this._setNextState(this._calculateState(this.state.position + delta, props.size, props.contentSize, props.orientation));
		},

		_onMouseDown: function _onMouseDown( /*object*/event) {
			var nextState;

			if (event.target !== ReactDOM.findDOMNode(this.refs.face)) {
				// Both `offsetX` and `layerX` are non-standard DOM property but they are
				// magically available for browsers somehow.
				var nativeEvent = event.nativeEvent;
				var position = this.state.isHorizontal ? nativeEvent.offsetX || nativeEvent.layerX : nativeEvent.offsetY || nativeEvent.layerY;

				// MouseDown on the scroll-track directly, move the center of the
				// scroll-face to the mouse position.
				var props = this.props;
				position /= this.state.scale;
				nextState = this._calculateState(position - this.state.faceSize * 0.5 / this.state.scale, props.size, props.contentSize, props.orientation);
			} else {
				nextState = {};
			}

			nextState.focused = true;
			this._setNextState(nextState);

			this._mouseMoveTracker.captureMouseMoves(event);
			// Focus the node so it may receive keyboard event.
			ReactDOM.findDOMNode(this).focus();
		},

		_onMouseMove: function _onMouseMove( /*number*/deltaX, /*number*/deltaY) {
			var props = this.props;
			var delta = this.state.isHorizontal ? deltaX : deltaY;
			delta /= this.state.scale;

			this._setNextState(this._calculateState(this.state.position + delta, props.size, props.contentSize, props.orientation));
		},

		_onMouseMoveEnd: function _onMouseMoveEnd() {
			this._nextState = null;
			this._mouseMoveTracker.releaseMouseMoves();
			this.setState({ isDragging: false });
		},

		_onKeyDown: function _onKeyDown( /*object*/event) {
			var keyCode = event.keyCode;

			if (keyCode === Keys.TAB) {
				// Let focus move off the scrollbar.
				return;
			}

			var distance = KEYBOARD_SCROLL_AMOUNT;
			var direction = 0;

			if (this.state.isHorizontal) {
				switch (keyCode) {
				case Keys.HOME:
					direction = -1;
					distance = this.props.contentSize;
					break;

				case Keys.LEFT:
					direction = -1;
					break;

				case Keys.RIGHT:
					direction = 1;
					break;

				default:
					return;
				}
			}

			if (!this.state.isHorizontal) {
				switch (keyCode) {
				case Keys.SPACE:
					if (event.shiftKey) {
						direction = -1;
					} else {
						direction = 1;
					}
					break;

				case Keys.HOME:
					direction = -1;
					distance = this.props.contentSize;
					break;

				case Keys.UP:
					direction = -1;
					break;

				case Keys.DOWN:
					direction = 1;
					break;

				case Keys.PAGE_UP:
					direction = -1;
					distance = this.props.size;
					break;

				case Keys.PAGE_DOWN:
					direction = 1;
					distance = this.props.size;
					break;

				default:
					return;
				}
			}

			event.preventDefault();

			var props = this.props;
			this._setNextState(this._calculateState(this.state.position + distance * direction, props.size, props.contentSize, props.orientation));
		},

		_onFocus: function _onFocus() {
			this.setState({
				focused: true
			});
		},

		_onBlur: function _onBlur() {
			this.setState({
				focused: false
			});
		},

		_blur: function _blur() {
			if (this.isMounted()) {
				try {
					this._onBlur();
					ReactDOM.findDOMNode(this).blur();
				} catch (oops) {
					// pass
				}
			}
		},

		_setNextState: function _setNextState( /*object*/nextState, /*?object*/props) {
			props = props || this.props;
			var controlledPosition = props.position;
			var willScroll = this.state.position !== nextState.position;
			if (controlledPosition === undefined) {
				var callback = willScroll ? this._didScroll : undefined;
				this.setState(nextState, callback);
			} else if (controlledPosition === nextState.position) {
				this.setState(nextState);
			} else {
				// Scrolling is controlled. Don't update the state and let the owner
				// to update the scrollbar instead.
				if (nextState.position !== undefined && nextState.position !== this.state.position) {
					this.props.onScroll(nextState.position);
				}
				return;
			}

			if (willScroll && _lastScrolledScrollbar !== this) {
				_lastScrolledScrollbar && _lastScrolledScrollbar._blur();
				_lastScrolledScrollbar = this;
			}
		},

		_didScroll: function _didScroll() {
			this.props.onScroll(this.state.position);
		}
	});

	Scrollbar.KEYBOARD_SCROLL_AMOUNT = KEYBOARD_SCROLL_AMOUNT;
	Scrollbar.SIZE = parseInt(cssVar('scrollbar-size'), 10);

	module.exports = Scrollbar;
},{"./DOMMouseMoveTracker":12,"./Keys":35,"./React":38,"./ReactComponentWithPureRenderMixin":39,"./ReactDOM":40,"./ReactWheelHandler":41,"./cssVar":47,"./cx":48,"./emptyFunction":50,"./translateDOMPositionXY":59}],43:[function(require,module,exports){
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule UserAgent_DEPRECATED
 */

	/**
 *  Provides entirely client-side User Agent and OS detection. You should prefer
 *  the non-deprecated UserAgent module when possible, which exposes our
 *  authoritative server-side PHP-based detection to the client.
 *
 *  Usage is straightforward:
 *
 *    if (UserAgent_DEPRECATED.ie()) {
 *      //  IE
 *    }
 *
 *  You can also do version checks:
 *
 *    if (UserAgent_DEPRECATED.ie() >= 7) {
 *      //  IE7 or better
 *    }
 *
 *  The browser functions will return NaN if the browser does not match, so
 *  you can also do version compares the other way:
 *
 *    if (UserAgent_DEPRECATED.ie() < 7) {
 *      //  IE6 or worse
 *    }
 *
 *  Note that the version is a float and may include a minor version number,
 *  so you should always use range operators to perform comparisons, not
 *  strict equality.
 *
 *  **Note:** You should **strongly** prefer capability detection to browser
 *  version detection where it's reasonable:
 *
 *    http://www.quirksmode.org/js/support.html
 *
 *  Further, we have a large number of mature wrapper functions and classes
 *  which abstract away many browser irregularities. Check the documentation,
 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
 *  another copy of "event || window.event".
 *
 */

	'use strict';

	var _populated = false;

	// Browsers
	var _ie, _firefox, _opera, _webkit, _chrome;

	// Actual IE browser for compatibility mode
	var _ie_real_version;

	// Platforms
	var _osx, _windows, _linux, _android;

	// Architectures
	var _win64;

	// Devices
	var _iphone, _ipad, _native;

	var _mobile;

	function _populate() {
		if (_populated) {
			return;
		}

		_populated = true;

		// To work around buggy JS libraries that can't handle multi-digit
		// version numbers, Opera 10's user agent string claims it's Opera
		// 9, then later includes a Version/X.Y field:
		//
		// Opera/9.80 (foo) Presto/2.2.15 Version/10.10
		var uas = navigator.userAgent;
		var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
		var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);

		_iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
		_ipad = /\b(iP[ao]d)/.exec(uas);
		_android = /Android/i.exec(uas);
		_native = /FBAN\/\w+;/i.exec(uas);
		_mobile = /Mobile/i.exec(uas);

		// Note that the IE team blog would have you believe you should be checking
		// for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
		// from either x64 or ia64;  so ultimately, you should just check for Win64
		// as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
		// Windows will send 'WOW64' instead.
		_win64 = !!/Win64/.exec(uas);

		if (agent) {
			_ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
			// IE compatibility mode
			if (_ie && document && document.documentMode) {
				_ie = document.documentMode;
			}
			// grab the "true" ie version from the trident token if available
			var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
			_ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;

			_firefox = agent[2] ? parseFloat(agent[2]) : NaN;
			_opera = agent[3] ? parseFloat(agent[3]) : NaN;
			_webkit = agent[4] ? parseFloat(agent[4]) : NaN;
			if (_webkit) {
				// We do not add the regexp to the above test, because it will always
				// match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
				// the userAgent string.
				agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
				_chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
			} else {
				_chrome = NaN;
			}
		} else {
			_ie = _firefox = _opera = _chrome = _webkit = NaN;
		}

		if (os) {
			if (os[1]) {
				// Detect OS X version.  If no version number matches, set _osx to true.
				// Version examples:  10, 10_6_1, 10.7
				// Parses version number as a float, taking only first two sets of
				// digits.  If only one set of digits is found, returns just the major
				// version number.
				var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);

				_osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
			} else {
				_osx = false;
			}
			_windows = !!os[2];
			_linux = !!os[3];
		} else {
			_osx = _windows = _linux = false;
		}
	}

	var UserAgent_DEPRECATED = {

		/**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
		ie: function ie() {
			return _populate() || _ie;
		},

		/**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */
		ieCompatibilityMode: function ieCompatibilityMode() {
			return _populate() || _ie_real_version > _ie;
		},

		/**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */
		ie64: function ie64() {
			return UserAgent_DEPRECATED.ie() && _win64;
		},

		/**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
		firefox: function firefox() {
			return _populate() || _firefox;
		},

		/**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
		opera: function opera() {
			return _populate() || _opera;
		},

		/**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
		webkit: function webkit() {
			return _populate() || _webkit;
		},

		/**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */
		safari: function safari() {
			return UserAgent_DEPRECATED.webkit();
		},

		/**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
		chrome: function chrome() {
			return _populate() || _chrome;
		},

		/**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */
		windows: function windows() {
			return _populate() || _windows;
		},

		/**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */
		osx: function osx() {
			return _populate() || _osx;
		},

		/**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */
		linux: function linux() {
			return _populate() || _linux;
		},

		/**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */
		iphone: function iphone() {
			return _populate() || _iphone;
		},

		mobile: function mobile() {
			return _populate() || _iphone || _ipad || _android || _mobile;
		},

		nativeApp: function nativeApp() {
			// webviews inside of the native apps
			return _populate() || _native;
		},

		android: function android() {
			return _populate() || _android;
		},

		ipad: function ipad() {
			return _populate() || _ipad;
		}
	};

	module.exports = UserAgent_DEPRECATED;
},{}],44:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
	function camelize(string) {
		return string.replace(_hyphenPattern, function (_, character) {
			return character.toUpperCase();
		});
	}

	module.exports = camelize;
},{}],45:[function(require,module,exports){
	(function (global){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule cancelAnimationFramePolyfill
 */

		/**
 * Here is the native and polyfill version of cancelAnimationFrame.
 * Please don't use it directly and use cancelAnimationFrame module instead.
 */
		"use strict";

		var cancelAnimationFrame = global.cancelAnimationFrame || global.webkitCancelAnimationFrame || global.mozCancelAnimationFrame || global.oCancelAnimationFrame || global.msCancelAnimationFrame || global.clearTimeout;

		module.exports = cancelAnimationFrame;
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{}],46:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule clamp
 * @typechecks
 */

	/**
 * Clamps (or clips or confines) the value to be between min and max.
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
	"use strict";

	function clamp(value, min, max) {
		if (value < min) {
			return min;
		}
		if (value > max) {
			return max;
		}
		return value;
	}

	module.exports = clamp;
},{}],47:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule cssVar
 * @typechecks
 */

	"use strict";

	var CSS_VARS = {
		'scrollbar-face-active-color': '#7d7d7d',
		'scrollbar-face-color': '#c2c2c2',
		'scrollbar-face-margin': '4px',
		'scrollbar-face-radius': '6px',
		'scrollbar-size': '15px',
		'scrollbar-size-large': '17px',
		'scrollbar-track-color': 'rgba(255, 255, 255, 0.8)',
		'fbui-white': '#fff',
		'fbui-desktop-background-light': '#f6f7f8'
	};

	/**
 * @param {string} name
 */
	function cssVar(name) {
		if (CSS_VARS.hasOwnProperty(name)) {
			return CSS_VARS[name];
		}

		throw new Error('cssVar' + '("' + name + '"): Unexpected class transformation.');
	}

	cssVar.CSS_VARS = CSS_VARS;

	module.exports = cssVar;
},{}],48:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule cx
 */

	'use strict';

	var slashReplaceRegex = /\//g;
	var cache = {};

	function getClassName(className) {
		if (cache[className]) {
			return cache[className];
		}

		cache[className] = className.replace(slashReplaceRegex, '_');
		return cache[className];
	}

	/**
 * This function is used to mark string literals representing CSS class names
 * so that they can be transformed statically. This allows for modularization
 * and minification of CSS class names.
 *
 * In static_upstream, this function is actually implemented, but it should
 * eventually be replaced with something more descriptive, and the transform
 * that is used in the main stack should be ported for use elsewhere.
 *
 * @param string|object className to modularize, or an object of key/values.
 *                      In the object case, the values are conditions that
 *                      determine if the className keys should be included.
 * @param [string ...]  Variable list of classNames in the string case.
 * @return string       Renderable space-separated CSS className.
 */
	function cx(classNames) {
		var classNamesArray;
		if (typeof classNames == 'object') {
			classNamesArray = Object.keys(classNames).filter(function (className) {
				return classNames[className];
			});
		} else {
			classNamesArray = Array.prototype.slice.call(arguments);
		}

		return classNamesArray.map(getClassName).join(' ');
	}

	module.exports = cx;
},{}],49:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule debounceCore
 * @typechecks
 */

	/**
 * Invokes the given callback after a specified number of milliseconds have
 * elapsed, ignoring subsequent calls.
 *
 * For example, if you wanted to update a preview after the user stops typing
 * you could do the following:
 *
 *   elem.addEventListener('keyup', debounce(this.updatePreview, 250), false);
 *
 * The returned function has a reset method which can be called to cancel a
 * pending invocation.
 *
 *   var debouncedUpdatePreview = debounce(this.updatePreview, 250);
 *   elem.addEventListener('keyup', debouncedUpdatePreview, false);
 *
 *   // later, to cancel pending calls
 *   debouncedUpdatePreview.reset();
 *
 * @param {function} func - the function to debounce
 * @param {number} wait - how long to wait in milliseconds
 * @param {*} context - optional context to invoke the function in
 * @param {?function} setTimeoutFunc - an implementation of setTimeout
 *  if nothing is passed in the default setTimeout function is used
  * @param {?function} clearTimeoutFunc - an implementation of clearTimeout
 *  if nothing is passed in the default clearTimeout function is used
 */
	"use strict";

	function debounce(func, wait, context, setTimeoutFunc, clearTimeoutFunc) {
		setTimeoutFunc = setTimeoutFunc || setTimeout;
		clearTimeoutFunc = clearTimeoutFunc || clearTimeout;
		var timeout;

		function debouncer() {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			debouncer.reset();

			var callback = function callback() {
				func.apply(context, args);
			};
			callback.__SMmeta = func.__SMmeta;
			timeout = setTimeoutFunc(callback, wait);
		}

		debouncer.reset = function () {
			clearTimeoutFunc(timeout);
		};

		return debouncer;
	}

	module.exports = debounce;
},{}],50:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

	"use strict";

	function makeEmptyFunction(arg) {
		return function () {
			return arg;
		};
	}

	/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
		return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
		return arg;
	};

	module.exports = emptyFunction;
},{}],51:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getVendorPrefixedName
 * @typechecks
 */

	'use strict';

	var ExecutionEnvironment = require('./ExecutionEnvironment');

	var camelize = require('./camelize');
	var invariant = require('./invariant');

	var memoized = {};
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	var prefixRegex = new RegExp('^(' + prefixes.join('|') + ')');
	var testStyle = ExecutionEnvironment.canUseDOM ? document.createElement('div').style : {};

	function getWithPrefix(name) {
		for (var i = 0; i < prefixes.length; i++) {
			var prefixedName = prefixes[i] + name;
			if (prefixedName in testStyle) {
				return prefixedName;
			}
		}
		return null;
	}

	/**
 * @param {string} property Name of a css property to check for.
 * @return {?string} property name supported in the browser, or null if not
 * supported.
 */
	function getVendorPrefixedName(property) {
		var name = camelize(property);
		if (memoized[name] === undefined) {
			var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
			if (prefixRegex.test(capitalizedName)) {
				invariant(false, 'getVendorPrefixedName must only be called with unprefixed' + 'CSS property names. It was called with %s', property);
			}
			memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);
		}
		return memoized[name];
	}

	module.exports = getVendorPrefixedName;
},{"./ExecutionEnvironment":14,"./camelize":44,"./invariant":52}],52:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

		"use strict";

		/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

		var invariant = function invariant(condition, format, a, b, c, d, e, f) {
			if (process.env.NODE_ENV !== 'production') {
				if (format === undefined) {
					throw new Error('invariant requires an error message argument');
				}
			}

			if (!condition) {
				var error;
				if (format === undefined) {
					error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
				} else {
					var args = [a, b, c, d, e, f];
					var argIndex = 0;
					error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
						return args[argIndex++];
					}));
				}

				error.framesToPop = 1; // we don't care about invariant's own frame
				throw error;
			}
		};

		module.exports = invariant;
	}).call(this,require('_process'));
},{"_process":615}],53:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

	'use strict';

	var ExecutionEnvironment = require('./ExecutionEnvironment');

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
		useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
	}

	/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
	function isEventSupported(eventNameSuffix, capture) {
		if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
			return false;
		}

		var eventName = 'on' + eventNameSuffix;
		var isSupported = (eventName in document);

		if (!isSupported) {
			var element = document.createElement('div');
			element.setAttribute(eventName, 'return;');
			isSupported = typeof element[eventName] === 'function';
		}

		if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
			// This is the only way to test support for the `wheel` event in IE9+.
			isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
		}

		return isSupported;
	}

	module.exports = isEventSupported;
},{"./ExecutionEnvironment":14}],54:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

	'use strict';

	/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} className
 * @return {string}
 */
	function joinClasses(className /*, ... */) {
		if (!className) {
			className = '';
		}
		var nextClass;
		var argLength = arguments.length;
		if (argLength > 1) {
			for (var ii = 1; ii < argLength; ii++) {
				nextClass = arguments[ii];
				if (nextClass) {
					className = (className ? className + ' ' : '') + nextClass;
				}
			}
		}
		return className;
	}

	module.exports = joinClasses;
},{}],55:[function(require,module,exports){
	(function (global){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule nativeRequestAnimationFrame
 */

		"use strict";

		var nativeRequestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame;

		module.exports = nativeRequestAnimationFrame;
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{}],56:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule normalizeWheel
 * @typechecks
 */

	'use strict';

	var UserAgent_DEPRECATED = require('./UserAgent_DEPRECATED');

	var isEventSupported = require('./isEventSupported');

	// Reasonable defaults
	var PIXEL_STEP = 10;
	var LINE_HEIGHT = 40;
	var PAGE_HEIGHT = 800;

	/**
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 */
	function normalizeWheel( /*object*/event) /*object*/{
		var sX = 0,
			sY = 0,
			// spinX, spinY
			pX = 0,
			pY = 0; // pixelX, pixelY

		// Legacy
		if ('detail' in event) {
			sY = event.detail;
		}
		if ('wheelDelta' in event) {
			sY = -event.wheelDelta / 120;
		}
		if ('wheelDeltaY' in event) {
			sY = -event.wheelDeltaY / 120;
		}
		if ('wheelDeltaX' in event) {
			sX = -event.wheelDeltaX / 120;
		}

		// side scrolling on FF with DOMMouseScroll
		if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
			sX = sY;
			sY = 0;
		}

		pX = sX * PIXEL_STEP;
		pY = sY * PIXEL_STEP;

		if ('deltaY' in event) {
			pY = event.deltaY;
		}
		if ('deltaX' in event) {
			pX = event.deltaX;
		}

		if ((pX || pY) && event.deltaMode) {
			if (event.deltaMode == 1) {
				// delta in LINE units
				pX *= LINE_HEIGHT;
				pY *= LINE_HEIGHT;
			} else {
				// delta in PAGE units
				pX *= PAGE_HEIGHT;
				pY *= PAGE_HEIGHT;
			}
		}

		// Fall-back if spin cannot be determined
		if (pX && !sX) {
			sX = pX < 1 ? -1 : 1;
		}
		if (pY && !sY) {
			sY = pY < 1 ? -1 : 1;
		}

		return { spinX: sX,
			spinY: sY,
			pixelX: pX,
			pixelY: pY };
	}

	/**
 * The best combination if you prefer spinX + spinY normalization.  It favors
 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
 * 'wheel' event, making spin speed determination impossible.
 */
	normalizeWheel.getEventType = function () /*string*/{
		return UserAgent_DEPRECATED.firefox() ? 'DOMMouseScroll' : isEventSupported('wheel') ? 'wheel' : 'mousewheel';
	};

	module.exports = normalizeWheel;
},{"./UserAgent_DEPRECATED":43,"./isEventSupported":53}],57:[function(require,module,exports){
	(function (global){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule requestAnimationFramePolyfill
 */

		'use strict';

		var emptyFunction = require('./emptyFunction');
		var nativeRequestAnimationFrame = require('./nativeRequestAnimationFrame');

		var lastTime = 0;

		/**
 * Here is the native and polyfill version of requestAnimationFrame.
 * Please don't use it directly and use requestAnimationFrame module instead.
 */
		var requestAnimationFrame = nativeRequestAnimationFrame || function (callback) {
			var currTime = Date.now();
			var timeDelay = Math.max(0, 16 - (currTime - lastTime));
			lastTime = currTime + timeDelay;
			return global.setTimeout(function () {
				callback(Date.now());
			}, timeDelay);
		};

		// Works around a rare bug in Safari 6 where the first request is never invoked.
		requestAnimationFrame(emptyFunction);

		module.exports = requestAnimationFrame;
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{"./emptyFunction":50,"./nativeRequestAnimationFrame":55}],58:[function(require,module,exports){
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
	function shallowEqual(objA, objB) {
		if (objA === objB) {
			return true;
		}

		if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
			return false;
		}

		var keysA = Object.keys(objA);
		var keysB = Object.keys(objB);

		if (keysA.length !== keysB.length) {
			return false;
		}

		// Test for A's keys different from B.
		var bHasOwnProperty = hasOwnProperty.bind(objB);
		for (var i = 0; i < keysA.length; i++) {
			if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
				return false;
			}
		}

		return true;
	}

	module.exports = shallowEqual;
},{}],59:[function(require,module,exports){
	(function (global){
		/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule translateDOMPositionXY
 * @typechecks
 */

		'use strict';

		var BrowserSupportCore = require('./BrowserSupportCore');

		var getVendorPrefixedName = require('./getVendorPrefixedName');

		var TRANSFORM = getVendorPrefixedName('transform');
		var BACKFACE_VISIBILITY = getVendorPrefixedName('backfaceVisibility');

		var translateDOMPositionXY = (function () {
			if (BrowserSupportCore.hasCSSTransforms()) {
				var ua = global.window ? global.window.navigator.userAgent : 'UNKNOWN';
				var isSafari = /Safari\//.test(ua) && !/Chrome\//.test(ua);
				// It appears that Safari messes up the composition order
				// of GPU-accelerated layers
				// (see bug https://bugs.webkit.org/show_bug.cgi?id=61824).
				// Use 2D translation instead.
				if (!isSafari && BrowserSupportCore.hasCSS3DTransforms()) {
					return function ( /*object*/style, /*number*/x, /*number*/y) {
						style[TRANSFORM] = 'translate3d(' + x + 'px,' + y + 'px,0)';
						style[BACKFACE_VISIBILITY] = 'hidden';
					};
				} else {
					return function ( /*object*/style, /*number*/x, /*number*/y) {
						style[TRANSFORM] = 'translate(' + x + 'px,' + y + 'px)';
					};
				}
			} else {
				return function ( /*object*/style, /*number*/x, /*number*/y) {
					style.left = x + 'px';
					style.top = y + 'px';
				};
			}
		})();

		module.exports = translateDOMPositionXY;
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{"./BrowserSupportCore":11,"./getVendorPrefixedName":51}],60:[function(require,module,exports){
	module.exports = require('./internal/FixedDataTableRoot');

},{"./internal/FixedDataTableRoot":28}],61:[function(require,module,exports){
/**
 * Copyright (c) 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

	module.exports.Dispatcher = require('./lib/Dispatcher');

},{"./lib/Dispatcher":62}],62:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Dispatcher
 * 
 * @preventMunge
 */

		'use strict';

		exports.__esModule = true;

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		var invariant = require('fbjs/lib/invariant');

		var _prefix = 'ID_';

		/**
 * Dispatcher is used to broadcast payloads to registered callbacks. This is
 * different from generic pub-sub systems in two ways:
 *
 *   1) Callbacks are not subscribed to particular events. Every payload is
 *      dispatched to every registered callback.
 *   2) Callbacks can be deferred in whole or part until other callbacks have
 *      been executed.
 *
 * For example, consider this hypothetical flight destination form, which
 * selects a default city when a country is selected:
 *
 *   var flightDispatcher = new Dispatcher();
 *
 *   // Keeps track of which country is selected
 *   var CountryStore = {country: null};
 *
 *   // Keeps track of which city is selected
 *   var CityStore = {city: null};
 *
 *   // Keeps track of the base flight price of the selected city
 *   var FlightPriceStore = {price: null}
 *
 * When a user changes the selected city, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
 *
 * This payload is digested by `CityStore`:
 *
 *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
 *
 * When the user selects a country, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
 *
 * This payload is digested by both stores:
 *
 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
 *
 * When the callback to update `CountryStore` is registered, we save a reference
 * to the returned token. Using this token with `waitFor()`, we can guarantee
 * that `CountryStore` is updated before the callback that updates `CityStore`
 * needs to query its data.
 *
 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
 *
 * The usage of `waitFor()` can be chained, for example:
 *
 *   FlightPriceStore.dispatchToken =
 *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *         case 'city-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
 *
 * The `country-update` payload will be guaranteed to invoke the stores'
 * registered callbacks in order: `CountryStore`, `CityStore`, then
 * `FlightPriceStore`.
 */

		var Dispatcher = (function () {
			function Dispatcher() {
				_classCallCheck(this, Dispatcher);

				this._callbacks = {};
				this._isDispatching = false;
				this._isHandled = {};
				this._isPending = {};
				this._lastID = 1;
			}

			/**
   * Registers a callback to be invoked with every dispatched payload. Returns
   * a token that can be used with `waitFor()`.
   */

			Dispatcher.prototype.register = function register(callback) {
				var id = _prefix + this._lastID++;
				this._callbacks[id] = callback;
				return id;
			};

			/**
   * Removes a callback based on its token.
   */

			Dispatcher.prototype.unregister = function unregister(id) {
				!this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
				delete this._callbacks[id];
			};

			/**
   * Waits for the callbacks specified to be invoked before continuing execution
   * of the current callback. This method should only be used by a callback in
   * response to a dispatched payload.
   */

			Dispatcher.prototype.waitFor = function waitFor(ids) {
				!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
				for (var ii = 0; ii < ids.length; ii++) {
					var id = ids[ii];
					if (this._isPending[id]) {
						!this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
						continue;
					}
					!this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
					this._invokeCallback(id);
				}
			};

			/**
   * Dispatches a payload to all registered callbacks.
   */

			Dispatcher.prototype.dispatch = function dispatch(payload) {
				this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
				this._startDispatching(payload);
				try {
					for (var id in this._callbacks) {
						if (this._isPending[id]) {
							continue;
						}
						this._invokeCallback(id);
					}
				} finally {
					this._stopDispatching();
				}
			};

			/**
   * Is this Dispatcher currently dispatching.
   */

			Dispatcher.prototype.isDispatching = function isDispatching() {
				return this._isDispatching;
			};

			/**
   * Call the callback stored with the given id. Also do some internal
   * bookkeeping.
   *
   * @internal
   */

			Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
				this._isPending[id] = true;
				this._callbacks[id](this._pendingPayload);
				this._isHandled[id] = true;
			};

			/**
   * Set up bookkeeping needed when dispatching.
   *
   * @internal
   */

			Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
				for (var id in this._callbacks) {
					this._isPending[id] = false;
					this._isHandled[id] = false;
				}
				this._pendingPayload = payload;
				this._isDispatching = true;
			};

			/**
   * Clear bookkeeping used for dispatching.
   *
   * @internal
   */

			Dispatcher.prototype._stopDispatching = function _stopDispatching() {
				delete this._pendingPayload;
				this._isDispatching = false;
			};

			return Dispatcher;
		})();

		module.exports = Dispatcher;
	}).call(this,require('_process'));
},{"_process":615,"fbjs/lib/invariant":10}],63:[function(require,module,exports){
/**
 * @license Fraction.js v3.3.1 09/09/2015
 * http://www.xarg.org/2014/03/precise-calculations-in-javascript/
 *
 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/


	/**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */

	(function(root) {

		"use strict";

		// Maximum search depth for cyclic rational numbers. 2000 should be more than enough. 
		// Example: 1/7 = 0.(142857) has 6 repeating decimal places.
		// If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
		var MAX_CYCLE_LEN = 2000;

		// Parsed data to avoid calling "new" all the time
		var P = {
			"s": 1,
			"n": 0,
			"d": 1
		};

		function assign(n, s) {

			if (isNaN(n = parseInt(n, 10))) {
				throwInvalidParam();
			}
			return n * s;
		}

		function throwInvalidParam() {
			throw "Invalid Param";
		}

		var parse = function(p1, p2) {

			var n = 0, d = 1, s = 1;
			var v = 0, w = 0, x = 0, y = 1, z = 1;

			var A = 0, B = 1;
			var C = 1, D = 1;

			var N = 10000000;
			var M;

			if (p1 === undefined || p1 === null) {
				/* void */
			} else if (p2 !== undefined) {
				n = p1;
				d = p2;
				s = n * d;
			} else
				switch (typeof p1) {

				case "object":
				{
					if ("d" in p1 && "n" in p1) {
						n = p1["n"];
						d = p1["d"];
						if ("s" in p1)
							n*= p1["s"];
					} else if (0 in p1) {
						n = p1[0];
						if (1 in p1)
							d = p1[1];
					} else {
						throwInvalidParam();
					}
					s = n * d;
					break;
				}
				case "number":
				{
					if (p1 < 0) {
						s = p1;
						p1 = -p1;
					}

					if (p1 % 1 === 0) {
						n = p1;
					} else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

						if (p1 >= 1) {
							z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
							p1/= z;
						}

						// Using Farey Sequences
						// http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

						while (B <= N && D <= N) {
							M = (A + C) / (B + D);

							if (p1 === M) {
								if (B + D <= N) {
									n = A + C;
									d = B + D;
								} else if (D > B) {
									n = C;
									d = D;
								} else {
									n = A;
									d = B;
								}
								break;

							} else {

								if (p1 > M) {
									A+= C;
									B+= D;
								} else {
									C+= A;
									D+= B;
								}

								if (B > N) {
									n = C;
									d = D;
								} else {
									n = A;
									d = B;
								}
							}
						}
						n*= z;
					} else if (isNaN(p1) || isNaN(p2)) {
						d = n = NaN;
					}
					break;
				}
				case "string":
				{
					B = p1.match(/\d+|./g);

					if (B[A] === '-') {// Check for minus sign at the beginning
						s = -1;
						A++;
					} else if (B[A] === '+') {// Check for plus sign at the beginning
						A++;
					}

					if (B.length === A + 1) { // Check if it's just a simple number "1234"
						w = assign(B[A++], s);
					} else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

						if (B[A] !== '.') { // Handle 0.5 and .5
							v = assign(B[A++], s);
						}
						A++;

						// Check for decimal places
						if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
							w = assign(B[A], s);
							y = Math.pow(10, B[A].length);
							A++;
						}

						// Check for repeating places
						if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
							x = assign(B[A + 1], s);
							z = Math.pow(10, B[A + 1].length) - 1;
							A+= 3;
						}

					} else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
						w = assign(B[A], s);
						y = assign(B[A + 2], 1);
						A+= 3;
					} else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
						v = assign(B[A], s);
						w = assign(B[A + 2], s);
						y = assign(B[A + 4], 1);
						A+= 5;
					}

					if (B.length <= A) { // Check for more tokens on the stack
						d = y * z;
						s = /* void */
                    n = x + d * v + z * w;
						break;
					}

					/* Fall through on error */
				}
				default:
					throwInvalidParam();
				}

			if (d === 0) {
				throw "DIV/0";
			}

			P["s"] = s < 0 ? -1 : 1;
			P["n"] = Math.abs(n);
			P["d"] = Math.abs(d);
		};

		var modpow = function(b, e, m) {

			for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {

				if (e & 1) {
					r = (r * b) % m;
				}
			}
			return r;
		};

		var cycleLen = function(n, d) {

			for (; d % 2 === 0;
				d/= 2) {}

			for (; d % 5 === 0;
				d/= 5) {}

			if (d === 1) // Catch non-cyclic numbers
				return 0;

			// If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
			// 10^(d-1) % d == 1
			// However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone, 
			// as we want to translate the numbers to strings.

			var rem = 10 % d;

			for (var t = 1; rem !== 1; t++) {
				rem = rem * 10 % d;

				if (t > MAX_CYCLE_LEN)
					return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
			}
			return t;
		};

		var cycleStart = function(n, d, len) {

			var rem1 = 1;
			var rem2 = modpow(10, len, d);

			for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
				// Solve 10^s == 10^(s+t) (mod d)

				if (rem1 === rem2)
					return t;

				rem1 = rem1 * 10 % d;
				rem2 = rem2 * 10 % d;
			}
			return 0;
		};

		var gcd = function(a, b) {

			if (!a) return b;
			if (!b) return a;

			while (1) {
				a%= b;
				if (!a) return b;
				b%= a;
				if (!b) return a;
			}
		};

		/**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction} a
   * @param {number=} b
   */
		function Fraction(a, b) {

			if (!(this instanceof Fraction)) {
				return new Fraction(a, b);
			}

			parse(a, b);

			if (Fraction['REDUCE']) {
				a = gcd(P["d"], P["n"]); // Abuse a
			} else {
				a = 1;
			}

			this["s"] = P["s"];
			this["n"] = P["n"] / a;
			this["d"] = P["d"] / a;
		}

		/**
   * Boolean global variable to be able to disable automatic reduction of the fraction
   *
   */
		Fraction['REDUCE'] = 1;

		Fraction.prototype = {

			"s": 1,
			"n": 0,
			"d": 1,

			/**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/
			"abs": function() {

				return new Fraction(this["n"], this["d"]);
			},

			/**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/
			"neg": function() {

				return new Fraction(-this["s"] * this["n"], this["d"]);
			},

			/**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/
			"add": function(a, b) {

				parse(a, b);
				return new Fraction(
					this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
					this["d"] * P["d"]
				);
			},

			/**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/
			"sub": function(a, b) {

				parse(a, b);
				return new Fraction(
					this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
					this["d"] * P["d"]
				);
			},

			/**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/
			"mul": function(a, b) {

				parse(a, b);
				return new Fraction(
					this["s"] * P["s"] * this["n"] * P["n"],
					this["d"] * P["d"]
				);
			},

			/**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/
			"div": function(a, b) {

				parse(a, b);
				return new Fraction(
					this["s"] * P["s"] * this["n"] * P["d"],
					this["d"] * P["n"]
				);
			},

			/**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/
			"clone": function() {
				return new Fraction(this);
			},

			/**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/
			"mod": function(a, b) {

				if (isNaN(this['n']) || isNaN(this['d'])) {
					return new Fraction(NaN);
				}

				if (a === undefined) {
					return new Fraction(this["s"] * this["n"] % this["d"], 1);
				}

				parse(a, b);
				if (0 === P["n"] && 0 === this["d"]) {
					Fraction(0, 0); // Throw div/0
				}

				/*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/

				/*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */
				return new Fraction(
					(this["s"] * P["d"] * this["n"]) % (P["n"] * this["d"]),
					P["d"] * this["d"]
				);
			},

			/**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */
			"gcd": function(a, b) {

				parse(a, b);

				// gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

				return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
			},

			/**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */
			"lcm": function(a, b) {

				parse(a, b);

				// lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

				if (P["n"] === 0 && this["n"] === 0) {
					return new Fraction;
				}
				return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
			},

			/**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/
			"ceil": function(places) {

				places = Math.pow(10, places || 0);

				if (isNaN(this["n"]) || isNaN(this["d"])) {
					return new Fraction(NaN);
				}
				return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
			},

			/**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/
			"floor": function(places) {

				places = Math.pow(10, places || 0);

				if (isNaN(this["n"]) || isNaN(this["d"])) {
					return new Fraction(NaN);
				}
				return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
			},

			/**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/
			"round": function(places) {

				places = Math.pow(10, places || 0);

				if (isNaN(this["n"]) || isNaN(this["d"])) {
					return new Fraction(NaN);
				}
				return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
			},

			/**
     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/
			"inverse": function() {

				return new Fraction(this["s"] * this["d"], this["n"]);
			},

			/**
     * Calculates the fraction to some integer exponent
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */
			"pow": function(m) {

				if (m < 0) {
					return new Fraction(Math.pow(this['s'] * this["d"],-m), Math.pow(this["n"],-m));
				} else {
					return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
				}
			},

			/**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
			"equals": function(a, b) {

				parse(a, b);
				return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
			},

			/**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
			"compare": function(a, b) {

				parse(a, b);
				var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
				return (0 < t) - (t < 0);
			},

			/**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */
			"divisible": function(a, b) {

				parse(a, b);
				return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
			},

			/**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/
			'valueOf': function() {

				return this["s"] * this["n"] / this["d"];
			},

			/**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/
			'toFraction': function(excludeWhole) {

				var whole, str = "";
				var n = this["n"];
				var d = this["d"];
				if (this["s"] < 0) {
					str+= '-';
				}

				if (d === 1) {
					str+= n;
				} else {

					if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
						str+= whole;
						str+= " ";
						n%= d;
					}

					str+= n;
					str+= '/';
					str+= d;
				}
				return str;
			},

			/**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/
			'toLatex': function(excludeWhole) {

				var whole, str = "";
				var n = this["n"];
				var d = this["d"];
				if (this["s"] < 0) {
					str+= '-';
				}

				if (d === 1) {
					str+= n;
				} else {

					if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
						str+= whole;
						n%= d;
					}

					str+= "\\frac{";
					str+= n;
					str+= '}{';
					str+= d;
					str+= '}';
				}
				return str;
			},

			/**
     * Returns an array of continued fraction elements
     * 
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */
			'toContinued': function() {

				var t;
				var a = this['n'];
				var b = this['d'];
				var res = [];

				do {
					res.push(Math.floor(a / b));
					t = a % b;
					a = b;
					b = t;
				} while (a !== 1);

				return res;
			},

			/**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/
			'toString': function() {

				var g;
				var N = this["n"];
				var D = this["d"];

				if (isNaN(N) || isNaN(D)) {
					return "NaN";
				}

				if (!Fraction['REDUCE']) {
					g = gcd(N, D);
					N/= g;
					D/= g;
				}

				var p = String(N).split(""); // Numerator chars
				var t = 0; // Tmp var

				var ret = [~this["s"] ? "" : "-", "", ""]; // Return array, [0] is zero sign, [1] before comma, [2] after
				var zeros = ""; // Collection variable for zeros

				var cycLen = cycleLen(N, D); // Cycle length
				var cycOff = cycleStart(N, D, cycLen); // Cycle start

				var j = -1;
				var n = 1; // str index

				// rough estimate to fill zeros
				var length = 15 + cycLen + cycOff + p.length; // 15 = decimal places when no repitation

				for (var i = 0; i < length; i++, t*= 10) {

					if (i < p.length) {
						t+= Number(p[i]);
					} else {
						n = 2;
						j++; // Start now => after comma
					}

					if (cycLen > 0) { // If we have a repeating part
						if (j === cycOff) {
							ret[n]+= zeros + "(";
							zeros = "";
						} else if (j === cycLen + cycOff) {
							ret[n]+= zeros + ")";
							break;
						}
					}

					if (t >= D) {
						ret[n]+= zeros + ((t / D) | 0); // Flush zeros, Add current digit
						zeros = "";
						t = t % D;
					} else if (n > 1) { // Add zeros to the zero buffer
						zeros+= "0";
					} else if (ret[n]) { // If before comma, add zero only if already something was added
						ret[n]+= "0";
					}
				}

				// If it's empty, it's a leading zero only
				ret[0]+= ret[1] || "0";

				// If there is something after the comma, add the comma sign
				if (ret[2]) {
					return ret[0] + "." + ret[2];
				}
				return ret[0];
			}
		};

		if (typeof define === "function" && define["amd"]) {
			define([], function() {
				return Fraction;
			});
		} else if (typeof exports === "object") {
			module["exports"] = Fraction;
		} else {
			root['Fraction'] = Fraction;
		}

	})(this);

},{}],64:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _handlebarsRuntime = require('./handlebars.runtime');

	var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

	// Compiler imports

	var _handlebarsCompilerAst = require('./handlebars/compiler/ast');

	var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

	var _handlebarsCompilerBase = require('./handlebars/compiler/base');

	var _handlebarsCompilerCompiler = require('./handlebars/compiler/compiler');

	var _handlebarsCompilerJavascriptCompiler = require('./handlebars/compiler/javascript-compiler');

	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

	var _handlebarsCompilerVisitor = require('./handlebars/compiler/visitor');

	var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

	var _handlebarsNoConflict = require('./handlebars/no-conflict');

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	var _create = _handlebarsRuntime2['default'].create;
	function create() {
		var hb = _create();

		hb.compile = function (input, options) {
			return _handlebarsCompilerCompiler.compile(input, options, hb);
		};
		hb.precompile = function (input, options) {
			return _handlebarsCompilerCompiler.precompile(input, options, hb);
		};

		hb.AST = _handlebarsCompilerAst2['default'];
		hb.Compiler = _handlebarsCompilerCompiler.Compiler;
		hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
		hb.Parser = _handlebarsCompilerBase.parser;
		hb.parse = _handlebarsCompilerBase.parse;

		return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst.Visitor = _handlebarsCompilerVisitor2['default'];

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];


},{"./handlebars.runtime":65,"./handlebars/compiler/ast":67,"./handlebars/compiler/base":68,"./handlebars/compiler/compiler":70,"./handlebars/compiler/javascript-compiler":72,"./handlebars/compiler/visitor":75,"./handlebars/no-conflict":89}],65:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _handlebarsBase = require('./handlebars/base');

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = require('./handlebars/safe-string');

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = require('./handlebars/exception');

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = require('./handlebars/utils');

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = require('./handlebars/runtime');

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = require('./handlebars/no-conflict');

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
		var hb = new base.HandlebarsEnvironment();

		Utils.extend(hb, base);
		hb.SafeString = _handlebarsSafeString2['default'];
		hb.Exception = _handlebarsException2['default'];
		hb.Utils = Utils;
		hb.escapeExpression = Utils.escapeExpression;

		hb.VM = runtime;
		hb.template = function (spec) {
			return runtime.template(spec, hb);
		};

		return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];


},{"./handlebars/base":66,"./handlebars/exception":79,"./handlebars/no-conflict":89,"./handlebars/runtime":90,"./handlebars/safe-string":91,"./handlebars/utils":92}],66:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = require('./utils');

	var _exception = require('./exception');

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = require('./helpers');

	var _decorators = require('./decorators');

	var _logger = require('./logger');

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.0.5';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
		1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
		2: '== 1.0.0-rc.3',
		3: '== 1.0.0-rc.4',
		4: '== 1.x.x',
		5: '== 2.0.0-alpha.x',
		6: '>= 2.0.0-beta.1',
		7: '>= 4.0.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
		this.helpers = helpers || {};
		this.partials = partials || {};
		this.decorators = decorators || {};

		_helpers.registerDefaultHelpers(this);
		_decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
		constructor: HandlebarsEnvironment,

		logger: _logger2['default'],
		log: _logger2['default'].log,

		registerHelper: function registerHelper(name, fn) {
			if (_utils.toString.call(name) === objectType) {
				if (fn) {
					throw new _exception2['default']('Arg not supported with multiple helpers');
				}
				_utils.extend(this.helpers, name);
			} else {
				this.helpers[name] = fn;
			}
		},
		unregisterHelper: function unregisterHelper(name) {
			delete this.helpers[name];
		},

		registerPartial: function registerPartial(name, partial) {
			if (_utils.toString.call(name) === objectType) {
				_utils.extend(this.partials, name);
			} else {
				if (typeof partial === 'undefined') {
					throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
				}
				this.partials[name] = partial;
			}
		},
		unregisterPartial: function unregisterPartial(name) {
			delete this.partials[name];
		},

		registerDecorator: function registerDecorator(name, fn) {
			if (_utils.toString.call(name) === objectType) {
				if (fn) {
					throw new _exception2['default']('Arg not supported with multiple decorators');
				}
				_utils.extend(this.decorators, name);
			} else {
				this.decorators[name] = fn;
			}
		},
		unregisterDecorator: function unregisterDecorator(name) {
			delete this.decorators[name];
		}
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];


},{"./decorators":77,"./exception":79,"./helpers":80,"./logger":88,"./utils":92}],67:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	var AST = {
		// Public API used to evaluate derived attributes regarding AST nodes
		helpers: {
			// a mustache is definitely a helper if:
			// * it is an eligible helper, and
			// * it has at least one parameter or hash segment
			helperExpression: function helperExpression(node) {
				return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
			},

			scopedId: function scopedId(path) {
				return (/^\.|this\b/.test(path.original)
				);
			},

			// an ID is simple if it only has one part, and that part is not
			// `..` or `this`.
			simpleId: function simpleId(path) {
				return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
			}
		}
	};

	// Must be exported as an object rather than the root of the module as the jison lexer
	// must modify the object to operate properly.
	exports['default'] = AST;
	module.exports = exports['default'];


},{}],68:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.parse = parse;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _parser = require('./parser');

	var _parser2 = _interopRequireDefault(_parser);

	var _whitespaceControl = require('./whitespace-control');

	var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

	var _helpers = require('./helpers');

	var Helpers = _interopRequireWildcard(_helpers);

	var _utils = require('../utils');

	exports.parser = _parser2['default'];

	var yy = {};
	_utils.extend(yy, Helpers);

	function parse(input, options) {
		// Just return if an already-compiled AST was passed in.
		if (input.type === 'Program') {
			return input;
		}

		_parser2['default'].yy = yy;

		// Altering the shared object here, but this is ok as parser is a sync operation
		yy.locInfo = function (locInfo) {
			return new yy.SourceLocation(options && options.srcName, locInfo);
		};

		var strip = new _whitespaceControl2['default'](options);
		return strip.accept(_parser2['default'].parse(input));
	}


},{"../utils":92,"./helpers":71,"./parser":73,"./whitespace-control":76}],69:[function(require,module,exports){
/* global define */
	'use strict';

	exports.__esModule = true;

	var _utils = require('../utils');

	var SourceNode = undefined;

	try {
		/* istanbul ignore next */
		if (typeof define !== 'function' || !define.amd) {
			// We don't support this in AMD environments. For these environments, we asusme that
			// they are running on the browser and thus have no need for the source-map library.
			var SourceMap = require('source-map');
			SourceNode = SourceMap.SourceNode;
		}
	} catch (err) {}
	/* NOP */

	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
		SourceNode = function (line, column, srcFile, chunks) {
			this.src = '';
			if (chunks) {
				this.add(chunks);
			}
		};
		/* istanbul ignore next */
		SourceNode.prototype = {
			add: function add(chunks) {
				if (_utils.isArray(chunks)) {
					chunks = chunks.join('');
				}
				this.src += chunks;
			},
			prepend: function prepend(chunks) {
				if (_utils.isArray(chunks)) {
					chunks = chunks.join('');
				}
				this.src = chunks + this.src;
			},
			toStringWithSourceMap: function toStringWithSourceMap() {
				return { code: this.toString() };
			},
			toString: function toString() {
				return this.src;
			}
		};
	}

	function castChunk(chunk, codeGen, loc) {
		if (_utils.isArray(chunk)) {
			var ret = [];

			for (var i = 0, len = chunk.length; i < len; i++) {
				ret.push(codeGen.wrap(chunk[i], loc));
			}
			return ret;
		} else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
			// Handle primitives that the SourceNode will throw up on
			return chunk + '';
		}
		return chunk;
	}

	function CodeGen(srcFile) {
		this.srcFile = srcFile;
		this.source = [];
	}

	CodeGen.prototype = {
		isEmpty: function isEmpty() {
			return !this.source.length;
		},
		prepend: function prepend(source, loc) {
			this.source.unshift(this.wrap(source, loc));
		},
		push: function push(source, loc) {
			this.source.push(this.wrap(source, loc));
		},

		merge: function merge() {
			var source = this.empty();
			this.each(function (line) {
				source.add(['  ', line, '\n']);
			});
			return source;
		},

		each: function each(iter) {
			for (var i = 0, len = this.source.length; i < len; i++) {
				iter(this.source[i]);
			}
		},

		empty: function empty() {
			var loc = this.currentLocation || { start: {} };
			return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
		},
		wrap: function wrap(chunk) {
			var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

			if (chunk instanceof SourceNode) {
				return chunk;
			}

			chunk = castChunk(chunk, this, loc);

			return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
		},

		functionCall: function functionCall(fn, type, params) {
			params = this.generateList(params);
			return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
		},

		quotedString: function quotedString(str) {
			return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
				.replace(/\u2029/g, '\\u2029') + '"';
		},

		objectLiteral: function objectLiteral(obj) {
			var pairs = [];

			for (var key in obj) {
				if (obj.hasOwnProperty(key)) {
					var value = castChunk(obj[key], this);
					if (value !== 'undefined') {
						pairs.push([this.quotedString(key), ':', value]);
					}
				}
			}

			var ret = this.generateList(pairs);
			ret.prepend('{');
			ret.add('}');
			return ret;
		},

		generateList: function generateList(entries) {
			var ret = this.empty();

			for (var i = 0, len = entries.length; i < len; i++) {
				if (i) {
					ret.add(',');
				}

				ret.add(castChunk(entries[i], this));
			}

			return ret;
		},

		generateArray: function generateArray(entries) {
			var ret = this.generateList(entries);
			ret.prepend('[');
			ret.add(']');

			return ret;
		}
	};

	exports['default'] = CodeGen;
	module.exports = exports['default'];


},{"../utils":92,"source-map":94}],70:[function(require,module,exports){
/* eslint-disable new-cap */

	'use strict';

	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _exception = require('../exception');

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = require('../utils');

	var _ast = require('./ast');

	var _ast2 = _interopRequireDefault(_ast);

	var slice = [].slice;

	function Compiler() {}

	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.

	Compiler.prototype = {
		compiler: Compiler,

		equals: function equals(other) {
			var len = this.opcodes.length;
			if (other.opcodes.length !== len) {
				return false;
			}

			for (var i = 0; i < len; i++) {
				var opcode = this.opcodes[i],
					otherOpcode = other.opcodes[i];
				if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
					return false;
				}
			}

			// We know that length is the same between the two arrays because they are directly tied
			// to the opcode behavior above.
			len = this.children.length;
			for (var i = 0; i < len; i++) {
				if (!this.children[i].equals(other.children[i])) {
					return false;
				}
			}

			return true;
		},

		guid: 0,

		compile: function compile(program, options) {
			this.sourceNode = [];
			this.opcodes = [];
			this.children = [];
			this.options = options;
			this.stringParams = options.stringParams;
			this.trackIds = options.trackIds;

			options.blockParams = options.blockParams || [];

			// These changes will propagate to the other compiler components
			var knownHelpers = options.knownHelpers;
			options.knownHelpers = {
				'helperMissing': true,
				'blockHelperMissing': true,
				'each': true,
				'if': true,
				'unless': true,
				'with': true,
				'log': true,
				'lookup': true
			};
			if (knownHelpers) {
				for (var _name in knownHelpers) {
					/* istanbul ignore else */
					if (_name in knownHelpers) {
						options.knownHelpers[_name] = knownHelpers[_name];
					}
				}
			}

			return this.accept(program);
		},

		compileProgram: function compileProgram(program) {
			var childCompiler = new this.compiler(),
				// eslint-disable-line new-cap
				result = childCompiler.compile(program, this.options),
				guid = this.guid++;

			this.usePartial = this.usePartial || result.usePartial;

			this.children[guid] = result;
			this.useDepths = this.useDepths || result.useDepths;

			return guid;
		},

		accept: function accept(node) {
			/* istanbul ignore next: Sanity code */
			if (!this[node.type]) {
				throw new _exception2['default']('Unknown type: ' + node.type, node);
			}

			this.sourceNode.unshift(node);
			var ret = this[node.type](node);
			this.sourceNode.shift();
			return ret;
		},

		Program: function Program(program) {
			this.options.blockParams.unshift(program.blockParams);

			var body = program.body,
				bodyLength = body.length;
			for (var i = 0; i < bodyLength; i++) {
				this.accept(body[i]);
			}

			this.options.blockParams.shift();

			this.isSimple = bodyLength === 1;
			this.blockParams = program.blockParams ? program.blockParams.length : 0;

			return this;
		},

		BlockStatement: function BlockStatement(block) {
			transformLiteralToPath(block);

			var program = block.program,
				inverse = block.inverse;

			program = program && this.compileProgram(program);
			inverse = inverse && this.compileProgram(inverse);

			var type = this.classifySexpr(block);

			if (type === 'helper') {
				this.helperSexpr(block, program, inverse);
			} else if (type === 'simple') {
				this.simpleSexpr(block);

				// now that the simple mustache is resolved, we need to
				// evaluate it by executing `blockHelperMissing`
				this.opcode('pushProgram', program);
				this.opcode('pushProgram', inverse);
				this.opcode('emptyHash');
				this.opcode('blockValue', block.path.original);
			} else {
				this.ambiguousSexpr(block, program, inverse);

				// now that the simple mustache is resolved, we need to
				// evaluate it by executing `blockHelperMissing`
				this.opcode('pushProgram', program);
				this.opcode('pushProgram', inverse);
				this.opcode('emptyHash');
				this.opcode('ambiguousBlockValue');
			}

			this.opcode('append');
		},

		DecoratorBlock: function DecoratorBlock(decorator) {
			var program = decorator.program && this.compileProgram(decorator.program);
			var params = this.setupFullMustacheParams(decorator, program, undefined),
				path = decorator.path;

			this.useDecorators = true;
			this.opcode('registerDecorator', params.length, path.original);
		},

		PartialStatement: function PartialStatement(partial) {
			this.usePartial = true;

			var program = partial.program;
			if (program) {
				program = this.compileProgram(partial.program);
			}

			var params = partial.params;
			if (params.length > 1) {
				throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
			} else if (!params.length) {
				if (this.options.explicitPartialContext) {
					this.opcode('pushLiteral', 'undefined');
				} else {
					params.push({ type: 'PathExpression', parts: [], depth: 0 });
				}
			}

			var partialName = partial.name.original,
				isDynamic = partial.name.type === 'SubExpression';
			if (isDynamic) {
				this.accept(partial.name);
			}

			this.setupFullMustacheParams(partial, program, undefined, true);

			var indent = partial.indent || '';
			if (this.options.preventIndent && indent) {
				this.opcode('appendContent', indent);
				indent = '';
			}

			this.opcode('invokePartial', isDynamic, partialName, indent);
			this.opcode('append');
		},
		PartialBlockStatement: function PartialBlockStatement(partialBlock) {
			this.PartialStatement(partialBlock);
		},

		MustacheStatement: function MustacheStatement(mustache) {
			this.SubExpression(mustache);

			if (mustache.escaped && !this.options.noEscape) {
				this.opcode('appendEscaped');
			} else {
				this.opcode('append');
			}
		},
		Decorator: function Decorator(decorator) {
			this.DecoratorBlock(decorator);
		},

		ContentStatement: function ContentStatement(content) {
			if (content.value) {
				this.opcode('appendContent', content.value);
			}
		},

		CommentStatement: function CommentStatement() {},

		SubExpression: function SubExpression(sexpr) {
			transformLiteralToPath(sexpr);
			var type = this.classifySexpr(sexpr);

			if (type === 'simple') {
				this.simpleSexpr(sexpr);
			} else if (type === 'helper') {
				this.helperSexpr(sexpr);
			} else {
				this.ambiguousSexpr(sexpr);
			}
		},
		ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
			var path = sexpr.path,
				name = path.parts[0],
				isBlock = program != null || inverse != null;

			this.opcode('getContext', path.depth);

			this.opcode('pushProgram', program);
			this.opcode('pushProgram', inverse);

			path.strict = true;
			this.accept(path);

			this.opcode('invokeAmbiguous', name, isBlock);
		},

		simpleSexpr: function simpleSexpr(sexpr) {
			var path = sexpr.path;
			path.strict = true;
			this.accept(path);
			this.opcode('resolvePossibleLambda');
		},

		helperSexpr: function helperSexpr(sexpr, program, inverse) {
			var params = this.setupFullMustacheParams(sexpr, program, inverse),
				path = sexpr.path,
				name = path.parts[0];

			if (this.options.knownHelpers[name]) {
				this.opcode('invokeKnownHelper', params.length, name);
			} else if (this.options.knownHelpersOnly) {
				throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
			} else {
				path.strict = true;
				path.falsy = true;

				this.accept(path);
				this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
			}
		},

		PathExpression: function PathExpression(path) {
			this.addDepth(path.depth);
			this.opcode('getContext', path.depth);

			var name = path.parts[0],
				scoped = _ast2['default'].helpers.scopedId(path),
				blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

			if (blockParamId) {
				this.opcode('lookupBlockParam', blockParamId, path.parts);
			} else if (!name) {
				// Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
				this.opcode('pushContext');
			} else if (path.data) {
				this.options.data = true;
				this.opcode('lookupData', path.depth, path.parts, path.strict);
			} else {
				this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
			}
		},

		StringLiteral: function StringLiteral(string) {
			this.opcode('pushString', string.value);
		},

		NumberLiteral: function NumberLiteral(number) {
			this.opcode('pushLiteral', number.value);
		},

		BooleanLiteral: function BooleanLiteral(bool) {
			this.opcode('pushLiteral', bool.value);
		},

		UndefinedLiteral: function UndefinedLiteral() {
			this.opcode('pushLiteral', 'undefined');
		},

		NullLiteral: function NullLiteral() {
			this.opcode('pushLiteral', 'null');
		},

		Hash: function Hash(hash) {
			var pairs = hash.pairs,
				i = 0,
				l = pairs.length;

			this.opcode('pushHash');

			for (; i < l; i++) {
				this.pushParam(pairs[i].value);
			}
			while (i--) {
				this.opcode('assignToHash', pairs[i].key);
			}
			this.opcode('popHash');
		},

		// HELPERS
		opcode: function opcode(name) {
			this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
		},

		addDepth: function addDepth(depth) {
			if (!depth) {
				return;
			}

			this.useDepths = true;
		},

		classifySexpr: function classifySexpr(sexpr) {
			var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

			var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

			// a mustache is an eligible helper if:
			// * its id is simple (a single part, not `this` or `..`)
			var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

			// if a mustache is an eligible helper but not a definite
			// helper, it is ambiguous, and will be resolved in a later
			// pass or at runtime.
			var isEligible = !isBlockParam && (isHelper || isSimple);

			// if ambiguous, we can possibly resolve the ambiguity now
			// An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
			if (isEligible && !isHelper) {
				var _name2 = sexpr.path.parts[0],
					options = this.options;

				if (options.knownHelpers[_name2]) {
					isHelper = true;
				} else if (options.knownHelpersOnly) {
					isEligible = false;
				}
			}

			if (isHelper) {
				return 'helper';
			} else if (isEligible) {
				return 'ambiguous';
			} else {
				return 'simple';
			}
		},

		pushParams: function pushParams(params) {
			for (var i = 0, l = params.length; i < l; i++) {
				this.pushParam(params[i]);
			}
		},

		pushParam: function pushParam(val) {
			var value = val.value != null ? val.value : val.original || '';

			if (this.stringParams) {
				if (value.replace) {
					value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
				}

				if (val.depth) {
					this.addDepth(val.depth);
				}
				this.opcode('getContext', val.depth || 0);
				this.opcode('pushStringParam', value, val.type);

				if (val.type === 'SubExpression') {
					// SubExpressions get evaluated and passed in
					// in string params mode.
					this.accept(val);
				}
			} else {
				if (this.trackIds) {
					var blockParamIndex = undefined;
					if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
						blockParamIndex = this.blockParamIndex(val.parts[0]);
					}
					if (blockParamIndex) {
						var blockParamChild = val.parts.slice(1).join('.');
						this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
					} else {
						value = val.original || value;
						if (value.replace) {
							value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
						}

						this.opcode('pushId', val.type, value);
					}
				}
				this.accept(val);
			}
		},

		setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
			var params = sexpr.params;
			this.pushParams(params);

			this.opcode('pushProgram', program);
			this.opcode('pushProgram', inverse);

			if (sexpr.hash) {
				this.accept(sexpr.hash);
			} else {
				this.opcode('emptyHash', omitEmpty);
			}

			return params;
		},

		blockParamIndex: function blockParamIndex(name) {
			for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
				var blockParams = this.options.blockParams[depth],
					param = blockParams && _utils.indexOf(blockParams, name);
				if (blockParams && param >= 0) {
					return [depth, param];
				}
			}
		}
	};

	function precompile(input, options, env) {
		if (input == null || typeof input !== 'string' && input.type !== 'Program') {
			throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
		}

		options = options || {};
		if (!('data' in options)) {
			options.data = true;
		}
		if (options.compat) {
			options.useDepths = true;
		}

		var ast = env.parse(input, options),
			environment = new env.Compiler().compile(ast, options);
		return new env.JavaScriptCompiler().compile(environment, options);
	}

	function compile(input, options, env) {
		if (options === undefined) options = {};

		if (input == null || typeof input !== 'string' && input.type !== 'Program') {
			throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
		}

		if (!('data' in options)) {
			options.data = true;
		}
		if (options.compat) {
			options.useDepths = true;
		}

		var compiled = undefined;

		function compileInput() {
			var ast = env.parse(input, options),
				environment = new env.Compiler().compile(ast, options),
				templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
			return env.template(templateSpec);
		}

		// Template is only compiled on first use and cached after that point.
		function ret(context, execOptions) {
			if (!compiled) {
				compiled = compileInput();
			}
			return compiled.call(this, context, execOptions);
		}
		ret._setup = function (setupOptions) {
			if (!compiled) {
				compiled = compileInput();
			}
			return compiled._setup(setupOptions);
		};
		ret._child = function (i, data, blockParams, depths) {
			if (!compiled) {
				compiled = compileInput();
			}
			return compiled._child(i, data, blockParams, depths);
		};
		return ret;
	}

	function argEquals(a, b) {
		if (a === b) {
			return true;
		}

		if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
			for (var i = 0; i < a.length; i++) {
				if (!argEquals(a[i], b[i])) {
					return false;
				}
			}
			return true;
		}
	}

	function transformLiteralToPath(sexpr) {
		if (!sexpr.path.parts) {
			var literal = sexpr.path;
			// Casting to string here to make false and 0 literal values play nicely with the rest
			// of the system.
			sexpr.path = {
				type: 'PathExpression',
				data: false,
				depth: 0,
				parts: [literal.original + ''],
				original: literal.original + '',
				loc: literal.loc
			};
		}
	}


},{"../exception":79,"../utils":92,"./ast":67}],71:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;
	exports.prepareProgram = prepareProgram;
	exports.preparePartialBlock = preparePartialBlock;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _exception = require('../exception');

	var _exception2 = _interopRequireDefault(_exception);

	function validateClose(open, close) {
		close = close.path ? close.path.original : close;

		if (open.path.original !== close) {
			var errorNode = { loc: open.path.loc };

			throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
		}
	}

	function SourceLocation(source, locInfo) {
		this.source = source;
		this.start = {
			line: locInfo.first_line,
			column: locInfo.first_column
		};
		this.end = {
			line: locInfo.last_line,
			column: locInfo.last_column
		};
	}

	function id(token) {
		if (/^\[.*\]$/.test(token)) {
			return token.substr(1, token.length - 2);
		} else {
			return token;
		}
	}

	function stripFlags(open, close) {
		return {
			open: open.charAt(2) === '~',
			close: close.charAt(close.length - 3) === '~'
		};
	}

	function stripComment(comment) {
		return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
	}

	function preparePath(data, parts, loc) {
		loc = this.locInfo(loc);

		var original = data ? '@' : '',
			dig = [],
			depth = 0,
			depthString = '';

		for (var i = 0, l = parts.length; i < l; i++) {
			var part = parts[i].part,

				// If we have [] syntax then we do not treat path references as operators,
				// i.e. foo.[this] resolves to approximately context.foo['this']
				isLiteral = parts[i].original !== part;
			original += (parts[i].separator || '') + part;

			if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
				if (dig.length > 0) {
					throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
				} else if (part === '..') {
					depth++;
					depthString += '../';
				}
			} else {
				dig.push(part);
			}
		}

		return {
			type: 'PathExpression',
			data: data,
			depth: depth,
			parts: dig,
			original: original,
			loc: loc
		};
	}

	function prepareMustache(path, params, hash, open, strip, locInfo) {
		// Must use charAt to support IE pre-10
		var escapeFlag = open.charAt(3) || open.charAt(2),
			escaped = escapeFlag !== '{' && escapeFlag !== '&';

		var decorator = /\*/.test(open);
		return {
			type: decorator ? 'Decorator' : 'MustacheStatement',
			path: path,
			params: params,
			hash: hash,
			escaped: escaped,
			strip: strip,
			loc: this.locInfo(locInfo)
		};
	}

	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
		validateClose(openRawBlock, close);

		locInfo = this.locInfo(locInfo);
		var program = {
			type: 'Program',
			body: contents,
			strip: {},
			loc: locInfo
		};

		return {
			type: 'BlockStatement',
			path: openRawBlock.path,
			params: openRawBlock.params,
			hash: openRawBlock.hash,
			program: program,
			openStrip: {},
			inverseStrip: {},
			closeStrip: {},
			loc: locInfo
		};
	}

	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
		if (close && close.path) {
			validateClose(openBlock, close);
		}

		var decorator = /\*/.test(openBlock.open);

		program.blockParams = openBlock.blockParams;

		var inverse = undefined,
			inverseStrip = undefined;

		if (inverseAndProgram) {
			if (decorator) {
				throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
			}

			if (inverseAndProgram.chain) {
				inverseAndProgram.program.body[0].closeStrip = close.strip;
			}

			inverseStrip = inverseAndProgram.strip;
			inverse = inverseAndProgram.program;
		}

		if (inverted) {
			inverted = inverse;
			inverse = program;
			program = inverted;
		}

		return {
			type: decorator ? 'DecoratorBlock' : 'BlockStatement',
			path: openBlock.path,
			params: openBlock.params,
			hash: openBlock.hash,
			program: program,
			inverse: inverse,
			openStrip: openBlock.strip,
			inverseStrip: inverseStrip,
			closeStrip: close && close.strip,
			loc: this.locInfo(locInfo)
		};
	}

	function prepareProgram(statements, loc) {
		if (!loc && statements.length) {
			var firstLoc = statements[0].loc,
				lastLoc = statements[statements.length - 1].loc;

			/* istanbul ignore else */
			if (firstLoc && lastLoc) {
				loc = {
					source: firstLoc.source,
					start: {
						line: firstLoc.start.line,
						column: firstLoc.start.column
					},
					end: {
						line: lastLoc.end.line,
						column: lastLoc.end.column
					}
				};
			}
		}

		return {
			type: 'Program',
			body: statements,
			strip: {},
			loc: loc
		};
	}

	function preparePartialBlock(open, program, close, locInfo) {
		validateClose(open, close);

		return {
			type: 'PartialBlockStatement',
			name: open.path,
			params: open.params,
			hash: open.hash,
			program: program,
			openStrip: open.strip,
			closeStrip: close && close.strip,
			loc: this.locInfo(locInfo)
		};
	}


},{"../exception":79}],72:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _base = require('../base');

	var _exception = require('../exception');

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = require('../utils');

	var _codeGen = require('./code-gen');

	var _codeGen2 = _interopRequireDefault(_codeGen);

	function Literal(value) {
		this.value = value;
	}

	function JavaScriptCompiler() {}

	JavaScriptCompiler.prototype = {
		// PUBLIC API: You can override these methods in a subclass to provide
		// alternative compiled forms for name lookup and buffering semantics
		nameLookup: function nameLookup(parent, name /* , type*/) {
			if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
				return [parent, '.', name];
			} else {
				return [parent, '[', JSON.stringify(name), ']'];
			}
		},
		depthedLookup: function depthedLookup(name) {
			return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
		},

		compilerInfo: function compilerInfo() {
			var revision = _base.COMPILER_REVISION,
				versions = _base.REVISION_CHANGES[revision];
			return [revision, versions];
		},

		appendToBuffer: function appendToBuffer(source, location, explicit) {
			// Force a source as this simplifies the merge logic.
			if (!_utils.isArray(source)) {
				source = [source];
			}
			source = this.source.wrap(source, location);

			if (this.environment.isSimple) {
				return ['return ', source, ';'];
			} else if (explicit) {
				// This is a case where the buffer operation occurs as a child of another
				// construct, generally braces. We have to explicitly output these buffer
				// operations to ensure that the emitted code goes in the correct location.
				return ['buffer += ', source, ';'];
			} else {
				source.appendToBuffer = true;
				return source;
			}
		},

		initializeBuffer: function initializeBuffer() {
			return this.quotedString('');
		},
		// END PUBLIC API

		compile: function compile(environment, options, context, asObject) {
			this.environment = environment;
			this.options = options;
			this.stringParams = this.options.stringParams;
			this.trackIds = this.options.trackIds;
			this.precompile = !asObject;

			this.name = this.environment.name;
			this.isChild = !!context;
			this.context = context || {
				decorators: [],
				programs: [],
				environments: []
			};

			this.preamble();

			this.stackSlot = 0;
			this.stackVars = [];
			this.aliases = {};
			this.registers = { list: [] };
			this.hashes = [];
			this.compileStack = [];
			this.inlineStack = [];
			this.blockParams = [];

			this.compileChildren(environment, options);

			this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
			this.useBlockParams = this.useBlockParams || environment.useBlockParams;

			var opcodes = environment.opcodes,
				opcode = undefined,
				firstLoc = undefined,
				i = undefined,
				l = undefined;

			for (i = 0, l = opcodes.length; i < l; i++) {
				opcode = opcodes[i];

				this.source.currentLocation = opcode.loc;
				firstLoc = firstLoc || opcode.loc;
				this[opcode.opcode].apply(this, opcode.args);
			}

			// Flush any trailing content that might be pending.
			this.source.currentLocation = firstLoc;
			this.pushSource('');

			/* istanbul ignore next */
			if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
				throw new _exception2['default']('Compile completed with content left on stack');
			}

			if (!this.decorators.isEmpty()) {
				this.useDecorators = true;

				this.decorators.prepend('var decorators = container.decorators;\n');
				this.decorators.push('return fn;');

				if (asObject) {
					this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
				} else {
					this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
					this.decorators.push('}\n');
					this.decorators = this.decorators.merge();
				}
			} else {
				this.decorators = undefined;
			}

			var fn = this.createFunctionContext(asObject);
			if (!this.isChild) {
				var ret = {
					compiler: this.compilerInfo(),
					main: fn
				};

				if (this.decorators) {
					ret.main_d = this.decorators; // eslint-disable-line camelcase
					ret.useDecorators = true;
				}

				var _context = this.context;
				var programs = _context.programs;
				var decorators = _context.decorators;

				for (i = 0, l = programs.length; i < l; i++) {
					if (programs[i]) {
						ret[i] = programs[i];
						if (decorators[i]) {
							ret[i + '_d'] = decorators[i];
							ret.useDecorators = true;
						}
					}
				}

				if (this.environment.usePartial) {
					ret.usePartial = true;
				}
				if (this.options.data) {
					ret.useData = true;
				}
				if (this.useDepths) {
					ret.useDepths = true;
				}
				if (this.useBlockParams) {
					ret.useBlockParams = true;
				}
				if (this.options.compat) {
					ret.compat = true;
				}

				if (!asObject) {
					ret.compiler = JSON.stringify(ret.compiler);

					this.source.currentLocation = { start: { line: 1, column: 0 } };
					ret = this.objectLiteral(ret);

					if (options.srcName) {
						ret = ret.toStringWithSourceMap({ file: options.destName });
						ret.map = ret.map && ret.map.toString();
					} else {
						ret = ret.toString();
					}
				} else {
					ret.compilerOptions = this.options;
				}

				return ret;
			} else {
				return fn;
			}
		},

		preamble: function preamble() {
			// track the last context pushed into place to allow skipping the
			// getContext opcode when it would be a noop
			this.lastContext = 0;
			this.source = new _codeGen2['default'](this.options.srcName);
			this.decorators = new _codeGen2['default'](this.options.srcName);
		},

		createFunctionContext: function createFunctionContext(asObject) {
			var varDeclarations = '';

			var locals = this.stackVars.concat(this.registers.list);
			if (locals.length > 0) {
				varDeclarations += ', ' + locals.join(', ');
			}

			// Generate minimizer alias mappings
			//
			// When using true SourceNodes, this will update all references to the given alias
			// as the source nodes are reused in situ. For the non-source node compilation mode,
			// aliases will not be used, but this case is already being run on the client and
			// we aren't concern about minimizing the template size.
			var aliasCount = 0;
			for (var alias in this.aliases) {
				// eslint-disable-line guard-for-in
				var node = this.aliases[alias];

				if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
					varDeclarations += ', alias' + ++aliasCount + '=' + alias;
					node.children[0] = 'alias' + aliasCount;
				}
			}

			var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

			if (this.useBlockParams || this.useDepths) {
				params.push('blockParams');
			}
			if (this.useDepths) {
				params.push('depths');
			}

			// Perform a second pass over the output to merge content when possible
			var source = this.mergeSource(varDeclarations);

			if (asObject) {
				params.push(source);

				return Function.apply(this, params);
			} else {
				return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
			}
		},
		mergeSource: function mergeSource(varDeclarations) {
			var isSimple = this.environment.isSimple,
				appendOnly = !this.forceBuffer,
				appendFirst = undefined,
				sourceSeen = undefined,
				bufferStart = undefined,
				bufferEnd = undefined;
			this.source.each(function (line) {
				if (line.appendToBuffer) {
					if (bufferStart) {
						line.prepend('  + ');
					} else {
						bufferStart = line;
					}
					bufferEnd = line;
				} else {
					if (bufferStart) {
						if (!sourceSeen) {
							appendFirst = true;
						} else {
							bufferStart.prepend('buffer += ');
						}
						bufferEnd.add(';');
						bufferStart = bufferEnd = undefined;
					}

					sourceSeen = true;
					if (!isSimple) {
						appendOnly = false;
					}
				}
			});

			if (appendOnly) {
				if (bufferStart) {
					bufferStart.prepend('return ');
					bufferEnd.add(';');
				} else if (!sourceSeen) {
					this.source.push('return "";');
				}
			} else {
				varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

				if (bufferStart) {
					bufferStart.prepend('return buffer + ');
					bufferEnd.add(';');
				} else {
					this.source.push('return buffer;');
				}
			}

			if (varDeclarations) {
				this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
			}

			return this.source.merge();
		},

		// [blockValue]
		//
		// On stack, before: hash, inverse, program, value
		// On stack, after: return value of blockHelperMissing
		//
		// The purpose of this opcode is to take a block of the form
		// `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
		// replace it on the stack with the result of properly
		// invoking blockHelperMissing.
		blockValue: function blockValue(name) {
			var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
				params = [this.contextName(0)];
			this.setupHelperArgs(name, 0, params);

			var blockName = this.popStack();
			params.splice(1, 0, blockName);

			this.push(this.source.functionCall(blockHelperMissing, 'call', params));
		},

		// [ambiguousBlockValue]
		//
		// On stack, before: hash, inverse, program, value
		// Compiler value, before: lastHelper=value of last found helper, if any
		// On stack, after, if no lastHelper: same as [blockValue]
		// On stack, after, if lastHelper: value
		ambiguousBlockValue: function ambiguousBlockValue() {
			// We're being a bit cheeky and reusing the options value from the prior exec
			var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
				params = [this.contextName(0)];
			this.setupHelperArgs('', 0, params, true);

			this.flushInline();

			var current = this.topStack();
			params.splice(1, 0, current);

			this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
		},

		// [appendContent]
		//
		// On stack, before: ...
		// On stack, after: ...
		//
		// Appends the string value of `content` to the current buffer
		appendContent: function appendContent(content) {
			if (this.pendingContent) {
				content = this.pendingContent + content;
			} else {
				this.pendingLocation = this.source.currentLocation;
			}

			this.pendingContent = content;
		},

		// [append]
		//
		// On stack, before: value, ...
		// On stack, after: ...
		//
		// Coerces `value` to a String and appends it to the current buffer.
		//
		// If `value` is truthy, or 0, it is coerced into a string and appended
		// Otherwise, the empty string is appended
		append: function append() {
			if (this.isInline()) {
				this.replaceStack(function (current) {
					return [' != null ? ', current, ' : ""'];
				});

				this.pushSource(this.appendToBuffer(this.popStack()));
			} else {
				var local = this.popStack();
				this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
				if (this.environment.isSimple) {
					this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
				}
			}
		},

		// [appendEscaped]
		//
		// On stack, before: value, ...
		// On stack, after: ...
		//
		// Escape `value` and append it to the buffer
		appendEscaped: function appendEscaped() {
			this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
		},

		// [getContext]
		//
		// On stack, before: ...
		// On stack, after: ...
		// Compiler value, after: lastContext=depth
		//
		// Set the value of the `lastContext` compiler value to the depth
		getContext: function getContext(depth) {
			this.lastContext = depth;
		},

		// [pushContext]
		//
		// On stack, before: ...
		// On stack, after: currentContext, ...
		//
		// Pushes the value of the current context onto the stack.
		pushContext: function pushContext() {
			this.pushStackLiteral(this.contextName(this.lastContext));
		},

		// [lookupOnContext]
		//
		// On stack, before: ...
		// On stack, after: currentContext[name], ...
		//
		// Looks up the value of `name` on the current context and pushes
		// it onto the stack.
		lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
			var i = 0;

			if (!scoped && this.options.compat && !this.lastContext) {
				// The depthed query is expected to handle the undefined logic for the root level that
				// is implemented below, so we evaluate that directly in compat mode
				this.push(this.depthedLookup(parts[i++]));
			} else {
				this.pushContext();
			}

			this.resolvePath('context', parts, i, falsy, strict);
		},

		// [lookupBlockParam]
		//
		// On stack, before: ...
		// On stack, after: blockParam[name], ...
		//
		// Looks up the value of `parts` on the given block param and pushes
		// it onto the stack.
		lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
			this.useBlockParams = true;

			this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
			this.resolvePath('context', parts, 1);
		},

		// [lookupData]
		//
		// On stack, before: ...
		// On stack, after: data, ...
		//
		// Push the data lookup operator
		lookupData: function lookupData(depth, parts, strict) {
			if (!depth) {
				this.pushStackLiteral('data');
			} else {
				this.pushStackLiteral('container.data(data, ' + depth + ')');
			}

			this.resolvePath('data', parts, 0, true, strict);
		},

		resolvePath: function resolvePath(type, parts, i, falsy, strict) {
			// istanbul ignore next

			var _this = this;

			if (this.options.strict || this.options.assumeObjects) {
				this.push(strictLookup(this.options.strict && strict, this, parts, type));
				return;
			}

			var len = parts.length;
			for (; i < len; i++) {
				/* eslint-disable no-loop-func */
				this.replaceStack(function (current) {
					var lookup = _this.nameLookup(current, parts[i], type);
					// We want to ensure that zero and false are handled properly if the context (falsy flag)
					// needs to have the special handling for these values.
					if (!falsy) {
						return [' != null ? ', lookup, ' : ', current];
					} else {
						// Otherwise we can use generic falsy handling
						return [' && ', lookup];
					}
				});
				/* eslint-enable no-loop-func */
			}
		},

		// [resolvePossibleLambda]
		//
		// On stack, before: value, ...
		// On stack, after: resolved value, ...
		//
		// If the `value` is a lambda, replace it on the stack by
		// the return value of the lambda
		resolvePossibleLambda: function resolvePossibleLambda() {
			this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
		},

		// [pushStringParam]
		//
		// On stack, before: ...
		// On stack, after: string, currentContext, ...
		//
		// This opcode is designed for use in string mode, which
		// provides the string value of a parameter along with its
		// depth rather than resolving it immediately.
		pushStringParam: function pushStringParam(string, type) {
			this.pushContext();
			this.pushString(type);

			// If it's a subexpression, the string result
			// will be pushed after this opcode.
			if (type !== 'SubExpression') {
				if (typeof string === 'string') {
					this.pushString(string);
				} else {
					this.pushStackLiteral(string);
				}
			}
		},

		emptyHash: function emptyHash(omitEmpty) {
			if (this.trackIds) {
				this.push('{}'); // hashIds
			}
			if (this.stringParams) {
				this.push('{}'); // hashContexts
				this.push('{}'); // hashTypes
			}
			this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
		},
		pushHash: function pushHash() {
			if (this.hash) {
				this.hashes.push(this.hash);
			}
			this.hash = { values: [], types: [], contexts: [], ids: [] };
		},
		popHash: function popHash() {
			var hash = this.hash;
			this.hash = this.hashes.pop();

			if (this.trackIds) {
				this.push(this.objectLiteral(hash.ids));
			}
			if (this.stringParams) {
				this.push(this.objectLiteral(hash.contexts));
				this.push(this.objectLiteral(hash.types));
			}

			this.push(this.objectLiteral(hash.values));
		},

		// [pushString]
		//
		// On stack, before: ...
		// On stack, after: quotedString(string), ...
		//
		// Push a quoted version of `string` onto the stack
		pushString: function pushString(string) {
			this.pushStackLiteral(this.quotedString(string));
		},

		// [pushLiteral]
		//
		// On stack, before: ...
		// On stack, after: value, ...
		//
		// Pushes a value onto the stack. This operation prevents
		// the compiler from creating a temporary variable to hold
		// it.
		pushLiteral: function pushLiteral(value) {
			this.pushStackLiteral(value);
		},

		// [pushProgram]
		//
		// On stack, before: ...
		// On stack, after: program(guid), ...
		//
		// Push a program expression onto the stack. This takes
		// a compile-time guid and converts it into a runtime-accessible
		// expression.
		pushProgram: function pushProgram(guid) {
			if (guid != null) {
				this.pushStackLiteral(this.programExpression(guid));
			} else {
				this.pushStackLiteral(null);
			}
		},

		// [registerDecorator]
		//
		// On stack, before: hash, program, params..., ...
		// On stack, after: ...
		//
		// Pops off the decorator's parameters, invokes the decorator,
		// and inserts the decorator into the decorators list.
		registerDecorator: function registerDecorator(paramSize, name) {
			var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
				options = this.setupHelperArgs(name, paramSize);

			this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
		},

		// [invokeHelper]
		//
		// On stack, before: hash, inverse, program, params..., ...
		// On stack, after: result of helper invocation
		//
		// Pops off the helper's parameters, invokes the helper,
		// and pushes the helper's return value onto the stack.
		//
		// If the helper is not found, `helperMissing` is called.
		invokeHelper: function invokeHelper(paramSize, name, isSimple) {
			var nonHelper = this.popStack(),
				helper = this.setupHelper(paramSize, name),
				simple = isSimple ? [helper.name, ' || '] : '';

			var lookup = ['('].concat(simple, nonHelper);
			if (!this.options.strict) {
				lookup.push(' || ', this.aliasable('helpers.helperMissing'));
			}
			lookup.push(')');

			this.push(this.source.functionCall(lookup, 'call', helper.callParams));
		},

		// [invokeKnownHelper]
		//
		// On stack, before: hash, inverse, program, params..., ...
		// On stack, after: result of helper invocation
		//
		// This operation is used when the helper is known to exist,
		// so a `helperMissing` fallback is not required.
		invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
			var helper = this.setupHelper(paramSize, name);
			this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
		},

		// [invokeAmbiguous]
		//
		// On stack, before: hash, inverse, program, params..., ...
		// On stack, after: result of disambiguation
		//
		// This operation is used when an expression like `{{foo}}`
		// is provided, but we don't know at compile-time whether it
		// is a helper or a path.
		//
		// This operation emits more code than the other options,
		// and can be avoided by passing the `knownHelpers` and
		// `knownHelpersOnly` flags at compile-time.
		invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
			this.useRegister('helper');

			var nonHelper = this.popStack();

			this.emptyHash();
			var helper = this.setupHelper(0, name, helperCall);

			var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

			var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
			if (!this.options.strict) {
				lookup[0] = '(helper = ';
				lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
			}

			this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
		},

		// [invokePartial]
		//
		// On stack, before: context, ...
		// On stack after: result of partial invocation
		//
		// This operation pops off a context, invokes a partial with that context,
		// and pushes the result of the invocation back.
		invokePartial: function invokePartial(isDynamic, name, indent) {
			var params = [],
				options = this.setupParams(name, 1, params);

			if (isDynamic) {
				name = this.popStack();
				delete options.name;
			}

			if (indent) {
				options.indent = JSON.stringify(indent);
			}
			options.helpers = 'helpers';
			options.partials = 'partials';
			options.decorators = 'container.decorators';

			if (!isDynamic) {
				params.unshift(this.nameLookup('partials', name, 'partial'));
			} else {
				params.unshift(name);
			}

			if (this.options.compat) {
				options.depths = 'depths';
			}
			options = this.objectLiteral(options);
			params.push(options);

			this.push(this.source.functionCall('container.invokePartial', '', params));
		},

		// [assignToHash]
		//
		// On stack, before: value, ..., hash, ...
		// On stack, after: ..., hash, ...
		//
		// Pops a value off the stack and assigns it to the current hash
		assignToHash: function assignToHash(key) {
			var value = this.popStack(),
				context = undefined,
				type = undefined,
				id = undefined;

			if (this.trackIds) {
				id = this.popStack();
			}
			if (this.stringParams) {
				type = this.popStack();
				context = this.popStack();
			}

			var hash = this.hash;
			if (context) {
				hash.contexts[key] = context;
			}
			if (type) {
				hash.types[key] = type;
			}
			if (id) {
				hash.ids[key] = id;
			}
			hash.values[key] = value;
		},

		pushId: function pushId(type, name, child) {
			if (type === 'BlockParam') {
				this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
			} else if (type === 'PathExpression') {
				this.pushString(name);
			} else if (type === 'SubExpression') {
				this.pushStackLiteral('true');
			} else {
				this.pushStackLiteral('null');
			}
		},

		// HELPERS

		compiler: JavaScriptCompiler,

		compileChildren: function compileChildren(environment, options) {
			var children = environment.children,
				child = undefined,
				compiler = undefined;

			for (var i = 0, l = children.length; i < l; i++) {
				child = children[i];
				compiler = new this.compiler(); // eslint-disable-line new-cap

				var index = this.matchExistingProgram(child);

				if (index == null) {
					this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
					index = this.context.programs.length;
					child.index = index;
					child.name = 'program' + index;
					this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
					this.context.decorators[index] = compiler.decorators;
					this.context.environments[index] = child;

					this.useDepths = this.useDepths || compiler.useDepths;
					this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
				} else {
					child.index = index;
					child.name = 'program' + index;

					this.useDepths = this.useDepths || child.useDepths;
					this.useBlockParams = this.useBlockParams || child.useBlockParams;
				}
			}
		},
		matchExistingProgram: function matchExistingProgram(child) {
			for (var i = 0, len = this.context.environments.length; i < len; i++) {
				var environment = this.context.environments[i];
				if (environment && environment.equals(child)) {
					return i;
				}
			}
		},

		programExpression: function programExpression(guid) {
			var child = this.environment.children[guid],
				programParams = [child.index, 'data', child.blockParams];

			if (this.useBlockParams || this.useDepths) {
				programParams.push('blockParams');
			}
			if (this.useDepths) {
				programParams.push('depths');
			}

			return 'container.program(' + programParams.join(', ') + ')';
		},

		useRegister: function useRegister(name) {
			if (!this.registers[name]) {
				this.registers[name] = true;
				this.registers.list.push(name);
			}
		},

		push: function push(expr) {
			if (!(expr instanceof Literal)) {
				expr = this.source.wrap(expr);
			}

			this.inlineStack.push(expr);
			return expr;
		},

		pushStackLiteral: function pushStackLiteral(item) {
			this.push(new Literal(item));
		},

		pushSource: function pushSource(source) {
			if (this.pendingContent) {
				this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
				this.pendingContent = undefined;
			}

			if (source) {
				this.source.push(source);
			}
		},

		replaceStack: function replaceStack(callback) {
			var prefix = ['('],
				stack = undefined,
				createdStack = undefined,
				usedLiteral = undefined;

			/* istanbul ignore next */
			if (!this.isInline()) {
				throw new _exception2['default']('replaceStack on non-inline');
			}

			// We want to merge the inline statement into the replacement statement via ','
			var top = this.popStack(true);

			if (top instanceof Literal) {
				// Literals do not need to be inlined
				stack = [top.value];
				prefix = ['(', stack];
				usedLiteral = true;
			} else {
				// Get or create the current stack name for use by the inline
				createdStack = true;
				var _name = this.incrStack();

				prefix = ['((', this.push(_name), ' = ', top, ')'];
				stack = this.topStack();
			}

			var item = callback.call(this, stack);

			if (!usedLiteral) {
				this.popStack();
			}
			if (createdStack) {
				this.stackSlot--;
			}
			this.push(prefix.concat(item, ')'));
		},

		incrStack: function incrStack() {
			this.stackSlot++;
			if (this.stackSlot > this.stackVars.length) {
				this.stackVars.push('stack' + this.stackSlot);
			}
			return this.topStackName();
		},
		topStackName: function topStackName() {
			return 'stack' + this.stackSlot;
		},
		flushInline: function flushInline() {
			var inlineStack = this.inlineStack;
			this.inlineStack = [];
			for (var i = 0, len = inlineStack.length; i < len; i++) {
				var entry = inlineStack[i];
				/* istanbul ignore if */
				if (entry instanceof Literal) {
					this.compileStack.push(entry);
				} else {
					var stack = this.incrStack();
					this.pushSource([stack, ' = ', entry, ';']);
					this.compileStack.push(stack);
				}
			}
		},
		isInline: function isInline() {
			return this.inlineStack.length;
		},

		popStack: function popStack(wrapped) {
			var inline = this.isInline(),
				item = (inline ? this.inlineStack : this.compileStack).pop();

			if (!wrapped && item instanceof Literal) {
				return item.value;
			} else {
				if (!inline) {
					/* istanbul ignore next */
					if (!this.stackSlot) {
						throw new _exception2['default']('Invalid stack pop');
					}
					this.stackSlot--;
				}
				return item;
			}
		},

		topStack: function topStack() {
			var stack = this.isInline() ? this.inlineStack : this.compileStack,
				item = stack[stack.length - 1];

			/* istanbul ignore if */
			if (item instanceof Literal) {
				return item.value;
			} else {
				return item;
			}
		},

		contextName: function contextName(context) {
			if (this.useDepths && context) {
				return 'depths[' + context + ']';
			} else {
				return 'depth' + context;
			}
		},

		quotedString: function quotedString(str) {
			return this.source.quotedString(str);
		},

		objectLiteral: function objectLiteral(obj) {
			return this.source.objectLiteral(obj);
		},

		aliasable: function aliasable(name) {
			var ret = this.aliases[name];
			if (ret) {
				ret.referenceCount++;
				return ret;
			}

			ret = this.aliases[name] = this.source.wrap(name);
			ret.aliasable = true;
			ret.referenceCount = 1;

			return ret;
		},

		setupHelper: function setupHelper(paramSize, name, blockHelper) {
			var params = [],
				paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
			var foundHelper = this.nameLookup('helpers', name, 'helper'),
				callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');

			return {
				params: params,
				paramsInit: paramsInit,
				name: foundHelper,
				callParams: [callContext].concat(params)
			};
		},

		setupParams: function setupParams(helper, paramSize, params) {
			var options = {},
				contexts = [],
				types = [],
				ids = [],
				objectArgs = !params,
				param = undefined;

			if (objectArgs) {
				params = [];
			}

			options.name = this.quotedString(helper);
			options.hash = this.popStack();

			if (this.trackIds) {
				options.hashIds = this.popStack();
			}
			if (this.stringParams) {
				options.hashTypes = this.popStack();
				options.hashContexts = this.popStack();
			}

			var inverse = this.popStack(),
				program = this.popStack();

			// Avoid setting fn and inverse if neither are set. This allows
			// helpers to do a check for `if (options.fn)`
			if (program || inverse) {
				options.fn = program || 'container.noop';
				options.inverse = inverse || 'container.noop';
			}

			// The parameters go on to the stack in order (making sure that they are evaluated in order)
			// so we need to pop them off the stack in reverse order
			var i = paramSize;
			while (i--) {
				param = this.popStack();
				params[i] = param;

				if (this.trackIds) {
					ids[i] = this.popStack();
				}
				if (this.stringParams) {
					types[i] = this.popStack();
					contexts[i] = this.popStack();
				}
			}

			if (objectArgs) {
				options.args = this.source.generateArray(params);
			}

			if (this.trackIds) {
				options.ids = this.source.generateArray(ids);
			}
			if (this.stringParams) {
				options.types = this.source.generateArray(types);
				options.contexts = this.source.generateArray(contexts);
			}

			if (this.options.data) {
				options.data = 'data';
			}
			if (this.useBlockParams) {
				options.blockParams = 'blockParams';
			}
			return options;
		},

		setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
			var options = this.setupParams(helper, paramSize, params);
			options = this.objectLiteral(options);
			if (useRegister) {
				this.useRegister('options');
				params.push('options');
				return ['options=', options];
			} else if (params) {
				params.push(options);
				return '';
			} else {
				return options;
			}
		}
	};

	(function () {
		var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

		var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

		for (var i = 0, l = reservedWords.length; i < l; i++) {
			compilerWords[reservedWords[i]] = true;
		}
	})();

	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
		return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};

	function strictLookup(requireTerminal, compiler, parts, type) {
		var stack = compiler.popStack(),
			i = 0,
			len = parts.length;
		if (requireTerminal) {
			len--;
		}

		for (; i < len; i++) {
			stack = compiler.nameLookup(stack, parts[i], type);
		}

		if (requireTerminal) {
			return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
		} else {
			return stack;
		}
	}

	exports['default'] = JavaScriptCompiler;
	module.exports = exports['default'];


},{"../base":66,"../exception":79,"../utils":92,"./code-gen":69}],73:[function(require,module,exports){
/* istanbul ignore next */
/* Jison generated parser */
	"use strict";

	var handlebars = (function () {
		var parser = { trace: function trace() {},
			yy: {},
			symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
			terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
			productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
			performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
				/**/) {

				var $0 = $$.length - 1;
				switch (yystate) {
				case 1:
					return $$[$0 - 1];
					break;
				case 2:
					this.$ = yy.prepareProgram($$[$0]);
					break;
				case 3:
					this.$ = $$[$0];
					break;
				case 4:
					this.$ = $$[$0];
					break;
				case 5:
					this.$ = $$[$0];
					break;
				case 6:
					this.$ = $$[$0];
					break;
				case 7:
					this.$ = $$[$0];
					break;
				case 8:
					this.$ = $$[$0];
					break;
				case 9:
					this.$ = {
						type: 'CommentStatement',
						value: yy.stripComment($$[$0]),
						strip: yy.stripFlags($$[$0], $$[$0]),
						loc: yy.locInfo(this._$)
					};

					break;
				case 10:
					this.$ = {
						type: 'ContentStatement',
						original: $$[$0],
						value: $$[$0],
						loc: yy.locInfo(this._$)
					};

					break;
				case 11:
					this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
					break;
				case 12:
					this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
					break;
				case 13:
					this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
					break;
				case 14:
					this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
					break;
				case 15:
					this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
					break;
				case 16:
					this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
					break;
				case 17:
					this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
					break;
				case 18:
					this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
					break;
				case 19:
					var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
						program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
					program.chained = true;

					this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

					break;
				case 20:
					this.$ = $$[$0];
					break;
				case 21:
					this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
					break;
				case 22:
					this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
					break;
				case 23:
					this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
					break;
				case 24:
					this.$ = {
						type: 'PartialStatement',
						name: $$[$0 - 3],
						params: $$[$0 - 2],
						hash: $$[$0 - 1],
						indent: '',
						strip: yy.stripFlags($$[$0 - 4], $$[$0]),
						loc: yy.locInfo(this._$)
					};

					break;
				case 25:
					this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
					break;
				case 26:
					this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
					break;
				case 27:
					this.$ = $$[$0];
					break;
				case 28:
					this.$ = $$[$0];
					break;
				case 29:
					this.$ = {
						type: 'SubExpression',
						path: $$[$0 - 3],
						params: $$[$0 - 2],
						hash: $$[$0 - 1],
						loc: yy.locInfo(this._$)
					};

					break;
				case 30:
					this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
					break;
				case 31:
					this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
					break;
				case 32:
					this.$ = yy.id($$[$0 - 1]);
					break;
				case 33:
					this.$ = $$[$0];
					break;
				case 34:
					this.$ = $$[$0];
					break;
				case 35:
					this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
					break;
				case 36:
					this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
					break;
				case 37:
					this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
					break;
				case 38:
					this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
					break;
				case 39:
					this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
					break;
				case 40:
					this.$ = $$[$0];
					break;
				case 41:
					this.$ = $$[$0];
					break;
				case 42:
					this.$ = yy.preparePath(true, $$[$0], this._$);
					break;
				case 43:
					this.$ = yy.preparePath(false, $$[$0], this._$);
					break;
				case 44:
					$$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
					break;
				case 45:
					this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
					break;
				case 46:
					this.$ = [];
					break;
				case 47:
					$$[$0 - 1].push($$[$0]);
					break;
				case 48:
					this.$ = [$$[$0]];
					break;
				case 49:
					$$[$0 - 1].push($$[$0]);
					break;
				case 50:
					this.$ = [];
					break;
				case 51:
					$$[$0 - 1].push($$[$0]);
					break;
				case 58:
					this.$ = [];
					break;
				case 59:
					$$[$0 - 1].push($$[$0]);
					break;
				case 64:
					this.$ = [];
					break;
				case 65:
					$$[$0 - 1].push($$[$0]);
					break;
				case 70:
					this.$ = [];
					break;
				case 71:
					$$[$0 - 1].push($$[$0]);
					break;
				case 78:
					this.$ = [];
					break;
				case 79:
					$$[$0 - 1].push($$[$0]);
					break;
				case 82:
					this.$ = [];
					break;
				case 83:
					$$[$0 - 1].push($$[$0]);
					break;
				case 86:
					this.$ = [];
					break;
				case 87:
					$$[$0 - 1].push($$[$0]);
					break;
				case 90:
					this.$ = [];
					break;
				case 91:
					$$[$0 - 1].push($$[$0]);
					break;
				case 94:
					this.$ = [];
					break;
				case 95:
					$$[$0 - 1].push($$[$0]);
					break;
				case 98:
					this.$ = [$$[$0]];
					break;
				case 99:
					$$[$0 - 1].push($$[$0]);
					break;
				case 100:
					this.$ = [$$[$0]];
					break;
				case 101:
					$$[$0 - 1].push($$[$0]);
					break;
				}
			},
			table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
			defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
			parseError: function parseError(str, hash) {
				throw new Error(str);
			},
			parse: function parse(input) {
				var self = this,
					stack = [0],
					vstack = [null],
					lstack = [],
					table = this.table,
					yytext = "",
					yylineno = 0,
					yyleng = 0,
					recovering = 0,
					TERROR = 2,
					EOF = 1;
				this.lexer.setInput(input);
				this.lexer.yy = this.yy;
				this.yy.lexer = this.lexer;
				this.yy.parser = this;
				if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
				var yyloc = this.lexer.yylloc;
				lstack.push(yyloc);
				var ranges = this.lexer.options && this.lexer.options.ranges;
				if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
				function popStack(n) {
					stack.length = stack.length - 2 * n;
					vstack.length = vstack.length - n;
					lstack.length = lstack.length - n;
				}
				function lex() {
					var token;
					token = self.lexer.lex() || 1;
					if (typeof token !== "number") {
						token = self.symbols_[token] || token;
					}
					return token;
				}
				var symbol,
					preErrorSymbol,
					state,
					action,
					a,
					r,
					yyval = {},
					p,
					len,
					newState,
					expected;
				while (true) {
					state = stack[stack.length - 1];
					if (this.defaultActions[state]) {
						action = this.defaultActions[state];
					} else {
						if (symbol === null || typeof symbol == "undefined") {
							symbol = lex();
						}
						action = table[state] && table[state][symbol];
					}
					if (typeof action === "undefined" || !action.length || !action[0]) {
						var errStr = "";
						if (!recovering) {
							expected = [];
							for (p in table[state]) if (this.terminals_[p] && p > 2) {
								expected.push("'" + this.terminals_[p] + "'");
							}
							if (this.lexer.showPosition) {
								errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
							} else {
								errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
							}
							this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
						}
					}
					if (action[0] instanceof Array && action.length > 1) {
						throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
					}
					switch (action[0]) {
					case 1:
						stack.push(symbol);
						vstack.push(this.lexer.yytext);
						lstack.push(this.lexer.yylloc);
						stack.push(action[1]);
						symbol = null;
						if (!preErrorSymbol) {
							yyleng = this.lexer.yyleng;
							yytext = this.lexer.yytext;
							yylineno = this.lexer.yylineno;
							yyloc = this.lexer.yylloc;
							if (recovering > 0) recovering--;
						} else {
							symbol = preErrorSymbol;
							preErrorSymbol = null;
						}
						break;
					case 2:
						len = this.productions_[action[1]][1];
						yyval.$ = vstack[vstack.length - len];
						yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
						if (ranges) {
							yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
						}
						r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
						if (typeof r !== "undefined") {
							return r;
						}
						if (len) {
							stack = stack.slice(0, -1 * len * 2);
							vstack = vstack.slice(0, -1 * len);
							lstack = lstack.slice(0, -1 * len);
						}
						stack.push(this.productions_[action[1]][0]);
						vstack.push(yyval.$);
						lstack.push(yyval._$);
						newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
						stack.push(newState);
						break;
					case 3:
						return true;
					}
				}
				return true;
			}
		};
		/* Jison generated lexer */
		var lexer = (function () {
			var lexer = { EOF: 1,
				parseError: function parseError(str, hash) {
					if (this.yy.parser) {
						this.yy.parser.parseError(str, hash);
					} else {
						throw new Error(str);
					}
				},
				setInput: function setInput(input) {
					this._input = input;
					this._more = this._less = this.done = false;
					this.yylineno = this.yyleng = 0;
					this.yytext = this.matched = this.match = '';
					this.conditionStack = ['INITIAL'];
					this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
					if (this.options.ranges) this.yylloc.range = [0, 0];
					this.offset = 0;
					return this;
				},
				input: function input() {
					var ch = this._input[0];
					this.yytext += ch;
					this.yyleng++;
					this.offset++;
					this.match += ch;
					this.matched += ch;
					var lines = ch.match(/(?:\r\n?|\n).*/g);
					if (lines) {
						this.yylineno++;
						this.yylloc.last_line++;
					} else {
						this.yylloc.last_column++;
					}
					if (this.options.ranges) this.yylloc.range[1]++;

					this._input = this._input.slice(1);
					return ch;
				},
				unput: function unput(ch) {
					var len = ch.length;
					var lines = ch.split(/(?:\r\n?|\n)/g);

					this._input = ch + this._input;
					this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
					//this.yyleng -= len;
					this.offset -= len;
					var oldLines = this.match.split(/(?:\r\n?|\n)/g);
					this.match = this.match.substr(0, this.match.length - 1);
					this.matched = this.matched.substr(0, this.matched.length - 1);

					if (lines.length - 1) this.yylineno -= lines.length - 1;
					var r = this.yylloc.range;

					this.yylloc = { first_line: this.yylloc.first_line,
						last_line: this.yylineno + 1,
						first_column: this.yylloc.first_column,
						last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
					};

					if (this.options.ranges) {
						this.yylloc.range = [r[0], r[0] + this.yyleng - len];
					}
					return this;
				},
				more: function more() {
					this._more = true;
					return this;
				},
				less: function less(n) {
					this.unput(this.match.slice(n));
				},
				pastInput: function pastInput() {
					var past = this.matched.substr(0, this.matched.length - this.match.length);
					return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
				},
				upcomingInput: function upcomingInput() {
					var next = this.match;
					if (next.length < 20) {
						next += this._input.substr(0, 20 - next.length);
					}
					return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
				},
				showPosition: function showPosition() {
					var pre = this.pastInput();
					var c = new Array(pre.length + 1).join("-");
					return pre + this.upcomingInput() + "\n" + c + "^";
				},
				next: function next() {
					if (this.done) {
						return this.EOF;
					}
					if (!this._input) this.done = true;

					var token, match, tempMatch, index, col, lines;
					if (!this._more) {
						this.yytext = '';
						this.match = '';
					}
					var rules = this._currentRules();
					for (var i = 0; i < rules.length; i++) {
						tempMatch = this._input.match(this.rules[rules[i]]);
						if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
							match = tempMatch;
							index = i;
							if (!this.options.flex) break;
						}
					}
					if (match) {
						lines = match[0].match(/(?:\r\n?|\n).*/g);
						if (lines) this.yylineno += lines.length;
						this.yylloc = { first_line: this.yylloc.last_line,
							last_line: this.yylineno + 1,
							first_column: this.yylloc.last_column,
							last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
						this.yytext += match[0];
						this.match += match[0];
						this.matches = match;
						this.yyleng = this.yytext.length;
						if (this.options.ranges) {
							this.yylloc.range = [this.offset, this.offset += this.yyleng];
						}
						this._more = false;
						this._input = this._input.slice(match[0].length);
						this.matched += match[0];
						token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
						if (this.done && this._input) this.done = false;
						if (token) return token;else return;
					}
					if (this._input === "") {
						return this.EOF;
					} else {
						return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
					}
				},
				lex: function lex() {
					var r = this.next();
					if (typeof r !== 'undefined') {
						return r;
					} else {
						return this.lex();
					}
				},
				begin: function begin(condition) {
					this.conditionStack.push(condition);
				},
				popState: function popState() {
					return this.conditionStack.pop();
				},
				_currentRules: function _currentRules() {
					return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
				},
				topState: function topState() {
					return this.conditionStack[this.conditionStack.length - 2];
				},
				pushState: function begin(condition) {
					this.begin(condition);
				} };
			lexer.options = {};
			lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
				/**/) {

				function strip(start, end) {
					return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
				}

				var YYSTATE = YY_START;
				switch ($avoiding_name_collisions) {
				case 0:
					if (yy_.yytext.slice(-2) === "\\\\") {
						strip(0, 1);
						this.begin("mu");
					} else if (yy_.yytext.slice(-1) === "\\") {
						strip(0, 1);
						this.begin("emu");
					} else {
						this.begin("mu");
					}
					if (yy_.yytext) return 15;

					break;
				case 1:
					return 15;
					break;
				case 2:
					this.popState();
					return 15;

					break;
				case 3:
					this.begin('raw');return 15;
					break;
				case 4:
					this.popState();
					// Should be using `this.topState()` below, but it currently
					// returns the second top instead of the first top. Opened an
					// issue about it at https://github.com/zaach/jison/issues/291
					if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
						return 15;
					} else {
						yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
						return 'END_RAW_BLOCK';
					}

					break;
				case 5:
					return 15;
					break;
				case 6:
					this.popState();
					return 14;

					break;
				case 7:
					return 65;
					break;
				case 8:
					return 68;
					break;
				case 9:
					return 19;
					break;
				case 10:
					this.popState();
					this.begin('raw');
					return 23;

					break;
				case 11:
					return 55;
					break;
				case 12:
					return 60;
					break;
				case 13:
					return 29;
					break;
				case 14:
					return 47;
					break;
				case 15:
					this.popState();return 44;
					break;
				case 16:
					this.popState();return 44;
					break;
				case 17:
					return 34;
					break;
				case 18:
					return 39;
					break;
				case 19:
					return 51;
					break;
				case 20:
					return 48;
					break;
				case 21:
					this.unput(yy_.yytext);
					this.popState();
					this.begin('com');

					break;
				case 22:
					this.popState();
					return 14;

					break;
				case 23:
					return 48;
					break;
				case 24:
					return 73;
					break;
				case 25:
					return 72;
					break;
				case 26:
					return 72;
					break;
				case 27:
					return 87;
					break;
				case 28:
					// ignore whitespace
					break;
				case 29:
					this.popState();return 54;
					break;
				case 30:
					this.popState();return 33;
					break;
				case 31:
					yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
					break;
				case 32:
					yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
					break;
				case 33:
					return 85;
					break;
				case 34:
					return 82;
					break;
				case 35:
					return 82;
					break;
				case 36:
					return 83;
					break;
				case 37:
					return 84;
					break;
				case 38:
					return 81;
					break;
				case 39:
					return 75;
					break;
				case 40:
					return 77;
					break;
				case 41:
					return 72;
					break;
				case 42:
					yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
					break;
				case 43:
					return 'INVALID';
					break;
				case 44:
					return 5;
					break;
				}
			};
			lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
			lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
			return lexer;
		})();
		parser.lexer = lexer;
		function Parser() {
			this.yy = {};
		}Parser.prototype = parser;parser.Parser = Parser;
		return new Parser();
	})();exports.__esModule = true;
	exports['default'] = handlebars;


},{}],74:[function(require,module,exports){
/* eslint-disable new-cap */
	'use strict';

	exports.__esModule = true;
	exports.print = print;
	exports.PrintVisitor = PrintVisitor;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _visitor = require('./visitor');

	var _visitor2 = _interopRequireDefault(_visitor);

	function print(ast) {
		return new PrintVisitor().accept(ast);
	}

	function PrintVisitor() {
		this.padding = 0;
	}

	PrintVisitor.prototype = new _visitor2['default']();

	PrintVisitor.prototype.pad = function (string) {
		var out = '';

		for (var i = 0, l = this.padding; i < l; i++) {
			out += '  ';
		}

		out += string + '\n';
		return out;
	};

	PrintVisitor.prototype.Program = function (program) {
		var out = '',
			body = program.body,
			i = undefined,
			l = undefined;

		if (program.blockParams) {
			var blockParams = 'BLOCK PARAMS: [';
			for (i = 0, l = program.blockParams.length; i < l; i++) {
				blockParams += ' ' + program.blockParams[i];
			}
			blockParams += ' ]';
			out += this.pad(blockParams);
		}

		for (i = 0, l = body.length; i < l; i++) {
			out += this.accept(body[i]);
		}

		this.padding--;

		return out;
	};

	PrintVisitor.prototype.MustacheStatement = function (mustache) {
		return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');
	};
	PrintVisitor.prototype.Decorator = function (mustache) {
		return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');
	};

	PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {
		var out = '';

		out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
		this.padding++;
		out += this.pad(this.SubExpression(block));
		if (block.program) {
			out += this.pad('PROGRAM:');
			this.padding++;
			out += this.accept(block.program);
			this.padding--;
		}
		if (block.inverse) {
			if (block.program) {
				this.padding++;
			}
			out += this.pad('{{^}}');
			this.padding++;
			out += this.accept(block.inverse);
			this.padding--;
			if (block.program) {
				this.padding--;
			}
		}
		this.padding--;

		return out;
	};

	PrintVisitor.prototype.PartialStatement = function (partial) {
		var content = 'PARTIAL:' + partial.name.original;
		if (partial.params[0]) {
			content += ' ' + this.accept(partial.params[0]);
		}
		if (partial.hash) {
			content += ' ' + this.accept(partial.hash);
		}
		return this.pad('{{> ' + content + ' }}');
	};
	PrintVisitor.prototype.PartialBlockStatement = function (partial) {
		var content = 'PARTIAL BLOCK:' + partial.name.original;
		if (partial.params[0]) {
			content += ' ' + this.accept(partial.params[0]);
		}
		if (partial.hash) {
			content += ' ' + this.accept(partial.hash);
		}

		content += ' ' + this.pad('PROGRAM:');
		this.padding++;
		content += this.accept(partial.program);
		this.padding--;

		return this.pad('{{> ' + content + ' }}');
	};

	PrintVisitor.prototype.ContentStatement = function (content) {
		return this.pad("CONTENT[ '" + content.value + "' ]");
	};

	PrintVisitor.prototype.CommentStatement = function (comment) {
		return this.pad("{{! '" + comment.value + "' }}");
	};

	PrintVisitor.prototype.SubExpression = function (sexpr) {
		var params = sexpr.params,
			paramStrings = [],
			hash = undefined;

		for (var i = 0, l = params.length; i < l; i++) {
			paramStrings.push(this.accept(params[i]));
		}

		params = '[' + paramStrings.join(', ') + ']';

		hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';

		return this.accept(sexpr.path) + ' ' + params + hash;
	};

	PrintVisitor.prototype.PathExpression = function (id) {
		var path = id.parts.join('/');
		return (id.data ? '@' : '') + 'PATH:' + path;
	};

	PrintVisitor.prototype.StringLiteral = function (string) {
		return '"' + string.value + '"';
	};

	PrintVisitor.prototype.NumberLiteral = function (number) {
		return 'NUMBER{' + number.value + '}';
	};

	PrintVisitor.prototype.BooleanLiteral = function (bool) {
		return 'BOOLEAN{' + bool.value + '}';
	};

	PrintVisitor.prototype.UndefinedLiteral = function () {
		return 'UNDEFINED';
	};

	PrintVisitor.prototype.NullLiteral = function () {
		return 'NULL';
	};

	PrintVisitor.prototype.Hash = function (hash) {
		var pairs = hash.pairs,
			joinedPairs = [];

		for (var i = 0, l = pairs.length; i < l; i++) {
			joinedPairs.push(this.accept(pairs[i]));
		}

		return 'HASH{' + joinedPairs.join(', ') + '}';
	};
	PrintVisitor.prototype.HashPair = function (pair) {
		return pair.key + '=' + this.accept(pair.value);
	};
	/* eslint-enable new-cap */


},{"./visitor":75}],75:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _exception = require('../exception');

	var _exception2 = _interopRequireDefault(_exception);

	function Visitor() {
		this.parents = [];
	}

	Visitor.prototype = {
		constructor: Visitor,
		mutating: false,

		// Visits a given value. If mutating, will replace the value if necessary.
		acceptKey: function acceptKey(node, name) {
			var value = this.accept(node[name]);
			if (this.mutating) {
				// Hacky sanity check: This may have a few false positives for type for the helper
				// methods but will generally do the right thing without a lot of overhead.
				if (value && !Visitor.prototype[value.type]) {
					throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
				}
				node[name] = value;
			}
		},

		// Performs an accept operation with added sanity check to ensure
		// required keys are not removed.
		acceptRequired: function acceptRequired(node, name) {
			this.acceptKey(node, name);

			if (!node[name]) {
				throw new _exception2['default'](node.type + ' requires ' + name);
			}
		},

		// Traverses a given array. If mutating, empty respnses will be removed
		// for child elements.
		acceptArray: function acceptArray(array) {
			for (var i = 0, l = array.length; i < l; i++) {
				this.acceptKey(array, i);

				if (!array[i]) {
					array.splice(i, 1);
					i--;
					l--;
				}
			}
		},

		accept: function accept(object) {
			if (!object) {
				return;
			}

			/* istanbul ignore next: Sanity code */
			if (!this[object.type]) {
				throw new _exception2['default']('Unknown type: ' + object.type, object);
			}

			if (this.current) {
				this.parents.unshift(this.current);
			}
			this.current = object;

			var ret = this[object.type](object);

			this.current = this.parents.shift();

			if (!this.mutating || ret) {
				return ret;
			} else if (ret !== false) {
				return object;
			}
		},

		Program: function Program(program) {
			this.acceptArray(program.body);
		},

		MustacheStatement: visitSubExpression,
		Decorator: visitSubExpression,

		BlockStatement: visitBlock,
		DecoratorBlock: visitBlock,

		PartialStatement: visitPartial,
		PartialBlockStatement: function PartialBlockStatement(partial) {
			visitPartial.call(this, partial);

			this.acceptKey(partial, 'program');
		},

		ContentStatement: function ContentStatement() /* content */{},
		CommentStatement: function CommentStatement() /* comment */{},

		SubExpression: visitSubExpression,

		PathExpression: function PathExpression() /* path */{},

		StringLiteral: function StringLiteral() /* string */{},
		NumberLiteral: function NumberLiteral() /* number */{},
		BooleanLiteral: function BooleanLiteral() /* bool */{},
		UndefinedLiteral: function UndefinedLiteral() /* literal */{},
		NullLiteral: function NullLiteral() /* literal */{},

		Hash: function Hash(hash) {
			this.acceptArray(hash.pairs);
		},
		HashPair: function HashPair(pair) {
			this.acceptRequired(pair, 'value');
		}
	};

	function visitSubExpression(mustache) {
		this.acceptRequired(mustache, 'path');
		this.acceptArray(mustache.params);
		this.acceptKey(mustache, 'hash');
	}
	function visitBlock(block) {
		visitSubExpression.call(this, block);

		this.acceptKey(block, 'program');
		this.acceptKey(block, 'inverse');
	}
	function visitPartial(partial) {
		this.acceptRequired(partial, 'name');
		this.acceptArray(partial.params);
		this.acceptKey(partial, 'hash');
	}

	exports['default'] = Visitor;
	module.exports = exports['default'];


},{"../exception":79}],76:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _visitor = require('./visitor');

	var _visitor2 = _interopRequireDefault(_visitor);

	function WhitespaceControl() {
		var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		this.options = options;
	}
	WhitespaceControl.prototype = new _visitor2['default']();

	WhitespaceControl.prototype.Program = function (program) {
		var doStandalone = !this.options.ignoreStandalone;

		var isRoot = !this.isRootSeen;
		this.isRootSeen = true;

		var body = program.body;
		for (var i = 0, l = body.length; i < l; i++) {
			var current = body[i],
				strip = this.accept(current);

			if (!strip) {
				continue;
			}

			var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
				_isNextWhitespace = isNextWhitespace(body, i, isRoot),
				openStandalone = strip.openStandalone && _isPrevWhitespace,
				closeStandalone = strip.closeStandalone && _isNextWhitespace,
				inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

			if (strip.close) {
				omitRight(body, i, true);
			}
			if (strip.open) {
				omitLeft(body, i, true);
			}

			if (doStandalone && inlineStandalone) {
				omitRight(body, i);

				if (omitLeft(body, i)) {
					// If we are on a standalone node, save the indent info for partials
					if (current.type === 'PartialStatement') {
						// Pull out the whitespace from the final line
						current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
					}
				}
			}
			if (doStandalone && openStandalone) {
				omitRight((current.program || current.inverse).body);

				// Strip out the previous content node if it's whitespace only
				omitLeft(body, i);
			}
			if (doStandalone && closeStandalone) {
				// Always strip the next node
				omitRight(body, i);

				omitLeft((current.inverse || current.program).body);
			}
		}

		return program;
	};

	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
		this.accept(block.program);
		this.accept(block.inverse);

		// Find the inverse program that is involed with whitespace stripping.
		var program = block.program || block.inverse,
			inverse = block.program && block.inverse,
			firstInverse = inverse,
			lastInverse = inverse;

		if (inverse && inverse.chained) {
			firstInverse = inverse.body[0].program;

			// Walk the inverse chain to find the last inverse that is actually in the chain.
			while (lastInverse.chained) {
				lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
			}
		}

		var strip = {
			open: block.openStrip.open,
			close: block.closeStrip.close,

			// Determine the standalone candiacy. Basically flag our content as being possibly standalone
			// so our parent can determine if we actually are standalone
			openStandalone: isNextWhitespace(program.body),
			closeStandalone: isPrevWhitespace((firstInverse || program).body)
		};

		if (block.openStrip.close) {
			omitRight(program.body, null, true);
		}

		if (inverse) {
			var inverseStrip = block.inverseStrip;

			if (inverseStrip.open) {
				omitLeft(program.body, null, true);
			}

			if (inverseStrip.close) {
				omitRight(firstInverse.body, null, true);
			}
			if (block.closeStrip.open) {
				omitLeft(lastInverse.body, null, true);
			}

			// Find standalone else statments
			if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
				omitLeft(program.body);
				omitRight(firstInverse.body);
			}
		} else if (block.closeStrip.open) {
			omitLeft(program.body, null, true);
		}

		return strip;
	};

	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
		return mustache.strip;
	};

	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
		/* istanbul ignore next */
		var strip = node.strip || {};
		return {
			inlineStandalone: true,
			open: strip.open,
			close: strip.close
		};
	};

	function isPrevWhitespace(body, i, isRoot) {
		if (i === undefined) {
			i = body.length;
		}

		// Nodes that end with newlines are considered whitespace (but are special
		// cased for strip operations)
		var prev = body[i - 1],
			sibling = body[i - 2];
		if (!prev) {
			return isRoot;
		}

		if (prev.type === 'ContentStatement') {
			return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
		}
	}
	function isNextWhitespace(body, i, isRoot) {
		if (i === undefined) {
			i = -1;
		}

		var next = body[i + 1],
			sibling = body[i + 2];
		if (!next) {
			return isRoot;
		}

		if (next.type === 'ContentStatement') {
			return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
		}
	}

	// Marks the node to the right of the position as omitted.
	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
	//
	// If i is undefined, then the first child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitRight(body, i, multiple) {
		var current = body[i == null ? 0 : i + 1];
		if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
			return;
		}

		var original = current.value;
		current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
		current.rightStripped = current.value !== original;
	}

	// Marks the node to the left of the position as omitted.
	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
	//
	// If i is undefined then the last child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitLeft(body, i, multiple) {
		var current = body[i == null ? body.length - 1 : i - 1];
		if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
			return;
		}

		// We omit the last node if it's whitespace only and not preceeded by a non-content node.
		var original = current.value;
		current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
		current.leftStripped = current.value !== original;
		return current.leftStripped;
	}

	exports['default'] = WhitespaceControl;
	module.exports = exports['default'];


},{"./visitor":75}],77:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _decoratorsInline = require('./decorators/inline');

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
		_decoratorsInline2['default'](instance);
	}


},{"./decorators/inline":78}],78:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	var _utils = require('../utils');

	exports['default'] = function (instance) {
		instance.registerDecorator('inline', function (fn, props, container, options) {
			var ret = fn;
			if (!props.partials) {
				props.partials = {};
				ret = function (context, options) {
					// Create a new partials stack frame prior to exec.
					var original = container.partials;
					container.partials = _utils.extend({}, original, props.partials);
					var ret = fn(context, options);
					container.partials = original;
					return ret;
				};
			}

			props.partials[options.args[0]] = options.fn;

			return ret;
		});
	};

	module.exports = exports['default'];


},{"../utils":92}],79:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
		var loc = node && node.loc,
			line = undefined,
			column = undefined;
		if (loc) {
			line = loc.start.line;
			column = loc.start.column;

			message += ' - ' + line + ':' + column;
		}

		var tmp = Error.prototype.constructor.call(this, message);

		// Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
		for (var idx = 0; idx < errorProps.length; idx++) {
			this[errorProps[idx]] = tmp[errorProps[idx]];
		}

		/* istanbul ignore else */
		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, Exception);
		}

		if (loc) {
			this.lineNumber = line;
			this.column = column;
		}
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];


},{}],80:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _helpersBlockHelperMissing = require('./helpers/block-helper-missing');

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = require('./helpers/each');

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = require('./helpers/helper-missing');

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = require('./helpers/if');

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = require('./helpers/log');

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = require('./helpers/lookup');

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = require('./helpers/with');

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
		_helpersBlockHelperMissing2['default'](instance);
		_helpersEach2['default'](instance);
		_helpersHelperMissing2['default'](instance);
		_helpersIf2['default'](instance);
		_helpersLog2['default'](instance);
		_helpersLookup2['default'](instance);
		_helpersWith2['default'](instance);
	}


},{"./helpers/block-helper-missing":81,"./helpers/each":82,"./helpers/helper-missing":83,"./helpers/if":84,"./helpers/log":85,"./helpers/lookup":86,"./helpers/with":87}],81:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	var _utils = require('../utils');

	exports['default'] = function (instance) {
		instance.registerHelper('blockHelperMissing', function (context, options) {
			var inverse = options.inverse,
				fn = options.fn;

			if (context === true) {
				return fn(this);
			} else if (context === false || context == null) {
				return inverse(this);
			} else if (_utils.isArray(context)) {
				if (context.length > 0) {
					if (options.ids) {
						options.ids = [options.name];
					}

					return instance.helpers.each(context, options);
				} else {
					return inverse(this);
				}
			} else {
				if (options.data && options.ids) {
					var data = _utils.createFrame(options.data);
					data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
					options = { data: data };
				}

				return fn(context, options);
			}
		});
	};

	module.exports = exports['default'];


},{"../utils":92}],82:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = require('../utils');

	var _exception = require('../exception');

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
		instance.registerHelper('each', function (context, options) {
			if (!options) {
				throw new _exception2['default']('Must pass iterator to #each');
			}

			var fn = options.fn,
				inverse = options.inverse,
				i = 0,
				ret = '',
				data = undefined,
				contextPath = undefined;

			if (options.data && options.ids) {
				contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
			}

			if (_utils.isFunction(context)) {
				context = context.call(this);
			}

			if (options.data) {
				data = _utils.createFrame(options.data);
			}

			function execIteration(field, index, last) {
				if (data) {
					data.key = field;
					data.index = index;
					data.first = index === 0;
					data.last = !!last;

					if (contextPath) {
						data.contextPath = contextPath + field;
					}
				}

				ret = ret + fn(context[field], {
					data: data,
					blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
				});
			}

			if (context && typeof context === 'object') {
				if (_utils.isArray(context)) {
					for (var j = context.length; i < j; i++) {
						if (i in context) {
							execIteration(i, i, i === context.length - 1);
						}
					}
				} else {
					var priorKey = undefined;

					for (var key in context) {
						if (context.hasOwnProperty(key)) {
							// We're running the iterations one step out of sync so we can detect
							// the last iteration without have to scan the object twice and create
							// an itermediate keys array.
							if (priorKey !== undefined) {
								execIteration(priorKey, i - 1);
							}
							priorKey = key;
							i++;
						}
					}
					if (priorKey !== undefined) {
						execIteration(priorKey, i - 1, true);
					}
				}
			}

			if (i === 0) {
				ret = inverse(this);
			}

			return ret;
		});
	};

	module.exports = exports['default'];


},{"../exception":79,"../utils":92}],83:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _exception = require('../exception');

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
		instance.registerHelper('helperMissing', function () /* [args, ]options */{
			if (arguments.length === 1) {
				// A missing field in a {{foo}} construct.
				return undefined;
			} else {
				// Someone is actually trying to call something, blow up.
				throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
			}
		});
	};

	module.exports = exports['default'];


},{"../exception":79}],84:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	var _utils = require('../utils');

	exports['default'] = function (instance) {
		instance.registerHelper('if', function (conditional, options) {
			if (_utils.isFunction(conditional)) {
				conditional = conditional.call(this);
			}

			// Default behavior is to render the positive path if the value is truthy and not empty.
			// The `includeZero` option may be set to treat the condtional as purely not empty based on the
			// behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
			if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
				return options.inverse(this);
			} else {
				return options.fn(this);
			}
		});

		instance.registerHelper('unless', function (conditional, options) {
			return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
		});
	};

	module.exports = exports['default'];


},{"../utils":92}],85:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
		instance.registerHelper('log', function () /* message, options */{
			var args = [undefined],
				options = arguments[arguments.length - 1];
			for (var i = 0; i < arguments.length - 1; i++) {
				args.push(arguments[i]);
			}

			var level = 1;
			if (options.hash.level != null) {
				level = options.hash.level;
			} else if (options.data && options.data.level != null) {
				level = options.data.level;
			}
			args[0] = level;

			instance.log.apply(instance, args);
		});
	};

	module.exports = exports['default'];


},{}],86:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
		instance.registerHelper('lookup', function (obj, field) {
			return obj && obj[field];
		});
	};

	module.exports = exports['default'];


},{}],87:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	var _utils = require('../utils');

	exports['default'] = function (instance) {
		instance.registerHelper('with', function (context, options) {
			if (_utils.isFunction(context)) {
				context = context.call(this);
			}

			var fn = options.fn;

			if (!_utils.isEmpty(context)) {
				var data = options.data;
				if (options.data && options.ids) {
					data = _utils.createFrame(options.data);
					data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
				}

				return fn(context, {
					data: data,
					blockParams: _utils.blockParams([context], [data && data.contextPath])
				});
			} else {
				return options.inverse(this);
			}
		});
	};

	module.exports = exports['default'];


},{"../utils":92}],88:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;

	var _utils = require('./utils');

	var logger = {
		methodMap: ['debug', 'info', 'warn', 'error'],
		level: 'info',

		// Maps a given level value to the `methodMap` indexes above.
		lookupLevel: function lookupLevel(level) {
			if (typeof level === 'string') {
				var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
				if (levelMap >= 0) {
					level = levelMap;
				} else {
					level = parseInt(level, 10);
				}
			}

			return level;
		},

		// Can be overridden in the host environment
		log: function log(level) {
			level = logger.lookupLevel(level);

			if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
				var method = logger.methodMap[level];
				if (!console[method]) {
					// eslint-disable-line no-console
					method = 'log';
				}

				for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
					message[_key - 1] = arguments[_key];
				}

				console[method].apply(console, message); // eslint-disable-line no-console
			}
		}
	};

	exports['default'] = logger;
	module.exports = exports['default'];


},{"./utils":92}],89:[function(require,module,exports){
	(function (global){
		/* global window */
		'use strict';

		exports.__esModule = true;

		exports['default'] = function (Handlebars) {
			/* istanbul ignore next */
			var root = typeof global !== 'undefined' ? global : window,
				$Handlebars = root.Handlebars;
			/* istanbul ignore next */
			Handlebars.noConflict = function () {
				if (root.Handlebars === Handlebars) {
					root.Handlebars = $Handlebars;
				}
				return Handlebars;
			};
		};

		module.exports = exports['default'];


	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{}],90:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _utils = require('./utils');

	var Utils = _interopRequireWildcard(_utils);

	var _exception = require('./exception');

	var _exception2 = _interopRequireDefault(_exception);

	var _base = require('./base');

	function checkRevision(compilerInfo) {
		var compilerRevision = compilerInfo && compilerInfo[0] || 1,
			currentRevision = _base.COMPILER_REVISION;

		if (compilerRevision !== currentRevision) {
			if (compilerRevision < currentRevision) {
				var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
					compilerVersions = _base.REVISION_CHANGES[compilerRevision];
				throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
			} else {
				// Use the embedded version info since the runtime doesn't know about this revision yet
				throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
			}
		}
	}

	function template(templateSpec, env) {
		/* istanbul ignore next */
		if (!env) {
			throw new _exception2['default']('No environment passed to template');
		}
		if (!templateSpec || !templateSpec.main) {
			throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
		}

		templateSpec.main.decorator = templateSpec.main_d;

		// Note: Using env.VM references rather than local var references throughout this section to allow
		// for external users to override these as psuedo-supported APIs.
		env.VM.checkRevision(templateSpec.compiler);

		function invokePartialWrapper(partial, context, options) {
			if (options.hash) {
				context = Utils.extend({}, context, options.hash);
				if (options.ids) {
					options.ids[0] = true;
				}
			}

			partial = env.VM.resolvePartial.call(this, partial, context, options);
			var result = env.VM.invokePartial.call(this, partial, context, options);

			if (result == null && env.compile) {
				options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
				result = options.partials[options.name](context, options);
			}
			if (result != null) {
				if (options.indent) {
					var lines = result.split('\n');
					for (var i = 0, l = lines.length; i < l; i++) {
						if (!lines[i] && i + 1 === l) {
							break;
						}

						lines[i] = options.indent + lines[i];
					}
					result = lines.join('\n');
				}
				return result;
			} else {
				throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
			}
		}

		// Just add water
		var container = {
			strict: function strict(obj, name) {
				if (!(name in obj)) {
					throw new _exception2['default']('"' + name + '" not defined in ' + obj);
				}
				return obj[name];
			},
			lookup: function lookup(depths, name) {
				var len = depths.length;
				for (var i = 0; i < len; i++) {
					if (depths[i] && depths[i][name] != null) {
						return depths[i][name];
					}
				}
			},
			lambda: function lambda(current, context) {
				return typeof current === 'function' ? current.call(context) : current;
			},

			escapeExpression: Utils.escapeExpression,
			invokePartial: invokePartialWrapper,

			fn: function fn(i) {
				var ret = templateSpec[i];
				ret.decorator = templateSpec[i + '_d'];
				return ret;
			},

			programs: [],
			program: function program(i, data, declaredBlockParams, blockParams, depths) {
				var programWrapper = this.programs[i],
					fn = this.fn(i);
				if (data || depths || blockParams || declaredBlockParams) {
					programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
				} else if (!programWrapper) {
					programWrapper = this.programs[i] = wrapProgram(this, i, fn);
				}
				return programWrapper;
			},

			data: function data(value, depth) {
				while (value && depth--) {
					value = value._parent;
				}
				return value;
			},
			merge: function merge(param, common) {
				var obj = param || common;

				if (param && common && param !== common) {
					obj = Utils.extend({}, common, param);
				}

				return obj;
			},

			noop: env.VM.noop,
			compilerInfo: templateSpec.compiler
		};

		function ret(context) {
			var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			var data = options.data;

			ret._setup(options);
			if (!options.partial && templateSpec.useData) {
				data = initData(context, data);
			}
			var depths = undefined,
				blockParams = templateSpec.useBlockParams ? [] : undefined;
			if (templateSpec.useDepths) {
				if (options.depths) {
					depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
				} else {
					depths = [context];
				}
			}

			function main(context /*, options*/) {
				return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
			}
			main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
			return main(context, options);
		}
		ret.isTop = true;

		ret._setup = function (options) {
			if (!options.partial) {
				container.helpers = container.merge(options.helpers, env.helpers);

				if (templateSpec.usePartial) {
					container.partials = container.merge(options.partials, env.partials);
				}
				if (templateSpec.usePartial || templateSpec.useDecorators) {
					container.decorators = container.merge(options.decorators, env.decorators);
				}
			} else {
				container.helpers = options.helpers;
				container.partials = options.partials;
				container.decorators = options.decorators;
			}
		};

		ret._child = function (i, data, blockParams, depths) {
			if (templateSpec.useBlockParams && !blockParams) {
				throw new _exception2['default']('must pass block params');
			}
			if (templateSpec.useDepths && !depths) {
				throw new _exception2['default']('must pass parent depths');
			}

			return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
		};
		return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
		function prog(context) {
			var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			var currentDepths = depths;
			if (depths && context !== depths[0]) {
				currentDepths = [context].concat(depths);
			}

			return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
		}

		prog = executeDecorators(fn, prog, container, depths, data, blockParams);

		prog.program = i;
		prog.depth = depths ? depths.length : 0;
		prog.blockParams = declaredBlockParams || 0;
		return prog;
	}

	function resolvePartial(partial, context, options) {
		if (!partial) {
			if (options.name === '@partial-block') {
				partial = options.data['partial-block'];
			} else {
				partial = options.partials[options.name];
			}
		} else if (!partial.call && !options.name) {
			// This is a dynamic partial that returned a string
			options.name = partial;
			partial = options.partials[partial];
		}
		return partial;
	}

	function invokePartial(partial, context, options) {
		options.partial = true;
		if (options.ids) {
			options.data.contextPath = options.ids[0] || options.data.contextPath;
		}

		var partialBlock = undefined;
		if (options.fn && options.fn !== noop) {
			options.data = _base.createFrame(options.data);
			partialBlock = options.data['partial-block'] = options.fn;

			if (partialBlock.partials) {
				options.partials = Utils.extend({}, options.partials, partialBlock.partials);
			}
		}

		if (partial === undefined && partialBlock) {
			partial = partialBlock;
		}

		if (partial === undefined) {
			throw new _exception2['default']('The partial ' + options.name + ' could not be found');
		} else if (partial instanceof Function) {
			return partial(context, options);
		}
	}

	function noop() {
		return '';
	}

	function initData(context, data) {
		if (!data || !('root' in data)) {
			data = data ? _base.createFrame(data) : {};
			data.root = context;
		}
		return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
		if (fn.decorator) {
			var props = {};
			prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
			Utils.extend(prog, props);
		}
		return prog;
	}


},{"./base":66,"./exception":79,"./utils":92}],91:[function(require,module,exports){
// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
		this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
		return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];


},{}],92:[function(require,module,exports){
	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
		'&': '&amp;',
		'<': '&lt;',
		'>': '&gt;',
		'"': '&quot;',
		"'": '&#x27;',
		'`': '&#x60;',
		'=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
		possible = /[&<>"'`=]/;

	function escapeChar(chr) {
		return escape[chr];
	}

	function extend(obj /* , ...source */) {
		for (var i = 1; i < arguments.length; i++) {
			for (var key in arguments[i]) {
				if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
					obj[key] = arguments[i][key];
				}
			}
		}

		return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
		return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
		exports.isFunction = isFunction = function (value) {
			return typeof value === 'function' && toString.call(value) === '[object Function]';
		};
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
		return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
		for (var i = 0, len = array.length; i < len; i++) {
			if (array[i] === value) {
				return i;
			}
		}
		return -1;
	}

	function escapeExpression(string) {
		if (typeof string !== 'string') {
			// don't escape SafeStrings, since they're already safe
			if (string && string.toHTML) {
				return string.toHTML();
			} else if (string == null) {
				return '';
			} else if (!string) {
				return string + '';
			}

			// Force a string conversion as this will be done by the append regardless and
			// the regex test will do this transparently behind the scenes, causing issues if
			// an object's to string has escaped characters in it.
			string = '' + string;
		}

		if (!possible.test(string)) {
			return string;
		}
		return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
		if (!value && value !== 0) {
			return true;
		} else if (isArray(value) && value.length === 0) {
			return true;
		} else {
			return false;
		}
	}

	function createFrame(object) {
		var frame = extend({}, object);
		frame._parent = object;
		return frame;
	}

	function blockParams(params, ids) {
		params.path = ids;
		return params;
	}

	function appendContextPath(contextPath, id) {
		return (contextPath ? contextPath + '.' : '') + id;
	}


},{}],93:[function(require,module,exports){
// USAGE:
// var handlebars = require('handlebars');
/* eslint-disable no-var */

	// var local = handlebars.create();

	var handlebars = require('../dist/cjs/handlebars')['default'];

	var printer = require('../dist/cjs/handlebars/compiler/printer');
	handlebars.PrintVisitor = printer.PrintVisitor;
	handlebars.print = printer.print;

	module.exports = handlebars;

	// Publish a Node.js require() handler for .handlebars and .hbs files
	function extension(module, filename) {
		var fs = require('fs');
		var templateString = fs.readFileSync(filename, 'utf8');
		module.exports = handlebars.compile(templateString);
	}
	/* istanbul ignore else */
	if (typeof require !== 'undefined' && require.extensions) {
		require.extensions['.handlebars'] = extension;
		require.extensions['.hbs'] = extension;
	}

},{"../dist/cjs/handlebars":64,"../dist/cjs/handlebars/compiler/printer":74,"fs":6}],94:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
	exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
	exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":101,"./source-map/source-map-generator":102,"./source-map/source-node":103}],95:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var util = require('./util');

		/**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
		function ArraySet() {
			this._array = [];
			this._set = {};
		}

		/**
   * Static method for creating ArraySet instances from an existing array.
   */
		ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
			var set = new ArraySet();
			for (var i = 0, len = aArray.length; i < len; i++) {
				set.add(aArray[i], aAllowDuplicates);
			}
			return set;
		};

		/**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
		ArraySet.prototype.size = function ArraySet_size() {
			return Object.getOwnPropertyNames(this._set).length;
		};

		/**
   * Add the given string to this set.
   *
   * @param String aStr
   */
		ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
			var isDuplicate = this.has(aStr);
			var idx = this._array.length;
			if (!isDuplicate || aAllowDuplicates) {
				this._array.push(aStr);
			}
			if (!isDuplicate) {
				this._set[util.toSetString(aStr)] = idx;
			}
		};

		/**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
		ArraySet.prototype.has = function ArraySet_has(aStr) {
			return Object.prototype.hasOwnProperty.call(this._set,
				util.toSetString(aStr));
		};

		/**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
		ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
			if (this.has(aStr)) {
				return this._set[util.toSetString(aStr)];
			}
			throw new Error('"' + aStr + '" is not in the set.');
		};

		/**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
		ArraySet.prototype.at = function ArraySet_at(aIdx) {
			if (aIdx >= 0 && aIdx < this._array.length) {
				return this._array[aIdx];
			}
			throw new Error('No element indexed by ' + aIdx);
		};

		/**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
		ArraySet.prototype.toArray = function ArraySet_toArray() {
			return this._array.slice();
		};

		exports.ArraySet = ArraySet;

	});

},{"./util":104,"amdefine":5}],96:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var base64 = require('./base64');

		// A single base 64 digit can contain 6 bits of data. For the base 64 variable
		// length quantities we use in the source map spec, the first bit is the sign,
		// the next four bits are the actual value, and the 6th bit is the
		// continuation bit. The continuation bit tells us whether there are more
		// digits in this value following this digit.
		//
		//   Continuation
		//   |    Sign
		//   |    |
		//   V    V
		//   101011

		var VLQ_BASE_SHIFT = 5;

		// binary: 100000
		var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

		// binary: 011111
		var VLQ_BASE_MASK = VLQ_BASE - 1;

		// binary: 100000
		var VLQ_CONTINUATION_BIT = VLQ_BASE;

		/**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
		function toVLQSigned(aValue) {
			return aValue < 0
				? ((-aValue) << 1) + 1
				: (aValue << 1) + 0;
		}

		/**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
		function fromVLQSigned(aValue) {
			var isNegative = (aValue & 1) === 1;
			var shifted = aValue >> 1;
			return isNegative
				? -shifted
				: shifted;
		}

		/**
   * Returns the base 64 VLQ encoded value.
   */
		exports.encode = function base64VLQ_encode(aValue) {
			var encoded = "";
			var digit;

			var vlq = toVLQSigned(aValue);

			do {
				digit = vlq & VLQ_BASE_MASK;
				vlq >>>= VLQ_BASE_SHIFT;
				if (vlq > 0) {
					// There are still more digits in this value, so we must make sure the
					// continuation bit is marked.
					digit |= VLQ_CONTINUATION_BIT;
				}
				encoded += base64.encode(digit);
			} while (vlq > 0);

			return encoded;
		};

		/**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
		exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
			var strLen = aStr.length;
			var result = 0;
			var shift = 0;
			var continuation, digit;

			do {
				if (aIndex >= strLen) {
					throw new Error("Expected more digits in base 64 VLQ value.");
				}

				digit = base64.decode(aStr.charCodeAt(aIndex++));
				if (digit === -1) {
					throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
				}

				continuation = !!(digit & VLQ_CONTINUATION_BIT);
				digit &= VLQ_BASE_MASK;
				result = result + (digit << shift);
				shift += VLQ_BASE_SHIFT;
			} while (continuation);

			aOutParam.value = fromVLQSigned(result);
			aOutParam.rest = aIndex;
		};

	});

},{"./base64":97,"amdefine":5}],97:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

		/**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
		exports.encode = function (number) {
			if (0 <= number && number < intToCharMap.length) {
				return intToCharMap[number];
			}
			throw new TypeError("Must be between 0 and 63: " + aNumber);
		};

		/**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
		exports.decode = function (charCode) {
			var bigA = 65;     // 'A'
			var bigZ = 90;     // 'Z'

			var littleA = 97;  // 'a'
			var littleZ = 122; // 'z'

			var zero = 48;     // '0'
			var nine = 57;     // '9'

			var plus = 43;     // '+'
			var slash = 47;    // '/'

			var littleOffset = 26;
			var numberOffset = 52;

			// 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
			if (bigA <= charCode && charCode <= bigZ) {
				return (charCode - bigA);
			}

			// 26 - 51: abcdefghijklmnopqrstuvwxyz
			if (littleA <= charCode && charCode <= littleZ) {
				return (charCode - littleA + littleOffset);
			}

			// 52 - 61: 0123456789
			if (zero <= charCode && charCode <= nine) {
				return (charCode - zero + numberOffset);
			}

			// 62: +
			if (charCode == plus) {
				return 62;
			}

			// 63: /
			if (charCode == slash) {
				return 63;
			}

			// Invalid base64 digit.
			return -1;
		};

	});

},{"amdefine":5}],98:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		exports.GREATEST_LOWER_BOUND = 1;
		exports.LEAST_UPPER_BOUND = 2;

		/**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
		function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
			// This function terminates when one of the following is true:
			//
			//   1. We find the exact element we are looking for.
			//
			//   2. We did not find the exact element, but we can return the index of
			//      the next-closest element.
			//
			//   3. We did not find the exact element, and there is no next-closest
			//      element than the one we are searching for, so we return -1.
			var mid = Math.floor((aHigh - aLow) / 2) + aLow;
			var cmp = aCompare(aNeedle, aHaystack[mid], true);
			if (cmp === 0) {
				// Found the element we are looking for.
				return mid;
			}
			else if (cmp > 0) {
				// Our needle is greater than aHaystack[mid].
				if (aHigh - mid > 1) {
					// The element is in the upper half.
					return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
				}

				// The exact needle element was not found in this haystack. Determine if
				// we are in termination case (3) or (2) and return the appropriate thing.
				if (aBias == exports.LEAST_UPPER_BOUND) {
					return aHigh < aHaystack.length ? aHigh : -1;
				} else {
					return mid;
				}
			}
			else {
				// Our needle is less than aHaystack[mid].
				if (mid - aLow > 1) {
					// The element is in the lower half.
					return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
				}

				// we are in termination case (3) or (2) and return the appropriate thing.
				if (aBias == exports.LEAST_UPPER_BOUND) {
					return mid;
				} else {
					return aLow < 0 ? -1 : aLow;
				}
			}
		}

		/**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
		exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
			if (aHaystack.length === 0) {
				return -1;
			}

			var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
				aCompare, aBias || exports.GREATEST_LOWER_BOUND);
			if (index < 0) {
				return -1;
			}

			// We have found either the exact element, or the next-closest element than
			// the one we are searching for. However, there may be more than one such
			// element. Make sure we always return the smallest of these.
			while (index - 1 >= 0) {
				if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
					break;
				}
				--index;
			}

			return index;
		};

	});

},{"amdefine":5}],99:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var util = require('./util');

		/**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
		function generatedPositionAfter(mappingA, mappingB) {
			// Optimized for most common case
			var lineA = mappingA.generatedLine;
			var lineB = mappingB.generatedLine;
			var columnA = mappingA.generatedColumn;
			var columnB = mappingB.generatedColumn;
			return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
		}

		/**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
		function MappingList() {
			this._array = [];
			this._sorted = true;
			// Serves as infimum
			this._last = {generatedLine: -1, generatedColumn: 0};
		}

		/**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
		MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
    	this._array.forEach(aCallback, aThisArg);
    };

		/**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
		MappingList.prototype.add = function MappingList_add(aMapping) {
			var mapping;
			if (generatedPositionAfter(this._last, aMapping)) {
				this._last = aMapping;
				this._array.push(aMapping);
			} else {
				this._sorted = false;
				this._array.push(aMapping);
			}
		};

		/**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
		MappingList.prototype.toArray = function MappingList_toArray() {
			if (!this._sorted) {
				this._array.sort(util.compareByGeneratedPositionsInflated);
				this._sorted = true;
			}
			return this._array;
		};

		exports.MappingList = MappingList;

	});

},{"./util":104,"amdefine":5}],100:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		// It turns out that some (most?) JavaScript engines don't self-host
		// `Array.prototype.sort`. This makes sense because C++ will likely remain
		// faster than JS when doing raw CPU-intensive sorting. However, when using a
		// custom comparator function, calling back and forth between the VM's C++ and
		// JIT'd JS is rather slow *and* loses JIT type information, resulting in
		// worse generated code for the comparator function than would be optimal. In
		// fact, when sorting with a comparator, these costs outweigh the benefits of
		// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
		// a ~3500ms mean speed-up in `bench/bench.html`.

		/**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
		function swap(ary, x, y) {
			var temp = ary[x];
			ary[x] = ary[y];
			ary[y] = temp;
		}

		/**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
		function randomIntInRange(low, high) {
			return Math.round(low + (Math.random() * (high - low)));
		}

		/**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
		function doQuickSort(ary, comparator, p, r) {
			// If our lower bound is less than our upper bound, we (1) partition the
			// array into two pieces and (2) recurse on each half. If it is not, this is
			// the empty array and our base case.

			if (p < r) {
				// (1) Partitioning.
				//
				// The partitioning chooses a pivot between `p` and `r` and moves all
				// elements that are less than or equal to the pivot to the before it, and
				// all the elements that are greater than it after it. The effect is that
				// once partition is done, the pivot is in the exact place it will be when
				// the array is put in sorted order, and it will not need to be moved
				// again. This runs in O(n) time.

				// Always choose a random pivot so that an input array which is reverse
				// sorted does not cause O(n^2) running time.
				var pivotIndex = randomIntInRange(p, r);
				var i = p - 1;

				swap(ary, pivotIndex, r);
				var pivot = ary[r];

				// Immediately after `j` is incremented in this loop, the following hold
				// true:
				//
				//   * Every element in `ary[p .. i]` is less than or equal to the pivot.
				//
				//   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
				for (var j = p; j < r; j++) {
					if (comparator(ary[j], pivot) <= 0) {
						i += 1;
						swap(ary, i, j);
					}
				}

				swap(ary, i + 1, j);
				var q = i + 1;

				// (2) Recurse on each half.

				doQuickSort(ary, comparator, p, q - 1);
				doQuickSort(ary, comparator, q + 1, r);
			}
		}

		/**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
		exports.quickSort = function (ary, comparator) {
			doQuickSort(ary, comparator, 0, ary.length - 1);
		};

	});

},{"amdefine":5}],101:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var util = require('./util');
		var binarySearch = require('./binary-search');
		var ArraySet = require('./array-set').ArraySet;
		var base64VLQ = require('./base64-vlq');
		var quickSort = require('./quick-sort').quickSort;

		function SourceMapConsumer(aSourceMap) {
			var sourceMap = aSourceMap;
			if (typeof aSourceMap === 'string') {
				sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
			}

			return sourceMap.sections != null
				? new IndexedSourceMapConsumer(sourceMap)
				: new BasicSourceMapConsumer(sourceMap);
		}

		SourceMapConsumer.fromSourceMap = function(aSourceMap) {
			return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
		};

		/**
   * The version of the source mapping spec that we are consuming.
   */
		SourceMapConsumer.prototype._version = 3;

		// `__generatedMappings` and `__originalMappings` are arrays that hold the
		// parsed mapping coordinates from the source map's "mappings" attribute. They
		// are lazily instantiated, accessed via the `_generatedMappings` and
		// `_originalMappings` getters respectively, and we only parse the mappings
		// and create these arrays once queried for a source location. We jump through
		// these hoops because there can be many thousands of mappings, and parsing
		// them is expensive, so we only want to do it if we must.
		//
		// Each object in the arrays is of the form:
		//
		//     {
		//       generatedLine: The line number in the generated code,
		//       generatedColumn: The column number in the generated code,
		//       source: The path to the original source file that generated this
		//               chunk of code,
		//       originalLine: The line number in the original source that
		//                     corresponds to this chunk of generated code,
		//       originalColumn: The column number in the original source that
		//                       corresponds to this chunk of generated code,
		//       name: The name of the original symbol which generated this chunk of
		//             code.
		//     }
		//
		// All properties except for `generatedLine` and `generatedColumn` can be
		// `null`.
		//
		// `_generatedMappings` is ordered by the generated positions.
		//
		// `_originalMappings` is ordered by the original positions.

		SourceMapConsumer.prototype.__generatedMappings = null;
		Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
			get: function () {
				if (!this.__generatedMappings) {
					this._parseMappings(this._mappings, this.sourceRoot);
				}

				return this.__generatedMappings;
			}
		});

		SourceMapConsumer.prototype.__originalMappings = null;
		Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
			get: function () {
				if (!this.__originalMappings) {
					this._parseMappings(this._mappings, this.sourceRoot);
				}

				return this.__originalMappings;
			}
		});

		SourceMapConsumer.prototype._charIsMappingSeparator =
    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    	var c = aStr.charAt(index);
    	return c === ";" || c === ",";
    };

		/**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
		SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    	throw new Error("Subclasses must implement _parseMappings");
    };

		SourceMapConsumer.GENERATED_ORDER = 1;
		SourceMapConsumer.ORIGINAL_ORDER = 2;

		SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
		SourceMapConsumer.LEAST_UPPER_BOUND = 2;

		/**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
		SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    	var context = aContext || null;
    	var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    	var mappings;
    	switch (order) {
    	case SourceMapConsumer.GENERATED_ORDER:
    		mappings = this._generatedMappings;
    		break;
    	case SourceMapConsumer.ORIGINAL_ORDER:
    		mappings = this._originalMappings;
    		break;
    	default:
    		throw new Error("Unknown order of iteration.");
    	}

    	var sourceRoot = this.sourceRoot;
    	mappings.map(function (mapping) {
    		var source = mapping.source === null ? null : this._sources.at(mapping.source);
    		if (source != null && sourceRoot != null) {
    			source = util.join(sourceRoot, source);
    		}
    		return {
    			source: source,
    			generatedLine: mapping.generatedLine,
    			generatedColumn: mapping.generatedColumn,
    			originalLine: mapping.originalLine,
    			originalColumn: mapping.originalColumn,
    			name: mapping.name === null ? null : this._names.at(mapping.name)
    		};
    	}, this).forEach(aCallback, context);
    };

		/**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: Optional. the column number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
		SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    	var line = util.getArg(aArgs, 'line');

    	// When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    	// returns the index of the closest mapping less than the needle. By
    	// setting needle.originalColumn to 0, we thus find the last mapping for
    	// the given line, provided such a mapping exists.
    	var needle = {
    		source: util.getArg(aArgs, 'source'),
    		originalLine: line,
    		originalColumn: util.getArg(aArgs, 'column', 0)
    	};

    	if (this.sourceRoot != null) {
    		needle.source = util.relative(this.sourceRoot, needle.source);
    	}
    	if (!this._sources.has(needle.source)) {
    		return [];
    	}
    	needle.source = this._sources.indexOf(needle.source);

    	var mappings = [];

    	var index = this._findMapping(needle,
    		this._originalMappings,
    		"originalLine",
    		"originalColumn",
    		util.compareByOriginalPositions,
    		binarySearch.LEAST_UPPER_BOUND);
    	if (index >= 0) {
    		var mapping = this._originalMappings[index];

    		if (aArgs.column === undefined) {
    			var originalLine = mapping.originalLine;

    			// Iterate until either we run out of mappings, or we run into
    			// a mapping for a different line than the one we found. Since
    			// mappings are sorted, this is guaranteed to find all mappings for
    			// the line we found.
    			while (mapping && mapping.originalLine === originalLine) {
    				mappings.push({
    					line: util.getArg(mapping, 'generatedLine', null),
    					column: util.getArg(mapping, 'generatedColumn', null),
    					lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
    				});

    				mapping = this._originalMappings[++index];
    			}
    		} else {
    			var originalColumn = mapping.originalColumn;

    			// Iterate until either we run out of mappings, or we run into
    			// a mapping for a different line than the one we were searching for.
    			// Since mappings are sorted, this is guaranteed to find all mappings for
    			// the line we are searching for.
    			while (mapping &&
                 mapping.originalLine === line &&
                 mapping.originalColumn == originalColumn) {
    				mappings.push({
    					line: util.getArg(mapping, 'generatedLine', null),
    					column: util.getArg(mapping, 'generatedColumn', null),
    					lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
    				});

    				mapping = this._originalMappings[++index];
    			}
    		}
    	}

    	return mappings;
    };

		exports.SourceMapConsumer = SourceMapConsumer;

		/**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
		function BasicSourceMapConsumer(aSourceMap) {
			var sourceMap = aSourceMap;
			if (typeof aSourceMap === 'string') {
				sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
			}

			var version = util.getArg(sourceMap, 'version');
			var sources = util.getArg(sourceMap, 'sources');
			// Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
			// requires the array) to play nice here.
			var names = util.getArg(sourceMap, 'names', []);
			var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
			var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
			var mappings = util.getArg(sourceMap, 'mappings');
			var file = util.getArg(sourceMap, 'file', null);

			// Once again, Sass deviates from the spec and supplies the version as a
			// string rather than a number, so we use loose equality checking here.
			if (version != this._version) {
				throw new Error('Unsupported version: ' + version);
			}

			// Some source maps produce relative source paths like "./foo.js" instead of
			// "foo.js".  Normalize these first so that future comparisons will succeed.
			// See bugzil.la/1090768.
			sources = sources.map(util.normalize);

			// Pass `true` below to allow duplicate names and sources. While source maps
			// are intended to be compressed and deduplicated, the TypeScript compiler
			// sometimes generates source maps with duplicates in them. See Github issue
			// #72 and bugzil.la/889492.
			this._names = ArraySet.fromArray(names, true);
			this._sources = ArraySet.fromArray(sources, true);

			this.sourceRoot = sourceRoot;
			this.sourcesContent = sourcesContent;
			this._mappings = mappings;
			this.file = file;
		}

		BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
		BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

		/**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns BasicSourceMapConsumer
   */
		BasicSourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
    	var smc = Object.create(BasicSourceMapConsumer.prototype);

    	var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    	var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    	smc.sourceRoot = aSourceMap._sourceRoot;
    	smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
    		smc.sourceRoot);
    	smc.file = aSourceMap._file;

    	// Because we are modifying the entries (by converting string sources and
    	// names to indices into the sources and names ArraySets), we have to make
    	// a copy of the entry or else bad things happen. Shared mutable state
    	// strikes again! See github issue #191.

    	var generatedMappings = aSourceMap._mappings.toArray().slice();
    	var destGeneratedMappings = smc.__generatedMappings = [];
    	var destOriginalMappings = smc.__originalMappings = [];

    	for (var i = 0, length = generatedMappings.length; i < length; i++) {
    		var srcMapping = generatedMappings[i];
    		var destMapping = new Mapping;
    		destMapping.generatedLine = srcMapping.generatedLine;
    		destMapping.generatedColumn = srcMapping.generatedColumn;

    		if (srcMapping.source) {
    			destMapping.source = sources.indexOf(srcMapping.source);
    			destMapping.originalLine = srcMapping.originalLine;
    			destMapping.originalColumn = srcMapping.originalColumn;

    			if (srcMapping.name) {
    				destMapping.name = names.indexOf(srcMapping.name);
    			}

    			destOriginalMappings.push(destMapping);
    		}

    		destGeneratedMappings.push(destMapping);
    	}

    	quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    	return smc;
    };

		/**
   * The version of the source mapping spec that we are consuming.
   */
		BasicSourceMapConsumer.prototype._version = 3;

		/**
   * The list of original sources.
   */
		Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
			get: function () {
				return this._sources.toArray().map(function (s) {
					return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
				}, this);
			}
		});

		/**
   * Provide the JIT with a nice shape / hidden class.
   */
		function Mapping() {
			this.generatedLine = 0;
			this.generatedColumn = 0;
			this.source = null;
			this.originalLine = null;
			this.originalColumn = null;
			this.name = null;
		}

		/**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
		BasicSourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    	var generatedLine = 1;
    	var previousGeneratedColumn = 0;
    	var previousOriginalLine = 0;
    	var previousOriginalColumn = 0;
    	var previousSource = 0;
    	var previousName = 0;
    	var length = aStr.length;
    	var index = 0;
    	var cachedSegments = {};
    	var temp = {};
    	var originalMappings = [];
    	var generatedMappings = [];
    	var mapping, str, segment, end, value;

    	while (index < length) {
    		if (aStr.charAt(index) === ';') {
    			generatedLine++;
    			index++;
    			previousGeneratedColumn = 0;
    		}
    		else if (aStr.charAt(index) === ',') {
    			index++;
    		}
    		else {
    			mapping = new Mapping();
    			mapping.generatedLine = generatedLine;

    			// Because each offset is encoded relative to the previous one,
    			// many segments often have the same encoding. We can exploit this
    			// fact by caching the parsed variable length fields of each segment,
    			// allowing us to avoid a second parse if we encounter the same
    			// segment again.
    			for (end = index; end < length; end++) {
    				if (this._charIsMappingSeparator(aStr, end)) {
    					break;
    				}
    			}
    			str = aStr.slice(index, end);

    			segment = cachedSegments[str];
    			if (segment) {
    				index += str.length;
    			} else {
    				segment = [];
    				while (index < end) {
    					base64VLQ.decode(aStr, index, temp);
    					value = temp.value;
    					index = temp.rest;
    					segment.push(value);
    				}

    				if (segment.length === 2) {
    					throw new Error('Found a source, but no line and column');
    				}

    				if (segment.length === 3) {
    					throw new Error('Found a source and line, but no column');
    				}

    				cachedSegments[str] = segment;
    			}

    			// Generated column.
    			mapping.generatedColumn = previousGeneratedColumn + segment[0];
    			previousGeneratedColumn = mapping.generatedColumn;

    			if (segment.length > 1) {
    				// Original source.
    				mapping.source = previousSource + segment[1];
    				previousSource += segment[1];

    				// Original line.
    				mapping.originalLine = previousOriginalLine + segment[2];
    				previousOriginalLine = mapping.originalLine;
    				// Lines are stored 0-based
    				mapping.originalLine += 1;

    				// Original column.
    				mapping.originalColumn = previousOriginalColumn + segment[3];
    				previousOriginalColumn = mapping.originalColumn;

    				if (segment.length > 4) {
    					// Original name.
    					mapping.name = previousName + segment[4];
    					previousName += segment[4];
    				}
    			}

    			generatedMappings.push(mapping);
    			if (typeof mapping.originalLine === 'number') {
    				originalMappings.push(mapping);
    			}
    		}
    	}

    	quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    	this.__generatedMappings = generatedMappings;

    	quickSort(originalMappings, util.compareByOriginalPositions);
    	this.__originalMappings = originalMappings;
    };

		/**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
		BasicSourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
    	aColumnName, aComparator, aBias) {
    	// To return the position we are searching for, we must first find the
    	// mapping for the given position and then return the opposite position it
    	// points to. Because the mappings are sorted, we can use binary search to
    	// find the best mapping.

    	if (aNeedle[aLineName] <= 0) {
    		throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
    	}
    	if (aNeedle[aColumnName] < 0) {
    		throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
    	}

    	return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };

		/**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
		BasicSourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
    	for (var index = 0; index < this._generatedMappings.length; ++index) {
    		var mapping = this._generatedMappings[index];

    		// Mappings do not contain a field for the last generated columnt. We
    		// can come up with an optimistic estimate, however, by assuming that
    		// mappings are contiguous (i.e. given two consecutive mappings, the
    		// first mapping ends where the second one starts).
    		if (index + 1 < this._generatedMappings.length) {
    			var nextMapping = this._generatedMappings[index + 1];

    			if (mapping.generatedLine === nextMapping.generatedLine) {
    				mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
    				continue;
    			}
    		}

    		// The last mapping for each line spans the entire line.
    		mapping.lastGeneratedColumn = Infinity;
    	}
    };

		/**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
		BasicSourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
    	var needle = {
    		generatedLine: util.getArg(aArgs, 'line'),
    		generatedColumn: util.getArg(aArgs, 'column')
    	};

    	var index = this._findMapping(
    		needle,
    		this._generatedMappings,
    		"generatedLine",
    		"generatedColumn",
    		util.compareByGeneratedPositionsDeflated,
    		util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    	);

    	if (index >= 0) {
    		var mapping = this._generatedMappings[index];

    		if (mapping.generatedLine === needle.generatedLine) {
    			var source = util.getArg(mapping, 'source', null);
    			if (source !== null) {
    				source = this._sources.at(source);
    				if (this.sourceRoot != null) {
    					source = util.join(this.sourceRoot, source);
    				}
    			}
    			var name = util.getArg(mapping, 'name', null);
    			if (name !== null) {
    				name = this._names.at(name);
    			}
    			return {
    				source: source,
    				line: util.getArg(mapping, 'originalLine', null),
    				column: util.getArg(mapping, 'originalColumn', null),
    				name: name
    			};
    		}
    	}

    	return {
    		source: null,
    		line: null,
    		column: null,
    		name: null
    	};
    };

		/**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
		BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
    function BasicSourceMapConsumer_hasContentsOfAllSources() {
    	if (!this.sourcesContent) {
    		return false;
    	}
    	return this.sourcesContent.length >= this._sources.size() &&
        !this.sourcesContent.some(function (sc) { return sc == null; });
    };

		/**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
		BasicSourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    	if (!this.sourcesContent) {
    		return null;
    	}

    	if (this.sourceRoot != null) {
    		aSource = util.relative(this.sourceRoot, aSource);
    	}

    	if (this._sources.has(aSource)) {
    		return this.sourcesContent[this._sources.indexOf(aSource)];
    	}

    	var url;
    	if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
    		// XXX: file:// URIs and absolute paths lead to unexpected behavior for
    		// many users. We can help them out when they expect file:// URIs to
    		// behave like it would if they were running a local HTTP server. See
    		// https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
    		var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
    		if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
    			return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
    		}

    		if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
    			return this.sourcesContent[this._sources.indexOf("/" + aSource)];
    		}
    	}

    	// This function is used recursively from
    	// IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    	// don't want to throw if we can't find the source - we just want to
    	// return null, so we provide a flag to exit gracefully.
    	if (nullOnMissing) {
    		return null;
    	}
    	else {
    		throw new Error('"' + aSource + '" is not in the SourceMap.');
    	}
    };

		/**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
		BasicSourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
    	var source = util.getArg(aArgs, 'source');
    	if (this.sourceRoot != null) {
    		source = util.relative(this.sourceRoot, source);
    	}
    	if (!this._sources.has(source)) {
    		return {
    			line: null,
    			column: null,
    			lastColumn: null
    		};
    	}
    	source = this._sources.indexOf(source);

    	var needle = {
    		source: source,
    		originalLine: util.getArg(aArgs, 'line'),
    		originalColumn: util.getArg(aArgs, 'column')
    	};

    	var index = this._findMapping(
    		needle,
    		this._originalMappings,
    		"originalLine",
    		"originalColumn",
    		util.compareByOriginalPositions,
    		util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    	);

    	if (index >= 0) {
    		var mapping = this._originalMappings[index];

    		if (mapping.source === needle.source) {
    			return {
    				line: util.getArg(mapping, 'generatedLine', null),
    				column: util.getArg(mapping, 'generatedColumn', null),
    				lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
    			};
    		}
    	}

    	return {
    		line: null,
    		column: null,
    		lastColumn: null
    	};
    };

		exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

		/**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The only parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
		function IndexedSourceMapConsumer(aSourceMap) {
			var sourceMap = aSourceMap;
			if (typeof aSourceMap === 'string') {
				sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
			}

			var version = util.getArg(sourceMap, 'version');
			var sections = util.getArg(sourceMap, 'sections');

			if (version != this._version) {
				throw new Error('Unsupported version: ' + version);
			}

			this._sources = new ArraySet();
			this._names = new ArraySet();

			var lastOffset = {
				line: -1,
				column: 0
			};
			this._sections = sections.map(function (s) {
				if (s.url) {
					// The url field will require support for asynchronicity.
					// See https://github.com/mozilla/source-map/issues/16
					throw new Error('Support for url field in sections not implemented.');
				}
				var offset = util.getArg(s, 'offset');
				var offsetLine = util.getArg(offset, 'line');
				var offsetColumn = util.getArg(offset, 'column');

				if (offsetLine < lastOffset.line ||
          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
					throw new Error('Section offsets must be ordered and non-overlapping.');
				}
				lastOffset = offset;

				return {
					generatedOffset: {
						// The offset fields are 0-based, but we use 1-based indices when
						// encoding/decoding from VLQ.
						generatedLine: offsetLine + 1,
						generatedColumn: offsetColumn + 1
					},
					consumer: new SourceMapConsumer(util.getArg(s, 'map'))
				};
			});
		}

		IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
		IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

		/**
   * The version of the source mapping spec that we are consuming.
   */
		IndexedSourceMapConsumer.prototype._version = 3;

		/**
   * The list of original sources.
   */
		Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
			get: function () {
				var sources = [];
				for (var i = 0; i < this._sections.length; i++) {
					for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
						sources.push(this._sections[i].consumer.sources[j]);
					}
				}
				return sources;
			}
		});

		/**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
		IndexedSourceMapConsumer.prototype.originalPositionFor =
    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    	var needle = {
    		generatedLine: util.getArg(aArgs, 'line'),
    		generatedColumn: util.getArg(aArgs, 'column')
    	};

    	// Find the section containing the generated position we're trying to map
    	// to an original position.
    	var sectionIndex = binarySearch.search(needle, this._sections,
    		function(needle, section) {
    			var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
    			if (cmp) {
    				return cmp;
    			}

    			return (needle.generatedColumn -
                  section.generatedOffset.generatedColumn);
    		});
    	var section = this._sections[sectionIndex];

    	if (!section) {
    		return {
    			source: null,
    			line: null,
    			column: null,
    			name: null
    		};
    	}

    	return section.consumer.originalPositionFor({
    		line: needle.generatedLine -
          (section.generatedOffset.generatedLine - 1),
    		column: needle.generatedColumn -
          (section.generatedOffset.generatedLine === needle.generatedLine
          	? section.generatedOffset.generatedColumn - 1
          	: 0),
    		bias: aArgs.bias
    	});
    };

		/**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
		IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    	return this._sections.every(function (s) {
    		return s.consumer.hasContentsOfAllSources();
    	});
    };

		/**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
		IndexedSourceMapConsumer.prototype.sourceContentFor =
    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    	for (var i = 0; i < this._sections.length; i++) {
    		var section = this._sections[i];

    		var content = section.consumer.sourceContentFor(aSource, true);
    		if (content) {
    			return content;
    		}
    	}
    	if (nullOnMissing) {
    		return null;
    	}
    	else {
    		throw new Error('"' + aSource + '" is not in the SourceMap.');
    	}
    };

		/**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
		IndexedSourceMapConsumer.prototype.generatedPositionFor =
    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    	for (var i = 0; i < this._sections.length; i++) {
    		var section = this._sections[i];

    		// Only consider this section if the requested source is in the list of
    		// sources of the consumer.
    		if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
    			continue;
    		}
    		var generatedPosition = section.consumer.generatedPositionFor(aArgs);
    		if (generatedPosition) {
    			var ret = {
    				line: generatedPosition.line +
              (section.generatedOffset.generatedLine - 1),
    				column: generatedPosition.column +
              (section.generatedOffset.generatedLine === generatedPosition.line
              	? section.generatedOffset.generatedColumn - 1
              	: 0)
    			};
    			return ret;
    		}
    	}

    	return {
    		line: null,
    		column: null
    	};
    };

		/**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
		IndexedSourceMapConsumer.prototype._parseMappings =
    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    	this.__generatedMappings = [];
    	this.__originalMappings = [];
    	for (var i = 0; i < this._sections.length; i++) {
    		var section = this._sections[i];
    		var sectionMappings = section.consumer._generatedMappings;
    		for (var j = 0; j < sectionMappings.length; j++) {
    			var mapping = sectionMappings[i];

    			var source = section.consumer._sources.at(mapping.source);
    			if (section.consumer.sourceRoot !== null) {
    				source = util.join(section.consumer.sourceRoot, source);
    			}
    			this._sources.add(source);
    			source = this._sources.indexOf(source);

    			var name = section.consumer._names.at(mapping.name);
    			this._names.add(name);
    			name = this._names.indexOf(name);

    			// The mappings coming from the consumer for the section have
    			// generated positions relative to the start of the section, so we
    			// need to offset them to be relative to the start of the concatenated
    			// generated file.
    			var adjustedMapping = {
    				source: source,
    				generatedLine: mapping.generatedLine +
              (section.generatedOffset.generatedLine - 1),
    				generatedColumn: mapping.column +
              (section.generatedOffset.generatedLine === mapping.generatedLine)
    					? section.generatedOffset.generatedColumn - 1
    					: 0,
    				originalLine: mapping.originalLine,
    				originalColumn: mapping.originalColumn,
    				name: name
    			};

    			this.__generatedMappings.push(adjustedMapping);
    			if (typeof adjustedMapping.originalLine === 'number') {
    				this.__originalMappings.push(adjustedMapping);
    			}
    		}
    	}

    	quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    	quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };

		exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

	});

},{"./array-set":95,"./base64-vlq":96,"./binary-search":98,"./quick-sort":100,"./util":104,"amdefine":5}],102:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var base64VLQ = require('./base64-vlq');
		var util = require('./util');
		var ArraySet = require('./array-set').ArraySet;
		var MappingList = require('./mapping-list').MappingList;

		/**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
		function SourceMapGenerator(aArgs) {
			if (!aArgs) {
				aArgs = {};
			}
			this._file = util.getArg(aArgs, 'file', null);
			this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
			this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
			this._sources = new ArraySet();
			this._names = new ArraySet();
			this._mappings = new MappingList();
			this._sourcesContents = null;
		}

		SourceMapGenerator.prototype._version = 3;

		/**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
		SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    	var sourceRoot = aSourceMapConsumer.sourceRoot;
    	var generator = new SourceMapGenerator({
    		file: aSourceMapConsumer.file,
    		sourceRoot: sourceRoot
    	});
    	aSourceMapConsumer.eachMapping(function (mapping) {
    		var newMapping = {
    			generated: {
    				line: mapping.generatedLine,
    				column: mapping.generatedColumn
    			}
    		};

    		if (mapping.source != null) {
    			newMapping.source = mapping.source;
    			if (sourceRoot != null) {
    				newMapping.source = util.relative(sourceRoot, newMapping.source);
    			}

    			newMapping.original = {
    				line: mapping.originalLine,
    				column: mapping.originalColumn
    			};

    			if (mapping.name != null) {
    				newMapping.name = mapping.name;
    			}
    		}

    		generator.addMapping(newMapping);
    	});
    	aSourceMapConsumer.sources.forEach(function (sourceFile) {
    		var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    		if (content != null) {
    			generator.setSourceContent(sourceFile, content);
    		}
    	});
    	return generator;
    };

		/**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
		SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
    	var generated = util.getArg(aArgs, 'generated');
    	var original = util.getArg(aArgs, 'original', null);
    	var source = util.getArg(aArgs, 'source', null);
    	var name = util.getArg(aArgs, 'name', null);

    	if (!this._skipValidation) {
    		this._validateMapping(generated, original, source, name);
    	}

    	if (source != null && !this._sources.has(source)) {
    		this._sources.add(source);
    	}

    	if (name != null && !this._names.has(name)) {
    		this._names.add(name);
    	}

    	this._mappings.add({
    		generatedLine: generated.line,
    		generatedColumn: generated.column,
    		originalLine: original != null && original.line,
    		originalColumn: original != null && original.column,
    		source: source,
    		name: name
    	});
    };

		/**
   * Set the source content for a source file.
   */
		SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    	var source = aSourceFile;
    	if (this._sourceRoot != null) {
    		source = util.relative(this._sourceRoot, source);
    	}

    	if (aSourceContent != null) {
    		// Add the source content to the _sourcesContents map.
    		// Create a new _sourcesContents map if the property is null.
    		if (!this._sourcesContents) {
    			this._sourcesContents = {};
    		}
    		this._sourcesContents[util.toSetString(source)] = aSourceContent;
    	} else if (this._sourcesContents) {
    		// Remove the source file from the _sourcesContents map.
    		// If the _sourcesContents map is empty, set the property to null.
    		delete this._sourcesContents[util.toSetString(source)];
    		if (Object.keys(this._sourcesContents).length === 0) {
    			this._sourcesContents = null;
    		}
    	}
    };

		/**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
		SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    	var sourceFile = aSourceFile;
    	// If aSourceFile is omitted, we will use the file property of the SourceMap
    	if (aSourceFile == null) {
    		if (aSourceMapConsumer.file == null) {
    			throw new Error(
    				'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
    			);
    		}
    		sourceFile = aSourceMapConsumer.file;
    	}
    	var sourceRoot = this._sourceRoot;
    	// Make "sourceFile" relative if an absolute Url is passed.
    	if (sourceRoot != null) {
    		sourceFile = util.relative(sourceRoot, sourceFile);
    	}
    	// Applying the SourceMap can add and remove items from the sources and
    	// the names array.
    	var newSources = new ArraySet();
    	var newNames = new ArraySet();

    	// Find mappings for the "sourceFile"
    	this._mappings.unsortedForEach(function (mapping) {
    		if (mapping.source === sourceFile && mapping.originalLine != null) {
    			// Check if it can be mapped by the source map, then update the mapping.
    			var original = aSourceMapConsumer.originalPositionFor({
    				line: mapping.originalLine,
    				column: mapping.originalColumn
    			});
    			if (original.source != null) {
    				// Copy mapping
    				mapping.source = original.source;
    				if (aSourceMapPath != null) {
    					mapping.source = util.join(aSourceMapPath, mapping.source);
    				}
    				if (sourceRoot != null) {
    					mapping.source = util.relative(sourceRoot, mapping.source);
    				}
    				mapping.originalLine = original.line;
    				mapping.originalColumn = original.column;
    				if (original.name != null) {
    					mapping.name = original.name;
    				}
    			}
    		}

    		var source = mapping.source;
    		if (source != null && !newSources.has(source)) {
    			newSources.add(source);
    		}

    		var name = mapping.name;
    		if (name != null && !newNames.has(name)) {
    			newNames.add(name);
    		}

    	}, this);
    	this._sources = newSources;
    	this._names = newNames;

    	// Copy sourcesContents of applied map.
    	aSourceMapConsumer.sources.forEach(function (sourceFile) {
    		var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    		if (content != null) {
    			if (aSourceMapPath != null) {
    				sourceFile = util.join(aSourceMapPath, sourceFile);
    			}
    			if (sourceRoot != null) {
    				sourceFile = util.relative(sourceRoot, sourceFile);
    			}
    			this.setSourceContent(sourceFile, content);
    		}
    	}, this);
    };

		/**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
		SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
    	aName) {
    	if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
    		// Case 1.
    		return;
    	}
    	else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
    		// Cases 2 and 3.
    		return;
    	}
    	else {
    		throw new Error('Invalid mapping: ' + JSON.stringify({
    			generated: aGenerated,
    			source: aSource,
    			original: aOriginal,
    			name: aName
    		}));
    	}
    };

		/**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
		SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
    	var previousGeneratedColumn = 0;
    	var previousGeneratedLine = 1;
    	var previousOriginalColumn = 0;
    	var previousOriginalLine = 0;
    	var previousName = 0;
    	var previousSource = 0;
    	var result = '';
    	var mapping;

    	var mappings = this._mappings.toArray();
    	for (var i = 0, len = mappings.length; i < len; i++) {
    		mapping = mappings[i];

    		if (mapping.generatedLine !== previousGeneratedLine) {
    			previousGeneratedColumn = 0;
    			while (mapping.generatedLine !== previousGeneratedLine) {
    				result += ';';
    				previousGeneratedLine++;
    			}
    		}
    		else {
    			if (i > 0) {
    				if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
    					continue;
    				}
    				result += ',';
    			}
    		}

    		result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
    		previousGeneratedColumn = mapping.generatedColumn;

    		if (mapping.source != null) {
    			result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
    			previousSource = this._sources.indexOf(mapping.source);

    			// lines are stored 0-based in SourceMap spec version 3
    			result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
    			previousOriginalLine = mapping.originalLine - 1;

    			result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
    			previousOriginalColumn = mapping.originalColumn;

    			if (mapping.name != null) {
    				result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
    				previousName = this._names.indexOf(mapping.name);
    			}
    		}
    	}

    	return result;
    };

		SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    	return aSources.map(function (source) {
    		if (!this._sourcesContents) {
    			return null;
    		}
    		if (aSourceRoot != null) {
    			source = util.relative(aSourceRoot, source);
    		}
    		var key = util.toSetString(source);
    		return Object.prototype.hasOwnProperty.call(this._sourcesContents,
    			key)
    			? this._sourcesContents[key]
    			: null;
    	}, this);
    };

		/**
   * Externalize the source map.
   */
		SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
    	var map = {
    		version: this._version,
    		sources: this._sources.toArray(),
    		names: this._names.toArray(),
    		mappings: this._serializeMappings()
    	};
    	if (this._file != null) {
    		map.file = this._file;
    	}
    	if (this._sourceRoot != null) {
    		map.sourceRoot = this._sourceRoot;
    	}
    	if (this._sourcesContents) {
    		map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    	}

    	return map;
    };

		/**
   * Render the source map being generated to a string.
   */
		SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
    	return JSON.stringify(this.toJSON());
    };

		exports.SourceMapGenerator = SourceMapGenerator;

	});

},{"./array-set":95,"./base64-vlq":96,"./mapping-list":99,"./util":104,"amdefine":5}],103:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
		var util = require('./util');

		// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
		// operating systems these days (capturing the result).
		var REGEX_NEWLINE = /(\r?\n)/;

		// Newline character code for charCodeAt() comparisons
		var NEWLINE_CODE = 10;

		// Private symbol for identifying `SourceNode`s when multiple versions of
		// the source-map library are loaded. This MUST NOT CHANGE across
		// versions!
		var isSourceNode = "$$$isSourceNode$$$";

		/**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
		function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
			this.children = [];
			this.sourceContents = {};
			this.line = aLine == null ? null : aLine;
			this.column = aColumn == null ? null : aColumn;
			this.source = aSource == null ? null : aSource;
			this.name = aName == null ? null : aName;
			this[isSourceNode] = true;
			if (aChunks != null) this.add(aChunks);
		}

		/**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
		SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    	// The SourceNode we want to fill with the generated code
    	// and the SourceMap
    	var node = new SourceNode();

    	// All even indices of this array are one line of the generated code,
    	// while all odd indices are the newlines between two adjacent lines
    	// (since `REGEX_NEWLINE` captures its match).
    	// Processed fragments are removed from this array, by calling `shiftNextLine`.
    	var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    	var shiftNextLine = function() {
    		var lineContents = remainingLines.shift();
    		// The last line of a file might not have a newline.
    		var newLine = remainingLines.shift() || "";
    		return lineContents + newLine;
    	};

    	// We need to remember the position of "remainingLines"
    	var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    	// The generate SourceNodes we need a code range.
    	// To extract it current and last mapping is used.
    	// Here we store the last mapping.
    	var lastMapping = null;

    	aSourceMapConsumer.eachMapping(function (mapping) {
    		if (lastMapping !== null) {
    			// We add the code from "lastMapping" to "mapping":
    			// First check if there is a new line in between.
    			if (lastGeneratedLine < mapping.generatedLine) {
    				var code = "";
    				// Associate first line with "lastMapping"
    				addMappingWithCode(lastMapping, shiftNextLine());
    				lastGeneratedLine++;
    				lastGeneratedColumn = 0;
    				// The remaining code is added without mapping
    			} else {
    				// There is no new line in between.
    				// Associate the code between "lastGeneratedColumn" and
    				// "mapping.generatedColumn" with "lastMapping"
    				var nextLine = remainingLines[0];
    				var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
    				remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
    				lastGeneratedColumn = mapping.generatedColumn;
    				addMappingWithCode(lastMapping, code);
    				// No more remaining code, continue
    				lastMapping = mapping;
    				return;
    			}
    		}
    		// We add the generated code until the first mapping
    		// to the SourceNode without any mapping.
    		// Each line is added as separate string.
    		while (lastGeneratedLine < mapping.generatedLine) {
    			node.add(shiftNextLine());
    			lastGeneratedLine++;
    		}
    		if (lastGeneratedColumn < mapping.generatedColumn) {
    			var nextLine = remainingLines[0];
    			node.add(nextLine.substr(0, mapping.generatedColumn));
    			remainingLines[0] = nextLine.substr(mapping.generatedColumn);
    			lastGeneratedColumn = mapping.generatedColumn;
    		}
    		lastMapping = mapping;
    	}, this);
    	// We have processed all mappings.
    	if (remainingLines.length > 0) {
    		if (lastMapping) {
    			// Associate the remaining code in the current line with "lastMapping"
    			addMappingWithCode(lastMapping, shiftNextLine());
    		}
    		// and add the remaining lines without any mapping
    		node.add(remainingLines.join(""));
    	}

    	// Copy sourcesContent into SourceNode
    	aSourceMapConsumer.sources.forEach(function (sourceFile) {
    		var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    		if (content != null) {
    			if (aRelativePath != null) {
    				sourceFile = util.join(aRelativePath, sourceFile);
    			}
    			node.setSourceContent(sourceFile, content);
    		}
    	});

    	return node;

    	function addMappingWithCode(mapping, code) {
    		if (mapping === null || mapping.source === undefined) {
    			node.add(code);
    		} else {
    			var source = aRelativePath
    				? util.join(aRelativePath, mapping.source)
    				: mapping.source;
    			node.add(new SourceNode(mapping.originalLine,
    				mapping.originalColumn,
    				source,
    				code,
    				mapping.name));
    		}
    	}
    };

		/**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
		SourceNode.prototype.add = function SourceNode_add(aChunk) {
			if (Array.isArray(aChunk)) {
				aChunk.forEach(function (chunk) {
					this.add(chunk);
				}, this);
			}
			else if (aChunk[isSourceNode] || typeof aChunk === "string") {
				if (aChunk) {
					this.children.push(aChunk);
				}
			}
			else {
				throw new TypeError(
					"Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
				);
			}
			return this;
		};

		/**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
		SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
			if (Array.isArray(aChunk)) {
				for (var i = aChunk.length-1; i >= 0; i--) {
					this.prepend(aChunk[i]);
				}
			}
			else if (aChunk[isSourceNode] || typeof aChunk === "string") {
				this.children.unshift(aChunk);
			}
			else {
				throw new TypeError(
					"Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
				);
			}
			return this;
		};

		/**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
		SourceNode.prototype.walk = function SourceNode_walk(aFn) {
			var chunk;
			for (var i = 0, len = this.children.length; i < len; i++) {
				chunk = this.children[i];
				if (chunk[isSourceNode]) {
					chunk.walk(aFn);
				}
				else {
					if (chunk !== '') {
						aFn(chunk, { source: this.source,
							line: this.line,
							column: this.column,
							name: this.name });
					}
				}
			}
		};

		/**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
		SourceNode.prototype.join = function SourceNode_join(aSep) {
			var newChildren;
			var i;
			var len = this.children.length;
			if (len > 0) {
				newChildren = [];
				for (i = 0; i < len-1; i++) {
					newChildren.push(this.children[i]);
					newChildren.push(aSep);
				}
				newChildren.push(this.children[i]);
				this.children = newChildren;
			}
			return this;
		};

		/**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
		SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
			var lastChild = this.children[this.children.length - 1];
			if (lastChild[isSourceNode]) {
				lastChild.replaceRight(aPattern, aReplacement);
			}
			else if (typeof lastChild === 'string') {
				this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
			}
			else {
				this.children.push(''.replace(aPattern, aReplacement));
			}
			return this;
		};

		/**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
		SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    	this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

		/**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
		SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
    	for (var i = 0, len = this.children.length; i < len; i++) {
    		if (this.children[i][isSourceNode]) {
    			this.children[i].walkSourceContents(aFn);
    		}
    	}

    	var sources = Object.keys(this.sourceContents);
    	for (var i = 0, len = sources.length; i < len; i++) {
    		aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    	}
    };

		/**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
		SourceNode.prototype.toString = function SourceNode_toString() {
			var str = "";
			this.walk(function (chunk) {
				str += chunk;
			});
			return str;
		};

		/**
   * Returns the string representation of this source node along with a source
   * map.
   */
		SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
			var generated = {
				code: "",
				line: 1,
				column: 0
			};
			var map = new SourceMapGenerator(aArgs);
			var sourceMappingActive = false;
			var lastOriginalSource = null;
			var lastOriginalLine = null;
			var lastOriginalColumn = null;
			var lastOriginalName = null;
			this.walk(function (chunk, original) {
				generated.code += chunk;
				if (original.source !== null
          && original.line !== null
          && original.column !== null) {
					if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
						map.addMapping({
							source: original.source,
							original: {
								line: original.line,
								column: original.column
							},
							generated: {
								line: generated.line,
								column: generated.column
							},
							name: original.name
						});
					}
					lastOriginalSource = original.source;
					lastOriginalLine = original.line;
					lastOriginalColumn = original.column;
					lastOriginalName = original.name;
					sourceMappingActive = true;
				} else if (sourceMappingActive) {
					map.addMapping({
						generated: {
							line: generated.line,
							column: generated.column
						}
					});
					lastOriginalSource = null;
					sourceMappingActive = false;
				}
				for (var idx = 0, length = chunk.length; idx < length; idx++) {
					if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
						generated.line++;
						generated.column = 0;
						// Mappings end at eol
						if (idx + 1 === length) {
							lastOriginalSource = null;
							sourceMappingActive = false;
						} else if (sourceMappingActive) {
							map.addMapping({
								source: original.source,
								original: {
									line: original.line,
									column: original.column
								},
								generated: {
									line: generated.line,
									column: generated.column
								},
								name: original.name
							});
						}
					} else {
						generated.column++;
					}
				}
			});
			this.walkSourceContents(function (sourceFile, sourceContent) {
				map.setSourceContent(sourceFile, sourceContent);
			});

			return { code: generated.code, map: map };
		};

		exports.SourceNode = SourceNode;

	});

},{"./source-map-generator":102,"./util":104,"amdefine":5}],104:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
	if (typeof define !== 'function') {
		var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

		/**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
		function getArg(aArgs, aName, aDefaultValue) {
			if (aName in aArgs) {
				return aArgs[aName];
			} else if (arguments.length === 3) {
				return aDefaultValue;
			} else {
				throw new Error('"' + aName + '" is a required argument.');
			}
		}
		exports.getArg = getArg;

		var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
		var dataUrlRegexp = /^data:.+\,.+$/;

		function urlParse(aUrl) {
			var match = aUrl.match(urlRegexp);
			if (!match) {
				return null;
			}
			return {
				scheme: match[1],
				auth: match[2],
				host: match[3],
				port: match[4],
				path: match[5]
			};
		}
		exports.urlParse = urlParse;

		function urlGenerate(aParsedUrl) {
			var url = '';
			if (aParsedUrl.scheme) {
				url += aParsedUrl.scheme + ':';
			}
			url += '//';
			if (aParsedUrl.auth) {
				url += aParsedUrl.auth + '@';
			}
			if (aParsedUrl.host) {
				url += aParsedUrl.host;
			}
			if (aParsedUrl.port) {
				url += ":" + aParsedUrl.port;
			}
			if (aParsedUrl.path) {
				url += aParsedUrl.path;
			}
			return url;
		}
		exports.urlGenerate = urlGenerate;

		/**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
		function normalize(aPath) {
			var path = aPath;
			var url = urlParse(aPath);
			if (url) {
				if (!url.path) {
					return aPath;
				}
				path = url.path;
			}
			var isAbsolute = (path.charAt(0) === '/');

			var parts = path.split(/\/+/);
			for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
				part = parts[i];
				if (part === '.') {
					parts.splice(i, 1);
				} else if (part === '..') {
					up++;
				} else if (up > 0) {
					if (part === '') {
						// The first part is blank if the path is absolute. Trying to go
						// above the root is a no-op. Therefore we can remove all '..' parts
						// directly after the root.
						parts.splice(i + 1, up);
						up = 0;
					} else {
						parts.splice(i, 2);
						up--;
					}
				}
			}
			path = parts.join('/');

			if (path === '') {
				path = isAbsolute ? '/' : '.';
			}

			if (url) {
				url.path = path;
				return urlGenerate(url);
			}
			return path;
		}
		exports.normalize = normalize;

		/**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
		function join(aRoot, aPath) {
			if (aRoot === "") {
				aRoot = ".";
			}
			if (aPath === "") {
				aPath = ".";
			}
			var aPathUrl = urlParse(aPath);
			var aRootUrl = urlParse(aRoot);
			if (aRootUrl) {
				aRoot = aRootUrl.path || '/';
			}

			// `join(foo, '//www.example.org')`
			if (aPathUrl && !aPathUrl.scheme) {
				if (aRootUrl) {
					aPathUrl.scheme = aRootUrl.scheme;
				}
				return urlGenerate(aPathUrl);
			}

			if (aPathUrl || aPath.match(dataUrlRegexp)) {
				return aPath;
			}

			// `join('http://', 'www.example.com')`
			if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
				aRootUrl.host = aPath;
				return urlGenerate(aRootUrl);
			}

			var joined = aPath.charAt(0) === '/'
				? aPath
				: normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

			if (aRootUrl) {
				aRootUrl.path = joined;
				return urlGenerate(aRootUrl);
			}
			return joined;
		}
		exports.join = join;

		/**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
		function relative(aRoot, aPath) {
			if (aRoot === "") {
				aRoot = ".";
			}

			aRoot = aRoot.replace(/\/$/, '');

			// It is possible for the path to be above the root. In this case, simply
			// checking whether the root is a prefix of the path won't work. Instead, we
			// need to remove components from the root one by one, until either we find
			// a prefix that fits, or we run out of components to remove.
			var level = 0;
			while (aPath.indexOf(aRoot + '/') !== 0) {
				var index = aRoot.lastIndexOf("/");
				if (index < 0) {
					return aPath;
				}

				// If the only part of the root that is left is the scheme (i.e. http://,
				// file:///, etc.), one or more slashes (/), or simply nothing at all, we
				// have exhausted all components, so the path is not relative to the root.
				aRoot = aRoot.slice(0, index);
				if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
					return aPath;
				}

				++level;
			}

			// Make sure we add a "../" for each component we removed from the root.
			return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
		}
		exports.relative = relative;

		/**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
		function toSetString(aStr) {
			return '$' + aStr;
		}
		exports.toSetString = toSetString;

		function fromSetString(aStr) {
			return aStr.substr(1);
		}
		exports.fromSetString = fromSetString;

		/**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
		function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
			var cmp = mappingA.source - mappingB.source;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalLine - mappingB.originalLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalColumn - mappingB.originalColumn;
			if (cmp !== 0 || onlyCompareOriginal) {
				return cmp;
			}

			cmp = mappingA.generatedColumn - mappingB.generatedColumn;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.generatedLine - mappingB.generatedLine;
			if (cmp !== 0) {
				return cmp;
			}

			return mappingA.name - mappingB.name;
		}
		exports.compareByOriginalPositions = compareByOriginalPositions;

		/**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
		function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
			var cmp = mappingA.generatedLine - mappingB.generatedLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.generatedColumn - mappingB.generatedColumn;
			if (cmp !== 0 || onlyCompareGenerated) {
				return cmp;
			}

			cmp = mappingA.source - mappingB.source;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalLine - mappingB.originalLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalColumn - mappingB.originalColumn;
			if (cmp !== 0) {
				return cmp;
			}

			return mappingA.name - mappingB.name;
		}
		exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

		function strcmp(aStr1, aStr2) {
			if (aStr1 === aStr2) {
				return 0;
			}

			if (aStr1 > aStr2) {
				return 1;
			}

			return -1;
		}

		/**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
		function compareByGeneratedPositionsInflated(mappingA, mappingB) {
			var cmp = mappingA.generatedLine - mappingB.generatedLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.generatedColumn - mappingB.generatedColumn;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = strcmp(mappingA.source, mappingB.source);
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalLine - mappingB.originalLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalColumn - mappingB.originalColumn;
			if (cmp !== 0) {
				return cmp;
			}

			return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	});

},{"amdefine":5}],105:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)

 3D features for Highcharts JS

 @license: www.highcharts.com/license
*/
	(function(E){"object"===typeof module&&module.exports?module.exports=E:E(Highcharts);})(function(E){(function(a){var r=a.deg2rad,g=a.pick;a.perspective=function(t,n,v){var k=n.options.chart.options3d,p=v?n.inverted:!1,h=n.plotWidth/2,m=n.plotHeight/2,f=k.depth/2,d=g(k.depth,1)*g(k.viewDistance,0),e=n.scale3d||1,b=r*k.beta*(p?-1:1),k=r*k.alpha*(p?-1:1),c=Math.cos(k),q=Math.cos(-b),x=Math.sin(k),y=Math.sin(-b);v||(h+=n.plotLeft,m+=n.plotTop);return a.map(t,function(b){var a,k;k=(p?b.y:b.x)-h;var g=(p?
			b.x:b.y)-m,n=(b.z||0)-f;a=q*k-y*n;b=-x*y*k+c*g-q*x*n;k=c*y*k+x*g+c*q*n;g=0<d&&d<Number.POSITIVE_INFINITY?d/(k+f+d):1;a=a*g*e+h;b=b*g*e+m;return{x:p?b:a,y:p?a:b,z:k*e+f};});};})(E);(function(a){function r(b){var c=0,l,a;for(l=0;l<b.length;l++)a=(l+1)%b.length,c+=b[l].x*b[a].y-b[a].x*b[l].y;return c/2;}function g(b){var a=0,l;for(l=0;l<b.length;l++)a+=b[l].z;return b.length?a/b.length:0;}function t(b,a,l,c,e,d,D,f){var G=[],C=d-e;return d>e&&d-e>Math.PI/2+.0001?(G=G.concat(t(b,a,l,c,e,e+Math.PI/2,D,f)),
	G=G.concat(t(b,a,l,c,e+Math.PI/2,d,D,f))):d<e&&e-d>Math.PI/2+.0001?(G=G.concat(t(b,a,l,c,e,e-Math.PI/2,D,f)),G=G.concat(t(b,a,l,c,e-Math.PI/2,d,D,f))):["C",b+l*Math.cos(e)-l*B*C*Math.sin(e)+D,a+c*Math.sin(e)+c*B*C*Math.cos(e)+f,b+l*Math.cos(d)+l*B*C*Math.sin(d)+D,a+c*Math.sin(d)-c*B*C*Math.cos(d)+f,b+l*Math.cos(d)+D,a+c*Math.sin(d)+f];}var n=Math.cos,v=Math.PI,k=Math.sin,p=a.animObject,h=a.charts,m=a.color,f=a.defined,d=a.deg2rad,e=a.each,b=a.extend,c=a.inArray,q=a.map,x=a.merge,y=a.perspective,F=
a.pick,z=a.SVGElement,A=a.SVGRenderer,w=a.wrap,B=4*(Math.sqrt(2)-1)/3/(v/2);A.prototype.toLinePath=function(b,a){var l=[];e(b,function(b){l.push("L",b.x,b.y);});b.length&&(l[0]="M",a&&l.push("Z"));return l;};A.prototype.cuboid=function(b){var c=this.g();b=this.cuboidPath(b);c.attr({"stroke-linejoin":"round"});c.front=this.path(b[0]).attr({"class":"highcharts-3d-front",zIndex:b[3]}).add(c);c.top=this.path(b[1]).attr({"class":"highcharts-3d-top",zIndex:b[4]}).add(c);c.side=this.path(b[2]).attr({"class":"highcharts-3d-side",
		zIndex:b[5]}).add(c);c.fillSetter=function(b){this.front.attr({fill:b});this.top.attr({fill:m(b).brighten(.1).get()});this.side.attr({fill:m(b).brighten(-.1).get()});this.color=b;return this;};c.opacitySetter=function(b){this.front.attr({opacity:b});this.top.attr({opacity:b});this.side.attr({opacity:b});return this;};c.attr=function(b){if(b.shapeArgs||f(b.x))b=this.renderer.cuboidPath(b.shapeArgs||b),this.front.attr({d:b[0],zIndex:b[3]}),this.top.attr({d:b[1],zIndex:b[4]}),this.side.attr({d:b[2],zIndex:b[5]});
	else return a.SVGElement.prototype.attr.call(this,b);return this;};c.animate=function(b,c,a){f(b.x)&&f(b.y)?(b=this.renderer.cuboidPath(b),this.front.attr({zIndex:b[3]}).animate({d:b[0]},c,a),this.top.attr({zIndex:b[4]}).animate({d:b[1]},c,a),this.side.attr({zIndex:b[5]}).animate({d:b[2]},c,a),this.attr({zIndex:-b[6]})):b.opacity?(this.front.animate(b,c,a),this.top.animate(b,c,a),this.side.animate(b,c,a)):z.prototype.animate.call(this,b,c,a);return this;};c.destroy=function(){this.front.destroy();this.top.destroy();
		this.side.destroy();return null;};c.attr({zIndex:-b[6]});return c;};A.prototype.cuboidPath=function(b){function c(b){return k[b];}var a=b.x,e=b.y,d=b.z,f=b.height,D=b.width,m=b.depth,k=[{x:a,y:e,z:d},{x:a+D,y:e,z:d},{x:a+D,y:e+f,z:d},{x:a,y:e+f,z:d},{x:a,y:e+f,z:d+m},{x:a+D,y:e+f,z:d+m},{x:a+D,y:e,z:d+m},{x:a,y:e,z:d+m}],k=y(k,h[this.chartIndex],b.insidePlotArea),d=function(b,a){var e=[];b=q(b,c);a=q(a,c);0>r(b)?e=b:0>r(a)&&(e=a);return e;};b=d([3,2,1,0],[7,6,5,4]);a=[4,5,2,3];e=d([1,6,7,0],a);d=d([1,
		2,5,6],[0,7,4,3]);return[this.toLinePath(b,!0),this.toLinePath(e,!0),this.toLinePath(d,!0),g(b),g(e),g(d),9E9*g(q(a,c))];};a.SVGRenderer.prototype.arc3d=function(a){function f(b){var a=!1,e={},d;for(d in b)-1!==c(d,h)&&(e[d]=b[d],delete b[d],a=!0);return a?e:!1;}var l=this.g(),k=l.renderer,h="x y r innerR start end".split(" ");a=x(a);a.alpha*=d;a.beta*=d;l.top=k.path();l.side1=k.path();l.side2=k.path();l.inn=k.path();l.out=k.path();l.onAdd=function(){var b=l.parentGroup,a=l.attr("class");l.top.add(l);
		e(["out","inn","side1","side2"],function(c){l[c].addClass(a+" highcharts-3d-side").add(b);});};l.setPaths=function(b){var a=l.renderer.arc3dPath(b),c=100*a.zTop;l.attribs=b;l.top.attr({d:a.top,zIndex:a.zTop});l.inn.attr({d:a.inn,zIndex:a.zInn});l.out.attr({d:a.out,zIndex:a.zOut});l.side1.attr({d:a.side1,zIndex:a.zSide1});l.side2.attr({d:a.side2,zIndex:a.zSide2});l.zIndex=c;l.attr({zIndex:c});b.center&&(l.top.setRadialReference(b.center),delete b.center);};l.setPaths(a);l.fillSetter=function(b){var a=
m(b).brighten(-.1).get();this.fill=b;this.side1.attr({fill:a});this.side2.attr({fill:a});this.inn.attr({fill:a});this.out.attr({fill:a});this.top.attr({fill:b});return this;};e(["opacity","translateX","translateY","visibility"],function(b){l[b+"Setter"]=function(b,a){l[a]=b;e(["out","inn","side1","side2","top"],function(c){l[c].attr(a,b);});};});w(l,"attr",function(a,c,e){var d;"object"===typeof c&&(d=f(c))&&(b(l.attribs,d),l.setPaths(l.attribs));return a.call(this,c,e);});w(l,"animate",function(b,a,c,
		e){var d,l=this.attribs,k;delete a.center;delete a.z;delete a.depth;delete a.alpha;delete a.beta;k=p(F(c,this.renderer.globalAnimation));k.duration&&(a=x(a),d=f(a),a.dummy=1,d&&(k.step=function(b,a){function c(b){return l[b]+(F(d[b],l[b])-l[b])*a.pos;}"dummy"===a.prop&&a.elem.setPaths(x(l,{x:c("x"),y:c("y"),r:c("r"),innerR:c("innerR"),start:c("start"),end:c("end")}));}),c=k);return b.call(this,a,c,e);});l.destroy=function(){this.top.destroy();this.out.destroy();this.inn.destroy();this.side1.destroy();
		this.side2.destroy();z.prototype.destroy.call(this);};l.hide=function(){this.top.hide();this.out.hide();this.inn.hide();this.side1.hide();this.side2.hide();};l.show=function(){this.top.show();this.out.show();this.inn.show();this.side1.show();this.side2.show();};return l;};A.prototype.arc3dPath=function(b){function a(b){b%=2*Math.PI;b>Math.PI&&(b=2*Math.PI-b);return b;}var c=b.x,e=b.y,d=b.start,f=b.end-.00001,m=b.r,h=b.innerR,p=b.depth,q=b.alpha,g=b.beta,x=Math.cos(d),r=Math.sin(d);b=Math.cos(f);var y=
Math.sin(f),u=m*Math.cos(g),m=m*Math.cos(q),B=h*Math.cos(g),C=h*Math.cos(q),h=p*Math.sin(g),w=p*Math.sin(q),p=["M",c+u*x,e+m*r],p=p.concat(t(c,e,u,m,d,f,0,0)),p=p.concat(["L",c+B*b,e+C*y]),p=p.concat(t(c,e,B,C,f,d,0,0)),p=p.concat(["Z"]),F=0<g?Math.PI/2:0,g=0<q?0:Math.PI/2,F=d>-F?d:f>-F?-F:d,z=f<v-g?f:d<v-g?v-g:f,A=2*v-g,q=["M",c+u*n(F),e+m*k(F)],q=q.concat(t(c,e,u,m,F,z,0,0));f>A&&d<A?(q=q.concat(["L",c+u*n(z)+h,e+m*k(z)+w]),q=q.concat(t(c,e,u,m,z,A,h,w)),q=q.concat(["L",c+u*n(A),e+m*k(A)]),q=q.concat(t(c,
		e,u,m,A,f,0,0)),q=q.concat(["L",c+u*n(f)+h,e+m*k(f)+w]),q=q.concat(t(c,e,u,m,f,A,h,w)),q=q.concat(["L",c+u*n(A),e+m*k(A)]),q=q.concat(t(c,e,u,m,A,z,0,0))):f>v-g&&d<v-g&&(q=q.concat(["L",c+u*Math.cos(z)+h,e+m*Math.sin(z)+w]),q=q.concat(t(c,e,u,m,z,f,h,w)),q=q.concat(["L",c+u*Math.cos(f),e+m*Math.sin(f)]),q=q.concat(t(c,e,u,m,f,z,0,0)));q=q.concat(["L",c+u*Math.cos(z)+h,e+m*Math.sin(z)+w]);q=q.concat(t(c,e,u,m,z,F,h,w));q=q.concat(["Z"]);g=["M",c+B*x,e+C*r];g=g.concat(t(c,e,B,C,d,f,0,0));g=g.concat(["L",
		c+B*Math.cos(f)+h,e+C*Math.sin(f)+w]);g=g.concat(t(c,e,B,C,f,d,h,w));g=g.concat(["Z"]);x=["M",c+u*x,e+m*r,"L",c+u*x+h,e+m*r+w,"L",c+B*x+h,e+C*r+w,"L",c+B*x,e+C*r,"Z"];c=["M",c+u*b,e+m*y,"L",c+u*b+h,e+m*y+w,"L",c+B*b+h,e+C*y+w,"L",c+B*b,e+C*y,"Z"];y=Math.atan2(w,-h);e=Math.abs(f+y);b=Math.abs(d+y);d=Math.abs((d+f)/2+y);e=a(e);b=a(b);d=a(d);d*=1E5;f=1E5*b;e*=1E5;return{top:p,zTop:1E5*Math.PI+1,out:q,zOut:Math.max(d,f,e),inn:g,zInn:Math.max(d,f,e),side1:x,zSide1:.99*e,side2:c,zSide2:.99*f};};})(E);(function(a){function r(a,
		f){var d=a.plotLeft,e=a.plotWidth+d,b=a.plotTop,c=a.plotHeight+b,q=d+a.plotWidth/2,m=b+a.plotHeight/2,h=Number.MAX_VALUE,k=-Number.MAX_VALUE,g=Number.MAX_VALUE,p=-Number.MAX_VALUE,n,r=1;n=[{x:d,y:b,z:0},{x:d,y:b,z:f}];t([0,1],function(b){n.push({x:e,y:n[b].y,z:n[b].z});});t([0,1,2,3],function(b){n.push({x:n[b].x,y:c,z:n[b].z});});n=v(n,a,!1);t(n,function(b){h=Math.min(h,b.x);k=Math.max(k,b.x);g=Math.min(g,b.y);p=Math.max(p,b.y);});d>h&&(r=Math.min(r,1-Math.abs((d+q)/(h+q))%1));e<k&&(r=Math.min(r,(e-
q)/(k-q)));b>g&&(r=0>g?Math.min(r,(b+m)/(-g+b+m)):Math.min(r,1-(b+m)/(g+m)%1));c<p&&(r=Math.min(r,Math.abs((c-m)/(p-m))));return r;}var g=a.Chart,t=a.each,n=a.merge,v=a.perspective,k=a.pick,p=a.wrap;g.prototype.is3d=function(){return this.options.chart.options3d&&this.options.chart.options3d.enabled;};g.prototype.propsRequireDirtyBox.push("chart.options3d");g.prototype.propsRequireUpdateSeries.push("chart.options3d");a.wrap(a.Chart.prototype,"isInsidePlot",function(a){return this.is3d()||a.apply(this,
		[].slice.call(arguments,1));});var h=a.getOptions();n(!0,h,{chart:{options3d:{enabled:!1,alpha:0,beta:0,depth:100,fitToPlot:!0,viewDistance:25,frame:{bottom:{size:1},side:{size:1},back:{size:1}}}}});p(g.prototype,"setClassName",function(a){a.apply(this,[].slice.call(arguments,1));this.is3d()&&(this.container.className+=" highcharts-3d-chart");});a.wrap(a.Chart.prototype,"setChartSize",function(a){var f=this.options.chart.options3d;a.apply(this,[].slice.call(arguments,1));if(this.is3d()){var d=this.inverted,
		e=this.clipBox,b=this.margin;e[d?"y":"x"]=-(b[3]||0);e[d?"x":"y"]=-(b[0]||0);e[d?"height":"width"]=this.chartWidth+(b[3]||0)+(b[1]||0);e[d?"width":"height"]=this.chartHeight+(b[0]||0)+(b[2]||0);this.scale3d=1;!0===f.fitToPlot&&(this.scale3d=r(this,f.depth));}});p(g.prototype,"redraw",function(a){this.is3d()&&(this.isDirtyBox=!0);a.apply(this,[].slice.call(arguments,1));});p(g.prototype,"renderSeries",function(a){var f=this.series.length;if(this.is3d())for(;f--;)a=this.series[f],a.translate(),a.render();
	else a.call(this);});g.prototype.retrieveStacks=function(a){var f=this.series,d={},e,b=1;t(this.series,function(c){e=k(c.options.stack,a?0:f.length-1-c.index);d[e]?d[e].series.push(c):(d[e]={series:[c],position:b},b++);});d.totalStacks=b+1;return d;};})(E);(function(a){var r,g=a.Axis,t=a.Chart,n=a.each,v=a.extend,k=a.merge,p=a.perspective,h=a.pick,m=a.splat,f=a.Tick,d=a.wrap;d(g.prototype,"setOptions",function(a,b){a.call(this,b);this.chart.is3d()&&(a=this.options,a.tickWidth=h(a.tickWidth,0),a.gridLineWidth=
h(a.gridLineWidth,1));});d(g.prototype,"render",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var b=this.chart,c=b.renderer,e=b.options.chart.options3d,d=e.frame,f=d.bottom,h=d.back,d=d.side,k=e.depth,g=this.height,m=this.width,p=this.left,n=this.top;this.isZAxis||(this.horiz?(h={x:p,y:n+(b.xAxis[0].opposite?-f.size:g),z:0,width:m,height:f.size,depth:k,insidePlotArea:!1},this.bottomFrame?this.bottomFrame.animate(h):(this.bottomFrame=c.cuboid(h).attr({"class":"highcharts-3d-frame highcharts-3d-frame-bottom",
		zIndex:b.yAxis[0].reversed&&0<e.alpha?4:-1}).add(),this.bottomFrame.attr({fill:f.color||"none",stroke:f.color||"none"}))):(e={x:p+(b.yAxis[0].opposite?0:-d.size),y:n+(b.xAxis[0].opposite?-f.size:0),z:k,width:m+d.size,height:g+f.size,depth:h.size,insidePlotArea:!1},this.backFrame?this.backFrame.animate(e):(this.backFrame=c.cuboid(e).attr({"class":"highcharts-3d-frame highcharts-3d-frame-back",zIndex:-3}).add(),this.backFrame.attr({fill:h.color||"none",stroke:h.color||"none"})),b={x:p+(b.yAxis[0].opposite?
		m:-d.size),y:n+(b.xAxis[0].opposite?-f.size:0),z:0,width:d.size,height:g+f.size,depth:k,insidePlotArea:!1},this.sideFrame?this.sideFrame.animate(b):(this.sideFrame=c.cuboid(b).attr({"class":"highcharts-3d-frame highcharts-3d-frame-side",zIndex:-2}).add(),this.sideFrame.attr({fill:d.color||"none",stroke:d.color||"none"}))));}});d(g.prototype,"getPlotLinePath",function(a){var b=a.apply(this,[].slice.call(arguments,1));if(!this.chart.is3d()||null===b)return b;var c=this.chart,e=c.options.chart.options3d,
		c=this.isZAxis?c.plotWidth:e.depth,e=this.opposite;this.horiz&&(e=!e);b=[this.swapZ({x:b[1],y:b[2],z:e?c:0}),this.swapZ({x:b[1],y:b[2],z:c}),this.swapZ({x:b[4],y:b[5],z:c}),this.swapZ({x:b[4],y:b[5],z:e?0:c})];b=p(b,this.chart,!1);return b=this.chart.renderer.toLinePath(b,!1);});d(g.prototype,"getLinePath",function(a){return this.chart.is3d()?[]:a.apply(this,[].slice.call(arguments,1));});d(g.prototype,"getPlotBandPath",function(a){if(!this.chart.is3d())return a.apply(this,[].slice.call(arguments,1));
		var b=arguments,c=b[1],b=this.getPlotLinePath(b[2]);(c=this.getPlotLinePath(c))&&b?c.push("L",b[10],b[11],"L",b[7],b[8],"L",b[4],b[5],"L",b[1],b[2]):c=null;return c;});d(f.prototype,"getMarkPath",function(a){var b=a.apply(this,[].slice.call(arguments,1));if(!this.axis.chart.is3d())return b;b=[this.axis.swapZ({x:b[1],y:b[2],z:0}),this.axis.swapZ({x:b[4],y:b[5],z:0})];b=p(b,this.axis.chart,!1);return b=["M",b[0].x,b[0].y,"L",b[1].x,b[1].y];});d(f.prototype,"getLabelPosition",function(a){var b=a.apply(this,
		[].slice.call(arguments,1));this.axis.chart.is3d()&&(b=p([this.axis.swapZ({x:b.x,y:b.y,z:0})],this.axis.chart,!1)[0]);return b;});a.wrap(g.prototype,"getTitlePosition",function(a){var b=this.chart.is3d(),c,e;b&&(e=this.axisTitleMargin,this.axisTitleMargin=0);c=a.apply(this,[].slice.call(arguments,1));b&&(c=p([this.swapZ({x:c.x,y:c.y,z:0})],this.chart,!1)[0],c[this.horiz?"y":"x"]+=(this.horiz?1:-1)*(this.opposite?-1:1)*e,this.axisTitleMargin=e);return c;});d(g.prototype,"drawCrosshair",function(a){var b=
arguments;this.chart.is3d()&&b[2]&&(b[2]={plotX:b[2].plotXold||b[2].plotX,plotY:b[2].plotYold||b[2].plotY});a.apply(this,[].slice.call(b,1));});g.prototype.swapZ=function(a,b){if(this.isZAxis){b=b?0:this.chart.plotLeft;var c=this.chart;return{x:b+(c.yAxis[0].opposite?a.z:c.xAxis[0].width-a.z),y:a.y,z:a.x-b};}return a;};r=a.ZAxis=function(){this.isZAxis=!0;this.init.apply(this,arguments);};v(r.prototype,g.prototype);v(r.prototype,{setOptions:function(a){a=k({offset:0,lineWidth:0},a);g.prototype.setOptions.call(this,
		a);this.coll="zAxis";},setAxisSize:function(){g.prototype.setAxisSize.call(this);this.width=this.len=this.chart.options.chart.options3d.depth;this.right=this.chart.chartWidth-this.width-this.left;},getSeriesExtremes:function(){var a=this,b=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.ignoreMinPadding=a.ignoreMaxPadding=null;a.buildStacks&&a.buildStacks();n(a.series,function(c){if(c.visible||!b.options.chart.ignoreHiddenSeries)a.hasVisibleSeries=!0,c=c.zData,c.length&&(a.dataMin=Math.min(h(a.dataMin,
		c[0]),Math.min.apply(null,c)),a.dataMax=Math.max(h(a.dataMax,c[0]),Math.max.apply(null,c)));});}});d(t.prototype,"getAxes",function(a){var b=this,c=this.options,c=c.zAxis=m(c.zAxis||{});a.call(this);b.is3d()&&(this.zAxis=[],n(c,function(a,c){a.index=c;a.isX=!0;(new r(b,a)).setScale();}));});})(E);(function(a){function r(a){var f=a.apply(this,[].slice.call(arguments,1));this.chart.is3d()&&(f.stroke=this.options.edgeColor||f.fill,f["stroke-width"]=v(this.options.edgeWidth,1));return f;}function g(a){if(this.chart.is3d()){var f=
this.chart.options.plotOptions.column.grouping;void 0===f||f||void 0===this.group.zIndex||this.zIndexSet||(this.group.attr({zIndex:10*this.group.zIndex}),this.zIndexSet=!0);}a.apply(this,[].slice.call(arguments,1));}var t=a.each,n=a.perspective,v=a.pick,k=a.Series,p=a.seriesTypes,h=a.svg;a=a.wrap;a(p.column.prototype,"translate",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var f=this.chart,d=this.options,e=d.depth||25,b=(d.stacking?d.stack||0:this._i)*(e+(d.groupZPadding||
1));!1!==d.grouping&&(b=0);b+=d.groupZPadding||1;t(this.data,function(a){if(null!==a.y){var c=a.shapeArgs,d=a.tooltipPos;a.shapeType="cuboid";c.z=b;c.depth=e;c.insidePlotArea=!0;d=n([{x:d[0],y:d[1],z:b}],f,!0)[0];a.tooltipPos=[d.x,d.y];}});this.z=b;}});a(p.column.prototype,"animate",function(a){if(this.chart.is3d()){var f=arguments[1],d=this.yAxis,e=this,b=this.yAxis.reversed;h&&(f?t(e.data,function(a){null!==a.y&&(a.height=a.shapeArgs.height,a.shapey=a.shapeArgs.y,a.shapeArgs.height=1,b||(a.shapeArgs.y=
a.stackY?a.plotY+d.translate(a.stackY):a.plotY+(a.negative?-a.height:a.height)));}):(t(e.data,function(a){null!==a.y&&(a.shapeArgs.height=a.height,a.shapeArgs.y=a.shapey,a.graphic&&a.graphic.animate(a.shapeArgs,e.options.animation));}),this.drawDataLabels(),e.animate=null));}else a.apply(this,[].slice.call(arguments,1));});a(p.column.prototype,"init",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var f=this.options,d=f.grouping,e=f.stacking,b=v(this.yAxis.options.reversedStacks,
			!0),c=0;if(void 0===d||d){d=this.chart.retrieveStacks(e);c=f.stack||0;for(e=0;e<d[c].series.length&&d[c].series[e]!==this;e++);c=10*(d.totalStacks-d[c].position)+(b?e:-e);this.xAxis.reversed||(c=10*d.totalStacks-c);}f.zIndex=c;}});a(p.column.prototype,"pointAttribs",r);p.columnrange&&a(p.columnrange.prototype,"pointAttribs",r);a(k.prototype,"alignDataLabel",function(a){if(this.chart.is3d()&&("column"===this.type||"columnrange"===this.type)){var f=arguments[4],d={x:f.x,y:f.y,z:this.z},d=n([d],this.chart,
		!0)[0];f.x=d.x;f.y=d.y;}a.apply(this,[].slice.call(arguments,1));});p.columnrange&&a(p.columnrange.prototype,"drawPoints",g);a(p.column.prototype,"drawPoints",g);})(E);(function(a){var r=a.deg2rad,g=a.each,t=a.pick,n=a.seriesTypes,v=a.svg;a=a.wrap;a(n.pie.prototype,"translate",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var k=this,h=k.options,m=h.depth||0,f=k.chart.options.chart.options3d,d=f.alpha,e=f.beta,b=h.stacking?(h.stack||0)*m:k._i*m,b=b+m/2;!1!==h.grouping&&(b=
0);g(k.data,function(a){var c=a.shapeArgs;a.shapeType="arc3d";c.z=b;c.depth=.75*m;c.alpha=d;c.beta=e;c.center=k.center;c=(c.end+c.start)/2;a.slicedTranslation={translateX:Math.round(Math.cos(c)*h.slicedOffset*Math.cos(d*r)),translateY:Math.round(Math.sin(c)*h.slicedOffset*Math.cos(d*r))};});}});a(n.pie.prototype.pointClass.prototype,"haloPath",function(a){var k=arguments;return this.series.chart.is3d()?[]:a.call(this,k[1]);});a(n.pie.prototype,"pointAttribs",function(a,g,h){a=a.call(this,g,h);h=this.options;
		this.chart.is3d()&&(a.stroke=h.edgeColor||g.color||this.color,a["stroke-width"]=t(h.edgeWidth,1));return a;});a(n.pie.prototype,"drawPoints",function(a){a.apply(this,[].slice.call(arguments,1));this.chart.is3d()&&g(this.points,function(a){var h=a.graphic;if(h)h[a.y&&a.visible?"show":"hide"]();});});a(n.pie.prototype,"drawDataLabels",function(a){if(this.chart.is3d()){var k=this.chart.options.chart.options3d;g(this.data,function(a){var h=a.shapeArgs,f=h.r,d=(h.start+h.end)/2,e=a.labelPos,b=-f*(1-Math.cos((h.alpha||
k.alpha)*r))*Math.sin(d),c=f*(Math.cos((h.beta||k.beta)*r)-1)*Math.cos(d);g([0,2,4],function(a){e[a]+=c;e[a+1]+=b;});});}a.apply(this,[].slice.call(arguments,1));});a(n.pie.prototype,"addPoint",function(a){a.apply(this,[].slice.call(arguments,1));this.chart.is3d()&&this.update(this.userOptions,!0);});a(n.pie.prototype,"animate",function(a){if(this.chart.is3d()){var g=arguments[1],h=this.options.animation,k=this.center,f=this.group,d=this.markerGroup;v&&(!0===h&&(h={}),g?(f.oldtranslateX=f.translateX,f.oldtranslateY=
f.translateY,g={translateX:k[0],translateY:k[1],scaleX:.001,scaleY:.001},f.attr(g),d&&(d.attrSetters=f.attrSetters,d.attr(g))):(g={translateX:f.oldtranslateX,translateY:f.oldtranslateY,scaleX:1,scaleY:1},f.animate(g,h),d&&d.animate(g,h),this.animate=null));}else a.apply(this,[].slice.call(arguments,1));});})(E);(function(a){var r=a.perspective,g=a.pick,t=a.seriesTypes;a=a.wrap;a(t.scatter.prototype,"translate",function(a){a.apply(this,[].slice.call(arguments,1));if(this.chart.is3d()){var n=this.chart,
		k=g(this.zAxis,n.options.zAxis[0]),p=[],h,m,f;for(f=0;f<this.data.length;f++)h=this.data[f],m=k.isLog&&k.val2lin?k.val2lin(h.z):h.z,h.plotZ=k.translate(m),h.isInside=h.isInside?m>=k.min&&m<=k.max:!1,p.push({x:h.plotX,y:h.plotY,z:h.plotZ});n=r(p,n,!0);for(f=0;f<this.data.length;f++)h=this.data[f],k=n[f],h.plotXold=h.plotX,h.plotYold=h.plotY,h.plotZold=h.plotZ,h.plotX=k.x,h.plotY=k.y,h.plotZ=k.z;}});a(t.scatter.prototype,"init",function(a,g,k){g.is3d()&&(this.axisTypes=["xAxis","yAxis","zAxis"],this.pointArrayMap=
["x","y","z"],this.parallelArrays=["x","y","z"],this.directTouch=!0);a=a.apply(this,[g,k]);this.chart.is3d()&&(this.tooltipOptions.pointFormat=this.userOptions.tooltip?this.userOptions.tooltip.pointFormat||"x: \x3cb\x3e{point.x}\x3c/b\x3e\x3cbr/\x3ey: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3ez: \x3cb\x3e{point.z}\x3c/b\x3e\x3cbr/\x3e":"x: \x3cb\x3e{point.x}\x3c/b\x3e\x3cbr/\x3ey: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3ez: \x3cb\x3e{point.z}\x3c/b\x3e\x3cbr/\x3e");return a;});})(E);(function(a){var r=a.Axis,
		g=a.SVGRenderer,t=a.VMLRenderer;t&&(a.setOptions({animate:!1}),t.prototype.cuboid=g.prototype.cuboid,t.prototype.cuboidPath=g.prototype.cuboidPath,t.prototype.toLinePath=g.prototype.toLinePath,t.prototype.createElement3D=g.prototype.createElement3D,t.prototype.arc3d=function(a){a=g.prototype.arc3d.call(this,a);a.css({zIndex:a.zIndex});return a;},a.VMLRenderer.prototype.arc3dPath=a.SVGRenderer.prototype.arc3dPath,a.wrap(r.prototype,"render",function(a){a.apply(this,[].slice.call(arguments,1));this.sideFrame&&
(this.sideFrame.css({zIndex:0}),this.sideFrame.front.attr({fill:this.sideFrame.color}));this.bottomFrame&&(this.bottomFrame.css({zIndex:1}),this.bottomFrame.front.attr({fill:this.bottomFrame.color}));this.backFrame&&(this.backFrame.css({zIndex:0}),this.backFrame.front.attr({fill:this.backFrame.color}));}));})(E);});

},{}],106:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)

 (c) 2009-2016 Torstein Honsi

 License: www.highcharts.com/license
*/
	(function(x){"object"===typeof module&&module.exports?module.exports=x:x(Highcharts);})(function(x){(function(a){function t(a,b,d){this.init(a,b,d);}var u=a.each,w=a.extend,q=a.merge,r=a.splat;w(t.prototype,{init:function(a,b,d){var h=this,k=h.defaultOptions;h.chart=b;h.options=a=q(k,b.angular?{background:{}}:void 0,a);(a=a.background)&&u([].concat(r(a)).reverse(),function(b){var c,k=d.userOptions;c=q(h.defaultBackgroundOptions,b);b.backgroundColor&&(c.backgroundColor=b.backgroundColor);c.color=c.backgroundColor;
		d.options.plotBands.unshift(c);k.plotBands=k.plotBands||[];k.plotBands!==d.options.plotBands&&k.plotBands.unshift(c);});},defaultOptions:{center:["50%","50%"],size:"85%",startAngle:0},defaultBackgroundOptions:{className:"highcharts-pane",shape:"circle",borderWidth:1,borderColor:"#cccccc",backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,"#ffffff"],[1,"#e6e6e6"]]},from:-Number.MAX_VALUE,innerRadius:0,to:Number.MAX_VALUE,outerRadius:"105%"}});a.Pane=t;})(x);(function(a){var t=a.CenteredSeriesMixin,
		u=a.each,w=a.extend,q=a.map,r=a.merge,e=a.noop,b=a.Pane,d=a.pick,h=a.pInt,k=a.splat,n=a.wrap,c,g,l=a.Axis.prototype;a=a.Tick.prototype;c={getOffset:e,redraw:function(){this.isDirty=!1;},render:function(){this.isDirty=!1;},setScale:e,setCategories:e,setTitle:e};g={defaultRadialGaugeOptions:{labels:{align:"center",x:0,y:null},minorGridLineWidth:0,minorTickInterval:"auto",minorTickLength:10,minorTickPosition:"inside",minorTickWidth:1,tickLength:10,tickPosition:"inside",tickWidth:2,title:{rotation:0},zIndex:2},
		defaultRadialXOptions:{gridLineWidth:1,labels:{align:null,distance:15,x:0,y:null},maxPadding:0,minPadding:0,showLastLabel:!1,tickLength:0},defaultRadialYOptions:{gridLineInterpolation:"circle",labels:{align:"right",x:-3,y:-2},showLastLabel:!1,title:{x:4,text:null,rotation:90}},setOptions:function(b){b=this.options=r(this.defaultOptions,this.defaultRadialOptions,b);b.plotBands||(b.plotBands=[]);},getOffset:function(){l.getOffset.call(this);this.chart.axisOffset[this.side]=0;this.center=this.pane.center=
t.getCenter.call(this.pane);},getLinePath:function(b,f){b=this.center;var c=this.chart,h=d(f,b[2]/2-this.offset);this.isCircular||void 0!==f?f=this.chart.renderer.symbols.arc(this.left+b[0],this.top+b[1],h,h,{start:this.startAngleRad,end:this.endAngleRad,open:!0,innerR:0}):(f=this.postTranslate(this.angleRad,h),f=["M",b[0]+c.plotLeft,b[1]+c.plotTop,"L",f.x,f.y]);return f;},setAxisTranslation:function(){l.setAxisTranslation.call(this);this.center&&(this.transA=this.isCircular?(this.endAngleRad-this.startAngleRad)/
(this.max-this.min||1):this.center[2]/2/(this.max-this.min||1),this.minPixelPadding=this.isXAxis?this.transA*this.minPointOffset:0);},beforeSetTickPositions:function(){if(this.autoConnect=this.isCircular&&void 0===d(this.userMax,this.options.max)&&this.endAngleRad-this.startAngleRad===2*Math.PI)this.max+=this.categories&&1||this.pointRange||this.closestPointRange||0;},setAxisSize:function(){l.setAxisSize.call(this);this.isRadial&&(this.center=this.pane.center=t.getCenter.call(this.pane),this.isCircular&&
(this.sector=this.endAngleRad-this.startAngleRad),this.len=this.width=this.height=this.center[2]*d(this.sector,1)/2);},getPosition:function(b,f){return this.postTranslate(this.isCircular?this.translate(b):this.angleRad,d(this.isCircular?f:this.translate(b),this.center[2]/2)-this.offset);},postTranslate:function(b,f){var d=this.chart,c=this.center;b=this.startAngleRad+b;return{x:d.plotLeft+c[0]+Math.cos(b)*f,y:d.plotTop+c[1]+Math.sin(b)*f};},getPlotBandPath:function(b,f,c){var k=this.center,p=this.startAngleRad,
			l=k[2]/2,m=[d(c.outerRadius,"100%"),c.innerRadius,d(c.thickness,10)],a=Math.min(this.offset,0),g=/%$/,n,e=this.isCircular;"polygon"===this.options.gridLineInterpolation?k=this.getPlotLinePath(b).concat(this.getPlotLinePath(f,!0)):(b=Math.max(b,this.min),f=Math.min(f,this.max),e||(m[0]=this.translate(b),m[1]=this.translate(f)),m=q(m,function(b){g.test(b)&&(b=h(b,10)*l/100);return b;}),"circle"!==c.shape&&e?(b=p+this.translate(b),f=p+this.translate(f)):(b=-Math.PI/2,f=1.5*Math.PI,n=!0),m[0]-=a,m[2]-=
a,k=this.chart.renderer.symbols.arc(this.left+k[0],this.top+k[1],m[0],m[0],{start:Math.min(b,f),end:Math.max(b,f),innerR:d(m[1],m[0]-m[2]),open:n}));return k;},getPlotLinePath:function(b,f){var d=this,c=d.center,h=d.chart,k=d.getPosition(b),a,l,p;d.isCircular?p=["M",c[0]+h.plotLeft,c[1]+h.plotTop,"L",k.x,k.y]:"circle"===d.options.gridLineInterpolation?(b=d.translate(b))&&(p=d.getLinePath(0,b)):(u(h.xAxis,function(b){b.pane===d.pane&&(a=b);}),p=[],b=d.translate(b),c=a.tickPositions,a.autoConnect&&(c=
c.concat([c[0]])),f&&(c=[].concat(c).reverse()),u(c,function(f,d){l=a.getPosition(f,b);p.push(d?"L":"M",l.x,l.y);}));return p;},getTitlePosition:function(){var b=this.center,f=this.chart,d=this.options.title;return{x:f.plotLeft+b[0]+(d.x||0),y:f.plotTop+b[1]-{high:.5,middle:.25,low:0}[d.align]*b[2]+(d.y||0)};}};n(l,"init",function(h,f,a){var l=f.angular,p=f.polar,m=a.isX,n=l&&m,e,A=f.options,q=a.pane||0;if(l){if(w(this,n?c:g),e=!m)this.defaultRadialOptions=this.defaultRadialGaugeOptions;}else p&&(w(this,
		g),this.defaultRadialOptions=(e=m)?this.defaultRadialXOptions:r(this.defaultYAxisOptions,this.defaultRadialYOptions));l||p?(this.isRadial=!0,f.inverted=!1,A.chart.zoomType=null):this.isRadial=!1;h.call(this,f,a);n||!l&&!p||(h=this.options,f.panes||(f.panes=[]),this.pane=f=f.panes[q]=f.panes[q]||new b(k(A.pane)[q],f,this),f=f.options,this.angleRad=(h.angle||0)*Math.PI/180,this.startAngleRad=(f.startAngle-90)*Math.PI/180,this.endAngleRad=(d(f.endAngle,f.startAngle+360)-90)*Math.PI/180,this.offset=h.offset||
0,this.isCircular=e);});n(l,"autoLabelAlign",function(b){if(!this.isRadial)return b.apply(this,[].slice.call(arguments,1));});n(a,"getPosition",function(b,d,c,h,k){var f=this.axis;return f.getPosition?f.getPosition(c):b.call(this,d,c,h,k);});n(a,"getLabelPosition",function(b,f,c,h,k,a,l,g,n){var m=this.axis,p=a.y,e=20,y=a.align,v=(m.translate(this.pos)+m.startAngleRad+Math.PI/2)/Math.PI*180%360;m.isRadial?(b=m.getPosition(this.pos,m.center[2]/2+d(a.distance,-25)),"auto"===a.rotation?h.attr({rotation:v}):
		null===p&&(p=m.chart.renderer.fontMetrics(h.styles.fontSize).b-h.getBBox().height/2),null===y&&(m.isCircular?(this.label.getBBox().width>m.len*m.tickInterval/(m.max-m.min)&&(e=0),y=v>e&&v<180-e?"left":v>180+e&&v<360-e?"right":"center"):y="center",h.attr({align:y})),b.x+=a.x,b.y+=p):b=b.call(this,f,c,h,k,a,l,g,n);return b;});n(a,"getMarkPath",function(b,d,c,h,k,a,l){var f=this.axis;f.isRadial?(b=f.getPosition(this.pos,f.center[2]/2+h),d=["M",d,c,"L",b.x,b.y]):d=b.call(this,d,c,h,k,a,l);return d;});})(x);
	(function(a){var t=a.each,u=a.noop,w=a.pick,q=a.Series,r=a.seriesType,e=a.seriesTypes;r("arearange","area",{lineWidth:1,marker:null,threshold:null,tooltip:{pointFormat:'\x3cspan style\x3d"color:{series.color}"\x3e\u25cf\x3c/span\x3e {series.name}: \x3cb\x3e{point.low}\x3c/b\x3e - \x3cb\x3e{point.high}\x3c/b\x3e\x3cbr/\x3e'},trackByArea:!0,dataLabels:{align:null,verticalAlign:null,xLow:0,xHigh:0,yLow:0,yHigh:0},states:{hover:{halo:!1}}},{pointArrayMap:["low","high"],dataLabelCollections:["dataLabel",
		"dataLabelUpper"],toYData:function(b){return[b.low,b.high];},pointValKey:"low",deferTranslatePolar:!0,highToXY:function(b){var d=this.chart,h=this.xAxis.postTranslate(b.rectPlotX,this.yAxis.len-b.plotHigh);b.plotHighX=h.x-d.plotLeft;b.plotHigh=h.y-d.plotTop;},translate:function(){var b=this,d=b.yAxis,h=!!b.modifyValue;e.area.prototype.translate.apply(b);t(b.points,function(k){var a=k.low,c=k.high,g=k.plotY;null===c||null===a?k.isNull=!0:(k.plotLow=g,k.plotHigh=d.translate(h?b.modifyValue(c,k):c,0,1,
		0,1),h&&(k.yBottom=k.plotHigh));});this.chart.polar&&t(this.points,function(d){b.highToXY(d);});},getGraphPath:function(b){var d=[],h=[],a,n=e.area.prototype.getGraphPath,c,g,l;l=this.options;var p=l.step;b=b||this.points;for(a=b.length;a--;)c=b[a],c.isNull||l.connectEnds||b[a+1]&&!b[a+1].isNull||h.push({plotX:c.plotX,plotY:c.plotY,doCurve:!1}),g={polarPlotY:c.polarPlotY,rectPlotX:c.rectPlotX,yBottom:c.yBottom,plotX:w(c.plotHighX,c.plotX),plotY:c.plotHigh,isNull:c.isNull},h.push(g),d.push(g),c.isNull||
l.connectEnds||b[a-1]&&!b[a-1].isNull||h.push({plotX:c.plotX,plotY:c.plotY,doCurve:!1});b=n.call(this,b);p&&(!0===p&&(p="left"),l.step={left:"right",center:"center",right:"left"}[p]);d=n.call(this,d);h=n.call(this,h);l.step=p;l=[].concat(b,d);this.chart.polar||"M"!==h[0]||(h[0]="L");this.graphPath=l;this.areaPath=this.areaPath.concat(b,h);l.isArea=!0;l.xMap=b.xMap;this.areaPath.xMap=b.xMap;return l;},drawDataLabels:function(){var b=this.data,d=b.length,h,a=[],n=q.prototype,c=this.options.dataLabels,
		g=c.align,l=c.verticalAlign,p=c.inside,f,m,e=this.chart.inverted;if(c.enabled||this._hasPointLabels){for(h=d;h--;)if(f=b[h])m=p?f.plotHigh<f.plotLow:f.plotHigh>f.plotLow,f.y=f.high,f._plotY=f.plotY,f.plotY=f.plotHigh,a[h]=f.dataLabel,f.dataLabel=f.dataLabelUpper,f.below=m,e?g||(c.align=m?"right":"left"):l||(c.verticalAlign=m?"top":"bottom"),c.x=c.xHigh,c.y=c.yHigh;n.drawDataLabels&&n.drawDataLabels.apply(this,arguments);for(h=d;h--;)if(f=b[h])m=p?f.plotHigh<f.plotLow:f.plotHigh>f.plotLow,f.dataLabelUpper=
f.dataLabel,f.dataLabel=a[h],f.y=f.low,f.plotY=f._plotY,f.below=!m,e?g||(c.align=m?"left":"right"):l||(c.verticalAlign=m?"bottom":"top"),c.x=c.xLow,c.y=c.yLow;n.drawDataLabels&&n.drawDataLabels.apply(this,arguments);}c.align=g;c.verticalAlign=l;},alignDataLabel:function(){e.column.prototype.alignDataLabel.apply(this,arguments);},setStackedPoints:u,getSymbol:u,drawPoints:u});})(x);(function(a){var t=a.seriesType;t("areasplinerange","arearange",null,{getPointSpline:a.seriesTypes.spline.prototype.getPointSpline});})(x);
	(function(a){var t=a.defaultPlotOptions,u=a.each,w=a.merge,q=a.noop,r=a.pick,e=a.seriesType,b=a.seriesTypes.column.prototype;e("columnrange","arearange",w(t.column,t.arearange,{lineWidth:1,pointRange:null}),{translate:function(){var d=this,h=d.yAxis,a=d.xAxis,n=a.startAngleRad,c,g=d.chart,l=d.xAxis.isRadial,p;b.translate.apply(d);u(d.points,function(b){var f=b.shapeArgs,k=d.options.minPointLength,e,v;b.plotHigh=p=h.translate(b.high,0,1,0,1);b.plotLow=b.plotY;v=p;e=r(b.rectPlotY,b.plotY)-p;Math.abs(e)<
k?(k-=e,e+=k,v-=k/2):0>e&&(e*=-1,v-=e);l?(c=b.barX+n,b.shapeType="path",b.shapeArgs={d:d.polarArc(v+e,v,c,c+b.pointWidth)}):(f.height=e,f.y=v,b.tooltipPos=g.inverted?[h.len+h.pos-g.plotLeft-v-e/2,a.len+a.pos-g.plotTop-f.x-f.width/2,e]:[a.left-g.plotLeft+f.x+f.width/2,h.pos-g.plotTop+v+e/2,e]);});},directTouch:!0,trackerGroups:["group","dataLabelsGroup"],drawGraph:q,crispCol:b.crispCol,drawPoints:b.drawPoints,drawTracker:b.drawTracker,getColumnMetrics:b.getColumnMetrics,animate:function(){return b.animate.apply(this,
		arguments);},polarArc:function(){return b.polarArc.apply(this,arguments);},pointAttribs:b.pointAttribs});})(x);(function(a){var t=a.each,u=a.isNumber,w=a.merge,q=a.pick,r=a.pInt,e=a.Series,b=a.seriesType,d=a.TrackerMixin;b("gauge","line",{dataLabels:{enabled:!0,defer:!1,y:15,borderRadius:3,crop:!1,verticalAlign:"top",zIndex:2,borderWidth:1,borderColor:"#cccccc"},dial:{},pivot:{},tooltip:{headerFormat:""},showInLegend:!1},{angular:!0,directTouch:!0,drawGraph:a.noop,fixedBox:!0,forceDL:!0,noSharedTooltip:!0,
		trackerGroups:["group","dataLabelsGroup"],translate:function(){var b=this.yAxis,d=this.options,a=b.center;this.generatePoints();t(this.points,function(c){var h=w(d.dial,c.dial),l=r(q(h.radius,80))*a[2]/200,k=r(q(h.baseLength,70))*l/100,f=r(q(h.rearLength,10))*l/100,m=h.baseWidth||3,n=h.topWidth||1,e=d.overshoot,v=b.startAngleRad+b.translate(c.y,null,null,null,!0);u(e)?(e=e/180*Math.PI,v=Math.max(b.startAngleRad-e,Math.min(b.endAngleRad+e,v))):!1===d.wrap&&(v=Math.max(b.startAngleRad,Math.min(b.endAngleRad,
			v)));v=180*v/Math.PI;c.shapeType="path";c.shapeArgs={d:h.path||["M",-f,-m/2,"L",k,-m/2,l,-n/2,l,n/2,k,m/2,-f,m/2,"z"],translateX:a[0],translateY:a[1],rotation:v};c.plotX=a[0];c.plotY=a[1];});},drawPoints:function(){var b=this,d=b.yAxis.center,a=b.pivot,c=b.options,g=c.pivot,l=b.chart.renderer;t(b.points,function(d){var a=d.graphic,h=d.shapeArgs,k=h.d,g=w(c.dial,d.dial);a?(a.animate(h),h.d=k):(d.graphic=l[d.shapeType](h).attr({rotation:h.rotation,zIndex:1}).addClass("highcharts-dial").add(b.group),d.graphic.attr({stroke:g.borderColor||
"none","stroke-width":g.borderWidth||0,fill:g.backgroundColor||"#000000"}));});a?a.animate({translateX:d[0],translateY:d[1]}):(b.pivot=l.circle(0,0,q(g.radius,5)).attr({zIndex:2}).addClass("highcharts-pivot").translate(d[0],d[1]).add(b.group),b.pivot.attr({"stroke-width":g.borderWidth||0,stroke:g.borderColor||"#cccccc",fill:g.backgroundColor||"#000000"}));},animate:function(b){var d=this;b||(t(d.points,function(b){var c=b.graphic;c&&(c.attr({rotation:180*d.yAxis.startAngleRad/Math.PI}),c.animate({rotation:b.shapeArgs.rotation},
			d.options.animation));}),d.animate=null);},render:function(){this.group=this.plotGroup("group","series",this.visible?"visible":"hidden",this.options.zIndex,this.chart.seriesGroup);e.prototype.render.call(this);this.group.clip(this.chart.clipRect);},setData:function(b,d){e.prototype.setData.call(this,b,!1);this.processData();this.generatePoints();q(d,!0)&&this.chart.redraw();},drawTracker:d&&d.drawTrackerPoint},{setState:function(b){this.state=b;}});})(x);(function(a){var t=a.each,u=a.noop,w=a.pick,q=a.seriesType,
		r=a.seriesTypes;q("boxplot","column",{threshold:null,tooltip:{pointFormat:'\x3cspan style\x3d"color:{point.color}"\x3e\u25cf\x3c/span\x3e \x3cb\x3e {series.name}\x3c/b\x3e\x3cbr/\x3eMaximum: {point.high}\x3cbr/\x3eUpper quartile: {point.q3}\x3cbr/\x3eMedian: {point.median}\x3cbr/\x3eLower quartile: {point.q1}\x3cbr/\x3eMinimum: {point.low}\x3cbr/\x3e'},whiskerLength:"50%",fillColor:"#ffffff",lineWidth:1,medianWidth:2,states:{hover:{brightness:-.3}},whiskerWidth:2},{pointArrayMap:["low","q1","median",
		"q3","high"],toYData:function(a){return[a.low,a.q1,a.median,a.q3,a.high];},pointValKey:"high",pointAttribs:function(a){var b=this.options,d=a&&a.color||this.color;return{fill:a.fillColor||b.fillColor||d,stroke:b.lineColor||d,"stroke-width":b.lineWidth||0};},drawDataLabels:u,translate:function(){var a=this.yAxis,b=this.pointArrayMap;r.column.prototype.translate.apply(this);t(this.points,function(d){t(b,function(b){null!==d[b]&&(d[b+"Plot"]=a.translate(d[b],0,1,0,1));});});},drawPoints:function(){var a=
this,b=a.options,d=a.chart.renderer,h,k,n,c,g,l,p=0,f,m,q,r,v=!1!==a.doQuartiles,u,x=a.options.whiskerLength;t(a.points,function(e){var t=e.graphic,y=t?"animate":"attr",I=e.shapeArgs,z={},B={},G={},H=e.color||a.color;void 0!==e.plotY&&(f=I.width,m=Math.floor(I.x),q=m+f,r=Math.round(f/2),h=Math.floor(v?e.q1Plot:e.lowPlot),k=Math.floor(v?e.q3Plot:e.lowPlot),n=Math.floor(e.highPlot),c=Math.floor(e.lowPlot),t||(e.graphic=t=d.g("point").add(a.group),e.stem=d.path().addClass("highcharts-boxplot-stem").add(t),
	x&&(e.whiskers=d.path().addClass("highcharts-boxplot-whisker").add(t)),v&&(e.box=d.path(void 0).addClass("highcharts-boxplot-box").add(t)),e.medianShape=d.path(void 0).addClass("highcharts-boxplot-median").add(t),z.stroke=e.stemColor||b.stemColor||H,z["stroke-width"]=w(e.stemWidth,b.stemWidth,b.lineWidth),z.dashstyle=e.stemDashStyle||b.stemDashStyle,e.stem.attr(z),x&&(B.stroke=e.whiskerColor||b.whiskerColor||H,B["stroke-width"]=w(e.whiskerWidth,b.whiskerWidth,b.lineWidth),e.whiskers.attr(B)),v&&(t=
a.pointAttribs(e),e.box.attr(t)),G.stroke=e.medianColor||b.medianColor||H,G["stroke-width"]=w(e.medianWidth,b.medianWidth,b.lineWidth),e.medianShape.attr(G)),l=e.stem.strokeWidth()%2/2,p=m+r+l,e.stem[y]({d:["M",p,k,"L",p,n,"M",p,h,"L",p,c]}),v&&(l=e.box.strokeWidth()%2/2,h=Math.floor(h)+l,k=Math.floor(k)+l,m+=l,q+=l,e.box[y]({d:["M",m,k,"L",m,h,"L",q,h,"L",q,k,"L",m,k,"z"]})),x&&(l=e.whiskers.strokeWidth()%2/2,n+=l,c+=l,u=/%$/.test(x)?r*parseFloat(x)/100:x/2,e.whiskers[y]({d:["M",p-u,n,"L",p+u,n,
		"M",p-u,c,"L",p+u,c]})),g=Math.round(e.medianPlot),l=e.medianShape.strokeWidth()%2/2,g+=l,e.medianShape[y]({d:["M",m,g,"L",q,g]}));});},setStackedPoints:u});})(x);(function(a){var t=a.each,u=a.noop,w=a.seriesType,q=a.seriesTypes;w("errorbar","boxplot",{color:"#000000",grouping:!1,linkedTo:":previous",tooltip:{pointFormat:'\x3cspan style\x3d"color:{point.color}"\x3e\u25cf\x3c/span\x3e {series.name}: \x3cb\x3e{point.low}\x3c/b\x3e - \x3cb\x3e{point.high}\x3c/b\x3e\x3cbr/\x3e'},whiskerWidth:null},{type:"errorbar",
		pointArrayMap:["low","high"],toYData:function(a){return[a.low,a.high];},pointValKey:"high",doQuartiles:!1,drawDataLabels:q.arearange?function(){var a=this.pointValKey;q.arearange.prototype.drawDataLabels.call(this);t(this.data,function(e){e.y=e[a];});}:u,getColumnMetrics:function(){return this.linkedParent&&this.linkedParent.columnMetrics||q.column.prototype.getColumnMetrics.call(this);}});})(x);(function(a){var t=a.correctFloat,u=a.isNumber,w=a.pick,q=a.Point,r=a.Series,e=a.seriesType,b=a.seriesTypes;
		e("waterfall","column",{dataLabels:{inside:!0},lineWidth:1,lineColor:"#333333",dashStyle:"dot",borderColor:"#333333",states:{hover:{lineWidthPlus:0}}},{pointValKey:"y",translate:function(){var d=this.options,a=this.yAxis,k,e,c,g,l,p,f,m,q,r=w(d.minPointLength,5),v=d.threshold,u=d.stacking;b.column.prototype.translate.apply(this);this.minPointLengthOffset=0;f=m=v;e=this.points;k=0;for(d=e.length;k<d;k++)c=e[k],p=this.processedYData[k],g=c.shapeArgs,q=(l=u&&a.stacks[(this.negStacks&&p<v?"-":"")+this.stackKey])?
			l[c.x].points[this.index+","+k]:[0,p],c.isSum?c.y=t(p):c.isIntermediateSum&&(c.y=t(p-m)),l=Math.max(f,f+c.y)+q[0],g.y=a.toPixels(l,!0),c.isSum?(g.y=a.toPixels(q[1],!0),g.height=Math.min(a.toPixels(q[0],!0),a.len)-g.y+this.minPointLengthOffset):c.isIntermediateSum?(g.y=a.toPixels(q[1],!0),g.height=Math.min(a.toPixels(m,!0),a.len)-g.y+this.minPointLengthOffset,m=q[1]):(g.height=0<p?a.toPixels(f,!0)-g.y:a.toPixels(f,!0)-a.toPixels(f-p,!0),f+=p),0>g.height&&(g.y+=g.height,g.height*=-1),c.plotY=g.y=Math.round(g.y)-
this.borderWidth%2/2,g.height=Math.max(Math.round(g.height),.001),c.yBottom=g.y+g.height,g.height<=r&&(g.height=r,this.minPointLengthOffset+=r),g.y-=this.minPointLengthOffset,g=c.plotY+(c.negative?g.height:0)-this.minPointLengthOffset,this.chart.inverted?c.tooltipPos[0]=a.len-g:c.tooltipPos[1]=g;},processData:function(b){var a=this.yData,d=this.options.data,e,c=a.length,g,l,p,f,m,q;l=g=p=f=this.options.threshold||0;for(q=0;q<c;q++)m=a[q],e=d&&d[q]?d[q]:{},"sum"===m||e.isSum?a[q]=t(l):"intermediateSum"===
m||e.isIntermediateSum?a[q]=t(g):(l+=m,g+=m),p=Math.min(l,p),f=Math.max(l,f);r.prototype.processData.call(this,b);this.dataMin=p;this.dataMax=f;},toYData:function(b){return b.isSum?0===b.x?null:"sum":b.isIntermediateSum?0===b.x?null:"intermediateSum":b.y;},pointAttribs:function(a,h){var d=this.options.upColor;d&&!a.options.color&&(a.color=0<a.y?d:null);a=b.column.prototype.pointAttribs.call(this,a,h);delete a.dashstyle;return a;},getGraphPath:function(){return["M",0,0];},getCrispPath:function(){var b=
this.data,a=b.length,e=this.graph.strokeWidth()+this.borderWidth,e=Math.round(e)%2/2,n=[],c,g,l;for(l=1;l<a;l++)g=b[l].shapeArgs,c=b[l-1].shapeArgs,g=["M",c.x+c.width,c.y+e,"L",g.x,c.y+e],0>b[l-1].y&&(g[2]+=c.height,g[5]+=c.height),n=n.concat(g);return n;},drawGraph:function(){r.prototype.drawGraph.call(this);this.graph.attr({d:this.getCrispPath()});},getExtremes:a.noop},{getClassName:function(){var b=q.prototype.getClassName.call(this);this.isSum?b+=" highcharts-sum":this.isIntermediateSum&&(b+=" highcharts-intermediate-sum");
			return b;},isValid:function(){return u(this.y,!0)||this.isSum||this.isIntermediateSum;}});})(x);(function(a){var t=a.Series,u=a.seriesType,w=a.seriesTypes;u("polygon","scatter",{marker:{enabled:!1,states:{hover:{enabled:!1}}},stickyTracking:!1,tooltip:{followPointer:!0,pointFormat:""},trackByArea:!0},{type:"polygon",getGraphPath:function(){for(var a=t.prototype.getGraphPath.call(this),r=a.length+1;r--;)(r===a.length||"M"===a[r])&&0<r&&a.splice(r,0,"z");return this.areaPath=a;},drawGraph:function(){this.options.fillColor=
this.color;w.area.prototype.drawGraph.call(this);},drawLegendSymbol:a.LegendSymbolMixin.drawRectangle,drawTracker:t.prototype.drawTracker,setStackedPoints:a.noop});})(x);(function(a){var t=a.arrayMax,u=a.arrayMin,w=a.Axis,q=a.color,r=a.each,e=a.isNumber,b=a.noop,d=a.pick,h=a.pInt,k=a.Point,n=a.Series,c=a.seriesType,g=a.seriesTypes;c("bubble","scatter",{dataLabels:{formatter:function(){return this.point.z;},inside:!0,verticalAlign:"middle"},marker:{lineColor:null,lineWidth:1,radius:null,states:{hover:{radiusPlus:0}}},
		minSize:8,maxSize:"20%",softThreshold:!1,states:{hover:{halo:{size:5}}},tooltip:{pointFormat:"({point.x}, {point.y}), Size: {point.z}"},turboThreshold:0,zThreshold:0,zoneAxis:"z"},{pointArrayMap:["y","z"],parallelArrays:["x","y","z"],trackerGroups:["group","dataLabelsGroup"],bubblePadding:!0,zoneAxis:"z",markerAttribs:null,pointAttribs:function(b,a){var c=d(this.options.marker.fillOpacity,.5);b=n.prototype.pointAttribs.call(this,b,a);1!==c&&(b.fill=q(b.fill).setOpacity(c).get("rgba"));return b;},getRadii:function(b,
		a,d,c){var f,h,e,l=this.zData,g=[],m=this.options,k="width"!==m.sizeBy,n=m.zThreshold,p=a-b;h=0;for(f=l.length;h<f;h++)e=l[h],m.sizeByAbsoluteValue&&null!==e&&(e=Math.abs(e-n),a=Math.max(a-n,Math.abs(b-n)),b=0),null===e?e=null:e<b?e=d/2-1:(e=0<p?(e-b)/p:.5,k&&0<=e&&(e=Math.sqrt(e)),e=Math.ceil(d+e*(c-d))/2),g.push(e);this.radii=g;},animate:function(b){var a=this.options.animation;b||(r(this.points,function(b){var d=b.graphic;b=b.shapeArgs;d&&b&&(d.attr("r",1),d.animate({r:b.r},a));}),this.animate=null);},
	translate:function(){var b,a=this.data,d,c,h=this.radii;g.scatter.prototype.translate.call(this);for(b=a.length;b--;)d=a[b],c=h?h[b]:0,e(c)&&c>=this.minPxSize/2?(d.shapeType="circle",d.shapeArgs={x:d.plotX,y:d.plotY,r:c},d.dlBox={x:d.plotX-c,y:d.plotY-c,width:2*c,height:2*c}):d.shapeArgs=d.plotY=d.dlBox=void 0;},drawLegendSymbol:function(b,a){var d=this.chart.renderer,c=d.fontMetrics(b.itemStyle.fontSize).f/2;a.legendSymbol=d.circle(c,b.baseline-c,c).attr({zIndex:3}).add(a.legendGroup);a.legendSymbol.isMarker=
!0;},drawPoints:g.column.prototype.drawPoints,alignDataLabel:g.column.prototype.alignDataLabel,buildKDTree:b,applyZones:b},{haloPath:function(){return k.prototype.haloPath.call(this,this.shapeArgs.r+this.series.options.states.hover.halo.size);},ttBelow:!1});w.prototype.beforePadding=function(){var b=this,a=this.len,c=this.chart,g=0,k=a,n=this.isXAxis,q=n?"xData":"yData",w=this.min,x={},A=Math.min(c.plotWidth,c.plotHeight),C=Number.MAX_VALUE,D=-Number.MAX_VALUE,E=this.max-w,z=a/E,F=[];r(this.series,
		function(a){var e=a.options;!a.bubblePadding||!a.visible&&c.options.chart.ignoreHiddenSeries||(b.allowZoomOutside=!0,F.push(a),n&&(r(["minSize","maxSize"],function(b){var a=e[b],d=/%$/.test(a),a=h(a);x[b]=d?A*a/100:a;}),a.minPxSize=x.minSize,a.maxPxSize=x.maxSize,a=a.zData,a.length&&(C=d(e.zMin,Math.min(C,Math.max(u(a),!1===e.displayNegative?e.zThreshold:-Number.MAX_VALUE))),D=d(e.zMax,Math.max(D,t(a))))));});r(F,function(a){var d=a[q],c=d.length,h;n&&a.getRadii(C,D,a.minPxSize,a.maxPxSize);if(0<E)for(;c--;)e(d[c])&&
b.dataMin<=d[c]&&d[c]<=b.dataMax&&(h=a.radii[c],g=Math.min((d[c]-w)*z-h,g),k=Math.max((d[c]-w)*z+h,k));});F.length&&0<E&&!this.isLog&&(k-=a,z*=(a+g-k)/a,r([["min","userMin",g],["max","userMax",k]],function(a){void 0===d(b.options[a[0]],b[a[1]])&&(b[a[0]]+=a[2]/z);}));};})(x);(function(a){function t(b,a){var d=this.chart,e=this.options.animation,n=this.group,c=this.markerGroup,g=this.xAxis.center,l=d.plotLeft,p=d.plotTop;d.polar?d.renderer.isSVG&&(!0===e&&(e={}),a?(b={translateX:g[0]+l,translateY:g[1]+
p,scaleX:.001,scaleY:.001},n.attr(b),c&&c.attr(b)):(b={translateX:l,translateY:p,scaleX:1,scaleY:1},n.animate(b,e),c&&c.animate(b,e),this.animate=null)):b.call(this,a);}var u=a.each,w=a.pick,q=a.seriesTypes,r=a.wrap,e=a.Series.prototype;a=a.Pointer.prototype;e.searchPointByAngle=function(b){var a=this.chart,e=this.xAxis.pane.center;return this.searchKDTree({clientX:180+-180/Math.PI*Math.atan2(b.chartX-e[0]-a.plotLeft,b.chartY-e[1]-a.plotTop)});};r(e,"buildKDTree",function(b){this.chart.polar&&(this.kdByAngle?
		this.searchPoint=this.searchPointByAngle:this.kdDimensions=2);b.apply(this);});e.toXY=function(b){var a,e=this.chart,k=b.plotX;a=b.plotY;b.rectPlotX=k;b.rectPlotY=a;a=this.xAxis.postTranslate(b.plotX,this.yAxis.len-a);b.plotX=b.polarPlotX=a.x-e.plotLeft;b.plotY=b.polarPlotY=a.y-e.plotTop;this.kdByAngle?(e=(k/Math.PI*180+this.xAxis.pane.options.startAngle)%360,0>e&&(e+=360),b.clientX=e):b.clientX=b.plotX;};q.spline&&r(q.spline.prototype,"getPointSpline",function(b,a,e,k){var d,c,g,h,p,f,m;this.chart.polar?
		(d=e.plotX,c=e.plotY,b=a[k-1],g=a[k+1],this.connectEnds&&(b||(b=a[a.length-2]),g||(g=a[1])),b&&g&&(h=b.plotX,p=b.plotY,a=g.plotX,f=g.plotY,h=(1.5*d+h)/2.5,p=(1.5*c+p)/2.5,g=(1.5*d+a)/2.5,m=(1.5*c+f)/2.5,a=Math.sqrt(Math.pow(h-d,2)+Math.pow(p-c,2)),f=Math.sqrt(Math.pow(g-d,2)+Math.pow(m-c,2)),h=Math.atan2(p-c,h-d),p=Math.atan2(m-c,g-d),m=Math.PI/2+(h+p)/2,Math.abs(h-m)>Math.PI/2&&(m-=Math.PI),h=d+Math.cos(m)*a,p=c+Math.sin(m)*a,g=d+Math.cos(Math.PI+m)*f,m=c+Math.sin(Math.PI+m)*f,e.rightContX=g,e.rightContY=
m),k?(e=["C",b.rightContX||b.plotX,b.rightContY||b.plotY,h||d,p||c,d,c],b.rightContX=b.rightContY=null):e=["M",d,c]):e=b.call(this,a,e,k);return e;});r(e,"translate",function(b){var a=this.chart;b.call(this);if(a.polar&&(this.kdByAngle=a.tooltip&&a.tooltip.shared,!this.preventPostTranslate))for(b=this.points,a=b.length;a--;)this.toXY(b[a]);});r(e,"getGraphPath",function(b,a){var d=this,e,n;if(this.chart.polar){a=a||this.points;for(e=0;e<a.length;e++)if(!a[e].isNull){n=e;break;}!1!==this.options.connectEnds&&
void 0!==n&&(this.connectEnds=!0,a.splice(a.length,0,a[n]));u(a,function(b){void 0===b.polarPlotY&&d.toXY(b);});}return b.apply(this,[].slice.call(arguments,1));});r(e,"animate",t);q.column&&(q=q.column.prototype,q.polarArc=function(b,a,e,k){var d=this.xAxis.center,c=this.yAxis.len;return this.chart.renderer.symbols.arc(d[0],d[1],c-a,null,{start:e,end:k,innerR:c-w(b,c)});},r(q,"animate",t),r(q,"translate",function(b){var a=this.xAxis,e=a.startAngleRad,k,n,c;this.preventPostTranslate=!0;b.call(this);if(a.isRadial)for(k=
this.points,c=k.length;c--;)n=k[c],b=n.barX+e,n.shapeType="path",n.shapeArgs={d:this.polarArc(n.yBottom,n.plotY,b,b+n.pointWidth)},this.toXY(n),n.tooltipPos=[n.plotX,n.plotY],n.ttBelow=n.plotY>a.center[1];}),r(q,"alignDataLabel",function(a,d,h,k,n,c){this.chart.polar?(a=d.rectPlotX/Math.PI*180,null===k.align&&(k.align=20<a&&160>a?"left":200<a&&340>a?"right":"center"),null===k.verticalAlign&&(k.verticalAlign=45>a||315<a?"bottom":135<a&&225>a?"top":"middle"),e.alignDataLabel.call(this,d,h,k,n,c)):a.call(this,
		d,h,k,n,c);}));r(a,"getCoordinates",function(a,d){var b=this.chart,e={xAxis:[],yAxis:[]};b.polar?u(b.axes,function(a){var c=a.isXAxis,g=a.center,h=d.chartX-g[0]-b.plotLeft,g=d.chartY-g[1]-b.plotTop;e[c?"xAxis":"yAxis"].push({axis:a,value:a.translate(c?Math.PI-Math.atan2(h,g):Math.sqrt(Math.pow(h,2)+Math.pow(g,2)),!0)});}):e=a.call(this,d);return e;});})(x);});

},{}],107:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)

 (c) 2009-2016 Torstein Honsi

 License: www.highcharts.com/license
*/
	(function(M,a){"object"===typeof module&&module.exports?module.exports=M.document?a(M):a:M.Highcharts=a(M);})("undefined"!==typeof window?window:this,function(M){M=function(){var a=window,D=a.document,z=a.navigator&&a.navigator.userAgent||"",F=D&&D.createElementNS&&!!D.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect,J=/(edge|msie|trident)/i.test(z)&&!window.opera,m=!F,f=/Firefox/.test(z),h=f&&4>parseInt(z.split("Firefox/")[1],10);return a.Highcharts?a.Highcharts.error(16,!0):{product:"Highcharts",
		version:"5.0.2",deg2rad:2*Math.PI/360,doc:D,hasBidiBug:h,hasTouch:D&&void 0!==D.documentElement.ontouchstart,isMS:J,isWebKit:/AppleWebKit/.test(z),isFirefox:f,isTouchDevice:/(Mobile|Android|Windows Phone)/.test(z),SVG_NS:"http://www.w3.org/2000/svg",idCounter:0,chartCount:0,seriesTypes:{},symbolSizes:{},svg:F,vml:m,win:a,charts:[],marginNames:["plotTop","marginRight","marginBottom","plotLeft"],noop:function(){}};}();(function(a){var D=[],z=a.charts,F=a.doc,J=a.win;a.error=function(a,f){a="Highcharts error #"+
a+": www.highcharts.com/errors/"+a;if(f)throw Error(a);J.console&&console.log(a);};a.Fx=function(a,f,h){this.options=f;this.elem=a;this.prop=h;};a.Fx.prototype={dSetter:function(){var a=this.paths[0],f=this.paths[1],h=[],q=this.now,n=a.length,k;if(1===q)h=this.toD;else if(n===f.length&&1>q)for(;n--;)k=parseFloat(a[n]),h[n]=isNaN(k)?a[n]:q*parseFloat(f[n]-k)+k;else h=f;this.elem.attr("d",h);},update:function(){var a=this.elem,f=this.prop,h=this.now,q=this.options.step;if(this[f+"Setter"])this[f+"Setter"]();
	else a.attr?a.element&&a.attr(f,h):a.style[f]=h+this.unit;q&&q.call(a,h,this);},run:function(a,f,h){var m=this,n=function(a){return n.stopped?!1:m.step(a);},k;this.startTime=+new Date;this.start=a;this.end=f;this.unit=h;this.now=this.start;this.pos=0;n.elem=this.elem;n()&&1===D.push(n)&&(n.timerId=setInterval(function(){for(k=0;k<D.length;k++)D[k]()||D.splice(k--,1);D.length||clearInterval(n.timerId);},13));},step:function(a){var f=+new Date,h,m=this.options;h=this.elem;var n=m.complete,k=m.duration,
		v=m.curAnim,d;if(h.attr&&!h.element)h=!1;else if(a||f>=k+this.startTime){this.now=this.end;this.pos=1;this.update();a=v[this.prop]=!0;for(d in v)!0!==v[d]&&(a=!1);a&&n&&n.call(h);h=!1;}else this.pos=m.easing((f-this.startTime)/k),this.now=this.start+(this.end-this.start)*this.pos,this.update(),h=!0;return h;},initPath:function(m,f,h){function q(a){for(l=a.length;l--;)"M"!==a[l]&&"L"!==a[l]||a.splice(l+1,0,a[l+1],a[l+2],a[l+1],a[l+2]);}function n(a,b){for(;a.length<c;){a[0]=b[c-a.length];var e=a.slice(0,
		B);[].splice.apply(a,[0,0].concat(e));u&&(e=a.slice(a.length-B),[].splice.apply(a,[a.length,0].concat(e)),l--);}a[0]="M";}function k(a,b){for(var t=(c-a.length)/B;0<t&&t--;)e=a.slice().splice(a.length/L-B,B*L),e[0]=b[c-B-t*B],w&&(e[B-6]=e[B-2],e[B-5]=e[B-1]),[].splice.apply(a,[a.length/L,0].concat(e)),u&&t--;}f=f||"";var v,d=m.startX,g=m.endX,w=-1<f.indexOf("C"),B=w?7:3,c,e,l;f=f.split(" ");h=h.slice();var u=m.isArea,L=u?2:1,b;w&&(q(f),q(h));if(d&&g){for(l=0;l<d.length;l++)if(d[l]===g[0]){v=l;break;}else if(d[0]===
g[g.length-d.length+l]){v=l;b=!0;break;}void 0===v&&(f=[]);}f.length&&a.isNumber(v)&&(c=h.length+v*L*B,b?(n(f,h),k(h,f)):(n(h,f),k(f,h)));return[f,h];}};a.extend=function(a,f){var h;a||(a={});for(h in f)a[h]=f[h];return a;};a.merge=function(){var m,f=arguments,h,q={},n=function(k,f){var d,g;"object"!==typeof k&&(k={});for(g in f)f.hasOwnProperty(g)&&(d=f[g],a.isObject(d,!0)&&"renderTo"!==g&&"number"!==typeof d.nodeType?k[g]=n(k[g]||{},d):k[g]=f[g]);return k;};!0===f[0]&&(q=f[1],f=Array.prototype.slice.call(f,
		2));h=f.length;for(m=0;m<h;m++)q=n(q,f[m]);return q;};a.pInt=function(a,f){return parseInt(a,f||10);};a.isString=function(a){return"string"===typeof a;};a.isArray=function(a){a=Object.prototype.toString.call(a);return"[object Array]"===a||"[object Array Iterator]"===a;};a.isObject=function(m,f){return m&&"object"===typeof m&&(!f||!a.isArray(m));};a.isNumber=function(a){return"number"===typeof a&&!isNaN(a);};a.erase=function(a,f){for(var h=a.length;h--;)if(a[h]===f){a.splice(h,1);break;}};a.defined=function(a){return void 0!==
a&&null!==a;};a.attr=function(m,f,h){var q,n;if(a.isString(f))a.defined(h)?m.setAttribute(f,h):m&&m.getAttribute&&(n=m.getAttribute(f));else if(a.defined(f)&&a.isObject(f))for(q in f)m.setAttribute(q,f[q]);return n;};a.splat=function(m){return a.isArray(m)?m:[m];};a.syncTimeout=function(a,f,h){if(f)return setTimeout(a,f,h);a.call(0,h);};a.pick=function(){var a=arguments,f,h,q=a.length;for(f=0;f<q;f++)if(h=a[f],void 0!==h&&null!==h)return h;};a.css=function(m,f){a.isMS&&!a.svg&&f&&void 0!==f.opacity&&(f.filter=
"alpha(opacity\x3d"+100*f.opacity+")");a.extend(m.style,f);};a.createElement=function(m,f,h,q,n){m=F.createElement(m);var k=a.css;f&&a.extend(m,f);n&&k(m,{padding:0,border:"none",margin:0});h&&k(m,h);q&&q.appendChild(m);return m;};a.extendClass=function(m,f){var h=function(){};h.prototype=new m;a.extend(h.prototype,f);return h;};a.pad=function(a,f,h){return Array((f||2)+1-String(a).length).join(h||0)+a;};a.relativeLength=function(a,f){return/%$/.test(a)?f*parseFloat(a)/100:parseFloat(a);};a.wrap=function(a,
		f,h){var m=a[f];a[f]=function(){var a=Array.prototype.slice.call(arguments);a.unshift(m);return h.apply(this,a);};};a.getTZOffset=function(m){var f=a.Date;return 6E4*(f.hcGetTimezoneOffset&&f.hcGetTimezoneOffset(m)||f.hcTimezoneOffset||0);};a.dateFormat=function(m,f,h){if(!a.defined(f)||isNaN(f))return a.defaultOptions.lang.invalidDate||"";m=a.pick(m,"%Y-%m-%d %H:%M:%S");var q=a.Date,n=new q(f-a.getTZOffset(f)),k,v=n[q.hcGetHours](),d=n[q.hcGetDay](),g=n[q.hcGetDate](),w=n[q.hcGetMonth](),B=n[q.hcGetFullYear](),
		c=a.defaultOptions.lang,e=c.weekdays,l=c.shortWeekdays,u=a.pad,q=a.extend({a:l?l[d]:e[d].substr(0,3),A:e[d],d:u(g),e:u(g,2," "),w:d,b:c.shortMonths[w],B:c.months[w],m:u(w+1),y:B.toString().substr(2,2),Y:B,H:u(v),k:v,I:u(v%12||12),l:v%12||12,M:u(n[q.hcGetMinutes]()),p:12>v?"AM":"PM",P:12>v?"am":"pm",S:u(n.getSeconds()),L:u(Math.round(f%1E3),3)},a.dateFormats);for(k in q)for(;-1!==m.indexOf("%"+k);)m=m.replace("%"+k,"function"===typeof q[k]?q[k](f):q[k]);return h?m.substr(0,1).toUpperCase()+m.substr(1):
		m;};a.formatSingle=function(m,f){var h=/\.([0-9])/,q=a.defaultOptions.lang;/f$/.test(m)?(h=(h=m.match(h))?h[1]:-1,null!==f&&(f=a.numberFormat(f,h,q.decimalPoint,-1<m.indexOf(",")?q.thousandsSep:""))):f=a.dateFormat(m,f);return f;};a.format=function(m,f){for(var h="{",q=!1,n,k,v,d,g=[],w;m;){h=m.indexOf(h);if(-1===h)break;n=m.slice(0,h);if(q){n=n.split(":");k=n.shift().split(".");d=k.length;w=f;for(v=0;v<d;v++)w=w[k[v]];n.length&&(w=a.formatSingle(n.join(":"),w));g.push(w);}else g.push(n);m=m.slice(h+
1);h=(q=!q)?"}":"{";}g.push(m);return g.join("");};a.getMagnitude=function(a){return Math.pow(10,Math.floor(Math.log(a)/Math.LN10));};a.normalizeTickInterval=function(m,f,h,q,n){var k,v=m;h=a.pick(h,1);k=m/h;f||(f=[1,2,2.5,5,10],!1===q&&(1===h?f=[1,2,5,10]:.1>=h&&(f=[1/h])));for(q=0;q<f.length&&!(v=f[q],n&&v*h>=m||!n&&k<=(f[q]+(f[q+1]||f[q]))/2);q++);return v*h;};a.stableSort=function(a,f){var h=a.length,m,n;for(n=0;n<h;n++)a[n].safeI=n;a.sort(function(a,n){m=f(a,n);return 0===m?a.safeI-n.safeI:m;});for(n=
0;n<h;n++)delete a[n].safeI;};a.arrayMin=function(a){for(var f=a.length,h=a[0];f--;)a[f]<h&&(h=a[f]);return h;};a.arrayMax=function(a){for(var f=a.length,h=a[0];f--;)a[f]>h&&(h=a[f]);return h;};a.destroyObjectProperties=function(a,f){for(var h in a)a[h]&&a[h]!==f&&a[h].destroy&&a[h].destroy(),delete a[h];};a.discardElement=function(m){var f=a.garbageBin;f||(f=a.createElement("div"));m&&f.appendChild(m);f.innerHTML="";};a.correctFloat=function(a,f){return parseFloat(a.toPrecision(f||14));};a.setAnimation=
function(m,f){f.renderer.globalAnimation=a.pick(m,f.options.chart.animation,!0);};a.animObject=function(m){return a.isObject(m)?a.merge(m):{duration:m?500:0};};a.timeUnits={millisecond:1,second:1E3,minute:6E4,hour:36E5,day:864E5,week:6048E5,month:24192E5,year:314496E5};a.numberFormat=function(m,f,h,q){m=+m||0;f=+f;var n=a.defaultOptions.lang,k=(m.toString().split(".")[1]||"").length,v,d,g=Math.abs(m);-1===f?f=Math.min(k,20):a.isNumber(f)||(f=2);v=String(a.pInt(g.toFixed(f)));d=3<v.length?v.length%3:
		0;h=a.pick(h,n.decimalPoint);q=a.pick(q,n.thousandsSep);m=(0>m?"-":"")+(d?v.substr(0,d)+q:"");m+=v.substr(d).replace(/(\d{3})(?=\d)/g,"$1"+q);f&&(q=Math.abs(g-v+Math.pow(10,-Math.max(f,k)-1)),m+=h+q.toFixed(f).slice(2));return m;};Math.easeInOutSine=function(a){return-.5*(Math.cos(Math.PI*a)-1);};a.getStyle=function(m,f){return"width"===f?Math.min(m.offsetWidth,m.scrollWidth)-a.getStyle(m,"padding-left")-a.getStyle(m,"padding-right"):"height"===f?Math.min(m.offsetHeight,m.scrollHeight)-a.getStyle(m,
		"padding-top")-a.getStyle(m,"padding-bottom"):(m=J.getComputedStyle(m,void 0))&&a.pInt(m.getPropertyValue(f));};a.inArray=function(a,f){return f.indexOf?f.indexOf(a):[].indexOf.call(f,a);};a.grep=function(a,f){return[].filter.call(a,f);};a.map=function(a,f){for(var h=[],q=0,n=a.length;q<n;q++)h[q]=f.call(a[q],a[q],q,a);return h;};a.offset=function(a){var f=F.documentElement;a=a.getBoundingClientRect();return{top:a.top+(J.pageYOffset||f.scrollTop)-(f.clientTop||0),left:a.left+(J.pageXOffset||f.scrollLeft)-
(f.clientLeft||0)};};a.stop=function(a){for(var f=D.length;f--;)D[f].elem===a&&(D[f].stopped=!0);};a.each=function(a,f,h){return Array.prototype.forEach.call(a,f,h);};a.addEvent=function(a,f,h){function q(k){k.target=k.srcElement||J;h.call(a,k);}var n=a.hcEvents=a.hcEvents||{};a.addEventListener?a.addEventListener(f,h,!1):a.attachEvent&&(a.hcEventsIE||(a.hcEventsIE={}),a.hcEventsIE[h.toString()]=q,a.attachEvent("on"+f,q));n[f]||(n[f]=[]);n[f].push(h);};a.removeEvent=function(m,f,h){function q(a,d){m.removeEventListener?
		m.removeEventListener(a,d,!1):m.attachEvent&&(d=m.hcEventsIE[d.toString()],m.detachEvent("on"+a,d));}function n(){var a,d;if(m.nodeName)for(d in f?(a={},a[f]=!0):a=v,a)if(v[d])for(a=v[d].length;a--;)q(d,v[d][a]);}var k,v=m.hcEvents,d;v&&(f?(k=v[f]||[],h?(d=a.inArray(h,k),-1<d&&(k.splice(d,1),v[f]=k),q(f,h)):(n(),v[f]=[])):(n(),m.hcEvents={}));};a.fireEvent=function(m,f,h,q){var n;n=m.hcEvents;var k,v;h=h||{};if(F.createEvent&&(m.dispatchEvent||m.fireEvent))n=F.createEvent("Events"),n.initEvent(f,!0,
		!0),a.extend(n,h),m.dispatchEvent?m.dispatchEvent(n):m.fireEvent(f,n);else if(n)for(n=n[f]||[],k=n.length,h.target||a.extend(h,{preventDefault:function(){h.defaultPrevented=!0;},target:m,type:f}),f=0;f<k;f++)(v=n[f])&&!1===v.call(m,h)&&h.preventDefault();q&&!h.defaultPrevented&&q(h);};a.animate=function(m,f,h){var q,n="",k,v,d;a.isObject(h)||(q=arguments,h={duration:q[2],easing:q[3],complete:q[4]});a.isNumber(h.duration)||(h.duration=400);h.easing="function"===typeof h.easing?h.easing:Math[h.easing]||
Math.easeInOutSine;h.curAnim=a.merge(f);for(d in f)v=new a.Fx(m,h,d),k=null,"d"===d?(v.paths=v.initPath(m,m.d,f.d),v.toD=f.d,q=0,k=1):m.attr?q=m.attr(d):(q=parseFloat(a.getStyle(m,d))||0,"opacity"!==d&&(n="px")),k||(k=f[d]),k.match&&k.match("px")&&(k=k.replace(/px/g,"")),v.run(q,k,n);};a.seriesType=function(m,f,h,q,n){var k=a.getOptions(),v=a.seriesTypes;k.plotOptions[m]=a.merge(k.plotOptions[f],h);v[m]=a.extendClass(v[f]||function(){},q);v[m].prototype.type=m;n&&(v[m].prototype.pointClass=a.extendClass(a.Point,
		n));return v[m];};J.jQuery&&(J.jQuery.fn.highcharts=function(){var m=[].slice.call(arguments);if(this[0])return m[0]?(new (a[a.isString(m[0])?m.shift():"Chart"])(this[0],m[0],m[1]),this):z[a.attr(this[0],"data-highcharts-chart")];});F&&!F.defaultView&&(a.getStyle=function(m,f){var h={width:"clientWidth",height:"clientHeight"}[f];if(m.style[f])return a.pInt(m.style[f]);"opacity"===f&&(f="filter");if(h)return m.style.zoom=1,Math.max(m[h]-2*a.getStyle(m,"padding"),0);m=m.currentStyle[f.replace(/\-(\w)/g,
		function(a,n){return n.toUpperCase();})];"filter"===f&&(m=m.replace(/alpha\(opacity=([0-9]+)\)/,function(a,n){return n/100;}));return""===m?1:a.pInt(m);});Array.prototype.forEach||(a.each=function(a,f,h){for(var q=0,n=a.length;q<n;q++)if(!1===f.call(h,a[q],q,a))return q;});Array.prototype.indexOf||(a.inArray=function(a,f){var h,q=0;if(f)for(h=f.length;q<h;q++)if(f[q]===a)return q;return-1;});Array.prototype.filter||(a.grep=function(a,f){for(var h=[],q=0,n=a.length;q<n;q++)f(a[q],q)&&h.push(a[q]);return h;});})(M);
	(function(a){var D=a.each,z=a.isNumber,F=a.map,J=a.merge,m=a.pInt;a.Color=function(f){if(!(this instanceof a.Color))return new a.Color(f);this.init(f);};a.Color.prototype={parsers:[{regex:/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,parse:function(a){return[m(a[1]),m(a[2]),m(a[3]),parseFloat(a[4],10)];}},{regex:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,parse:function(a){return[m(a[1],16),m(a[2],16),m(a[3],16),1];}},{regex:/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/,
		parse:function(a){return[m(a[1]),m(a[2]),m(a[3]),1];}}],names:{white:"#ffffff",black:"#000000"},init:function(f){var h,q,n,k;if((this.input=f=this.names[f]||f)&&f.stops)this.stops=F(f.stops,function(k){return new a.Color(k[1]);});else for(n=this.parsers.length;n--&&!q;)k=this.parsers[n],(h=k.regex.exec(f))&&(q=k.parse(h));this.rgba=q||[];},get:function(a){var h=this.input,f=this.rgba,n;this.stops?(n=J(h),n.stops=[].concat(n.stops),D(this.stops,function(k,f){n.stops[f]=[n.stops[f][0],k.get(a)];})):n=f&&
z(f[0])?"rgb"===a||!a&&1===f[3]?"rgb("+f[0]+","+f[1]+","+f[2]+")":"a"===a?f[3]:"rgba("+f.join(",")+")":h;return n;},brighten:function(a){var h,f=this.rgba;if(this.stops)D(this.stops,function(n){n.brighten(a);});else if(z(a)&&0!==a)for(h=0;3>h;h++)f[h]+=m(255*a),0>f[h]&&(f[h]=0),255<f[h]&&(f[h]=255);return this;},setOpacity:function(a){this.rgba[3]=a;return this;}};a.color=function(f){return new a.Color(f);};})(M);(function(a){var D,z,F=a.addEvent,J=a.animate,m=a.attr,f=a.charts,h=a.color,q=a.css,n=a.createElement,
		k=a.defined,v=a.deg2rad,d=a.destroyObjectProperties,g=a.doc,w=a.each,B=a.extend,c=a.erase,e=a.grep,l=a.hasTouch,u=a.isArray,L=a.isFirefox,b=a.isMS,t=a.isObject,y=a.isString,K=a.isWebKit,x=a.merge,I=a.noop,r=a.pick,G=a.pInt,H=a.removeEvent,N=a.stop,p=a.svg,A=a.SVG_NS,P=a.symbolSizes,O=a.win;D=a.SVGElement=function(){return this;};D.prototype={opacity:1,SVG_NS:A,textProps:"direction fontSize fontWeight fontFamily fontStyle color lineHeight width textDecoration textOverflow textShadow".split(" "),init:function(a,
		b){this.element="span"===b?n(b):g.createElementNS(this.SVG_NS,b);this.renderer=a;},animate:function(a,b,p){b=r(b,this.renderer.globalAnimation,!0);N(this);b?(p&&(b.complete=p),J(this,a,b)):this.attr(a,null,p);return this;},colorGradient:function(b,E,p){var C=this.renderer,e,A,c,d,t,S,l,g,y,r,n,H=[],G;b.linearGradient?A="linearGradient":b.radialGradient&&(A="radialGradient");if(A){c=b[A];t=C.gradients;l=b.stops;r=p.radialReference;u(c)&&(b[A]=c={x1:c[0],y1:c[1],x2:c[2],y2:c[3],gradientUnits:"userSpaceOnUse"});
		"radialGradient"===A&&r&&!k(c.gradientUnits)&&(d=c,c=x(c,C.getRadialAttr(r,d),{gradientUnits:"userSpaceOnUse"}));for(n in c)"id"!==n&&H.push(n,c[n]);for(n in l)H.push(l[n]);H=H.join(",");t[H]?r=t[H].attr("id"):(c.id=r="highcharts-"+a.idCounter++,t[H]=S=C.createElement(A).attr(c).add(C.defs),S.radAttr=d,S.stops=[],w(l,function(b){0===b[1].indexOf("rgba")?(e=a.color(b[1]),g=e.get("rgb"),y=e.get("a")):(g=b[1],y=1);b=C.createElement("stop").attr({offset:b[0],"stop-color":g,"stop-opacity":y}).add(S);S.stops.push(b);}));
		G="url("+C.url+"#"+r+")";p.setAttribute(E,G);p.gradient=H;b.toString=function(){return G;};}},applyTextShadow:function(a){var C=this.element,p,e=-1!==a.indexOf("contrast"),c={},A=this.renderer.forExport,d=this.renderer.forExport||void 0!==C.style.textShadow&&!b;e&&(c.textShadow=a=a.replace(/contrast/g,this.renderer.getContrast(C.style.fill)));if(K||A)c.textRendering="geometricPrecision";d?this.css(c):(this.fakeTS=!0,this.ySetter=this.xSetter,p=[].slice.call(C.getElementsByTagName("tspan")),w(a.split(/\s?,\s?/g),
		function(a){var b=C.firstChild,E,e;a=a.split(" ");E=a[a.length-1];(e=a[a.length-2])&&w(p,function(a,p){0===p&&(a.setAttribute("x",C.getAttribute("x")),p=C.getAttribute("y"),a.setAttribute("y",p||0),null===p&&C.setAttribute("y",0));a=a.cloneNode(1);m(a,{"class":"highcharts-text-shadow",fill:E,stroke:E,"stroke-opacity":1/Math.max(G(e),3),"stroke-width":e,"stroke-linejoin":"round"});C.insertBefore(a,b);});}));},attr:function(a,b,p){var C,E=this.element,e,c=this,A;"string"===typeof a&&void 0!==b&&(C=a,a=
{},a[C]=b);if("string"===typeof a)c=(this[a+"Getter"]||this._defaultGetter).call(this,a,E);else{for(C in a)b=a[C],A=!1,this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(C)&&(e||(this.symbolAttr(a),e=!0),A=!0),!this.rotation||"x"!==C&&"y"!==C||(this.doTransform=!0),A||(A=this[C+"Setter"]||this._defaultSetter,A.call(this,b,C,E),this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(C)&&this.updateShadows(C,b,A));this.doTransform&&(this.updateTransform(),
	this.doTransform=!1);}p&&p();return c;},updateShadows:function(a,b,p){for(var C=this.shadows,E=C.length;E--;)p.call(C[E],"height"===a?Math.max(b-(C[E].cutHeight||0),0):"d"===a?this.d:b,a,C[E]);},addClass:function(a,b){var C=this.attr("class")||"";-1===C.indexOf(a)&&(b||(a=(C+(C?" ":"")+a).replace("  "," ")),this.attr("class",a));return this;},hasClass:function(a){return-1!==m(this.element,"class").indexOf(a);},removeClass:function(a){m(this.element,"class",(m(this.element,"class")||"").replace(a,""));
		return this;},symbolAttr:function(a){var b=this;w("x y r start end width height innerR anchorX anchorY".split(" "),function(C){b[C]=r(a[C],b[C]);});b.attr({d:b.renderer.symbols[b.symbolName](b.x,b.y,b.width,b.height,b)});},clip:function(a){return this.attr("clip-path",a?"url("+this.renderer.url+"#"+a.id+")":"none");},crisp:function(a,b){var C,p={},E;b=b||a.strokeWidth||0;E=Math.round(b)%2/2;a.x=Math.floor(a.x||this.x||0)+E;a.y=Math.floor(a.y||this.y||0)+E;a.width=Math.floor((a.width||this.width||0)-2*
E);a.height=Math.floor((a.height||this.height||0)-2*E);k(a.strokeWidth)&&(a.strokeWidth=b);for(C in a)this[C]!==a[C]&&(this[C]=p[C]=a[C]);return p;},css:function(a){var C=this.styles,e={},A=this.element,c,d,t="";c=!C;a&&a.color&&(a.fill=a.color);if(C)for(d in a)a[d]!==C[d]&&(e[d]=a[d],c=!0);if(c){c=this.textWidth=a&&a.width&&"text"===A.nodeName.toLowerCase()&&G(a.width)||this.textWidth;C&&(a=B(C,e));this.styles=a;c&&!p&&this.renderer.forExport&&delete a.width;if(b&&!p)q(this.element,a);else{C=function(a,
		b){return"-"+b.toLowerCase();};for(d in a)t+=d.replace(/([A-Z])/g,C)+":"+a[d]+";";m(A,"style",t);}this.added&&c&&this.renderer.buildText(this);}return this;},strokeWidth:function(){return this["stroke-width"]||0;},on:function(a,b){var C=this,p=C.element;l&&"click"===a?(p.ontouchstart=function(a){C.touchEventFired=Date.now();a.preventDefault();b.call(p,a);},p.onclick=function(a){(-1===O.navigator.userAgent.indexOf("Android")||1100<Date.now()-(C.touchEventFired||0))&&b.call(p,a);}):p["on"+a]=b;return this;},
	setRadialReference:function(a){var b=this.renderer.gradients[this.element.gradient];this.element.radialReference=a;b&&b.radAttr&&b.animate(this.renderer.getRadialAttr(a,b.radAttr));return this;},translate:function(a,b){return this.attr({translateX:a,translateY:b});},invert:function(a){this.inverted=a;this.updateTransform();return this;},updateTransform:function(){var a=this.translateX||0,b=this.translateY||0,p=this.scaleX,e=this.scaleY,c=this.inverted,A=this.rotation,d=this.element;c&&(a+=this.attr("width"),
	b+=this.attr("height"));a=["translate("+a+","+b+")"];c?a.push("rotate(90) scale(-1,1)"):A&&a.push("rotate("+A+" "+(d.getAttribute("x")||0)+" "+(d.getAttribute("y")||0)+")");(k(p)||k(e))&&a.push("scale("+r(p,1)+" "+r(e,1)+")");a.length&&d.setAttribute("transform",a.join(" "));},toFront:function(){var a=this.element;a.parentNode.appendChild(a);return this;},align:function(a,b,p){var C,E,e,A,d={};E=this.renderer;e=E.alignedObjects;var t,l;if(a){if(this.alignOptions=a,this.alignByTranslate=b,!p||y(p))this.alignTo=
C=p||"renderer",c(e,this),e.push(this),p=null;}else a=this.alignOptions,b=this.alignByTranslate,C=this.alignTo;p=r(p,E[C],E);C=a.align;E=a.verticalAlign;e=(p.x||0)+(a.x||0);A=(p.y||0)+(a.y||0);"right"===C?t=1:"center"===C&&(t=2);t&&(e+=(p.width-(a.width||0))/t);d[b?"translateX":"x"]=Math.round(e);"bottom"===E?l=1:"middle"===E&&(l=2);l&&(A+=(p.height-(a.height||0))/l);d[b?"translateY":"y"]=Math.round(A);this[this.placed?"animate":"attr"](d);this.placed=!0;this.alignAttr=d;return this;},getBBox:function(a,
		p){var C,E=this.renderer,e,A=this.element,c=this.styles,d,t=this.textStr,l,g=A.style,y,u=E.cache,x=E.cacheKeys,k;p=r(p,this.rotation);e=p*v;d=c&&c.fontSize;void 0!==t&&(k=t.toString().replace(/[0-9]/g,"0")+["",p||0,d,A.style.width].join());k&&!a&&(C=u[k]);if(!C){if(A.namespaceURI===this.SVG_NS||E.forExport){try{y=this.fakeTS&&function(a){w(A.querySelectorAll(".highcharts-text-shadow"),function(b){b.style.display=a;});},L&&g.textShadow?(l=g.textShadow,g.textShadow=""):y&&y("none"),C=A.getBBox?B({},A.getBBox()):
		{width:A.offsetWidth,height:A.offsetHeight},l?g.textShadow=l:y&&y("");}catch(V){}if(!C||0>C.width)C={width:0,height:0};}else C=this.htmlGetBBox();E.isSVG&&(a=C.width,E=C.height,b&&c&&"11px"===c.fontSize&&"16.9"===E.toPrecision(3)&&(C.height=E=14),p&&(C.width=Math.abs(E*Math.sin(e))+Math.abs(a*Math.cos(e)),C.height=Math.abs(E*Math.cos(e))+Math.abs(a*Math.sin(e))));if(k&&0<C.height){for(;250<x.length;)delete u[x.shift()];u[k]||x.push(k);u[k]=C;}}return C;},show:function(a){return this.attr({visibility:a?
		"inherit":"visible"});},hide:function(){return this.attr({visibility:"hidden"});},fadeOut:function(a){var b=this;b.animate({opacity:0},{duration:a||150,complete:function(){b.attr({y:-9999});}});},add:function(a){var b=this.renderer,p=this.element,C;a&&(this.parentGroup=a);this.parentInverted=a&&a.inverted;void 0!==this.textStr&&b.buildText(this);this.added=!0;if(!a||a.handleZ||this.zIndex)C=this.zIndexSetter();C||(a?a.element:b.box).appendChild(p);if(this.onAdd)this.onAdd();return this;},safeRemoveChild:function(a){var b=
a.parentNode;b&&b.removeChild(a);},destroy:function(){var a=this.element||{},b=this.renderer.isSVG&&"SPAN"===a.nodeName&&this.parentGroup,p,e;a.onclick=a.onmouseout=a.onmouseover=a.onmousemove=a.point=null;N(this);this.clipPath&&(this.clipPath=this.clipPath.destroy());if(this.stops){for(e=0;e<this.stops.length;e++)this.stops[e]=this.stops[e].destroy();this.stops=null;}this.safeRemoveChild(a);for(this.destroyShadows();b&&b.div&&0===b.div.childNodes.length;)a=b.parentGroup,this.safeRemoveChild(b.div),
	delete b.div,b=a;this.alignTo&&c(this.renderer.alignedObjects,this);for(p in this)delete this[p];return null;},shadow:function(a,b,p){var C=[],e,E,A=this.element,c,d,t,l;if(!a)this.destroyShadows();else if(!this.shadows){d=r(a.width,3);t=(a.opacity||.15)/d;l=this.parentInverted?"(-1,-1)":"("+r(a.offsetX,1)+", "+r(a.offsetY,1)+")";for(e=1;e<=d;e++)E=A.cloneNode(0),c=2*d+1-2*e,m(E,{isShadow:"true",stroke:a.color||"#000000","stroke-opacity":t*e,"stroke-width":c,transform:"translate"+l,fill:"none"}),p&&
(m(E,"height",Math.max(m(E,"height")-c,0)),E.cutHeight=c),b?b.element.appendChild(E):A.parentNode.insertBefore(E,A),C.push(E);this.shadows=C;}return this;},destroyShadows:function(){w(this.shadows||[],function(a){this.safeRemoveChild(a);},this);this.shadows=void 0;},xGetter:function(a){"circle"===this.element.nodeName&&("x"===a?a="cx":"y"===a&&(a="cy"));return this._defaultGetter(a);},_defaultGetter:function(a){a=r(this[a],this.element?this.element.getAttribute(a):null,0);/^[\-0-9\.]+$/.test(a)&&(a=parseFloat(a));
		return a;},dSetter:function(a,b,p){a&&a.join&&(a=a.join(" "));/(NaN| {2}|^$)/.test(a)&&(a="M 0 0");p.setAttribute(b,a);this[b]=a;},dashstyleSetter:function(a){var b,p=this["stroke-width"];"inherit"===p&&(p=1);if(a=a&&a.toLowerCase()){a=a.replace("shortdashdotdot","3,1,1,1,1,1,").replace("shortdashdot","3,1,1,1").replace("shortdot","1,1,").replace("shortdash","3,1,").replace("longdash","8,3,").replace(/dot/g,"1,3,").replace("dash","4,3,").replace(/,$/,"").split(",");for(b=a.length;b--;)a[b]=G(a[b])*
p;a=a.join(",").replace(/NaN/g,"none");this.element.setAttribute("stroke-dasharray",a);}},alignSetter:function(a){this.element.setAttribute("text-anchor",{left:"start",center:"middle",right:"end"}[a]);},opacitySetter:function(a,b,p){this[b]=a;p.setAttribute(b,a);},titleSetter:function(a){var b=this.element.getElementsByTagName("title")[0];b||(b=g.createElementNS(this.SVG_NS,"title"),this.element.appendChild(b));b.firstChild&&b.removeChild(b.firstChild);b.appendChild(g.createTextNode(String(r(a),"").replace(/<[^>]*>/g,
		"")));},textSetter:function(a){a!==this.textStr&&(delete this.bBox,this.textStr=a,this.added&&this.renderer.buildText(this));},fillSetter:function(a,b,p){"string"===typeof a?p.setAttribute(b,a):a&&this.colorGradient(a,b,p);},visibilitySetter:function(a,b,p){"inherit"===a?p.removeAttribute(b):p.setAttribute(b,a);},zIndexSetter:function(a,b){var p=this.renderer,e=this.parentGroup,C=(e||p).element||p.box,E,A=this.element,c;E=this.added;var d;k(a)&&(A.zIndex=a,a=+a,this[b]===a&&(E=!1),this[b]=a);if(E){(a=
this.zIndex)&&e&&(e.handleZ=!0);b=C.childNodes;for(d=0;d<b.length&&!c;d++)e=b[d],E=e.zIndex,e!==A&&(G(E)>a||!k(a)&&k(E)||0>a&&!k(E)&&C!==p.box)&&(C.insertBefore(A,e),c=!0);c||C.appendChild(A);}return c;},_defaultSetter:function(a,b,p){p.setAttribute(b,a);}};D.prototype.yGetter=D.prototype.xGetter;D.prototype.translateXSetter=D.prototype.translateYSetter=D.prototype.rotationSetter=D.prototype.verticalAlignSetter=D.prototype.scaleXSetter=D.prototype.scaleYSetter=function(a,b){this[b]=a;this.doTransform=
!0;};D.prototype["stroke-widthSetter"]=D.prototype.strokeSetter=function(a,b,p){this[b]=a;this.stroke&&this["stroke-width"]?(D.prototype.fillSetter.call(this,this.stroke,"stroke",p),p.setAttribute("stroke-width",this["stroke-width"]),this.hasStroke=!0):"stroke-width"===b&&0===a&&this.hasStroke&&(p.removeAttribute("stroke"),this.hasStroke=!1);};z=a.SVGRenderer=function(){this.init.apply(this,arguments);};z.prototype={Element:D,SVG_NS:A,init:function(a,b,p,e,A,c){var E;e=this.createElement("svg").attr({version:"1.1",
		"class":"highcharts-root"}).css(this.getStyle(e));E=e.element;a.appendChild(E);-1===a.innerHTML.indexOf("xmlns")&&m(E,"xmlns",this.SVG_NS);this.isSVG=!0;this.box=E;this.boxWrapper=e;this.alignedObjects=[];this.url=(L||K)&&g.getElementsByTagName("base").length?O.location.href.replace(/#.*?$/,"").replace(/([\('\)])/g,"\\$1").replace(/ /g,"%20"):"";this.createElement("desc").add().element.appendChild(g.createTextNode("Created with Highcharts 5.0.2"));this.defs=this.createElement("defs").add();this.allowHTML=
c;this.forExport=A;this.gradients={};this.cache={};this.cacheKeys=[];this.imgCount=0;this.setSize(b,p,!1);var C;L&&a.getBoundingClientRect&&(this.subPixelFix=b=function(){q(a,{left:0,top:0});C=a.getBoundingClientRect();q(a,{left:Math.ceil(C.left)-C.left+"px",top:Math.ceil(C.top)-C.top+"px"});},b(),F(O,"resize",b));},getStyle:function(a){return this.style=B({fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif',fontSize:"12px"},a);},setStyle:function(a){this.boxWrapper.css(this.getStyle(a));},
	isHidden:function(){return!this.boxWrapper.getBBox().width;},destroy:function(){var a=this.defs;this.box=null;this.boxWrapper=this.boxWrapper.destroy();d(this.gradients||{});this.gradients=null;a&&(this.defs=a.destroy());this.subPixelFix&&H(O,"resize",this.subPixelFix);return this.alignedObjects=null;},createElement:function(a){var b=new this.Element;b.init(this,a);return b;},draw:I,getRadialAttr:function(a,b){return{cx:a[0]-a[2]/2+b.cx*a[2],cy:a[1]-a[2]/2+b.cy*a[2],r:b.r*a[2]};},buildText:function(a){for(var b=
a.element,c=this,d=c.forExport,C=r(a.textStr,"").toString(),t=-1!==C.indexOf("\x3c"),l=b.childNodes,y,u,x,k,n=m(b,"x"),H=a.styles,f=a.textWidth,K=H&&H.lineHeight,h=H&&H.textShadow,v=H&&"ellipsis"===H.textOverflow,O=l.length,B=f&&!a.added&&this.box,P=function(a){var b;b=/(px|em)$/.test(a&&a.style.fontSize)?a.style.fontSize:H&&H.fontSize||c.style.fontSize||12;return K?G(K):c.fontMetrics(b,a).h;};O--;)b.removeChild(l[O]);t||h||v||f||-1!==C.indexOf(" ")?(y=/<.*class="([^"]+)".*>/,u=/<.*style="([^"]+)".*>/,
	x=/<.*href="(http[^"]+)".*>/,B&&B.appendChild(b),C=t?C.replace(/<(b|strong)>/g,'\x3cspan style\x3d"font-weight:bold"\x3e').replace(/<(i|em)>/g,'\x3cspan style\x3d"font-style:italic"\x3e').replace(/<a/g,"\x3cspan").replace(/<\/(b|strong|i|em|a)>/g,"\x3c/span\x3e").split(/<br.*?>/g):[C],C=e(C,function(a){return""!==a;}),w(C,function(e,E){var C,t=0;e=e.replace(/^\s+|\s+$/g,"").replace(/<span/g,"|||\x3cspan").replace(/<\/span>/g,"\x3c/span\x3e|||");C=e.split("|||");w(C,function(e){if(""!==e||1===C.length){var l=
{},r=g.createElementNS(c.SVG_NS,"tspan"),w,S;y.test(e)&&(w=e.match(y)[1],m(r,"class",w));u.test(e)&&(S=e.match(u)[1].replace(/(;| |^)color([ :])/,"$1fill$2"),m(r,"style",S));x.test(e)&&!d&&(m(r,"onclick",'location.href\x3d"'+e.match(x)[1]+'"'),q(r,{cursor:"pointer"}));e=(e.replace(/<(.|\n)*?>/g,"")||" ").replace(/&lt;/g,"\x3c").replace(/&gt;/g,"\x3e");if(" "!==e){r.appendChild(g.createTextNode(e));t?l.dx=0:E&&null!==n&&(l.x=n);m(r,l);b.appendChild(r);!t&&E&&(!p&&d&&q(r,{display:"block"}),m(r,"dy",
		P(r)));if(f){l=e.replace(/([^\^])-/g,"$1- ").split(" ");w="nowrap"===H.whiteSpace;for(var G=1<C.length||E||1<l.length&&!w,K,h,O=[],B=P(r),R=a.rotation,I=e,Q=I.length;(G||v)&&(l.length||O.length);)a.rotation=0,K=a.getBBox(!0),h=K.width,!p&&c.forExport&&(h=c.measureSpanWidth(r.firstChild.data,a.styles)),K=h>f,void 0===k&&(k=K),v&&k?(Q/=2,""===I||!K&&.5>Q?l=[]:(I=e.substring(0,I.length+(K?-1:1)*Math.ceil(Q)),l=[I+(3<f?"\u2026":"")],r.removeChild(r.firstChild))):K&&1!==l.length?(r.removeChild(r.firstChild),
	O.unshift(l.pop())):(l=O,O=[],l.length&&!w&&(r=g.createElementNS(A,"tspan"),m(r,{dy:B,x:n}),S&&m(r,"style",S),b.appendChild(r)),h>f&&(f=h)),l.length&&r.appendChild(g.createTextNode(l.join(" ").replace(/- /g,"-")));a.rotation=R;}t++;}}});}),k&&a.attr("title",a.textStr),B&&B.removeChild(b),h&&a.applyTextShadow&&a.applyTextShadow(h)):b.appendChild(g.createTextNode(C.replace(/&lt;/g,"\x3c").replace(/&gt;/g,"\x3e")));},getContrast:function(a){a=h(a).rgba;return 510<a[0]+a[1]+a[2]?"#000000":"#FFFFFF";},button:function(a,
		p,e,c,A,d,t,l,g){var E=this.label(a,p,e,g,null,null,null,null,"button"),C=0;E.attr(x({padding:8,r:2},A));var r,y,u,k;A=x({fill:"#f7f7f7",stroke:"#cccccc","stroke-width":1,style:{color:"#333333",cursor:"pointer",fontWeight:"normal"}},A);r=A.style;delete A.style;d=x(A,{fill:"#e6e6e6"},d);y=d.style;delete d.style;t=x(A,{fill:"#e6ebf5",style:{color:"#000000",fontWeight:"bold"}},t);u=t.style;delete t.style;l=x(A,{style:{color:"#cccccc"}},l);k=l.style;delete l.style;F(E.element,b?"mouseover":"mouseenter",
		function(){3!==C&&E.setState(1);});F(E.element,b?"mouseout":"mouseleave",function(){3!==C&&E.setState(C);});E.setState=function(a){1!==a&&(E.state=C=a);E.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/).addClass("highcharts-button-"+["normal","hover","pressed","disabled"][a||0]);E.attr([A,d,t,l][a||0]).css([r,y,u,k][a||0]);};E.attr(A).css(B({cursor:"default"},r));return E.on("click",function(a){3!==C&&c.call(E,a);});},crispLine:function(a,b){a[1]===a[4]&&(a[1]=a[4]=Math.round(a[1])-b%2/
2);a[2]===a[5]&&(a[2]=a[5]=Math.round(a[2])+b%2/2);return a;},path:function(a){var b={fill:"none"};u(a)?b.d=a:t(a)&&B(b,a);return this.createElement("path").attr(b);},circle:function(a,b,p){a=t(a)?a:{x:a,y:b,r:p};b=this.createElement("circle");b.xSetter=b.ySetter=function(a,b,p){p.setAttribute("c"+b,a);};return b.attr(a);},arc:function(a,b,p,e,A,c){t(a)&&(b=a.y,p=a.r,e=a.innerR,A=a.start,c=a.end,a=a.x);a=this.symbol("arc",a||0,b||0,p||0,p||0,{innerR:e||0,start:A||0,end:c||0});a.r=p;return a;},rect:function(a,
		b,p,e,A,c){A=t(a)?a.r:A;var d=this.createElement("rect");a=t(a)?a:void 0===a?{}:{x:a,y:b,width:Math.max(p,0),height:Math.max(e,0)};void 0!==c&&(a.strokeWidth=c,a=d.crisp(a));a.fill="none";A&&(a.r=A);d.rSetter=function(a,b,p){m(p,{rx:a,ry:a});};return d.attr(a);},setSize:function(a,b,p){var e=this.alignedObjects,A=e.length;this.width=a;this.height=b;for(this.boxWrapper.animate({width:a,height:b},{step:function(){this.attr({viewBox:"0 0 "+this.attr("width")+" "+this.attr("height")});},duration:r(p,!0)?
		void 0:0});A--;)e[A].align();},g:function(a){var b=this.createElement("g");return a?b.attr({"class":"highcharts-"+a}):b;},image:function(a,b,p,e,A){var c={preserveAspectRatio:"none"};1<arguments.length&&B(c,{x:b,y:p,width:e,height:A});c=this.createElement("image").attr(c);c.element.setAttributeNS?c.element.setAttributeNS("http://www.w3.org/1999/xlink","href",a):c.element.setAttribute("hc-svg-href",a);return c;},symbol:function(a,b,p,e,A,c){var d=this,E,t=this.symbols[a],l=k(b)&&t&&t(Math.round(b),Math.round(p),
			e,A,c),C=/^url\((.*?)\)$/,y,u;t?(E=this.path(l),E.attr("fill","none"),B(E,{symbolName:a,x:b,y:p,width:e,height:A}),c&&B(E,c)):C.test(a)&&(y=a.match(C)[1],E=this.image(y),E.imgwidth=r(P[y]&&P[y].width,c&&c.width),E.imgheight=r(P[y]&&P[y].height,c&&c.height),u=function(){E.attr({width:E.width,height:E.height});},w(["width","height"],function(a){E[a+"Setter"]=function(a,b){var p={},e=this["img"+b],c="width"===b?"translateX":"translateY";this[b]=a;k(e)&&(this.element&&this.element.setAttribute(b,e),this.alignByTranslate||
(p[c]=((this[b]||0)-e)/2,this.attr(p)));};}),k(b)&&E.attr({x:b,y:p}),E.isImg=!0,k(E.imgwidth)&&k(E.imgheight)?u():(E.attr({width:0,height:0}),n("img",{onload:function(){var a=f[d.chartIndex];0===this.width&&(q(this,{position:"absolute",top:"-999em"}),g.body.appendChild(this));P[y]={width:this.width,height:this.height};E.imgwidth=this.width;E.imgheight=this.height;E.element&&u();this.parentNode&&this.parentNode.removeChild(this);d.imgCount--;if(!d.imgCount&&a&&a.onload)a.onload();},src:y}),this.imgCount++));
	return E;},symbols:{circle:function(a,b,p,e){var c=.166*p;return["M",a+p/2,b,"C",a+p+c,b,a+p+c,b+e,a+p/2,b+e,"C",a-c,b+e,a-c,b,a+p/2,b,"Z"];},square:function(a,b,p,e){return["M",a,b,"L",a+p,b,a+p,b+e,a,b+e,"Z"];},triangle:function(a,b,p,e){return["M",a+p/2,b,"L",a+p,b+e,a,b+e,"Z"];},"triangle-down":function(a,b,p,e){return["M",a,b,"L",a+p,b,a+p/2,b+e,"Z"];},diamond:function(a,b,p,e){return["M",a+p/2,b,"L",a+p,b+e/2,a+p/2,b+e,a,b+e/2,"Z"];},arc:function(a,b,p,e,c){var A=c.start;p=c.r||p||e;var d=c.end-.001;
		e=c.innerR;var t=c.open,E=Math.cos(A),l=Math.sin(A),y=Math.cos(d),d=Math.sin(d);c=c.end-A<Math.PI?0:1;return["M",a+p*E,b+p*l,"A",p,p,0,c,1,a+p*y,b+p*d,t?"M":"L",a+e*y,b+e*d,"A",e,e,0,c,0,a+e*E,b+e*l,t?"":"Z"];},callout:function(a,b,p,e,c){var A=Math.min(c&&c.r||0,p,e),d=A+6,t=c&&c.anchorX;c=c&&c.anchorY;var l;l=["M",a+A,b,"L",a+p-A,b,"C",a+p,b,a+p,b,a+p,b+A,"L",a+p,b+e-A,"C",a+p,b+e,a+p,b+e,a+p-A,b+e,"L",a+A,b+e,"C",a,b+e,a,b+e,a,b+e-A,"L",a,b+A,"C",a,b,a,b,a+A,b];t&&t>p&&c>b+d&&c<b+e-d?l.splice(13,
		3,"L",a+p,c-6,a+p+6,c,a+p,c+6,a+p,b+e-A):t&&0>t&&c>b+d&&c<b+e-d?l.splice(33,3,"L",a,c+6,a-6,c,a,c-6,a,b+A):c&&c>e&&t>a+d&&t<a+p-d?l.splice(23,3,"L",t+6,b+e,t,b+e+6,t-6,b+e,a+A,b+e):c&&0>c&&t>a+d&&t<a+p-d&&l.splice(3,3,"L",t-6,b,t,b-6,t+6,b,p-A,b);return l;}},clipRect:function(b,p,e,c){var A="highcharts-"+a.idCounter++,d=this.createElement("clipPath").attr({id:A}).add(this.defs);b=this.rect(b,p,e,c,0).add(d);b.id=A;b.clipPath=d;b.count=0;return b;},text:function(a,b,e,c){var A=!p&&this.forExport,d={};
		if(c&&(this.allowHTML||!this.forExport))return this.html(a,b,e);d.x=Math.round(b||0);e&&(d.y=Math.round(e));if(a||0===a)d.text=a;a=this.createElement("text").attr(d);A&&a.css({position:"absolute"});c||(a.xSetter=function(a,b,p){var e=p.getElementsByTagName("tspan"),c,A=p.getAttribute(b),d;for(d=0;d<e.length;d++)c=e[d],c.getAttribute(b)===A&&c.setAttribute(b,a);p.setAttribute(b,a);});return a;},fontMetrics:function(a,b){a=a||this.style&&this.style.fontSize;a=/px/.test(a)?G(a):/em/.test(a)?12*parseFloat(a):
		12;b=24>a?a+3:Math.round(1.2*a);return{h:b,b:Math.round(.8*b),f:a};},rotCorr:function(a,b,p){var e=a;b&&p&&(e=Math.max(e*Math.cos(b*v),4));return{x:-a/3*Math.sin(b*v),y:e};},label:function(a,b,p,e,c,A,d,t,l){var y=this,r=y.g("button"!==l&&"label"),g=r.text=y.text("",0,0,d).attr({zIndex:1}),E,u,n=0,K=3,G=0,C,f,h,O,v,I={},P,S,q=/^url\((.*?)\)$/.test(e),N=q,L,m,R,Q;l&&r.addClass("highcharts-"+l);N=q;L=function(){return(P||0)%2/2;};m=function(){var a=g.element.style,b={};u=(void 0===C||void 0===f||v)&&k(g.textStr)&&
g.getBBox();r.width=(C||u.width||0)+2*K+G;r.height=(f||u.height||0)+2*K;S=K+y.fontMetrics(a&&a.fontSize,g).b;N&&(E||(r.box=E=y.symbols[e]||q?y.symbol(e):y.rect(),E.addClass(("button"===l?"":"highcharts-label-box")+(l?" highcharts-"+l+"-box":"")),E.add(r),a=L(),b.x=a,b.y=(t?-S:0)+a),b.width=Math.round(r.width),b.height=Math.round(r.height),E.attr(B(b,I)),I={});};R=function(){var a=G+K,b;b=t?0:S;k(C)&&u&&("center"===v||"right"===v)&&(a+={center:.5,right:1}[v]*(C-u.width));if(a!==g.x||b!==g.y)g.attr("x",
		a),void 0!==b&&g.attr("y",b);g.x=a;g.y=b;};Q=function(a,b){E?E.attr(a,b):I[a]=b;};r.onAdd=function(){g.add(r);r.attr({text:a||0===a?a:"",x:b,y:p});E&&k(c)&&r.attr({anchorX:c,anchorY:A});};r.widthSetter=function(a){C=a;};r.heightSetter=function(a){f=a;};r["text-alignSetter"]=function(a){v=a;};r.paddingSetter=function(a){k(a)&&a!==K&&(K=r.padding=a,R());};r.paddingLeftSetter=function(a){k(a)&&a!==G&&(G=a,R());};r.alignSetter=function(a){a={left:0,center:.5,right:1}[a];a!==n&&(n=a,u&&r.attr({x:h}));};r.textSetter=
function(a){void 0!==a&&g.textSetter(a);m();R();};r["stroke-widthSetter"]=function(a,b){a&&(N=!0);P=this["stroke-width"]=a;Q(b,a);};r.strokeSetter=r.fillSetter=r.rSetter=function(a,b){"fill"===b&&a&&(N=!0);Q(b,a);};r.anchorXSetter=function(a,b){c=a;Q(b,Math.round(a)-L()-h);};r.anchorYSetter=function(a,b){A=a;Q(b,a-O);};r.xSetter=function(a){r.x=a;n&&(a-=n*((C||u.width)+2*K));h=Math.round(a);r.attr("translateX",h);};r.ySetter=function(a){O=r.y=Math.round(a);r.attr("translateY",O);};var T=r.css;return B(r,
		{css:function(a){if(a){var b={};a=x(a);w(r.textProps,function(p){void 0!==a[p]&&(b[p]=a[p],delete a[p]);});g.css(b);}return T.call(r,a);},getBBox:function(){return{width:u.width+2*K,height:u.height+2*K,x:u.x-K,y:u.y-K};},shadow:function(a){a&&(m(),E&&E.shadow(a));return r;},destroy:function(){H(r.element,"mouseenter");H(r.element,"mouseleave");g&&(g=g.destroy());E&&(E=E.destroy());D.prototype.destroy.call(r);r=y=m=R=Q=null;}});}};a.Renderer=z;})(M);(function(a){var D=a.attr,z=a.createElement,F=a.css,J=a.defined,
		m=a.each,f=a.extend,h=a.isFirefox,q=a.isMS,n=a.isWebKit,k=a.pInt,v=a.SVGRenderer,d=a.win,g=a.wrap;f(a.SVGElement.prototype,{htmlCss:function(a){var d=this.element;if(d=a&&"SPAN"===d.tagName&&a.width)delete a.width,this.textWidth=d,this.updateTransform();a&&"ellipsis"===a.textOverflow&&(a.whiteSpace="nowrap",a.overflow="hidden");this.styles=f(this.styles,a);F(this.element,a);return this;},htmlGetBBox:function(){var a=this.element;"text"===a.nodeName&&(a.style.position="absolute");return{x:a.offsetLeft,
		y:a.offsetTop,width:a.offsetWidth,height:a.offsetHeight};},htmlUpdateTransform:function(){if(this.added){var a=this.renderer,d=this.element,c=this.translateX||0,e=this.translateY||0,l=this.x||0,g=this.y||0,f=this.textAlign||"left",b={left:0,center:.5,right:1}[f],t=this.styles;F(d,{marginLeft:c,marginTop:e});this.shadows&&m(this.shadows,function(a){F(a,{marginLeft:c+1,marginTop:e+1});});this.inverted&&m(d.childNodes,function(b){a.invertChild(b,d);});if("SPAN"===d.tagName){var y=this.rotation,K=k(this.textWidth),
		x=t&&t.whiteSpace,h=[y,f,d.innerHTML,this.textWidth,this.textAlign].join();h!==this.cTT&&(t=a.fontMetrics(d.style.fontSize).b,J(y)&&this.setSpanRotation(y,b,t),F(d,{width:"",whiteSpace:x||"nowrap"}),d.offsetWidth>K&&/[ \-]/.test(d.textContent||d.innerText)&&F(d,{width:K+"px",display:"block",whiteSpace:x||"normal"}),this.getSpanCorrection(d.offsetWidth,t,b,y,f));F(d,{left:l+(this.xCorr||0)+"px",top:g+(this.yCorr||0)+"px"});n&&(t=d.offsetHeight);this.cTT=h;}}else this.alignOnAdd=!0;},setSpanRotation:function(a,
		g,c){var e={},l=q?"-ms-transform":n?"-webkit-transform":h?"MozTransform":d.opera?"-o-transform":"";e[l]=e.transform="rotate("+a+"deg)";e[l+(h?"Origin":"-origin")]=e.transformOrigin=100*g+"% "+c+"px";F(this.element,e);},getSpanCorrection:function(a,d,c){this.xCorr=-a*c;this.yCorr=-d;}});f(v.prototype,{html:function(a,d,c){var e=this.createElement("span"),l=e.element,u=e.renderer,k=u.isSVG,b=function(a,b){m(["opacity","visibility"],function(e){g(a,e+"Setter",function(a,e,c,d){a.call(this,e,c,d);b[c]=
e;});});};e.textSetter=function(a){a!==l.innerHTML&&delete this.bBox;l.innerHTML=this.textStr=a;e.htmlUpdateTransform();};k&&b(e,e.element.style);e.xSetter=e.ySetter=e.alignSetter=e.rotationSetter=function(a,b){"align"===b&&(b="textAlign");e[b]=a;e.htmlUpdateTransform();};e.attr({text:a,x:Math.round(d),y:Math.round(c)}).css({fontFamily:this.style.fontFamily,fontSize:this.style.fontSize,position:"absolute"});l.style.whiteSpace="nowrap";e.css=e.htmlCss;k&&(e.add=function(a){var c,d=u.box.parentNode,t=[];
		if(this.parentGroup=a){if(c=a.div,!c){for(;a;)t.push(a),a=a.parentGroup;m(t.reverse(),function(a){var e,t=D(a.element,"class");t&&(t={className:t});c=a.div=a.div||z("div",t,{position:"absolute",left:(a.translateX||0)+"px",top:(a.translateY||0)+"px",display:a.display,opacity:a.opacity,pointerEvents:a.styles&&a.styles.pointerEvents},c||d);e=c.style;f(a,{translateXSetter:function(b,c){e.left=b+"px";a[c]=b;a.doTransform=!0;},translateYSetter:function(b,c){e.top=b+"px";a[c]=b;a.doTransform=!0;}});b(a,e);});}}else c=
d;c.appendChild(l);e.added=!0;e.alignOnAdd&&e.htmlUpdateTransform();return e;});return e;}});})(M);(function(a){var D,z,F=a.createElement,J=a.css,m=a.defined,f=a.deg2rad,h=a.discardElement,q=a.doc,n=a.each,k=a.erase,v=a.extend;D=a.extendClass;var d=a.isArray,g=a.isNumber,w=a.isObject,B=a.merge;z=a.noop;var c=a.pick,e=a.pInt,l=a.SVGElement,u=a.SVGRenderer,L=a.win;a.svg||(z={docMode8:q&&8===q.documentMode,init:function(a,e){var b=["\x3c",e,' filled\x3d"f" stroked\x3d"f"'],c=["position: ","absolute",";"],
		d="div"===e;("shape"===e||d)&&c.push("left:0;top:0;width:1px;height:1px;");c.push("visibility: ",d?"hidden":"visible");b.push(' style\x3d"',c.join(""),'"/\x3e');e&&(b=d||"span"===e||"img"===e?b.join(""):a.prepVML(b),this.element=F(b));this.renderer=a;},add:function(a){var b=this.renderer,e=this.element,c=b.box,d=a&&a.inverted,c=a?a.element||a:c;a&&(this.parentGroup=a);d&&b.invertChild(e,c);c.appendChild(e);this.added=!0;this.alignOnAdd&&!this.deferUpdateTransform&&this.updateTransform();if(this.onAdd)this.onAdd();
		this.className&&this.attr("class",this.className);return this;},updateTransform:l.prototype.htmlUpdateTransform,setSpanRotation:function(){var a=this.rotation,e=Math.cos(a*f),c=Math.sin(a*f);J(this.element,{filter:a?["progid:DXImageTransform.Microsoft.Matrix(M11\x3d",e,", M12\x3d",-c,", M21\x3d",c,", M22\x3d",e,", sizingMethod\x3d'auto expand')"].join(""):"none"});},getSpanCorrection:function(a,e,d,l,g){var b=l?Math.cos(l*f):1,t=l?Math.sin(l*f):0,y=c(this.elemHeight,this.element.offsetHeight),u;this.xCorr=
0>b&&-a;this.yCorr=0>t&&-y;u=0>b*t;this.xCorr+=t*e*(u?1-d:d);this.yCorr-=b*e*(l?u?d:1-d:1);g&&"left"!==g&&(this.xCorr-=a*d*(0>b?-1:1),l&&(this.yCorr-=y*d*(0>t?-1:1)),J(this.element,{textAlign:g}));},pathToVML:function(a){for(var b=a.length,e=[];b--;)g(a[b])?e[b]=Math.round(10*a[b])-5:"Z"===a[b]?e[b]="x":(e[b]=a[b],!a.isArc||"wa"!==a[b]&&"at"!==a[b]||(e[b+5]===e[b+7]&&(e[b+7]+=a[b+7]>a[b+5]?1:-1),e[b+6]===e[b+8]&&(e[b+8]+=a[b+8]>a[b+6]?1:-1)));return e.join(" ")||"x";},clip:function(a){var b=this,e;
		a?(e=a.members,k(e,b),e.push(b),b.destroyClip=function(){k(e,b);},a=a.getCSS(b)):(b.destroyClip&&b.destroyClip(),a={clip:b.docMode8?"inherit":"rect(auto)"});return b.css(a);},css:l.prototype.htmlCss,safeRemoveChild:function(a){a.parentNode&&h(a);},destroy:function(){this.destroyClip&&this.destroyClip();return l.prototype.destroy.apply(this);},on:function(a,e){this.element["on"+a]=function(){var a=L.event;a.target=a.srcElement;e(a);};return this;},cutOffPath:function(a,c){var b;a=a.split(/[ ,]/);b=a.length;
		if(9===b||11===b)a[b-4]=a[b-2]=e(a[b-2])-10*c;return a.join(" ");},shadow:function(a,d,l){var b=[],g,t=this.element,r=this.renderer,u,y=t.style,k,p=t.path,A,n,f,C;p&&"string"!==typeof p.value&&(p="x");n=p;if(a){f=c(a.width,3);C=(a.opacity||.15)/f;for(g=1;3>=g;g++)A=2*f+1-2*g,l&&(n=this.cutOffPath(p.value,A+.5)),k=['\x3cshape isShadow\x3d"true" strokeweight\x3d"',A,'" filled\x3d"false" path\x3d"',n,'" coordsize\x3d"10 10" style\x3d"',t.style.cssText,'" /\x3e'],u=F(r.prepVML(k),null,{left:e(y.left)+
c(a.offsetX,1),top:e(y.top)+c(a.offsetY,1)}),l&&(u.cutOff=A+1),k=['\x3cstroke color\x3d"',a.color||"#000000",'" opacity\x3d"',C*g,'"/\x3e'],F(r.prepVML(k),null,null,u),d?d.element.appendChild(u):t.parentNode.insertBefore(u,t),b.push(u);this.shadows=b;}return this;},updateShadows:z,setAttr:function(a,e){this.docMode8?this.element[a]=e:this.element.setAttribute(a,e);},classSetter:function(a){(this.added?this.element:this).className=a;},dashstyleSetter:function(a,e,c){(c.getElementsByTagName("stroke")[0]||
F(this.renderer.prepVML(["\x3cstroke/\x3e"]),null,null,c))[e]=a||"solid";this[e]=a;},dSetter:function(a,e,c){var b=this.shadows;a=a||[];this.d=a.join&&a.join(" ");c.path=a=this.pathToVML(a);if(b)for(c=b.length;c--;)b[c].path=b[c].cutOff?this.cutOffPath(a,b[c].cutOff):a;this.setAttr(e,a);},fillSetter:function(a,e,c){var b=c.nodeName;"SPAN"===b?c.style.color=a:"IMG"!==b&&(c.filled="none"!==a,this.setAttr("fillcolor",this.renderer.color(a,c,e,this)));},"fill-opacitySetter":function(a,e,c){F(this.renderer.prepVML(["\x3c",
		e.split("-")[0],' opacity\x3d"',a,'"/\x3e']),null,null,c);},opacitySetter:z,rotationSetter:function(a,e,c){c=c.style;this[e]=c[e]=a;c.left=-Math.round(Math.sin(a*f)+1)+"px";c.top=Math.round(Math.cos(a*f))+"px";},strokeSetter:function(a,e,c){this.setAttr("strokecolor",this.renderer.color(a,c,e,this));},"stroke-widthSetter":function(a,e,c){c.stroked=!!a;this[e]=a;g(a)&&(a+="px");this.setAttr("strokeweight",a);},titleSetter:function(a,e){this.setAttr(e,a);},visibilitySetter:function(a,e,c){"inherit"===a&&
(a="visible");this.shadows&&n(this.shadows,function(b){b.style[e]=a;});"DIV"===c.nodeName&&(a="hidden"===a?"-999em":0,this.docMode8||(c.style[e]=a?"visible":"hidden"),e="top");c.style[e]=a;},xSetter:function(a,e,c){this[e]=a;"x"===e?e="left":"y"===e&&(e="top");this.updateClipping?(this[e]=a,this.updateClipping()):c.style[e]=a;},zIndexSetter:function(a,e,c){c.style[e]=a;}},z["stroke-opacitySetter"]=z["fill-opacitySetter"],a.VMLElement=z=D(l,z),z.prototype.ySetter=z.prototype.widthSetter=z.prototype.heightSetter=
z.prototype.xSetter,z={Element:z,isIE8:-1<L.navigator.userAgent.indexOf("MSIE 8.0"),init:function(a,e,c){var b,d;this.alignedObjects=[];b=this.createElement("div").css({position:"relative"});d=b.element;a.appendChild(b.element);this.isVML=!0;this.box=d;this.boxWrapper=b;this.gradients={};this.cache={};this.cacheKeys=[];this.imgCount=0;this.setSize(e,c,!1);if(!q.namespaces.hcv){q.namespaces.add("hcv","urn:schemas-microsoft-com:vml");try{q.createStyleSheet().cssText="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } ";}catch(I){q.styleSheets[0].cssText+=
"hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } ";}}},isHidden:function(){return!this.box.offsetWidth;},clipRect:function(a,e,c,d){var b=this.createElement(),l=w(a);return v(b,{members:[],count:0,left:(l?a.x:a)+1,top:(l?a.y:e)+1,width:(l?a.width:c)-1,height:(l?a.height:d)-1,getCSS:function(a){var b=a.element,e=b.nodeName,c=a.inverted,p=this.top-("shape"===e?b.offsetTop:0),d=this.left,b=d+this.width,l=p+this.height,p={clip:"rect("+Math.round(c?
		d:p)+"px,"+Math.round(c?l:b)+"px,"+Math.round(c?b:l)+"px,"+Math.round(c?p:d)+"px)"};!c&&a.docMode8&&"DIV"===e&&v(p,{width:b+"px",height:l+"px"});return p;},updateClipping:function(){n(b.members,function(a){a.element&&a.css(b.getCSS(a));});}});},color:function(b,e,c,d){var l=this,g,r=/^rgba/,u,t,k="none";b&&b.linearGradient?t="gradient":b&&b.radialGradient&&(t="pattern");if(t){var p,A,f=b.linearGradient||b.radialGradient,h,C,E,y,w,v="";b=b.stops;var K,B=[],q=function(){u=['\x3cfill colors\x3d"'+B.join(",")+
'" opacity\x3d"',E,'" o:opacity2\x3d"',C,'" type\x3d"',t,'" ',v,'focus\x3d"100%" method\x3d"any" /\x3e'];F(l.prepVML(u),null,null,e);};h=b[0];K=b[b.length-1];0<h[0]&&b.unshift([0,h[1]]);1>K[0]&&b.push([1,K[1]]);n(b,function(b,e){r.test(b[1])?(g=a.color(b[1]),p=g.get("rgb"),A=g.get("a")):(p=b[1],A=1);B.push(100*b[0]+"% "+p);e?(E=A,y=p):(C=A,w=p);});if("fill"===c)if("gradient"===t)c=f.x1||f[0]||0,b=f.y1||f[1]||0,h=f.x2||f[2]||0,f=f.y2||f[3]||0,v='angle\x3d"'+(90-180*Math.atan((f-b)/(h-c))/Math.PI)+'"',
	q();else{var k=f.r,L=2*k,m=2*k,z=f.cx,D=f.cy,J=e.radialReference,U,k=function(){J&&(U=d.getBBox(),z+=(J[0]-U.x)/U.width-.5,D+=(J[1]-U.y)/U.height-.5,L*=J[2]/U.width,m*=J[2]/U.height);v='src\x3d"'+a.getOptions().global.VMLRadialGradientURL+'" size\x3d"'+L+","+m+'" origin\x3d"0.5,0.5" position\x3d"'+z+","+D+'" color2\x3d"'+w+'" ';q();};d.added?k():d.onAdd=k;k=y;}else k=p;}else r.test(b)&&"IMG"!==e.tagName?(g=a.color(b),d[c+"-opacitySetter"](g.get("a"),c,e),k=g.get("rgb")):(k=e.getElementsByTagName(c),
	k.length&&(k[0].opacity=1,k[0].type="solid"),k=b);return k;},prepVML:function(a){var b=this.isIE8;a=a.join("");b?(a=a.replace("/\x3e",' xmlns\x3d"urn:schemas-microsoft-com:vml" /\x3e'),a=-1===a.indexOf('style\x3d"')?a.replace("/\x3e",' style\x3d"display:inline-block;behavior:url(#default#VML);" /\x3e'):a.replace('style\x3d"','style\x3d"display:inline-block;behavior:url(#default#VML);')):a=a.replace("\x3c","\x3chcv:");return a;},text:u.prototype.html,path:function(a){var b={coordsize:"10 10"};d(a)?b.d=
a:w(a)&&v(b,a);return this.createElement("shape").attr(b);},circle:function(a,e,c){var b=this.symbol("circle");w(a)&&(c=a.r,e=a.y,a=a.x);b.isCircle=!0;b.r=c;return b.attr({x:a,y:e});},g:function(a){var b;a&&(b={className:"highcharts-"+a,"class":"highcharts-"+a});return this.createElement("div").attr(b);},image:function(a,e,c,d,l){var b=this.createElement("img").attr({src:a});1<arguments.length&&b.attr({x:e,y:c,width:d,height:l});return b;},createElement:function(a){return"rect"===a?this.symbol(a):u.prototype.createElement.call(this,
		a);},invertChild:function(a,c){var b=this;c=c.style;var d="IMG"===a.tagName&&a.style;J(a,{flip:"x",left:e(c.width)-(d?e(d.top):1),top:e(c.height)-(d?e(d.left):1),rotation:-90});n(a.childNodes,function(e){b.invertChild(e,a);});},symbols:{arc:function(a,e,c,d,l){var b=l.start,g=l.end,u=l.r||c||d;c=l.innerR;d=Math.cos(b);var k=Math.sin(b),t=Math.cos(g),p=Math.sin(g);if(0===g-b)return["x"];b=["wa",a-u,e-u,a+u,e+u,a+u*d,e+u*k,a+u*t,e+u*p];l.open&&!c&&b.push("e","M",a,e);b.push("at",a-c,e-c,a+c,e+c,a+c*t,
		e+c*p,a+c*d,e+c*k,"x","e");b.isArc=!0;return b;},circle:function(a,e,c,d,l){l&&m(l.r)&&(c=d=2*l.r);l&&l.isCircle&&(a-=c/2,e-=d/2);return["wa",a,e,a+c,e+d,a+c,e+d/2,a+c,e+d/2,"e"];},rect:function(a,e,c,d,l){return u.prototype.symbols[m(l)&&l.r?"callout":"square"].call(0,a,e,c,d,l);}}},a.VMLRenderer=D=function(){this.init.apply(this,arguments);},D.prototype=B(u.prototype,z),a.Renderer=D);u.prototype.measureSpanWidth=function(a,e){var b=q.createElement("span");a=q.createTextNode(a);b.appendChild(a);J(b,
		e);this.box.appendChild(b);e=b.offsetWidth;h(b);return e;};})(M);(function(a){function D(){var q=a.defaultOptions.global,n,k=q.useUTC,v=k?"getUTC":"get",d=k?"setUTC":"set";a.Date=n=q.Date||h.Date;n.hcTimezoneOffset=k&&q.timezoneOffset;n.hcGetTimezoneOffset=k&&q.getTimezoneOffset;n.hcMakeTime=function(a,d,h,c,e,l){var g;k?(g=n.UTC.apply(0,arguments),g+=J(g)):g=(new n(a,d,f(h,1),f(c,0),f(e,0),f(l,0))).getTime();return g;};F("Minutes Hours Day Date Month FullYear".split(" "),function(a){n["hcGet"+a]=v+
a;});F("Milliseconds Seconds Minutes Hours Date Month FullYear".split(" "),function(a){n["hcSet"+a]=d+a;});}var z=a.color,F=a.each,J=a.getTZOffset,m=a.merge,f=a.pick,h=a.win;a.defaultOptions={colors:"#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1".split(" "),symbols:["circle","diamond","square","triangle","triangle-down"],lang:{loading:"Loading...",months:"January February March April May June July August September October November December".split(" "),shortMonths:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
		weekdays:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),decimalPoint:".",numericSymbols:"kMGTPE".split(""),resetZoom:"Reset zoom",resetZoomTitle:"Reset zoom level 1:1",thousandsSep:" "},global:{useUTC:!0,VMLRadialGradientURL:"http://code.highcharts.com/5.0.2/gfx/vml-radial-gradient.png"},chart:{borderRadius:0,defaultSeriesType:"line",ignoreHiddenSeries:!0,spacing:[10,10,15,10],resetZoomButton:{theme:{zIndex:20},position:{align:"right",x:-10,y:10}},width:null,height:null,borderColor:"#335cad",
		backgroundColor:"#ffffff",plotBorderColor:"#cccccc"},title:{text:"Chart title",align:"center",margin:15,style:{color:"#333333",fontSize:"18px"},widthAdjust:-44},subtitle:{text:"",align:"center",style:{color:"#666666"},widthAdjust:-44},plotOptions:{},labels:{style:{position:"absolute",color:"#333333"}},legend:{enabled:!0,align:"center",layout:"horizontal",labelFormatter:function(){return this.name;},borderColor:"#999999",borderRadius:0,navigation:{activeColor:"#003399",inactiveColor:"#cccccc"},itemStyle:{color:"#333333",
		fontSize:"12px",fontWeight:"bold"},itemHoverStyle:{color:"#000000"},itemHiddenStyle:{color:"#cccccc"},shadow:!1,itemCheckboxStyle:{position:"absolute",width:"13px",height:"13px"},squareSymbol:!0,symbolPadding:5,verticalAlign:"bottom",x:0,y:0,title:{style:{fontWeight:"bold"}}},loading:{labelStyle:{fontWeight:"bold",position:"relative",top:"45%"},style:{position:"absolute",backgroundColor:"#ffffff",opacity:.5,textAlign:"center"}},tooltip:{enabled:!0,animation:a.svg,borderRadius:3,dateTimeLabelFormats:{millisecond:"%A, %b %e, %H:%M:%S.%L",
		second:"%A, %b %e, %H:%M:%S",minute:"%A, %b %e, %H:%M",hour:"%A, %b %e, %H:%M",day:"%A, %b %e, %Y",week:"Week from %A, %b %e, %Y",month:"%B %Y",year:"%Y"},footerFormat:"",padding:8,snap:a.isTouchDevice?25:10,backgroundColor:z("#f7f7f7").setOpacity(.85).get(),borderWidth:1,headerFormat:'\x3cspan style\x3d"font-size: 10px"\x3e{point.key}\x3c/span\x3e\x3cbr/\x3e',pointFormat:'\x3cspan style\x3d"color:{point.color}"\x3e\u25cf\x3c/span\x3e {series.name}: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3e',shadow:!0,
	style:{color:"#333333",cursor:"default",fontSize:"12px",pointerEvents:"none",whiteSpace:"nowrap"}},credits:{enabled:!0,href:"http://www.highcharts.com",position:{align:"right",x:-10,verticalAlign:"bottom",y:-5},style:{cursor:"pointer",color:"#999999",fontSize:"9px"},text:"Highcharts.com"}};a.setOptions=function(f){a.defaultOptions=m(!0,a.defaultOptions,f);D();return a.defaultOptions;};a.getOptions=function(){return a.defaultOptions;};a.defaultPlotOptions=a.defaultOptions.plotOptions;D();})(M);(function(a){var D=
a.arrayMax,z=a.arrayMin,F=a.defined,J=a.destroyObjectProperties,m=a.each,f=a.erase,h=a.merge,q=a.pick;a.PlotLineOrBand=function(a,k){this.axis=a;k&&(this.options=k,this.id=k.id);};a.PlotLineOrBand.prototype={render:function(){var a=this,k=a.axis,f=k.horiz,d=a.options,g=d.label,w=a.label,B=d.to,c=d.from,e=d.value,l=F(c)&&F(B),u=F(e),L=a.svgElem,b=!L,t=[],y,K=d.color,x=q(d.zIndex,0),m=d.events,t={"class":"highcharts-plot-"+(l?"band ":"line ")+(d.className||"")},r={},G=k.chart.renderer,H=l?"bands":"lines",
		N=k.log2lin;k.isLog&&(c=N(c),B=N(B),e=N(e));u?(t={stroke:K,"stroke-width":d.width},d.dashStyle&&(t.dashstyle=d.dashStyle)):l&&(K&&(t.fill=K),d.borderWidth&&(t.stroke=d.borderColor,t["stroke-width"]=d.borderWidth));r.zIndex=x;H+="-"+x;(K=k[H])||(k[H]=K=G.g("plot-"+H).attr(r).add());b&&(a.svgElem=L=G.path().attr(t).add(K));if(u)t=k.getPlotLinePath(e,L.strokeWidth());else if(l)t=k.getPlotBandPath(c,B,d);else return;if(b&&t&&t.length){if(L.attr({d:t}),m)for(y in d=function(b){L.on(b,function(e){m[b].apply(a,
		[e]);});},m)d(y);}else L&&(t?(L.show(),L.animate({d:t})):(L.hide(),w&&(a.label=w=w.destroy())));g&&F(g.text)&&t&&t.length&&0<k.width&&0<k.height&&!t.flat?(g=h({align:f&&l&&"center",x:f?!l&&4:10,verticalAlign:!f&&l&&"middle",y:f?l?16:10:l?6:-4,rotation:f&&!l&&90},g),this.renderLabel(g,t,l,x)):w&&w.hide();return a;},renderLabel:function(a,k,f,d){var g=this.label,h=this.axis.chart.renderer;g||(g={align:a.textAlign||a.align,rotation:a.rotation,"class":"highcharts-plot-"+(f?"band":"line")+"-label "+(a.className||
"")},g.zIndex=d,this.label=g=h.text(a.text,0,0,a.useHTML).attr(g).add(),g.css(a.style));d=[k[1],k[4],f?k[6]:k[1]];k=[k[2],k[5],f?k[7]:k[2]];f=z(d);h=z(k);g.align(a,!1,{x:f,y:h,width:D(d)-f,height:D(k)-h});g.show();},destroy:function(){f(this.axis.plotLinesAndBands,this);delete this.axis;J(this);}};a.AxisPlotLineOrBandExtension={getPlotBandPath:function(a,k){k=this.getPlotLinePath(k,null,null,!0);(a=this.getPlotLinePath(a,null,null,!0))&&k?(a.flat=a.toString()===k.toString(),a.push(k[4],k[5],k[1],k[2])):
		a=null;return a;},addPlotBand:function(a){return this.addPlotBandOrLine(a,"plotBands");},addPlotLine:function(a){return this.addPlotBandOrLine(a,"plotLines");},addPlotBandOrLine:function(f,k){var h=(new a.PlotLineOrBand(this,f)).render(),d=this.userOptions;h&&(k&&(d[k]=d[k]||[],d[k].push(f)),this.plotLinesAndBands.push(h));return h;},removePlotBandOrLine:function(a){for(var k=this.plotLinesAndBands,h=this.options,d=this.userOptions,g=k.length;g--;)k[g].id===a&&k[g].destroy();m([h.plotLines||[],d.plotLines||
[],h.plotBands||[],d.plotBands||[]],function(d){for(g=d.length;g--;)d[g].id===a&&f(d,d[g]);});}};})(M);(function(a){var D=a.correctFloat,z=a.defined,F=a.destroyObjectProperties,J=a.isNumber,m=a.merge,f=a.pick,h=a.stop,q=a.deg2rad;a.Tick=function(a,k,f,d){this.axis=a;this.pos=k;this.type=f||"";this.isNew=!0;f||d||this.addLabel();};a.Tick.prototype={addLabel:function(){var a=this.axis,k=a.options,h=a.chart,d=a.categories,g=a.names,w=this.pos,B=k.labels,c=a.tickPositions,e=w===c[0],l=w===c[c.length-1],g=
d?f(d[w],g[w],w):w,d=this.label,c=c.info,u;a.isDatetimeAxis&&c&&(u=k.dateTimeLabelFormats[c.higherRanks[w]||c.unitName]);this.isFirst=e;this.isLast=l;k=a.labelFormatter.call({axis:a,chart:h,isFirst:e,isLast:l,dateTimeLabelFormat:u,value:a.isLog?D(a.lin2log(g)):g});z(d)?d&&d.attr({text:k}):(this.labelLength=(this.label=d=z(k)&&B.enabled?h.renderer.text(k,0,0,B.useHTML).css(m(B.style)).add(a.labelGroup):null)&&d.getBBox().width,this.rotation=0);},getLabelSize:function(){return this.label?this.label.getBBox()[this.axis.horiz?
		"height":"width"]:0;},handleOverflow:function(a){var k=this.axis,h=a.x,d=k.chart.chartWidth,g=k.chart.spacing,w=f(k.labelLeft,Math.min(k.pos,g[3])),g=f(k.labelRight,Math.max(k.pos+k.len,d-g[1])),n=this.label,c=this.rotation,e={left:0,center:.5,right:1}[k.labelAlign],l=n.getBBox().width,u=k.getSlotWidth(),m=u,b=1,t,y={};if(c)0>c&&h-e*l<w?t=Math.round(h/Math.cos(c*q)-w):0<c&&h+e*l>g&&(t=Math.round((d-h)/Math.cos(c*q)));else if(d=h+(1-e)*l,h-e*l<w?m=a.x+m*(1-e)-w:d>g&&(m=g-a.x+m*e,b=-1),m=Math.min(u,
		m),m<u&&"center"===k.labelAlign&&(a.x+=b*(u-m-e*(u-Math.min(l,m)))),l>m||k.autoRotation&&(n.styles||{}).width)t=m;t&&(y.width=t,(k.options.labels.style||{}).textOverflow||(y.textOverflow="ellipsis"),n.css(y));},getPosition:function(a,k,f,d){var g=this.axis,h=g.chart,n=d&&h.oldChartHeight||h.chartHeight;return{x:a?g.translate(k+f,null,null,d)+g.transB:g.left+g.offset+(g.opposite?(d&&h.oldChartWidth||h.chartWidth)-g.right-g.left:0),y:a?n-g.bottom+g.offset-(g.opposite?g.height:0):n-g.translate(k+f,null,
		null,d)-g.transB};},getLabelPosition:function(a,k,f,d,g,h,B,c){var e=this.axis,l=e.transA,u=e.reversed,w=e.staggerLines,b=e.tickRotCorr||{x:0,y:0},t=g.y;z(t)||(t=0===e.side?f.rotation?-8:-f.getBBox().height:2===e.side?b.y+8:Math.cos(f.rotation*q)*(b.y-f.getBBox(!1,0).height/2));a=a+g.x+b.x-(h&&d?h*l*(u?-1:1):0);k=k+t-(h&&!d?h*l*(u?1:-1):0);w&&(f=B/(c||1)%w,e.opposite&&(f=w-f-1),k+=e.labelOffset/w*f);return{x:a,y:Math.round(k)};},getMarkPath:function(a,f,h,d,g,w){return w.crispLine(["M",a,f,"L",a+(g?
		0:-h),f+(g?h:0)],d);},render:function(a,k,v){var d=this.axis,g=d.options,w=d.chart.renderer,n=d.horiz,c=this.type,e=this.label,l=this.pos,u=g.labels,q=this.gridLine,b=c?c+"Tick":"tick",t=d.tickSize(b),y=this.mark,K=!y,x=u.step,m={},r=!0,G=d.tickmarkOffset,H=this.getPosition(n,l,G,k),N=H.x,H=H.y,p=n&&N===d.pos+d.len||!n&&H===d.pos?-1:1,A=c?c+"Grid":"grid",P=g[A+"LineWidth"],O=g[A+"LineColor"],C=g[A+"LineDashStyle"],A=f(g[b+"Width"],!c&&d.isXAxis?1:0),b=g[b+"Color"];v=f(v,1);this.isActive=!0;q||(m.stroke=
O,m["stroke-width"]=P,C&&(m.dashstyle=C),c||(m.zIndex=1),k&&(m.opacity=0),this.gridLine=q=w.path().attr(m).addClass("highcharts-"+(c?c+"-":"")+"grid-line").add(d.gridGroup));if(!k&&q&&(l=d.getPlotLinePath(l+G,q.strokeWidth()*p,k,!0)))q[this.isNew?"attr":"animate"]({d:l,opacity:v});t&&(d.opposite&&(t[0]=-t[0]),K&&(this.mark=y=w.path().addClass("highcharts-"+(c?c+"-":"")+"tick").add(d.axisGroup),y.attr({stroke:b,"stroke-width":A})),y[K?"attr":"animate"]({d:this.getMarkPath(N,H,t[0],y.strokeWidth()*
p,n,w),opacity:v}));e&&J(N)&&(e.xy=H=this.getLabelPosition(N,H,e,n,u,G,a,x),this.isFirst&&!this.isLast&&!f(g.showFirstLabel,1)||this.isLast&&!this.isFirst&&!f(g.showLastLabel,1)?r=!1:!n||d.isRadial||u.step||u.rotation||k||0===v||this.handleOverflow(H),x&&a%x&&(r=!1),r&&J(H.y)?(H.opacity=v,e[this.isNew?"attr":"animate"](H)):(h(e),e.attr("y",-9999)),this.isNew=!1);},destroy:function(){F(this,this.axis);}};})(M);(function(a){var D=a.addEvent,z=a.animObject,F=a.arrayMax,J=a.arrayMin,m=a.AxisPlotLineOrBandExtension,
		f=a.color,h=a.correctFloat,q=a.defaultOptions,n=a.defined,k=a.deg2rad,v=a.destroyObjectProperties,d=a.each,g=a.error,w=a.extend,B=a.fireEvent,c=a.format,e=a.getMagnitude,l=a.grep,u=a.inArray,L=a.isArray,b=a.isNumber,t=a.isString,y=a.merge,K=a.normalizeTickInterval,x=a.pick,I=a.PlotLineOrBand,r=a.removeEvent,G=a.splat,H=a.syncTimeout,N=a.Tick;a.Axis=function(){this.init.apply(this,arguments);};a.Axis.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:"%H:%M:%S.%L",second:"%H:%M:%S",minute:"%H:%M",
		hour:"%H:%M",day:"%e. %b",week:"%e. %b",month:"%b '%y",year:"%Y"},endOnTick:!1,labels:{enabled:!0,style:{color:"#666666",cursor:"default",fontSize:"11px"},x:0},minPadding:.01,maxPadding:.01,minorTickLength:2,minorTickPosition:"outside",startOfWeek:1,startOnTick:!1,tickLength:10,tickmarkPlacement:"between",tickPixelInterval:100,tickPosition:"outside",title:{align:"middle",style:{color:"#666666"}},type:"linear",minorGridLineColor:"#f2f2f2",minorGridLineWidth:1,minorTickColor:"#999999",lineColor:"#ccd6eb",
	lineWidth:1,gridLineColor:"#e6e6e6",tickColor:"#ccd6eb"},defaultYAxisOptions:{endOnTick:!0,tickPixelInterval:72,showLastLabel:!0,labels:{x:-8},maxPadding:.05,minPadding:.05,startOnTick:!0,title:{rotation:270,text:"Values"},stackLabels:{enabled:!1,formatter:function(){return a.numberFormat(this.total,-1);},style:{fontSize:"11px",fontWeight:"bold",color:"#000000",textShadow:"1px 1px contrast, -1px -1px contrast, -1px 1px contrast, 1px -1px contrast"}},gridLineWidth:1,lineWidth:0},defaultLeftAxisOptions:{labels:{x:-15},
		title:{rotation:270}},defaultRightAxisOptions:{labels:{x:15},title:{rotation:90}},defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0},title:{rotation:0}},defaultTopAxisOptions:{labels:{autoRotation:[-45],x:0},title:{rotation:0}},init:function(a,b){var e=b.isX;this.chart=a;this.horiz=a.inverted?!e:e;this.isXAxis=e;this.coll=this.coll||(e?"xAxis":"yAxis");this.opposite=b.opposite;this.side=b.side||(this.horiz?this.opposite?0:2:this.opposite?1:3);this.setOptions(b);var c=this.options,p=c.type;
		this.labelFormatter=c.labels.formatter||this.defaultLabelFormatter;this.userOptions=b;this.minPixelPadding=0;this.reversed=c.reversed;this.visible=!1!==c.visible;this.zoomEnabled=!1!==c.zoomEnabled;this.hasNames="category"===p||!0===c.categories;this.categories=c.categories||this.hasNames;this.names=this.names||[];this.isLog="logarithmic"===p;this.isDatetimeAxis="datetime"===p;this.isLinked=n(c.linkedTo);this.ticks={};this.labelEdge=[];this.minorTicks={};this.plotLinesAndBands=[];this.alternateBands=
{};this.len=0;this.minRange=this.userMinRange=c.minRange||c.maxZoom;this.range=c.range;this.offset=c.offset||0;this.stacks={};this.oldStacks={};this.stacksTouched=0;this.min=this.max=null;this.crosshair=x(c.crosshair,G(a.options.tooltip.crosshairs)[e?0:1],!1);var d;b=this.options.events;-1===u(this,a.axes)&&(e?a.axes.splice(a.xAxis.length,0,this):a.axes.push(this),a[this.coll].push(this));this.series=this.series||[];a.inverted&&e&&void 0===this.reversed&&(this.reversed=!0);this.removePlotLine=this.removePlotBand=
this.removePlotBandOrLine;for(d in b)D(this,d,b[d]);this.isLog&&(this.val2lin=this.log2lin,this.lin2val=this.lin2log);},setOptions:function(a){this.options=y(this.defaultOptions,"yAxis"===this.coll&&this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],y(q[this.coll],a));},defaultLabelFormatter:function(){var b=this.axis,e=this.value,d=b.categories,l=this.dateTimeLabelFormat,g=q.lang.numericSymbols,r=g&&
g.length,u,f=b.options.labels.format,b=b.isLog?e:b.tickInterval;if(f)u=c(f,this);else if(d)u=e;else if(l)u=a.dateFormat(l,e);else if(r&&1E3<=b)for(;r--&&void 0===u;)d=Math.pow(1E3,r+1),b>=d&&0===10*e%d&&null!==g[r]&&0!==e&&(u=a.numberFormat(e/d,-1)+g[r]);void 0===u&&(u=1E4<=Math.abs(e)?a.numberFormat(e,-1):a.numberFormat(e,-1,void 0,""));return u;},getSeriesExtremes:function(){var a=this,e=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.threshold=null;a.softThreshold=!a.isXAxis;a.buildStacks&&
a.buildStacks();d(a.series,function(c){if(c.visible||!e.options.chart.ignoreHiddenSeries){var p=c.options,d=p.threshold,A;a.hasVisibleSeries=!0;a.isLog&&0>=d&&(d=null);if(a.isXAxis)p=c.xData,p.length&&(c=J(p),b(c)||c instanceof Date||(p=l(p,function(a){return b(a);}),c=J(p)),a.dataMin=Math.min(x(a.dataMin,p[0]),c),a.dataMax=Math.max(x(a.dataMax,p[0]),F(p)));else if(c.getExtremes(),A=c.dataMax,c=c.dataMin,n(c)&&n(A)&&(a.dataMin=Math.min(x(a.dataMin,c),c),a.dataMax=Math.max(x(a.dataMax,A),A)),n(d)&&
(a.threshold=d),!p.softThreshold||a.isLog)a.softThreshold=!1;}});},translate:function(a,e,c,d,l,g){var p=this.linkedParent||this,A=1,r=0,u=d?p.oldTransA:p.transA;d=d?p.oldMin:p.min;var E=p.minPixelPadding;l=(p.isOrdinal||p.isBroken||p.isLog&&l)&&p.lin2val;u||(u=p.transA);c&&(A*=-1,r=p.len);p.reversed&&(A*=-1,r-=A*(p.sector||p.len));e?(a=(a*A+r-E)/u+d,l&&(a=p.lin2val(a))):(l&&(a=p.val2lin(a)),"between"===g&&(g=.5),a=A*(a-d)*u+r+A*E+(b(g)?u*g*p.pointRange:0));return a;},toPixels:function(a,b){return this.translate(a,
		!1,!this.horiz,null,!0)+(b?0:this.pos);},toValue:function(a,b){return this.translate(a-(b?0:this.pos),!0,!this.horiz,null,!0);},getPlotLinePath:function(a,e,c,d,l){var p=this.chart,A=this.left,g=this.top,r,u,f=c&&p.oldChartHeight||p.chartHeight,k=c&&p.oldChartWidth||p.chartWidth,h;r=this.transB;var t=function(a,b,e){if(a<b||a>e)d?a=Math.min(Math.max(b,a),e):h=!0;return a;};l=x(l,this.translate(a,null,null,c));a=c=Math.round(l+r);r=u=Math.round(f-l-r);b(l)?this.horiz?(r=g,u=f-this.bottom,a=c=t(a,A,A+
this.width)):(a=A,c=k-this.right,r=u=t(r,g,g+this.height)):h=!0;return h&&!d?null:p.renderer.crispLine(["M",a,r,"L",c,u],e||1);},getLinearTickPositions:function(a,e,c){var p,d=h(Math.floor(e/a)*a),A=h(Math.ceil(c/a)*a),l=[];if(e===c&&b(e))return[e];for(e=d;e<=A;){l.push(e);e=h(e+a);if(e===p)break;p=e;}return l;},getMinorTickPositions:function(){var a=this.options,b=this.tickPositions,e=this.minorTickInterval,c=[],d,l=this.pointRangePadding||0;d=this.min-l;var l=this.max+l,g=l-d;if(g&&g/e<this.len/3)if(this.isLog)for(l=
b.length,d=1;d<l;d++)c=c.concat(this.getLogTickPositions(e,b[d-1],b[d],!0));else if(this.isDatetimeAxis&&"auto"===a.minorTickInterval)c=c.concat(this.getTimeTicks(this.normalizeTimeTickInterval(e),d,l,a.startOfWeek));else for(b=d+(b[0]-d)%e;b<=l;b+=e)c.push(b);0!==c.length&&this.trimTicks(c,a.startOnTick,a.endOnTick);return c;},adjustForMinRange:function(){var a=this.options,b=this.min,e=this.max,c,l=this.dataMax-this.dataMin>=this.minRange,g,r,u,f,k,h;this.isXAxis&&void 0===this.minRange&&!this.isLog&&
(n(a.min)||n(a.max)?this.minRange=null:(d(this.series,function(a){f=a.xData;for(r=k=a.xIncrement?1:f.length-1;0<r;r--)if(u=f[r]-f[r-1],void 0===g||u<g)g=u;}),this.minRange=Math.min(5*g,this.dataMax-this.dataMin)));e-b<this.minRange&&(h=this.minRange,c=(h-e+b)/2,c=[b-c,x(a.min,b-c)],l&&(c[2]=this.isLog?this.log2lin(this.dataMin):this.dataMin),b=F(c),e=[b+h,x(a.max,b+h)],l&&(e[2]=this.isLog?this.log2lin(this.dataMax):this.dataMax),e=J(e),e-b<h&&(c[0]=e-h,c[1]=x(a.min,e-h),b=F(c)));this.min=b;this.max=
e;},getClosest:function(){var a;this.categories?a=1:d(this.series,function(b){var e=b.closestPointRange;!b.noSharedTooltip&&n(e)&&(a=n(a)?Math.min(a,e):e);});return a;},nameToX:function(a){var b=L(this.categories),e=b?this.categories:this.names,c=a.options.x,p;a.series.requireSorting=!1;n(c)||(c=!1===this.options.uniqueNames?a.series.autoIncrement():u(a.name,e));-1===c?b||(p=e.length):p=c;this.names[p]=a.name;return p;},updateNames:function(){var a=this;0<this.names.length&&(this.names.length=0,this.minRange=
void 0,d(this.series||[],function(b){if(!b.points||b.isDirtyData)b.processData(),b.generatePoints();d(b.points,function(e,c){var p;e.options&&void 0===e.options.x&&(p=a.nameToX(e),p!==e.x&&(e.x=p,b.xData[c]=p));});}));},setAxisTranslation:function(a){var b=this,e=b.max-b.min,c=b.axisPointRange||0,p,l=0,g=0,r=b.linkedParent,u=!!b.categories,f=b.transA,h=b.isXAxis;if(h||u||c)r?(l=r.minPointOffset,g=r.pointRangePadding):(p=b.getClosest(),d(b.series,function(a){var e=u?1:h?x(a.options.pointRange,p,0):b.axisPointRange||
0;a=a.options.pointPlacement;c=Math.max(c,e);b.single||(l=Math.max(l,t(a)?0:e/2),g=Math.max(g,"on"===a?0:e));})),r=b.ordinalSlope&&p?b.ordinalSlope/p:1,b.minPointOffset=l*=r,b.pointRangePadding=g*=r,b.pointRange=Math.min(c,e),h&&(b.closestPointRange=p);a&&(b.oldTransA=f);b.translationSlope=b.transA=f=b.len/(e+g||1);b.transB=b.horiz?b.left:b.bottom;b.minPixelPadding=f*l;},minFromRange:function(){return this.max-this.range;},setTickInterval:function(a){var c=this,p=c.chart,l=c.options,r=c.isLog,u=c.log2lin,
		f=c.isDatetimeAxis,k=c.isXAxis,t=c.isLinked,H=l.maxPadding,w=l.minPadding,y=l.tickInterval,G=l.tickPixelInterval,v=c.categories,q=c.threshold,m=c.softThreshold,I,L,N,z;f||v||t||this.getTickAmount();N=x(c.userMin,l.min);z=x(c.userMax,l.max);t?(c.linkedParent=p[c.coll][l.linkedTo],p=c.linkedParent.getExtremes(),c.min=x(p.min,p.dataMin),c.max=x(p.max,p.dataMax),l.type!==c.linkedParent.options.type&&g(11,1)):(!m&&n(q)&&(c.dataMin>=q?(I=q,w=0):c.dataMax<=q&&(L=q,H=0)),c.min=x(N,I,c.dataMin),c.max=x(z,
		L,c.dataMax));r&&(!a&&0>=Math.min(c.min,x(c.dataMin,c.min))&&g(10,1),c.min=h(u(c.min),15),c.max=h(u(c.max),15));c.range&&n(c.max)&&(c.userMin=c.min=N=Math.max(c.min,c.minFromRange()),c.userMax=z=c.max,c.range=null);B(c,"foundExtremes");c.beforePadding&&c.beforePadding();c.adjustForMinRange();!(v||c.axisPointRange||c.usePercentage||t)&&n(c.min)&&n(c.max)&&(u=c.max-c.min)&&(!n(N)&&w&&(c.min-=u*w),!n(z)&&H&&(c.max+=u*H));b(l.floor)?c.min=Math.max(c.min,l.floor):b(l.softMin)&&(c.min=Math.min(c.min,l.softMin));
	b(l.ceiling)?c.max=Math.min(c.max,l.ceiling):b(l.softMax)&&(c.max=Math.max(c.max,l.softMax));m&&n(c.dataMin)&&(q=q||0,!n(N)&&c.min<q&&c.dataMin>=q?c.min=q:!n(z)&&c.max>q&&c.dataMax<=q&&(c.max=q));c.tickInterval=c.min===c.max||void 0===c.min||void 0===c.max?1:t&&!y&&G===c.linkedParent.options.tickPixelInterval?y=c.linkedParent.tickInterval:x(y,this.tickAmount?(c.max-c.min)/Math.max(this.tickAmount-1,1):void 0,v?1:(c.max-c.min)*G/Math.max(c.len,G));k&&!a&&d(c.series,function(a){a.processData(c.min!==
c.oldMin||c.max!==c.oldMax);});c.setAxisTranslation(!0);c.beforeSetTickPositions&&c.beforeSetTickPositions();c.postProcessTickInterval&&(c.tickInterval=c.postProcessTickInterval(c.tickInterval));c.pointRange&&!y&&(c.tickInterval=Math.max(c.pointRange,c.tickInterval));a=x(l.minTickInterval,c.isDatetimeAxis&&c.closestPointRange);!y&&c.tickInterval<a&&(c.tickInterval=a);f||r||y||(c.tickInterval=K(c.tickInterval,null,e(c.tickInterval),x(l.allowDecimals,!(.5<c.tickInterval&&5>c.tickInterval&&1E3<c.max&&
9999>c.max)),!!this.tickAmount));this.tickAmount||(c.tickInterval=c.unsquish());this.setTickPositions();},setTickPositions:function(){var a=this.options,b,c=a.tickPositions,e=a.tickPositioner,d=a.startOnTick,l=a.endOnTick,g;this.tickmarkOffset=this.categories&&"between"===a.tickmarkPlacement&&1===this.tickInterval?.5:0;this.minorTickInterval="auto"===a.minorTickInterval&&this.tickInterval?this.tickInterval/5:a.minorTickInterval;this.tickPositions=b=c&&c.slice();!b&&(b=this.isDatetimeAxis?this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,
		a.units),this.min,this.max,a.startOfWeek,this.ordinalPositions,this.closestPointRange,!0):this.isLog?this.getLogTickPositions(this.tickInterval,this.min,this.max):this.getLinearTickPositions(this.tickInterval,this.min,this.max),b.length>this.len&&(b=[b[0],b.pop()]),this.tickPositions=b,e&&(e=e.apply(this,[this.min,this.max])))&&(this.tickPositions=b=e);this.isLinked||(this.trimTicks(b,d,l),this.min===this.max&&n(this.min)&&!this.tickAmount&&(g=!0,this.min-=.5,this.max+=.5),this.single=g,c||e||this.adjustTickAmount());},
	trimTicks:function(a,b,c){var e=a[0],d=a[a.length-1],p=this.minPointOffset||0;if(b)this.min=e;else for(;this.min-p>a[0];)a.shift();if(c)this.max=d;else for(;this.max+p<a[a.length-1];)a.pop();0===a.length&&n(e)&&a.push((d+e)/2);},alignToOthers:function(){var a={},b,c=this.options;!1!==this.chart.options.chart.alignTicks&&!1!==c.alignTicks&&d(this.chart[this.coll],function(c){var e=c.options,e=[c.horiz?e.left:e.top,e.width,e.height,e.pane].join();c.series.length&&(a[e]?b=!0:a[e]=1);});return b;},getTickAmount:function(){var a=
this.options,b=a.tickAmount,c=a.tickPixelInterval;!n(a.tickInterval)&&this.len<c&&!this.isRadial&&!this.isLog&&a.startOnTick&&a.endOnTick&&(b=2);!b&&this.alignToOthers()&&(b=Math.ceil(this.len/c)+1);4>b&&(this.finalTickAmt=b,b=5);this.tickAmount=b;},adjustTickAmount:function(){var a=this.tickInterval,b=this.tickPositions,c=this.tickAmount,e=this.finalTickAmt,d=b&&b.length;if(d<c){for(;b.length<c;)b.push(h(b[b.length-1]+a));this.transA*=(d-1)/(c-1);this.max=b[b.length-1];}else d>c&&(this.tickInterval*=
2,this.setTickPositions());if(n(e)){for(a=c=b.length;a--;)(3===e&&1===a%2||2>=e&&0<a&&a<c-1)&&b.splice(a,1);this.finalTickAmt=void 0;}},setScale:function(){var a,b;this.oldMin=this.min;this.oldMax=this.max;this.oldAxisLength=this.len;this.setAxisSize();b=this.len!==this.oldAxisLength;d(this.series,function(b){if(b.isDirtyData||b.isDirty||b.xAxis.isDirty)a=!0;});b||a||this.isLinked||this.forceRedraw||this.userMin!==this.oldUserMin||this.userMax!==this.oldUserMax||this.alignToOthers()?(this.resetStacks&&
this.resetStacks(),this.forceRedraw=!1,this.getSeriesExtremes(),this.setTickInterval(),this.oldUserMin=this.userMin,this.oldUserMax=this.userMax,this.isDirty||(this.isDirty=b||this.min!==this.oldMin||this.max!==this.oldMax)):this.cleanStacks&&this.cleanStacks();},setExtremes:function(a,b,c,e,l){var p=this,g=p.chart;c=x(c,!0);d(p.series,function(a){delete a.kdTree;});l=w(l,{min:a,max:b});B(p,"setExtremes",l,function(){p.userMin=a;p.userMax=b;p.eventArgs=l;c&&g.redraw(e);});},zoom:function(a,b){var c=this.dataMin,
		e=this.dataMax,d=this.options,p=Math.min(c,x(d.min,c)),d=Math.max(e,x(d.max,e));if(a!==this.min||b!==this.max)this.allowZoomOutside||(n(c)&&a<=p&&(a=p),n(e)&&b>=d&&(b=d)),this.displayBtn=void 0!==a||void 0!==b,this.setExtremes(a,b,!1,void 0,{trigger:"zoom"});return!0;},setAxisSize:function(){var a=this.chart,b=this.options,c=b.offsetLeft||0,e=this.horiz,d=x(b.width,a.plotWidth-c+(b.offsetRight||0)),l=x(b.height,a.plotHeight),g=x(b.top,a.plotTop),b=x(b.left,a.plotLeft+c),c=/%$/;c.test(l)&&(l=Math.round(parseFloat(l)/
100*a.plotHeight));c.test(g)&&(g=Math.round(parseFloat(g)/100*a.plotHeight+a.plotTop));this.left=b;this.top=g;this.width=d;this.height=l;this.bottom=a.chartHeight-l-g;this.right=a.chartWidth-d-b;this.len=Math.max(e?d:l,0);this.pos=e?b:g;},getExtremes:function(){var a=this.isLog,b=this.lin2log;return{min:a?h(b(this.min)):this.min,max:a?h(b(this.max)):this.max,dataMin:this.dataMin,dataMax:this.dataMax,userMin:this.userMin,userMax:this.userMax};},getThreshold:function(a){var b=this.isLog,c=this.lin2log,
		e=b?c(this.min):this.min,b=b?c(this.max):this.max;null===a?a=e:e>a?a=e:b<a&&(a=b);return this.translate(a,0,1,0,1);},autoLabelAlign:function(a){a=(x(a,0)-90*this.side+720)%360;return 15<a&&165>a?"right":195<a&&345>a?"left":"center";},tickSize:function(a){var b=this.options,c=b[a+"Length"],e=x(b[a+"Width"],"tick"===a&&this.isXAxis?1:0);if(e&&c)return"inside"===b[a+"Position"]&&(c=-c),[c,e];},labelMetrics:function(){return this.chart.renderer.fontMetrics(this.options.labels.style&&this.options.labels.style.fontSize,
		this.ticks[0]&&this.ticks[0].label);},unsquish:function(){var a=this.options.labels,b=this.horiz,c=this.tickInterval,e=c,l=this.len/(((this.categories?1:0)+this.max-this.min)/c),g,r=a.rotation,u=this.labelMetrics(),f,h=Number.MAX_VALUE,t,H=function(a){a/=l||1;a=1<a?Math.ceil(a):1;return a*c;};b?(t=!a.staggerLines&&!a.step&&(n(r)?[r]:l<x(a.autoRotationLimit,80)&&a.autoRotation))&&d(t,function(a){var b;if(a===r||a&&-90<=a&&90>=a)f=H(Math.abs(u.h/Math.sin(k*a))),b=f+Math.abs(a/360),b<h&&(h=b,g=a,e=f);}):
		a.step||(e=H(u.h));this.autoRotation=t;this.labelRotation=x(g,r);return e;},getSlotWidth:function(){var a=this.chart,b=this.horiz,c=this.options.labels,e=Math.max(this.tickPositions.length-(this.categories?0:1),1),d=a.margin[3];return b&&2>(c.step||0)&&!c.rotation&&(this.staggerLines||1)*a.plotWidth/e||!b&&(d&&d-a.spacing[3]||.33*a.chartWidth);},renderUnsquish:function(){var a=this.chart,b=a.renderer,c=this.tickPositions,e=this.ticks,l=this.options.labels,g=this.horiz,r=this.getSlotWidth(),u=Math.max(1,
			Math.round(r-2*(l.padding||5))),f={},h=this.labelMetrics(),k=l.style&&l.style.textOverflow,H,w=0,x,G;t(l.rotation)||(f.rotation=l.rotation||0);d(c,function(a){(a=e[a])&&a.labelLength>w&&(w=a.labelLength);});this.maxLabelLength=w;if(this.autoRotation)w>u&&w>h.h?f.rotation=this.labelRotation:this.labelRotation=0;else if(r&&(H={width:u+"px"},!k))for(H.textOverflow="clip",x=c.length;!g&&x--;)if(G=c[x],u=e[G].label)u.styles&&"ellipsis"===u.styles.textOverflow?u.css({textOverflow:"clip"}):e[G].labelLength>
r&&u.css({width:r+"px"}),u.getBBox().height>this.len/c.length-(h.h-h.f)&&(u.specCss={textOverflow:"ellipsis"});f.rotation&&(H={width:(w>.5*a.chartHeight?.33*a.chartHeight:a.chartHeight)+"px"},k||(H.textOverflow="ellipsis"));if(this.labelAlign=l.align||this.autoLabelAlign(this.labelRotation))f.align=this.labelAlign;d(c,function(a){var b=(a=e[a])&&a.label;b&&(b.attr(f),H&&b.css(y(H,b.specCss)),delete b.specCss,a.rotation=f.rotation);});this.tickRotCorr=b.rotCorr(h.b,this.labelRotation||0,0!==this.side);},
	hasData:function(){return this.hasVisibleSeries||n(this.min)&&n(this.max)&&!!this.tickPositions;},getOffset:function(){var a=this,b=a.chart,c=b.renderer,e=a.options,l=a.tickPositions,g=a.ticks,r=a.horiz,u=a.side,f=b.inverted?[1,0,3,2][u]:u,h,k,t=0,H,w=0,y=e.title,G=e.labels,K=0,v=a.opposite,q=b.axisOffset,b=b.clipOffset,m=[-1,1,1,-1][u],B,I=e.className,L=a.axisParent,z=this.tickSize("tick");h=a.hasData();a.showAxis=k=h||x(e.showEmpty,!0);a.staggerLines=a.horiz&&G.staggerLines;a.axisGroup||(a.gridGroup=
c.g("grid").attr({zIndex:e.gridZIndex||1}).addClass("highcharts-"+this.coll.toLowerCase()+"-grid "+(I||"")).add(L),a.axisGroup=c.g("axis").attr({zIndex:e.zIndex||2}).addClass("highcharts-"+this.coll.toLowerCase()+" "+(I||"")).add(L),a.labelGroup=c.g("axis-labels").attr({zIndex:G.zIndex||7}).addClass("highcharts-"+a.coll.toLowerCase()+"-labels "+(I||"")).add(L));if(h||a.isLinked)d(l,function(b){g[b]?g[b].addLabel():g[b]=new N(a,b);}),a.renderUnsquish(),!1===G.reserveSpace||0!==u&&2!==u&&{1:"left",3:"right"}[u]!==
a.labelAlign&&"center"!==a.labelAlign||d(l,function(a){K=Math.max(g[a].getLabelSize(),K);}),a.staggerLines&&(K*=a.staggerLines,a.labelOffset=K*(a.opposite?-1:1));else for(B in g)g[B].destroy(),delete g[B];y&&y.text&&!1!==y.enabled&&(a.axisTitle||((B=y.textAlign)||(B=(r?{low:"left",middle:"center",high:"right"}:{low:v?"right":"left",middle:"center",high:v?"left":"right"})[y.align]),a.axisTitle=c.text(y.text,0,0,y.useHTML).attr({zIndex:7,rotation:y.rotation||0,align:B}).addClass("highcharts-axis-title").css(y.style).add(a.axisGroup),
	a.axisTitle.isNew=!0),k&&(t=a.axisTitle.getBBox()[r?"height":"width"],H=y.offset,w=n(H)?0:x(y.margin,r?5:10)),a.axisTitle[k?"show":"hide"](!0));a.renderLine();a.offset=m*x(e.offset,q[u]);a.tickRotCorr=a.tickRotCorr||{x:0,y:0};c=0===u?-a.labelMetrics().h:2===u?a.tickRotCorr.y:0;w=Math.abs(K)+w;K&&(w=w-c+m*(r?x(G.y,a.tickRotCorr.y+8*m):G.x));a.axisTitleMargin=x(H,w);q[u]=Math.max(q[u],a.axisTitleMargin+t+m*a.offset,w,h&&l.length&&z?z[0]:0);e=e.offset?0:2*Math.floor(a.axisLine.strokeWidth()/2);b[f]=
Math.max(b[f],e);},getLinePath:function(a){var b=this.chart,c=this.opposite,e=this.offset,d=this.horiz,l=this.left+(c?this.width:0)+e,e=b.chartHeight-this.bottom-(c?this.height:0)+e;c&&(a*=-1);return b.renderer.crispLine(["M",d?this.left:l,d?e:this.top,"L",d?b.chartWidth-this.right:l,d?e:b.chartHeight-this.bottom],a);},renderLine:function(){this.axisLine||(this.axisLine=this.chart.renderer.path().addClass("highcharts-axis-line").add(this.axisGroup),this.axisLine.attr({stroke:this.options.lineColor,
		"stroke-width":this.options.lineWidth,zIndex:7}));},getTitlePosition:function(){var a=this.horiz,b=this.left,c=this.top,e=this.len,d=this.options.title,l=a?b:c,g=this.opposite,r=this.offset,u=d.x||0,f=d.y||0,h=this.chart.renderer.fontMetrics(d.style&&d.style.fontSize,this.axisTitle).f,e={low:l+(a?0:e),middle:l+e/2,high:l+(a?e:0)}[d.align],b=(a?c+this.height:b)+(a?1:-1)*(g?-1:1)*this.axisTitleMargin+(2===this.side?h:0);return{x:a?e+u:b+(g?this.width:0)+r+u,y:a?b+f-(g?this.height:0)+r:e+f};},render:function(){var a=
this,c=a.chart,e=c.renderer,l=a.options,g=a.isLog,r=a.lin2log,u=a.isLinked,f=a.tickPositions,h=a.axisTitle,k=a.ticks,t=a.minorTicks,w=a.alternateBands,y=l.stackLabels,x=l.alternateGridColor,G=a.tickmarkOffset,n=a.axisLine,K=c.hasRendered&&b(a.oldMin),v=a.showAxis,q=z(e.globalAnimation),m,B;a.labelEdge.length=0;a.overlap=!1;d([k,t,w],function(a){for(var b in a)a[b].isActive=!1;});if(a.hasData()||u)a.minorTickInterval&&!a.categories&&d(a.getMinorTickPositions(),function(b){t[b]||(t[b]=new N(a,b,"minor"));
		K&&t[b].isNew&&t[b].render(null,!0);t[b].render(null,!1,1);}),f.length&&(d(f,function(b,c){if(!u||b>=a.min&&b<=a.max)k[b]||(k[b]=new N(a,b)),K&&k[b].isNew&&k[b].render(c,!0,.1),k[b].render(c);}),G&&(0===a.min||a.single)&&(k[-1]||(k[-1]=new N(a,-1,null,!0)),k[-1].render(-1))),x&&d(f,function(b,e){B=void 0!==f[e+1]?f[e+1]+G:a.max-G;0===e%2&&b<a.max&&B<=a.max+(c.polar?-G:G)&&(w[b]||(w[b]=new I(a)),m=b+G,w[b].options={from:g?r(m):m,to:g?r(B):B,color:x},w[b].render(),w[b].isActive=!0);}),a._addedPlotLB||
(d((l.plotLines||[]).concat(l.plotBands||[]),function(b){a.addPlotBandOrLine(b);}),a._addedPlotLB=!0);d([k,t,w],function(a){var b,e,d=[],l=q.duration;for(b in a)a[b].isActive||(a[b].render(b,!1,0),a[b].isActive=!1,d.push(b));H(function(){for(e=d.length;e--;)a[d[e]]&&!a[d[e]].isActive&&(a[d[e]].destroy(),delete a[d[e]]);},a!==w&&c.hasRendered&&l?l:0);});n&&(n[n.isPlaced?"animate":"attr"]({d:this.getLinePath(n.strokeWidth())}),n.isPlaced=!0,n[v?"show":"hide"](!0));h&&v&&(h[h.isNew?"attr":"animate"](a.getTitlePosition()),
	h.isNew=!1);y&&y.enabled&&a.renderStackTotals();a.isDirty=!1;},redraw:function(){this.visible&&(this.render(),d(this.plotLinesAndBands,function(a){a.render();}));d(this.series,function(a){a.isDirty=!0;});},destroy:function(a){var b=this,c=b.stacks,e,l=b.plotLinesAndBands,g;a||r(b);for(e in c)v(c[e]),c[e]=null;d([b.ticks,b.minorTicks,b.alternateBands],function(a){v(a);});if(l)for(a=l.length;a--;)l[a].destroy();d("stackTotalGroup axisLine axisTitle axisGroup gridGroup labelGroup cross".split(" "),function(a){b[a]&&
(b[a]=b[a].destroy());});l="extKey hcEvents names series userMax userMin".split(" ");for(g in b)b.hasOwnProperty(g)&&-1===u(g,l)&&delete b[g];},drawCrosshair:function(a,b){var c,e=this.crosshair,d=x(e.snap,!0),l,g=this.cross;a||(a=this.cross&&this.cross.e);this.crosshair&&!1!==(n(b)||!d)?(d?n(b)&&(l=this.isXAxis?b.plotX:this.len-b.plotY):l=a&&(this.horiz?a.chartX-this.pos:this.len-a.chartY+this.pos),n(l)&&(c=this.getPlotLinePath(b&&(this.isXAxis?b.x:x(b.stackY,b.y)),null,null,null,l)||null),n(c)?(b=
this.categories&&!this.isRadial,g||(this.cross=g=this.chart.renderer.path().addClass("highcharts-crosshair highcharts-crosshair-"+(b?"category ":"thin ")+e.className).attr({zIndex:x(e.zIndex,2)}).add(),g.attr({stroke:e.color||(b?f("#ccd6eb").setOpacity(.25).get():"#cccccc"),"stroke-width":x(e.width,1)}),e.dashStyle&&g.attr({dashstyle:e.dashStyle})),g.show().attr({d:c}),b&&!e.width&&g.attr({"stroke-width":this.transA}),this.cross.e=a):this.hideCrosshair()):this.hideCrosshair();},hideCrosshair:function(){this.cross&&
this.cross.hide();}};w(a.Axis.prototype,m);})(M);(function(a){var D=a.Axis,z=a.Date,F=a.dateFormat,J=a.defaultOptions,m=a.defined,f=a.each,h=a.extend,q=a.getMagnitude,n=a.getTZOffset,k=a.normalizeTickInterval,v=a.pick,d=a.timeUnits;D.prototype.getTimeTicks=function(a,k,q,c){var e=[],l={},g=J.global.useUTC,w,b=new z(k-n(k)),t,y=z.hcMakeTime,K=a.unitRange,x=a.count,B;if(m(k)){b[z.hcSetMilliseconds](K>=d.second?0:x*Math.floor(b.getMilliseconds()/x));if(K>=d.second)b[z.hcSetSeconds](K>=d.minute?0:x*Math.floor(b.getSeconds()/
x));if(K>=d.minute)b[z.hcSetMinutes](K>=d.hour?0:x*Math.floor(b[z.hcGetMinutes]()/x));K>=d.hour&&(b[z.hcSetHours](K>=d.day?0:x*Math.floor(b[z.hcGetHours]()/x)),t=b[z.hcGetHours]());if(K>=d.day)b[z.hcSetDate](K>=d.month?1:x*Math.floor(b[z.hcGetDate]()/x));K>=d.month&&(b[z.hcSetMonth](K>=d.year?0:x*Math.floor(b[z.hcGetMonth]()/x)),w=b[z.hcGetFullYear]());if(K>=d.year)b[z.hcSetFullYear](w-w%x);if(K===d.week)b[z.hcSetDate](b[z.hcGetDate]()-b[z.hcGetDay]()+v(c,1));c=1;if(z.hcTimezoneOffset||z.hcGetTimezoneOffset)B=
(!g||!!z.hcGetTimezoneOffset)&&(q-k>4*d.month||n(k)!==n(q)),b=b.getTime(),b=new z(b+n(b));w=b[z.hcGetFullYear]();k=b.getTime();g=b[z.hcGetMonth]();for(b=b[z.hcGetDate]();k<q;)e.push(k),k=K===d.year?y(w+c*x,0):K===d.month?y(w,g+c*x):!B||K!==d.day&&K!==d.week?B&&K===d.hour?y(w,g,b,t+c*x):k+K*x:y(w,g,b+c*x*(K===d.day?1:7)),c++;e.push(k);K<=d.hour&&f(e,function(a){"000000000"===F("%H%M%S%L",a)&&(l[a]="day");});}e.info=h(a,{higherRanks:l,totalRange:K*x});return e;};D.prototype.normalizeTimeTickInterval=function(a,
		f){var g=f||[["millisecond",[1,2,5,10,20,25,50,100,200,500]],["second",[1,2,5,10,15,30]],["minute",[1,2,5,10,15,30]],["hour",[1,2,3,4,6,8,12]],["day",[1,2]],["week",[1,2]],["month",[1,2,3,4,6]],["year",null]];f=g[g.length-1];var c=d[f[0]],e=f[1],l;for(l=0;l<g.length&&!(f=g[l],c=d[f[0]],e=f[1],g[l+1]&&a<=(c*e[e.length-1]+d[g[l+1][0]])/2);l++);c===d.year&&a<5*c&&(e=[1,2,5]);a=k(a/c,e,"year"===f[0]?Math.max(q(a/c),1):1);return{unitRange:c,count:a,unitName:f[0]};};})(M);(function(a){var D=a.Axis,z=a.getMagnitude,
		F=a.map,J=a.normalizeTickInterval,m=a.pick;D.prototype.getLogTickPositions=function(a,h,q,n){var f=this.options,v=this.len,d=this.lin2log,g=this.log2lin,w=[];n||(this._minorAutoInterval=null);if(.5<=a)a=Math.round(a),w=this.getLinearTickPositions(a,h,q);else if(.08<=a)for(var v=Math.floor(h),B,c,e,l,u,f=.3<a?[1,2,4]:.15<a?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9];v<q+1&&!u;v++)for(c=f.length,B=0;B<c&&!u;B++)e=g(d(v)*f[B]),e>h&&(!n||l<=q)&&void 0!==l&&w.push(l),l>q&&(u=!0),l=e;else h=d(h),q=d(q),a=f[n?"minorTickInterval":
		"tickInterval"],a=m("auto"===a?null:a,this._minorAutoInterval,f.tickPixelInterval/(n?5:1)*(q-h)/((n?v/this.tickPositions.length:v)||1)),a=J(a,null,z(a)),w=F(this.getLinearTickPositions(a,h,q),g),n||(this._minorAutoInterval=a/5);n||(this.tickInterval=a);return w;};D.prototype.log2lin=function(a){return Math.log(a)/Math.LN10;};D.prototype.lin2log=function(a){return Math.pow(10,a);};})(M);(function(a){var D=a.dateFormat,z=a.each,F=a.extend,J=a.format,m=a.isNumber,f=a.map,h=a.merge,q=a.pick,n=a.splat,k=a.stop,
		v=a.syncTimeout,d=a.timeUnits;a.Tooltip=function(){this.init.apply(this,arguments);};a.Tooltip.prototype={init:function(a,d){this.chart=a;this.options=d;this.crosshairs=[];this.now={x:0,y:0};this.isHidden=!0;this.split=d.split&&!a.inverted;this.shared=d.shared||this.split;},cleanSplit:function(a){z(this.chart.series,function(d){var g=d&&d.tt;g&&(!g.isActive||a?d.tt=g.destroy():g.isActive=!1);});},getLabel:function(){var a=this.chart.renderer,d=this.options;this.label||(this.split?this.label=a.g("tooltip"):
		(this.label=a.label("",0,0,d.shape||"callout",null,null,d.useHTML,null,"tooltip").attr({padding:d.padding,r:d.borderRadius}),this.label.attr({fill:d.backgroundColor,"stroke-width":d.borderWidth}).css(d.style).shadow(d.shadow)),this.label.attr({zIndex:8}).add());return this.label;},update:function(a){this.destroy();this.init(this.chart,h(!0,this.options,a));},destroy:function(){this.label&&(this.label=this.label.destroy());this.split&&this.tt&&(this.cleanSplit(this.chart,!0),this.tt=this.tt.destroy());
		clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout);},move:function(a,d,f,c){var e=this,l=e.now,g=!1!==e.options.animation&&!e.isHidden&&(1<Math.abs(a-l.x)||1<Math.abs(d-l.y)),h=e.followPointer||1<e.len;F(l,{x:g?(2*l.x+a)/3:a,y:g?(l.y+d)/2:d,anchorX:h?void 0:g?(2*l.anchorX+f)/3:f,anchorY:h?void 0:g?(l.anchorY+c)/2:c});e.getLabel().attr(l);g&&(clearTimeout(this.tooltipTimeout),this.tooltipTimeout=setTimeout(function(){e&&e.move(a,d,f,c);},32));},hide:function(a){var d=this;clearTimeout(this.hideTimer);
		a=q(a,this.options.hideDelay,500);this.isHidden||(this.hideTimer=v(function(){d.getLabel()[a?"fadeOut":"hide"]();d.isHidden=!0;},a));},getAnchor:function(a,d){var g,c=this.chart,e=c.inverted,l=c.plotTop,u=c.plotLeft,h=0,b=0,k,y;a=n(a);g=a[0].tooltipPos;this.followPointer&&d&&(void 0===d.chartX&&(d=c.pointer.normalize(d)),g=[d.chartX-c.plotLeft,d.chartY-l]);g||(z(a,function(a){k=a.series.yAxis;y=a.series.xAxis;h+=a.plotX+(!e&&y?y.left-u:0);b+=(a.plotLow?(a.plotLow+a.plotHigh)/2:a.plotY)+(!e&&k?k.top-
l:0);}),h/=a.length,b/=a.length,g=[e?c.plotWidth-b:h,this.shared&&!e&&1<a.length&&d?d.chartY-l:e?c.plotHeight-h:b]);return f(g,Math.round);},getPosition:function(a,d,f){var c=this.chart,e=this.distance,l={},g=f.h||0,h,b=["y",c.chartHeight,d,f.plotY+c.plotTop,c.plotTop,c.plotTop+c.plotHeight],k=["x",c.chartWidth,a,f.plotX+c.plotLeft,c.plotLeft,c.plotLeft+c.plotWidth],y=!this.followPointer&&q(f.ttBelow,!c.inverted===!!f.negative),n=function(a,b,c,d,r,u){var p=c<d-e,f=d+e+c<b,h=d-e-c;d+=e;if(y&&f)l[a]=
d;else if(!y&&p)l[a]=h;else if(p)l[a]=Math.min(u-c,0>h-g?h:h-g);else if(f)l[a]=Math.max(r,d+g+c>b?d:d+g);else return!1;},x=function(a,b,c,d){var g;d<e||d>b-e?g=!1:l[a]=d<c/2?1:d>b-c/2?b-c-2:d-c/2;return g;},w=function(a){var c=b;b=k;k=c;h=a;},r=function(){!1!==n.apply(0,b)?!1!==x.apply(0,k)||h||(w(!0),r()):h?l.x=l.y=0:(w(!0),r());};(c.inverted||1<this.len)&&w();r();return l;},defaultFormatter:function(a){var d=this.points||n(this),g;g=[a.tooltipFooterHeaderFormatter(d[0])];g=g.concat(a.bodyFormatter(d));
		g.push(a.tooltipFooterHeaderFormatter(d[0],!0));return g;},refresh:function(a,d){var g=this.chart,c=this.getLabel(),e=this.options,l,u,f={},b,h=[];b=e.formatter||this.defaultFormatter;var f=g.hoverPoints,y=this.shared;clearTimeout(this.hideTimer);this.followPointer=n(a)[0].series.tooltipOptions.followPointer;u=this.getAnchor(a,d);d=u[0];l=u[1];!y||a.series&&a.series.noSharedTooltip?f=a.getLabelConfig():(g.hoverPoints=a,f&&z(f,function(a){a.setState();}),z(a,function(a){a.setState("hover");h.push(a.getLabelConfig());}),
	f={x:a[0].category,y:a[0].y},f.points=h,this.len=h.length,a=a[0]);b=b.call(f,this);f=a.series;this.distance=q(f.tooltipOptions.distance,16);!1===b?this.hide():(this.isHidden&&(k(c),c.attr({opacity:1}).show()),this.split?this.renderSplit(b,g.hoverPoints):(c.attr({text:b.join?b.join(""):b}),c.removeClass(/highcharts-color-[\d]+/g).addClass("highcharts-color-"+q(a.colorIndex,f.colorIndex)),c.attr({stroke:e.borderColor||a.color||f.color||"#666666"}),this.updatePosition({plotX:d,plotY:l,negative:a.negative,
		ttBelow:a.ttBelow,h:u[2]||0})),this.isHidden=!1);},renderSplit:function(d,f){var g=this,c=[],e=this.chart,l=e.renderer,u=!0,h=this.options,b,k=this.getLabel();z(d.slice(0,d.length-1),function(a,d){d=f[d-1]||{isHeader:!0,plotX:f[0].plotX};var t=d.series||g,y=t.tt,r=d.series||{},G="highcharts-color-"+q(d.colorIndex,r.colorIndex,"none");y||(t.tt=y=l.label(null,null,null,d.isHeader&&"callout").addClass("highcharts-tooltip-box "+G).attr({padding:h.padding,r:h.borderRadius,fill:h.backgroundColor,stroke:d.color||
r.color||"#333333","stroke-width":h.borderWidth}).add(k),d.series&&(y.connector=l.path().addClass("highcharts-tooltip-connector "+G).attr({"stroke-width":r.options.lineWidth||2,stroke:d.color||r.color||"#666666"}).add(y)));y.isActive=!0;y.attr({text:a});a=y.getBBox();r=a.width+y.strokeWidth();d.isHeader?(b=a.height,r=Math.max(0,Math.min(d.plotX+e.plotLeft-r/2,e.chartWidth-r))):r=d.plotX+e.plotLeft-q(h.distance,16)-r;0>r&&(u=!1);a=(d.series&&d.series.yAxis&&d.series.yAxis.pos)+(d.plotY||0);a-=e.plotTop;
	c.push({target:d.isHeader?e.plotHeight+b:a,rank:d.isHeader?1:0,size:t.tt.getBBox().height+1,point:d,x:r,tt:y});});this.cleanSplit();a.distribute(c,e.plotHeight+b);z(c,function(a){var b=a.point,c=a.tt,d;d={visibility:void 0===a.pos?"hidden":"inherit",x:u||b.isHeader?a.x:b.plotX+e.plotLeft+q(h.distance,16),y:a.pos+e.plotTop};b.isHeader&&(d.anchorX=b.plotX+e.plotLeft,d.anchorY=d.y-100);c.attr(d);b.isHeader||c.connector.attr({d:["M",b.plotX+e.plotLeft-d.x,b.plotY+b.series.yAxis.pos-d.y,"L",(u?-1:1)*q(h.distance,
		16)+b.plotX+e.plotLeft-d.x,a.pos+e.plotTop+c.getBBox().height/2-d.y]});});},updatePosition:function(a){var d=this.chart,g=this.getLabel(),g=(this.options.positioner||this.getPosition).call(this,g.width,g.height,a);this.move(Math.round(g.x),Math.round(g.y||0),a.plotX+d.plotLeft,a.plotY+d.plotTop);},getXDateFormat:function(a,f,h){var c;f=f.dateTimeLabelFormats;var e=h&&h.closestPointRange,l,g={millisecond:15,second:12,minute:9,hour:6,day:3},k,b="millisecond";if(e){k=D("%m-%d %H:%M:%S.%L",a.x);for(l in d){if(e===
d.week&&+D("%w",a.x)===h.options.startOfWeek&&"00:00:00.000"===k.substr(6)){l="week";break;}if(d[l]>e){l=b;break;}if(g[l]&&k.substr(g[l])!=="01-01 00:00:00.000".substr(g[l]))break;"week"!==l&&(b=l);}l&&(c=f[l]);}else c=f.day;return c||f.year;},tooltipFooterHeaderFormatter:function(a,d){var g=d?"footer":"header";d=a.series;var c=d.tooltipOptions,e=c.xDateFormat,l=d.xAxis,u=l&&"datetime"===l.options.type&&m(a.key),g=c[g+"Format"];u&&!e&&(e=this.getXDateFormat(a,c,l));u&&e&&(g=g.replace("{point.key}","{point.key:"+
e+"}"));return J(g,{point:a,series:d});},bodyFormatter:function(a){return f(a,function(a){var d=a.series.tooltipOptions;return(d.pointFormatter||a.point.tooltipFormatter).call(a.point,d.pointFormat);});}};})(M);(function(a){var D=a.addEvent,z=a.attr,F=a.charts,J=a.color,m=a.css,f=a.defined,h=a.doc,q=a.each,n=a.extend,k=a.fireEvent,v=a.offset,d=a.pick,g=a.removeEvent,w=a.splat,B=a.Tooltip,c=a.win;a.Pointer=function(a,c){this.init(a,c);};a.Pointer.prototype={init:function(a,c){this.options=c;this.chart=
a;this.runChartClick=c.chart.events&&!!c.chart.events.click;this.pinchDown=[];this.lastValidTouch={};B&&c.tooltip.enabled&&(a.tooltip=new B(a,c.tooltip),this.followTouchMove=d(c.tooltip.followTouchMove,!0));this.setDOMEvents();},zoomOption:function(){var a=this.chart,c=a.options.chart.zoomType,d=/x/.test(c),c=/y/.test(c),a=a.inverted;this.zoomX=d;this.zoomY=c;this.zoomHor=d&&!a||c&&a;this.zoomVert=c&&!a||d&&a;this.hasZoom=d||c;},normalize:function(a,d){var e,l;a=a||c.event;a.target||(a.target=a.srcElement);
		l=a.touches?a.touches.length?a.touches.item(0):a.changedTouches[0]:a;d||(this.chartPosition=d=v(this.chart.container));void 0===l.pageX?(e=Math.max(a.x,a.clientX-d.left),d=a.y):(e=l.pageX-d.left,d=l.pageY-d.top);return n(a,{chartX:Math.round(e),chartY:Math.round(d)});},getCoordinates:function(a){var c={xAxis:[],yAxis:[]};q(this.chart.axes,function(e){c[e.isXAxis?"xAxis":"yAxis"].push({axis:e,value:e.toValue(a[e.horiz?"chartX":"chartY"])});});return c;},runPointActions:function(c){var e=this.chart,g=
e.series,f=e.tooltip,b=f?f.shared:!1,k=!0,y=e.hoverPoint,n=e.hoverSeries,x,v,r,G=[],H;if(!b&&!n)for(x=0;x<g.length;x++)if(g[x].directTouch||!g[x].options.stickyTracking)g=[];n&&(b?n.noSharedTooltip:n.directTouch)&&y?G=[y]:(b||!n||n.options.stickyTracking||(g=[n]),q(g,function(a){v=a.noSharedTooltip&&b;r=!b&&a.directTouch;a.visible&&!v&&!r&&d(a.options.enableMouseTracking,!0)&&(H=a.searchPoint(c,!v&&1===a.kdDimensions))&&H.series&&G.push(H);}),G.sort(function(a,c){var e=a.distX-c.distX,d=a.dist-c.dist;
		return 0!==e&&b?e:0!==d?d:a.series.group.zIndex>c.series.group.zIndex?-1:1;}));if(b)for(x=G.length;x--;)(G[x].x!==G[0].x||G[x].series.noSharedTooltip)&&G.splice(x,1);if(G[0]&&(G[0]!==this.prevKDPoint||f&&f.isHidden)){if(b&&!G[0].series.noSharedTooltip){for(x=0;x<G.length;x++)G[x].onMouseOver(c,G[x]!==(n&&n.directTouch&&y||G[0]));G.length&&f&&f.refresh(G.sort(function(a,b){return a.series.index-b.series.index;}),c);}else if(f&&f.refresh(G[0],c),!n||!n.directTouch)G[0].onMouseOver(c);this.prevKDPoint=
G[0];k=!1;}k&&(g=n&&n.tooltipOptions.followPointer,f&&g&&!f.isHidden&&(g=f.getAnchor([{}],c),f.updatePosition({plotX:g[0],plotY:g[1]})));this._onDocumentMouseMove||(this._onDocumentMouseMove=function(b){if(F[a.hoverChartIndex])F[a.hoverChartIndex].pointer.onDocumentMouseMove(b);},D(h,"mousemove",this._onDocumentMouseMove));q(b?G:[d(y,G[0])],function(a){q(e.axes,function(b){(!a||a.series&&a.series[b.coll]===b)&&b.drawCrosshair(c,a);});});},reset:function(a,c){var e=this.chart,d=e.hoverSeries,b=e.hoverPoint,
		l=e.hoverPoints,f=e.tooltip,k=f&&f.shared?l:b;a&&k&&q(w(k),function(b){b.series.isCartesian&&void 0===b.plotX&&(a=!1);});if(a)f&&k&&(f.refresh(k),b&&(b.setState(b.state,!0),q(e.axes,function(a){a.crosshair&&a.drawCrosshair(null,b);})));else{if(b)b.onMouseOut();l&&q(l,function(a){a.setState();});if(d)d.onMouseOut();f&&f.hide(c);this._onDocumentMouseMove&&(g(h,"mousemove",this._onDocumentMouseMove),this._onDocumentMouseMove=null);q(e.axes,function(a){a.hideCrosshair();});this.hoverX=this.prevKDPoint=e.hoverPoints=
e.hoverPoint=null;}},scaleGroups:function(a,c){var e=this.chart,d;q(e.series,function(b){d=a||b.getPlotBox();b.xAxis&&b.xAxis.zoomEnabled&&b.group&&(b.group.attr(d),b.markerGroup&&(b.markerGroup.attr(d),b.markerGroup.clip(c?e.clipRect:null)),b.dataLabelsGroup&&b.dataLabelsGroup.attr(d));});e.clipRect.attr(c||e.clipBox);},dragStart:function(a){var c=this.chart;c.mouseIsDown=a.type;c.cancelClick=!1;c.mouseDownX=this.mouseDownX=a.chartX;c.mouseDownY=this.mouseDownY=a.chartY;},drag:function(a){var c=this.chart,
		e=c.options.chart,d=a.chartX,b=a.chartY,g=this.zoomHor,f=this.zoomVert,h=c.plotLeft,k=c.plotTop,n=c.plotWidth,r=c.plotHeight,G,H=this.selectionMarker,v=this.mouseDownX,p=this.mouseDownY,q=e.panKey&&a[e.panKey+"Key"];H&&H.touch||(d<h?d=h:d>h+n&&(d=h+n),b<k?b=k:b>k+r&&(b=k+r),this.hasDragged=Math.sqrt(Math.pow(v-d,2)+Math.pow(p-b,2)),10<this.hasDragged&&(G=c.isInsidePlot(v-h,p-k),c.hasCartesianSeries&&(this.zoomX||this.zoomY)&&G&&!q&&!H&&(this.selectionMarker=H=c.renderer.rect(h,k,g?1:n,f?1:r,0).attr({fill:e.selectionMarkerFill||
J("#335cad").setOpacity(.25).get(),"class":"highcharts-selection-marker",zIndex:7}).add()),H&&g&&(d-=v,H.attr({width:Math.abs(d),x:(0<d?0:d)+v})),H&&f&&(d=b-p,H.attr({height:Math.abs(d),y:(0<d?0:d)+p})),G&&!H&&e.panning&&c.pan(a,e.panning)));},drop:function(a){var c=this,e=this.chart,d=this.hasPinched;if(this.selectionMarker){var b={originalEvent:a,xAxis:[],yAxis:[]},g=this.selectionMarker,h=g.attr?g.attr("x"):g.x,v=g.attr?g.attr("y"):g.y,x=g.attr?g.attr("width"):g.width,w=g.attr?g.attr("height"):
			g.height,r;if(this.hasDragged||d)q(e.axes,function(e){if(e.zoomEnabled&&f(e.min)&&(d||c[{xAxis:"zoomX",yAxis:"zoomY"}[e.coll]])){var l=e.horiz,g="touchend"===a.type?e.minPixelPadding:0,p=e.toValue((l?h:v)+g),l=e.toValue((l?h+x:v+w)-g);b[e.coll].push({axis:e,min:Math.min(p,l),max:Math.max(p,l)});r=!0;}}),r&&k(e,"selection",b,function(a){e.zoom(n(a,d?{animation:!1}:null));});this.selectionMarker=this.selectionMarker.destroy();d&&this.scaleGroups();}e&&(m(e.container,{cursor:e._cursor}),e.cancelClick=10<
this.hasDragged,e.mouseIsDown=this.hasDragged=this.hasPinched=!1,this.pinchDown=[]);},onContainerMouseDown:function(a){a=this.normalize(a);this.zoomOption();a.preventDefault&&a.preventDefault();this.dragStart(a);},onDocumentMouseUp:function(c){F[a.hoverChartIndex]&&F[a.hoverChartIndex].pointer.drop(c);},onDocumentMouseMove:function(a){var c=this.chart,e=this.chartPosition;a=this.normalize(a,e);!e||this.inClass(a.target,"highcharts-tracker")||c.isInsidePlot(a.chartX-c.plotLeft,a.chartY-c.plotTop)||this.reset();},
	onContainerMouseLeave:function(c){var e=F[a.hoverChartIndex];e&&(c.relatedTarget||c.toElement)&&(e.pointer.reset(),e.pointer.chartPosition=null);},onContainerMouseMove:function(c){var e=this.chart;f(a.hoverChartIndex)&&F[a.hoverChartIndex]&&F[a.hoverChartIndex].mouseIsDown||(a.hoverChartIndex=e.index);c=this.normalize(c);c.returnValue=!1;"mousedown"===e.mouseIsDown&&this.drag(c);!this.inClass(c.target,"highcharts-tracker")&&!e.isInsidePlot(c.chartX-e.plotLeft,c.chartY-e.plotTop)||e.openMenu||this.runPointActions(c);},
	inClass:function(a,c){for(var e;a;){if(e=z(a,"class")){if(-1!==e.indexOf(c))return!0;if(-1!==e.indexOf("highcharts-container"))return!1;}a=a.parentNode;}},onTrackerMouseOut:function(a){var c=this.chart.hoverSeries;a=a.relatedTarget||a.toElement;if(!(!c||!a||c.options.stickyTracking||this.inClass(a,"highcharts-tooltip")||this.inClass(a,"highcharts-series-"+c.index)&&this.inClass(a,"highcharts-tracker")))c.onMouseOut();},onContainerClick:function(a){var c=this.chart,e=c.hoverPoint,d=c.plotLeft,b=c.plotTop;
		a=this.normalize(a);c.cancelClick||(e&&this.inClass(a.target,"highcharts-tracker")?(k(e.series,"click",n(a,{point:e})),c.hoverPoint&&e.firePointEvent("click",a)):(n(a,this.getCoordinates(a)),c.isInsidePlot(a.chartX-d,a.chartY-b)&&k(c,"click",a)));},setDOMEvents:function(){var c=this,d=c.chart.container;d.onmousedown=function(a){c.onContainerMouseDown(a);};d.onmousemove=function(a){c.onContainerMouseMove(a);};d.onclick=function(a){c.onContainerClick(a);};D(d,"mouseleave",c.onContainerMouseLeave);1===a.chartCount&&
D(h,"mouseup",c.onDocumentMouseUp);a.hasTouch&&(d.ontouchstart=function(a){c.onContainerTouchStart(a);},d.ontouchmove=function(a){c.onContainerTouchMove(a);},1===a.chartCount&&D(h,"touchend",c.onDocumentTouchEnd));},destroy:function(){var c;g(this.chart.container,"mouseleave",this.onContainerMouseLeave);a.chartCount||(g(h,"mouseup",this.onDocumentMouseUp),g(h,"touchend",this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for(c in this)this[c]=null;}};})(M);(function(a){var D=a.charts,z=a.each,
		F=a.extend,J=a.map,m=a.noop,f=a.pick;F(a.Pointer.prototype,{pinchTranslate:function(a,f,n,k,v,d){(this.zoomHor||this.pinchHor)&&this.pinchTranslateDirection(!0,a,f,n,k,v,d);(this.zoomVert||this.pinchVert)&&this.pinchTranslateDirection(!1,a,f,n,k,v,d);},pinchTranslateDirection:function(a,f,n,k,v,d,g,w){var h=this.chart,c=a?"x":"y",e=a?"X":"Y",l="chart"+e,u=a?"width":"height",q=h["plot"+(a?"Left":"Top")],b,t,y=w||1,m=h.inverted,x=h.bounds[a?"h":"v"],I=1===f.length,r=f[0][l],G=n[0][l],H=!I&&f[1][l],N=
!I&&n[1][l],p;n=function(){!I&&20<Math.abs(r-H)&&(y=w||Math.abs(G-N)/Math.abs(r-H));t=(q-G)/y+r;b=h["plot"+(a?"Width":"Height")]/y;};n();f=t;f<x.min?(f=x.min,p=!0):f+b>x.max&&(f=x.max-b,p=!0);p?(G-=.8*(G-g[c][0]),I||(N-=.8*(N-g[c][1])),n()):g[c]=[G,N];m||(d[c]=t-q,d[u]=b);d=m?1/y:y;v[u]=b;v[c]=f;k[m?a?"scaleY":"scaleX":"scale"+e]=y;k["translate"+e]=d*q+(G-d*r);},pinch:function(a){var h=this,n=h.chart,k=h.pinchDown,v=a.touches,d=v.length,g=h.lastValidTouch,w=h.hasZoom,B=h.selectionMarker,c={},e=1===
d&&(h.inClass(a.target,"highcharts-tracker")&&n.runTrackerClick||h.runChartClick),l={};1<d&&(h.initiated=!0);w&&h.initiated&&!e&&a.preventDefault();J(v,function(a){return h.normalize(a);});"touchstart"===a.type?(z(v,function(a,c){k[c]={chartX:a.chartX,chartY:a.chartY};}),g.x=[k[0].chartX,k[1]&&k[1].chartX],g.y=[k[0].chartY,k[1]&&k[1].chartY],z(n.axes,function(a){if(a.zoomEnabled){var c=n.bounds[a.horiz?"h":"v"],b=a.minPixelPadding,e=a.toPixels(f(a.options.min,a.dataMin)),d=a.toPixels(f(a.options.max,
			a.dataMax)),g=Math.max(e,d);c.min=Math.min(a.pos,Math.min(e,d)-b);c.max=Math.max(a.pos+a.len,g+b);}}),h.res=!0):k.length&&(B||(h.selectionMarker=B=F({destroy:m,touch:!0},n.plotBox)),h.pinchTranslate(k,v,c,B,l,g),h.hasPinched=w,h.scaleGroups(c,l),!w&&h.followTouchMove&&1===d?this.runPointActions(h.normalize(a)):h.res&&(h.res=!1,this.reset(!1,0)));},touch:function(h,m){var n=this.chart,k;a.hoverChartIndex=n.index;1===h.touches.length?(h=this.normalize(h),n.isInsidePlot(h.chartX-n.plotLeft,h.chartY-n.plotTop)&&
!n.openMenu?(m&&this.runPointActions(h),"touchmove"===h.type&&(m=this.pinchDown,k=m[0]?4<=Math.sqrt(Math.pow(m[0].chartX-h.chartX,2)+Math.pow(m[0].chartY-h.chartY,2)):!1),f(k,!0)&&this.pinch(h)):m&&this.reset()):2===h.touches.length&&this.pinch(h);},onContainerTouchStart:function(a){this.zoomOption();this.touch(a,!0);},onContainerTouchMove:function(a){this.touch(a);},onDocumentTouchEnd:function(f){D[a.hoverChartIndex]&&D[a.hoverChartIndex].pointer.drop(f);}});})(M);(function(a){var D=a.addEvent,z=a.charts,
		F=a.css,J=a.doc,m=a.extend,f=a.noop,h=a.Pointer,q=a.removeEvent,n=a.win,k=a.wrap;if(n.PointerEvent||n.MSPointerEvent){var v={},d=!!n.PointerEvent,g=function(){var a,c=[];c.item=function(a){return this[a];};for(a in v)v.hasOwnProperty(a)&&c.push({pageX:v[a].pageX,pageY:v[a].pageY,target:v[a].target});return c;},w=function(d,c,e,l){"touch"!==d.pointerType&&d.pointerType!==d.MSPOINTER_TYPE_TOUCH||!z[a.hoverChartIndex]||(l(d),l=z[a.hoverChartIndex].pointer,l[c]({type:e,target:d.currentTarget,preventDefault:f,
		touches:g()}));};m(h.prototype,{onContainerPointerDown:function(a){w(a,"onContainerTouchStart","touchstart",function(a){v[a.pointerId]={pageX:a.pageX,pageY:a.pageY,target:a.currentTarget};});},onContainerPointerMove:function(a){w(a,"onContainerTouchMove","touchmove",function(a){v[a.pointerId]={pageX:a.pageX,pageY:a.pageY};v[a.pointerId].target||(v[a.pointerId].target=a.currentTarget);});},onDocumentPointerUp:function(a){w(a,"onDocumentTouchEnd","touchend",function(a){delete v[a.pointerId];});},batchMSEvents:function(a){a(this.chart.container,
		d?"pointerdown":"MSPointerDown",this.onContainerPointerDown);a(this.chart.container,d?"pointermove":"MSPointerMove",this.onContainerPointerMove);a(J,d?"pointerup":"MSPointerUp",this.onDocumentPointerUp);}});k(h.prototype,"init",function(a,c,e){a.call(this,c,e);this.hasZoom&&F(c.container,{"-ms-touch-action":"none","touch-action":"none"});});k(h.prototype,"setDOMEvents",function(a){a.apply(this);(this.hasZoom||this.followTouchMove)&&this.batchMSEvents(D);});k(h.prototype,"destroy",function(a){this.batchMSEvents(q);
		a.call(this);});}})(M);(function(a){var D,z=a.addEvent,F=a.css,J=a.discardElement,m=a.defined,f=a.each,h=a.extend,q=a.isFirefox,n=a.marginNames,k=a.merge,v=a.pick,d=a.setAnimation,g=a.stableSort,w=a.win,B=a.wrap;D=a.Legend=function(a,e){this.init(a,e);};D.prototype={init:function(a,e){this.chart=a;this.setOptions(e);e.enabled&&(this.render(),z(this.chart,"endResize",function(){this.legend.positionCheckboxes();}));},setOptions:function(a){var c=v(a.padding,8);this.options=a;this.itemStyle=a.itemStyle;this.itemHiddenStyle=
k(this.itemStyle,a.itemHiddenStyle);this.itemMarginTop=a.itemMarginTop||0;this.initialItemX=this.padding=c;this.initialItemY=c-5;this.itemHeight=this.maxItemWidth=0;this.symbolWidth=v(a.symbolWidth,16);this.pages=[];},update:function(a,e){var c=this.chart;this.setOptions(k(!0,this.options,a));this.destroy();c.isDirtyLegend=c.isDirtyBox=!0;v(e,!0)&&c.redraw();},colorizeItem:function(a,e){a.legendGroup[e?"removeClass":"addClass"]("highcharts-legend-item-hidden");var c=this.options,d=a.legendItem,g=a.legendLine,
		b=a.legendSymbol,f=this.itemHiddenStyle.color,c=e?c.itemStyle.color:f,h=e?a.color||f:f,k=a.options&&a.options.marker,n={fill:h},v;d&&d.css({fill:c,color:c});g&&g.attr({stroke:h});if(b){if(k&&b.isMarker&&(n=a.pointAttribs(),!e))for(v in n)n[v]=f;b.attr(n);}},positionItem:function(a){var c=this.options,d=c.symbolPadding,c=!c.rtl,g=a._legendItemPos,f=g[0],g=g[1],b=a.checkbox;(a=a.legendGroup)&&a.element&&a.translate(c?f:this.legendWidth-f-2*d-4,g);b&&(b.x=f,b.y=g);},destroyItem:function(a){var c=a.checkbox;
		f(["legendItem","legendLine","legendSymbol","legendGroup"],function(c){a[c]&&(a[c]=a[c].destroy());});c&&J(a.checkbox);},destroy:function(){var a=this.group,e=this.box;e&&(this.box=e.destroy());f(this.getAllItems(),function(a){f(["legendItem","legendGroup"],function(c){a[c]&&(a[c]=a[c].destroy());});});a&&(this.group=a.destroy());},positionCheckboxes:function(a){var c=this.group.alignAttr,d,g=this.clipHeight||this.legendHeight,h=this.titleHeight;c&&(d=c.translateY,f(this.allItems,function(b){var e=b.checkbox,
		l;e&&(l=d+h+e.y+(a||0)+3,F(e,{left:c.translateX+b.checkboxOffset+e.x-20+"px",top:l+"px",display:l>d-6&&l<d+g-6?"":"none"}));}));},renderTitle:function(){var a=this.padding,e=this.options.title,d=0;e.text&&(this.title||(this.title=this.chart.renderer.label(e.text,a-3,a-4,null,null,null,null,null,"legend-title").attr({zIndex:1}).css(e.style).add(this.group)),a=this.title.getBBox(),d=a.height,this.offsetWidth=a.width,this.contentGroup.attr({translateY:d}));this.titleHeight=d;},setText:function(c){var e=
this.options;c.legendItem.attr({text:e.labelFormat?a.format(e.labelFormat,c):e.labelFormatter.call(c)});},renderItem:function(a){var c=this.chart,d=c.renderer,g=this.options,f="horizontal"===g.layout,b=this.symbolWidth,h=g.symbolPadding,n=this.itemStyle,m=this.itemHiddenStyle,x=this.padding,w=f?v(g.itemDistance,20):0,r=!g.rtl,G=g.width,H=g.itemMarginBottom||0,q=this.itemMarginTop,p=this.initialItemX,A=a.legendItem,B=!a.series,O=!B&&a.series.drawLegendSymbol?a.series:a,C=O.options,C=this.createCheckboxForItem&&
C&&C.showCheckbox,E=g.useHTML;A||(a.legendGroup=d.g("legend-item").addClass("highcharts-"+O.type+"-series highcharts-color-"+a.colorIndex+" "+(a.options.className||"")+(B?"highcharts-series-"+a.index:"")).attr({zIndex:1}).add(this.scrollGroup),a.legendItem=A=d.text("",r?b+h:-h,this.baseline||0,E).css(k(a.visible?n:m)).attr({align:r?"left":"right",zIndex:2}).add(a.legendGroup),this.baseline||(n=n.fontSize,this.fontMetrics=d.fontMetrics(n,A),this.baseline=this.fontMetrics.f+3+q,A.attr("y",this.baseline)),
	O.drawLegendSymbol(this,a),this.setItemEvents&&this.setItemEvents(a,A,E),C&&this.createCheckboxForItem(a));this.colorizeItem(a,a.visible);this.setText(a);d=A.getBBox();b=a.checkboxOffset=g.itemWidth||a.legendItemWidth||b+h+d.width+w+(C?20:0);this.itemHeight=h=Math.round(a.legendItemHeight||d.height);f&&this.itemX-p+b>(G||c.chartWidth-2*x-p-g.x)&&(this.itemX=p,this.itemY+=q+this.lastLineHeight+H,this.lastLineHeight=0);this.maxItemWidth=Math.max(this.maxItemWidth,b);this.lastItemY=q+this.itemY+H;this.lastLineHeight=
Math.max(h,this.lastLineHeight);a._legendItemPos=[this.itemX,this.itemY];f?this.itemX+=b:(this.itemY+=q+h+H,this.lastLineHeight=h);this.offsetWidth=G||Math.max((f?this.itemX-p-w:b)+x,this.offsetWidth);},getAllItems:function(){var a=[];f(this.chart.series,function(c){var e=c&&c.options;c&&v(e.showInLegend,m(e.linkedTo)?!1:void 0,!0)&&(a=a.concat(c.legendItems||("point"===e.legendType?c.data:c)));});return a;},adjustMargins:function(a,e){var c=this.chart,d=this.options,g=d.align.charAt(0)+d.verticalAlign.charAt(0)+
d.layout.charAt(0);d.floating||f([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,/(lbv|lm|ltv)/],function(b,f){b.test(g)&&!m(a[f])&&(c[n[f]]=Math.max(c[n[f]],c.legend[(f+1)%2?"legendHeight":"legendWidth"]+[1,-1,-1,1][f]*d[f%2?"x":"y"]+v(d.margin,12)+e[f]));});},render:function(){var a=this,e=a.chart,d=e.renderer,k=a.group,n,b,t,v,m=a.box,x=a.options,w=a.padding;a.itemX=a.initialItemX;a.itemY=a.initialItemY;a.offsetWidth=0;a.lastItemY=0;k||(a.group=k=d.g("legend").attr({zIndex:7}).add(),a.contentGroup=
d.g().attr({zIndex:1}).add(k),a.scrollGroup=d.g().add(a.contentGroup));a.renderTitle();n=a.getAllItems();g(n,function(a,b){return(a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0);});x.reversed&&n.reverse();a.allItems=n;a.display=b=!!n.length;a.lastLineHeight=0;f(n,function(b){a.renderItem(b);});t=(x.width||a.offsetWidth)+w;v=a.lastItemY+a.lastLineHeight+a.titleHeight;v=a.handleOverflow(v);v+=w;m||(a.box=m=d.rect().addClass("highcharts-legend-box").attr({r:x.borderRadius}).add(k),
	m.isNew=!0);m.attr({stroke:x.borderColor,"stroke-width":x.borderWidth||0,fill:x.backgroundColor||"none"}).shadow(x.shadow);0<t&&0<v&&(m[m.isNew?"attr":"animate"](m.crisp({x:0,y:0,width:t,height:v},m.strokeWidth())),m.isNew=!1);m[b?"show":"hide"]();a.legendWidth=t;a.legendHeight=v;f(n,function(b){a.positionItem(b);});b&&k.align(h({width:t,height:v},x),!0,"spacingBox");e.isResizing||this.positionCheckboxes();},handleOverflow:function(a){var c=this,d=this.chart,g=d.renderer,h=this.options,b=h.y,b=d.spacingBox.height+
("top"===h.verticalAlign?-b:b)-this.padding,k=h.maxHeight,n,m=this.clipRect,x=h.navigation,w=v(x.animation,!0),r=x.arrowSize||12,G=this.nav,H=this.pages,q=this.padding,p,A=this.allItems,B=function(a){m.attr({height:a});c.contentGroup.div&&(c.contentGroup.div.style.clip="rect("+q+"px,9999px,"+(q+a)+"px,0)");};"horizontal"===h.layout&&(b/=2);k&&(b=Math.min(b,k));H.length=0;a>b&&!1!==x.enabled?(this.clipHeight=n=Math.max(b-20-this.titleHeight-q,0),this.currentPage=v(this.currentPage,1),this.fullHeight=
a,f(A,function(a,b){var c=a._legendItemPos[1];a=Math.round(a.legendItem.getBBox().height);var d=H.length;if(!d||c-H[d-1]>n&&(p||c)!==H[d-1])H.push(p||c),d++;b===A.length-1&&c+a-H[d-1]>n&&H.push(c);c!==p&&(p=c);}),m||(m=c.clipRect=g.clipRect(0,q,9999,0),c.contentGroup.clip(m)),B(n),G||(this.nav=G=g.g().attr({zIndex:1}).add(this.group),this.up=g.symbol("triangle",0,0,r,r).on("click",function(){c.scroll(-1,w);}).add(G),this.pager=g.text("",15,10).addClass("highcharts-legend-navigation").css(x.style).add(G),
	this.down=g.symbol("triangle-down",0,0,r,r).on("click",function(){c.scroll(1,w);}).add(G)),c.scroll(0),a=b):G&&(B(d.chartHeight),G.hide(),this.scrollGroup.attr({translateY:1}),this.clipHeight=0);return a;},scroll:function(a,e){var c=this.pages,g=c.length;a=this.currentPage+a;var f=this.clipHeight,b=this.options.navigation,h=this.pager,k=this.padding;a>g&&(a=g);0<a&&(void 0!==e&&d(e,this.chart),this.nav.attr({translateX:k,translateY:f+this.padding+7+this.titleHeight,visibility:"visible"}),this.up.attr({"class":1===
a?"highcharts-legend-nav-inactive":"highcharts-legend-nav-active"}),h.attr({text:a+"/"+g}),this.down.attr({x:18+this.pager.getBBox().width,"class":a===g?"highcharts-legend-nav-inactive":"highcharts-legend-nav-active"}),this.up.attr({fill:1===a?b.inactiveColor:b.activeColor}).css({cursor:1===a?"default":"pointer"}),this.down.attr({fill:a===g?b.inactiveColor:b.activeColor}).css({cursor:a===g?"default":"pointer"}),e=-c[a-1]+this.initialItemY,this.scrollGroup.animate({translateY:e}),this.currentPage=
a,this.positionCheckboxes(e));}};a.LegendSymbolMixin={drawRectangle:function(a,d){var c=a.options,e=c.symbolHeight||a.fontMetrics.f,c=c.squareSymbol;d.legendSymbol=this.chart.renderer.rect(c?(a.symbolWidth-e)/2:0,a.baseline-e+1,c?e:a.symbolWidth,e,v(a.options.symbolRadius,e/2)).addClass("highcharts-point").attr({zIndex:3}).add(d.legendGroup);},drawLineMarker:function(a){var c=this.options,d=c.marker,g=a.symbolWidth,f=this.chart.renderer,b=this.legendGroup;a=a.baseline-Math.round(.3*a.fontMetrics.b);
		var h;h={"stroke-width":c.lineWidth||0};c.dashStyle&&(h.dashstyle=c.dashStyle);this.legendLine=f.path(["M",0,a,"L",g,a]).addClass("highcharts-graph").attr(h).add(b);d&&!1!==d.enabled&&(c=0===this.symbol.indexOf("url")?0:d.radius,this.legendSymbol=d=f.symbol(this.symbol,g/2-c,a-c,2*c,2*c,d).addClass("highcharts-point").add(b),d.isMarker=!0);}};(/Trident\/7\.0/.test(w.navigator.userAgent)||q)&&B(D.prototype,"positionItem",function(a,d){var c=this,e=function(){d._legendItemPos&&a.call(c,d);};e();setTimeout(e);});})(M);
	(function(a){var D=a.addEvent,z=a.animate,F=a.animObject,J=a.attr,m=a.doc,f=a.Axis,h=a.createElement,q=a.defaultOptions,n=a.discardElement,k=a.charts,v=a.css,d=a.defined,g=a.each,w=a.error,B=a.extend,c=a.fireEvent,e=a.getStyle,l=a.grep,u=a.isNumber,L=a.isObject,b=a.isString,t=a.Legend,y=a.marginNames,K=a.merge,x=a.Pointer,I=a.pick,r=a.pInt,G=a.removeEvent,H=a.seriesTypes,N=a.splat,p=a.svg,A=a.syncTimeout,P=a.win,O=a.Renderer,C=a.Chart=function(){this.getArgs.apply(this,arguments);};a.chart=function(a,
		b,c){return new C(a,b,c);};C.prototype={callbacks:[],getArgs:function(){var a=[].slice.call(arguments);if(b(a[0])||a[0].nodeName)this.renderTo=a.shift();this.init(a[0],a[1]);},init:function(b,c){var d,e=b.series;b.series=null;d=K(q,b);d.series=b.series=e;this.userOptions=b;this.respRules=[];b=d.chart;e=b.events;this.margin=[];this.spacing=[];this.bounds={h:{},v:{}};this.callback=c;this.isResizing=0;this.options=d;this.axes=[];this.series=[];this.hasCartesianSeries=b.showAxes;var g;this.index=k.length;
		k.push(this);a.chartCount++;if(e)for(g in e)D(this,g,e[g]);this.xAxis=[];this.yAxis=[];this.pointCount=this.colorCounter=this.symbolCounter=0;this.firstRender();},initSeries:function(a){var b=this.options.chart;(b=H[a.type||b.type||b.defaultSeriesType])||w(17,!0);b=new b;b.init(this,a);return b;},isInsidePlot:function(a,b,c){var d=c?b:a;a=c?a:b;return 0<=d&&d<=this.plotWidth&&0<=a&&a<=this.plotHeight;},redraw:function(b){var d=this.axes,e=this.series,f=this.pointer,r=this.legend,h=this.isDirtyLegend,
		l,p,k=this.hasCartesianSeries,n=this.isDirtyBox,H=e.length,t=H,u=this.renderer,v=u.isHidden(),G=[];a.setAnimation(b,this);v&&this.cloneRenderTo();for(this.layOutTitles();t--;)if(b=e[t],b.options.stacking&&(l=!0,b.isDirty)){p=!0;break;}if(p)for(t=H;t--;)b=e[t],b.options.stacking&&(b.isDirty=!0);g(e,function(a){a.isDirty&&"point"===a.options.legendType&&(a.updateTotals&&a.updateTotals(),h=!0);a.isDirtyData&&c(a,"updatedData");});h&&r.options.enabled&&(r.render(),this.isDirtyLegend=!1);l&&this.getStacks();
	k&&g(d,function(a){a.updateNames();a.setScale();});this.getMargins();k&&(g(d,function(a){a.isDirty&&(n=!0);}),g(d,function(a){var b=a.min+","+a.max;a.extKey!==b&&(a.extKey=b,G.push(function(){c(a,"afterSetExtremes",B(a.eventArgs,a.getExtremes()));delete a.eventArgs;}));(n||l)&&a.redraw();}));n&&this.drawChartBox();g(e,function(a){(n||a.isDirty)&&a.visible&&a.redraw();});f&&f.reset(!0);u.draw();c(this,"redraw");v&&this.cloneRenderTo(!0);g(G,function(a){a.call();});},get:function(a){var b=this.axes,c=this.series,
		d,e;for(d=0;d<b.length;d++)if(b[d].options.id===a)return b[d];for(d=0;d<c.length;d++)if(c[d].options.id===a)return c[d];for(d=0;d<c.length;d++)for(e=c[d].points||[],b=0;b<e.length;b++)if(e[b].id===a)return e[b];return null;},getAxes:function(){var a=this,b=this.options,c=b.xAxis=N(b.xAxis||{}),b=b.yAxis=N(b.yAxis||{});g(c,function(a,b){a.index=b;a.isX=!0;});g(b,function(a,b){a.index=b;});c=c.concat(b);g(c,function(b){new f(a,b);});},getSelectedPoints:function(){var a=[];g(this.series,function(b){a=a.concat(l(b.points||
[],function(a){return a.selected;}));});return a;},getSelectedSeries:function(){return l(this.series,function(a){return a.selected;});},setTitle:function(a,b,c){var d=this,e=d.options,f;f=e.title=K(e.title,a);e=e.subtitle=K(e.subtitle,b);g([["title",a,f],["subtitle",b,e]],function(a,b){var c=a[0],e=d[c],g=a[1];a=a[2];e&&g&&(d[c]=e=e.destroy());a&&a.text&&!e&&(d[c]=d.renderer.text(a.text,0,0,a.useHTML).attr({align:a.align,"class":"highcharts-"+c,zIndex:a.zIndex||4}).add(),d[c].update=function(a){d.setTitle(!b&&
a,b&&a);},d[c].css(a.style));});d.layOutTitles(c);},layOutTitles:function(a){var b=0,c,d=this.renderer,e=this.spacingBox;g(["title","subtitle"],function(a){var c=this[a],g=this.options[a],f;c&&(f=g.style.fontSize,f=d.fontMetrics(f,c).b,c.css({width:(g.width||e.width+g.widthAdjust)+"px"}).align(B({y:b+f+("title"===a?-3:2)},g),!1,"spacingBox"),g.floating||g.verticalAlign||(b=Math.ceil(b+c.getBBox().height)));},this);c=this.titleOffset!==b;this.titleOffset=b;!this.isDirtyBox&&c&&(this.isDirtyBox=c,this.hasRendered&&
I(a,!0)&&this.isDirtyBox&&this.redraw());},getChartSize:function(){var a=this.options.chart,b=a.width,a=a.height,c=this.renderToClone||this.renderTo;d(b)||(this.containerWidth=e(c,"width"));d(a)||(this.containerHeight=e(c,"height"));this.chartWidth=Math.max(0,b||this.containerWidth||600);this.chartHeight=Math.max(0,I(a,19<this.containerHeight?this.containerHeight:400));},cloneRenderTo:function(a){var b=this.renderToClone,c=this.container;if(a){if(b){for(;b.childNodes.length;)this.renderTo.appendChild(b.firstChild);
		n(b);delete this.renderToClone;}}else c&&c.parentNode===this.renderTo&&this.renderTo.removeChild(c),this.renderToClone=b=this.renderTo.cloneNode(0),v(b,{position:"absolute",top:"-9999px",display:"block"}),b.style.setProperty&&b.style.setProperty("display","block","important"),m.body.appendChild(b),c&&b.appendChild(c);},setClassName:function(a){this.container.className="highcharts-container "+(a||"");},getContainer:function(){var c,d=this.options,e=d.chart,g,f;c=this.renderTo;var l="highcharts-"+a.idCounter++,
		p;c||(this.renderTo=c=e.renderTo);b(c)&&(this.renderTo=c=m.getElementById(c));c||w(13,!0);g=r(J(c,"data-highcharts-chart"));u(g)&&k[g]&&k[g].hasRendered&&k[g].destroy();J(c,"data-highcharts-chart",this.index);c.innerHTML="";e.skipClone||c.offsetWidth||this.cloneRenderTo();this.getChartSize();g=this.chartWidth;f=this.chartHeight;p=B({position:"relative",overflow:"hidden",width:g+"px",height:f+"px",textAlign:"left",lineHeight:"normal",zIndex:0,"-webkit-tap-highlight-color":"rgba(0,0,0,0)"},e.style);
	this.container=c=h("div",{id:l},p,this.renderToClone||c);this._cursor=c.style.cursor;this.renderer=new (a[e.renderer]||O)(c,g,f,null,e.forExport,d.exporting&&d.exporting.allowHTML);this.setClassName(e.className);this.renderer.setStyle(e.style);this.renderer.chartIndex=this.index;},getMargins:function(a){var b=this.spacing,c=this.margin,e=this.titleOffset;this.resetMargins();e&&!d(c[0])&&(this.plotTop=Math.max(this.plotTop,e+this.options.title.margin+b[0]));this.legend.display&&this.legend.adjustMargins(c,
		b);this.extraBottomMargin&&(this.marginBottom+=this.extraBottomMargin);this.extraTopMargin&&(this.plotTop+=this.extraTopMargin);a||this.getAxisMargins();},getAxisMargins:function(){var a=this,b=a.axisOffset=[0,0,0,0],c=a.margin;a.hasCartesianSeries&&g(a.axes,function(a){a.visible&&a.getOffset();});g(y,function(e,g){d(c[g])||(a[e]+=b[g]);});a.setChartSize();},reflow:function(a){var b=this,c=b.options.chart,g=b.renderTo,f=d(c.width),r=c.width||e(g,"width"),c=c.height||e(g,"height"),g=a?a.target:P;if(!f&&
!b.isPrinting&&r&&c&&(g===P||g===m)){if(r!==b.containerWidth||c!==b.containerHeight)clearTimeout(b.reflowTimeout),b.reflowTimeout=A(function(){b.container&&b.setSize(void 0,void 0,!1);},a?100:0);b.containerWidth=r;b.containerHeight=c;}},initReflow:function(){var a=this,b=function(b){a.reflow(b);};D(P,"resize",b);D(a,"destroy",function(){G(P,"resize",b);});},setSize:function(b,d,e){var f=this,r=f.renderer;f.isResizing+=1;a.setAnimation(e,f);f.oldChartHeight=f.chartHeight;f.oldChartWidth=f.chartWidth;void 0!==
b&&(f.options.chart.width=b);void 0!==d&&(f.options.chart.height=d);f.getChartSize();b=r.globalAnimation;(b?z:v)(f.container,{width:f.chartWidth+"px",height:f.chartHeight+"px"},b);f.setChartSize(!0);r.setSize(f.chartWidth,f.chartHeight,e);g(f.axes,function(a){a.isDirty=!0;a.setScale();});f.isDirtyLegend=!0;f.isDirtyBox=!0;f.layOutTitles();f.getMargins();f.setResponsive&&f.setResponsive(!1);f.redraw(e);f.oldChartHeight=null;c(f,"resize");A(function(){f&&c(f,"endResize",null,function(){--f.isResizing;});},
		F(b).duration);},setChartSize:function(a){var b=this.inverted,c=this.renderer,d=this.chartWidth,e=this.chartHeight,f=this.options.chart,r=this.spacing,h=this.clipOffset,l,p,k,n;this.plotLeft=l=Math.round(this.plotLeft);this.plotTop=p=Math.round(this.plotTop);this.plotWidth=k=Math.max(0,Math.round(d-l-this.marginRight));this.plotHeight=n=Math.max(0,Math.round(e-p-this.marginBottom));this.plotSizeX=b?n:k;this.plotSizeY=b?k:n;this.plotBorderWidth=f.plotBorderWidth||0;this.spacingBox=c.spacingBox={x:r[3],
		y:r[0],width:d-r[3]-r[1],height:e-r[0]-r[2]};this.plotBox=c.plotBox={x:l,y:p,width:k,height:n};d=2*Math.floor(this.plotBorderWidth/2);b=Math.ceil(Math.max(d,h[3])/2);c=Math.ceil(Math.max(d,h[0])/2);this.clipBox={x:b,y:c,width:Math.floor(this.plotSizeX-Math.max(d,h[1])/2-b),height:Math.max(0,Math.floor(this.plotSizeY-Math.max(d,h[2])/2-c))};a||g(this.axes,function(a){a.setAxisSize();a.setAxisTranslation();});},resetMargins:function(){var a=this,b=a.options.chart;g(["margin","spacing"],function(c){var d=
b[c],e=L(d)?d:[d,d,d,d];g(["Top","Right","Bottom","Left"],function(d,g){a[c][g]=I(b[c+d],e[g]);});});g(y,function(b,c){a[b]=I(a.margin[c],a.spacing[c]);});a.axisOffset=[0,0,0,0];a.clipOffset=[0,0,0,0];},drawChartBox:function(){var a=this.options.chart,b=this.renderer,c=this.chartWidth,d=this.chartHeight,e=this.chartBackground,g=this.plotBackground,f=this.plotBorder,r,h=this.plotBGImage,l=a.backgroundColor,p=a.plotBackgroundColor,k=a.plotBackgroundImage,n,t=this.plotLeft,H=this.plotTop,u=this.plotWidth,
		v=this.plotHeight,G=this.plotBox,m=this.clipRect,x=this.clipBox,y="animate";e||(this.chartBackground=e=b.rect().addClass("highcharts-background").add(),y="attr");r=a.borderWidth||0;n=r+(a.shadow?8:0);l={fill:l||"none"};if(r||e["stroke-width"])l.stroke=a.borderColor,l["stroke-width"]=r;e.attr(l).shadow(a.shadow);e[y]({x:n/2,y:n/2,width:c-n-r%2,height:d-n-r%2,r:a.borderRadius});y="animate";g||(y="attr",this.plotBackground=g=b.rect().addClass("highcharts-plot-background").add());g[y](G);g.attr({fill:p||
"none"}).shadow(a.plotShadow);k&&(h?h.animate(G):this.plotBGImage=b.image(k,t,H,u,v).add());m?m.animate({width:x.width,height:x.height}):this.clipRect=b.clipRect(x);y="animate";f||(y="attr",this.plotBorder=f=b.rect().addClass("highcharts-plot-border").attr({zIndex:1}).add());f.attr({stroke:a.plotBorderColor,"stroke-width":a.plotBorderWidth||0,fill:"none"});f[y](f.crisp({x:t,y:H,width:u,height:v},-f.strokeWidth()));this.isDirtyBox=!1;},propFromSeries:function(){var a=this,b=a.options.chart,c,d=a.options.series,
		e,f;g(["inverted","angular","polar"],function(g){c=H[b.type||b.defaultSeriesType];f=b[g]||c&&c.prototype[g];for(e=d&&d.length;!f&&e--;)(c=H[d[e].type])&&c.prototype[g]&&(f=!0);a[g]=f;});},linkSeries:function(){var a=this,c=a.series;g(c,function(a){a.linkedSeries.length=0;});g(c,function(c){var d=c.options.linkedTo;b(d)&&(d=":previous"===d?a.series[c.index-1]:a.get(d))&&d.linkedParent!==c&&(d.linkedSeries.push(c),c.linkedParent=d,c.visible=I(c.options.visible,d.options.visible,c.visible));});},renderSeries:function(){g(this.series,
		function(a){a.translate();a.render();});},renderLabels:function(){var a=this,b=a.options.labels;b.items&&g(b.items,function(c){var d=B(b.style,c.style),e=r(d.left)+a.plotLeft,g=r(d.top)+a.plotTop+12;delete d.left;delete d.top;a.renderer.text(c.html,e,g).attr({zIndex:2}).css(d).add();});},render:function(){var a=this.axes,b=this.renderer,c=this.options,d,e,f;this.setTitle();this.legend=new t(this,c.legend);this.getStacks&&this.getStacks();this.getMargins(!0);this.setChartSize();c=this.plotWidth;d=this.plotHeight-=
21;g(a,function(a){a.setScale();});this.getAxisMargins();e=1.1<c/this.plotWidth;f=1.05<d/this.plotHeight;if(e||f)g(a,function(a){(a.horiz&&e||!a.horiz&&f)&&a.setTickInterval(!0);}),this.getMargins();this.drawChartBox();this.hasCartesianSeries&&g(a,function(a){a.visible&&a.render();});this.seriesGroup||(this.seriesGroup=b.g("series-group").attr({zIndex:3}).add());this.renderSeries();this.renderLabels();this.addCredits();this.setResponsive&&this.setResponsive();this.hasRendered=!0;},addCredits:function(a){var b=
this;a=K(!0,this.options.credits,a);a.enabled&&!this.credits&&(this.credits=this.renderer.text(a.text+(this.mapCredits||""),0,0).addClass("highcharts-credits").on("click",function(){a.href&&(P.location.href=a.href);}).attr({align:a.position.align,zIndex:8}).css(a.style).add().align(a.position),this.credits.update=function(a){b.credits=b.credits.destroy();b.addCredits(a);});},destroy:function(){var b=this,d=b.axes,e=b.series,f=b.container,r,h=f&&f.parentNode;c(b,"destroy");k[b.index]=void 0;a.chartCount--;
		b.renderTo.removeAttribute("data-highcharts-chart");G(b);for(r=d.length;r--;)d[r]=d[r].destroy();this.scroller&&this.scroller.destroy&&this.scroller.destroy();for(r=e.length;r--;)e[r]=e[r].destroy();g("title subtitle chartBackground plotBackground plotBGImage plotBorder seriesGroup clipRect credits pointer rangeSelector legend resetZoomButton tooltip renderer".split(" "),function(a){var c=b[a];c&&c.destroy&&(b[a]=c.destroy());});f&&(f.innerHTML="",G(f),h&&n(f));for(r in b)delete b[r];},isReadyToRender:function(){var a=
this;return p||P!=P.top||"complete"===m.readyState?!0:(m.attachEvent("onreadystatechange",function(){m.detachEvent("onreadystatechange",a.firstRender);"complete"===m.readyState&&a.firstRender();}),!1);},firstRender:function(){var a=this,b=a.options;if(a.isReadyToRender()){a.getContainer();c(a,"init");a.resetMargins();a.setChartSize();a.propFromSeries();a.getAxes();g(b.series||[],function(b){a.initSeries(b);});a.linkSeries();c(a,"beforeRender");x&&(a.pointer=new x(a,b));a.render();a.renderer.draw();if(!a.renderer.imgCount&&
a.onload)a.onload();a.cloneRenderTo(!0);}},onload:function(){g([this.callback].concat(this.callbacks),function(a){a&&void 0!==this.index&&a.apply(this,[this]);},this);c(this,"load");!1!==this.options.chart.reflow&&this.initReflow();this.onload=null;}};})(M);(function(a){var D,z=a.each,F=a.extend,J=a.erase,m=a.fireEvent,f=a.format,h=a.isArray,q=a.isNumber,n=a.pick,k=a.removeEvent;D=a.Point=function(){};D.prototype={init:function(a,d,g){this.series=a;this.color=a.color;this.applyOptions(d,g);a.options.colorByPoint?
		(d=a.options.colors||a.chart.options.colors,this.color=this.color||d[a.colorCounter],d=d.length,g=a.colorCounter,a.colorCounter++,a.colorCounter===d&&(a.colorCounter=0)):g=a.colorIndex;this.colorIndex=n(this.colorIndex,g);a.chart.pointCount++;return this;},applyOptions:function(a,d){var g=this.series,f=g.options.pointValKey||g.pointValKey;a=D.prototype.optionsToObject.call(this,a);F(this,a);this.options=this.options?F(this.options,a):a;a.group&&delete this.group;f&&(this.y=this[f]);this.isNull=n(this.isValid&&
!this.isValid(),null===this.x||!q(this.y,!0));this.selected&&(this.state="select");"name"in this&&void 0===d&&g.xAxis&&g.xAxis.hasNames&&(this.x=g.xAxis.nameToX(this));void 0===this.x&&g&&(this.x=void 0===d?g.autoIncrement(this):d);return this;},optionsToObject:function(a){var d={},g=this.series,f=g.options.keys,k=f||g.pointArrayMap||["y"],c=k.length,e=0,l=0;if(q(a)||null===a)d[k[0]]=a;else if(h(a))for(!f&&a.length>c&&(g=typeof a[0],"string"===g?d.name=a[0]:"number"===g&&(d.x=a[0]),e++);l<c;)f&&void 0===
a[e]||(d[k[l]]=a[e]),e++,l++;else"object"===typeof a&&(d=a,a.dataLabels&&(g._hasPointLabels=!0),a.marker&&(g._hasPointMarkers=!0));return d;},getClassName:function(){return"highcharts-point"+(this.selected?" highcharts-point-select":"")+(this.negative?" highcharts-negative":"")+(this.isNull?" highcharts-null-point":"")+(void 0!==this.colorIndex?" highcharts-color-"+this.colorIndex:"")+(this.options.className?" "+this.options.className:"");},getZone:function(){var a=this.series,d=a.zones,a=a.zoneAxis||
"y",g=0,f;for(f=d[g];this[a]>=f.value;)f=d[++g];f&&f.color&&!this.options.color&&(this.color=f.color);return f;},destroy:function(){var a=this.series.chart,d=a.hoverPoints,g;a.pointCount--;d&&(this.setState(),J(d,this),d.length||(a.hoverPoints=null));if(this===a.hoverPoint)this.onMouseOut();if(this.graphic||this.dataLabel)k(this),this.destroyElements();this.legendItem&&a.legend.destroyItem(this);for(g in this)this[g]=null;},destroyElements:function(){for(var a=["graphic","dataLabel","dataLabelUpper",
			"connector","shadowGroup"],d,g=6;g--;)d=a[g],this[d]&&(this[d]=this[d].destroy());},getLabelConfig:function(){return{x:this.category,y:this.y,color:this.color,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal};},tooltipFormatter:function(a){var d=this.series,g=d.tooltipOptions,h=n(g.valueDecimals,""),k=g.valuePrefix||"",c=g.valueSuffix||"";z(d.pointArrayMap||["y"],function(d){d="{point."+d;if(k||c)a=a.replace(d+"}",k+d+"}"+c);a=a.replace(d+
"}",d+":,."+h+"f}");});return f(a,{point:this,series:this.series});},firePointEvent:function(a,d,g){var f=this,h=this.series.options;(h.point.events[a]||f.options&&f.options.events&&f.options.events[a])&&this.importEvents();"click"===a&&h.allowPointSelect&&(g=function(a){f.select&&f.select(null,a.ctrlKey||a.metaKey||a.shiftKey);});m(this,a,d,g);},visible:!0};})(M);(function(a){var D=a.addEvent,z=a.animObject,F=a.arrayMax,J=a.arrayMin,m=a.correctFloat,f=a.Date,h=a.defaultOptions,q=a.defaultPlotOptions,
		n=a.defined,k=a.each,v=a.erase,d=a.error,g=a.extend,w=a.fireEvent,B=a.grep,c=a.isArray,e=a.isNumber,l=a.isString,u=a.merge,L=a.pick,b=a.removeEvent,t=a.splat,y=a.stableSort,K=a.SVGElement,x=a.syncTimeout,I=a.win;a.Series=a.seriesType("line",null,{lineWidth:2,allowPointSelect:!1,showCheckbox:!1,animation:{duration:1E3},events:{},marker:{lineWidth:0,lineColor:"#ffffff",radius:4,states:{hover:{animation:{duration:50},enabled:!0,radiusPlus:2,lineWidthPlus:1},select:{fillColor:"#cccccc",lineColor:"#000000",
		lineWidth:2}}},point:{events:{}},dataLabels:{align:"center",formatter:function(){return null===this.y?"":a.numberFormat(this.y,-1);},style:{fontSize:"11px",fontWeight:"bold",color:"contrast",textShadow:"1px 1px contrast, -1px -1px contrast, -1px 1px contrast, 1px -1px contrast"},verticalAlign:"bottom",x:0,y:0,padding:5},cropThreshold:300,pointRange:0,softThreshold:!0,states:{hover:{lineWidthPlus:1,marker:{},halo:{size:10,opacity:.25}},select:{marker:{}}},stickyTracking:!0,turboThreshold:1E3},{isCartesian:!0,
		pointClass:a.Point,sorted:!0,requireSorting:!0,directTouch:!1,axisTypes:["xAxis","yAxis"],colorCounter:0,parallelArrays:["x","y"],coll:"series",init:function(a,b){var c=this,d,e,f=a.series,r=function(a,b){return L(a.options.index,a._i)-L(b.options.index,b._i);};c.chart=a;c.options=b=c.setOptions(b);c.linkedSeries=[];c.bindAxes();g(c,{name:b.name,state:"",visible:!1!==b.visible,selected:!0===b.selected});e=b.events;for(d in e)D(c,d,e[d]);if(e&&e.click||b.point&&b.point.events&&b.point.events.click||
b.allowPointSelect)a.runTrackerClick=!0;c.getColor();c.getSymbol();k(c.parallelArrays,function(a){c[a+"Data"]=[];});c.setData(b.data,!1);c.isCartesian&&(a.hasCartesianSeries=!0);f.push(c);c._i=f.length-1;y(f,r);this.yAxis&&y(this.yAxis.series,r);k(f,function(a,b){a.index=b;a.name=a.name||"Series "+(b+1);});},bindAxes:function(){var a=this,b=a.options,c=a.chart,e;k(a.axisTypes||[],function(g){k(c[g],function(c){e=c.options;if(b[g]===e.index||void 0!==b[g]&&b[g]===e.id||void 0===b[g]&&0===e.index)c.series.push(a),
		a[g]=c,c.isDirty=!0;});a[g]||a.optionalAxis===g||d(18,!0);});},updateParallelArrays:function(a,b){var c=a.series,d=arguments,g=e(b)?function(d){var e="y"===d&&c.toYData?c.toYData(a):a[d];c[d+"Data"][b]=e;}:function(a){Array.prototype[b].apply(c[a+"Data"],Array.prototype.slice.call(d,2));};k(c.parallelArrays,g);},autoIncrement:function(){var a=this.options,b=this.xIncrement,c,d=a.pointIntervalUnit,b=L(b,a.pointStart,0);this.pointInterval=c=L(this.pointInterval,a.pointInterval,1);d&&(a=new f(b),"day"===d?
			a=+a[f.hcSetDate](a[f.hcGetDate]()+c):"month"===d?a=+a[f.hcSetMonth](a[f.hcGetMonth]()+c):"year"===d&&(a=+a[f.hcSetFullYear](a[f.hcGetFullYear]()+c)),c=a-b);this.xIncrement=b+c;return b;},setOptions:function(a){var b=this.chart,c=b.options.plotOptions,b=b.userOptions||{},d=b.plotOptions||{},e=c[this.type];this.userOptions=a;c=u(e,c.series,a);this.tooltipOptions=u(h.tooltip,h.plotOptions[this.type].tooltip,b.tooltip,d.series&&d.series.tooltip,d[this.type]&&d[this.type].tooltip,a.tooltip);null===e.marker&&
delete c.marker;this.zoneAxis=c.zoneAxis;a=this.zones=(c.zones||[]).slice();!c.negativeColor&&!c.negativeFillColor||c.zones||a.push({value:c[this.zoneAxis+"Threshold"]||c.threshold||0,className:"highcharts-negative",color:c.negativeColor,fillColor:c.negativeFillColor});a.length&&n(a[a.length-1].value)&&a.push({color:this.color,fillColor:this.fillColor});return c;},getCyclic:function(a,b,c){var d,e=this.userOptions,g=a+"Index",f=a+"Counter",h=c?c.length:L(this.chart.options.chart[a+"Count"],this.chart[a+
"Count"]);b||(d=L(e[g],e["_"+g]),n(d)||(e["_"+g]=d=this.chart[f]%h,this.chart[f]+=1),c&&(b=c[d]));void 0!==d&&(this[g]=d);this[a]=b;},getColor:function(){this.options.colorByPoint?this.options.color=null:this.getCyclic("color",this.options.color||q[this.type].color,this.chart.options.colors);},getSymbol:function(){this.getCyclic("symbol",this.options.marker.symbol,this.chart.options.symbols);},drawLegendSymbol:a.LegendSymbolMixin.drawLineMarker,setData:function(a,b,g,f){var h=this,r=h.points,n=r&&r.length||
0,t,u=h.options,x=h.chart,m=null,y=h.xAxis,G=u.turboThreshold,q=this.xData,w=this.yData,v=(t=h.pointArrayMap)&&t.length;a=a||[];t=a.length;b=L(b,!0);if(!1!==f&&t&&n===t&&!h.cropped&&!h.hasGroupedData&&h.visible)k(a,function(a,b){r[b].update&&a!==u.data[b]&&r[b].update(a,!1,null,!1);});else{h.xIncrement=null;h.colorCounter=0;k(this.parallelArrays,function(a){h[a+"Data"].length=0;});if(G&&t>G){for(g=0;null===m&&g<t;)m=a[g],g++;if(e(m))for(g=0;g<t;g++)q[g]=this.autoIncrement(),w[g]=a[g];else if(c(m))if(v)for(g=
0;g<t;g++)m=a[g],q[g]=m[0],w[g]=m.slice(1,v+1);else for(g=0;g<t;g++)m=a[g],q[g]=m[0],w[g]=m[1];else d(12);}else for(g=0;g<t;g++)void 0!==a[g]&&(m={series:h},h.pointClass.prototype.applyOptions.apply(m,[a[g]]),h.updateParallelArrays(m,g));l(w[0])&&d(14,!0);h.data=[];h.options.data=h.userOptions.data=a;for(g=n;g--;)r[g]&&r[g].destroy&&r[g].destroy();y&&(y.minRange=y.userMinRange);h.isDirty=x.isDirtyBox=!0;h.isDirtyData=!!r;g=!1;}"point"===u.legendType&&(this.processData(),this.generatePoints());b&&x.redraw(g);},
		processData:function(a){var b=this.xData,c=this.yData,e=b.length,g;g=0;var f,h,l=this.xAxis,k,r=this.options;k=r.cropThreshold;var n=this.getExtremesFromAll||r.getExtremesFromAll,t=this.isCartesian,r=l&&l.val2lin,u=l&&l.isLog,m,x;if(t&&!this.isDirty&&!l.isDirty&&!this.yAxis.isDirty&&!a)return!1;l&&(a=l.getExtremes(),m=a.min,x=a.max);if(t&&this.sorted&&!n&&(!k||e>k||this.forceCrop))if(b[e-1]<m||b[0]>x)b=[],c=[];else if(b[0]<m||b[e-1]>x)g=this.cropData(this.xData,this.yData,m,x),b=g.xData,c=g.yData,
		g=g.start,f=!0;for(k=b.length||1;--k;)e=u?r(b[k])-r(b[k-1]):b[k]-b[k-1],0<e&&(void 0===h||e<h)?h=e:0>e&&this.requireSorting&&d(15);this.cropped=f;this.cropStart=g;this.processedXData=b;this.processedYData=c;this.closestPointRange=h;},cropData:function(a,b,c,d){var e=a.length,g=0,f=e,h=L(this.cropShoulder,1),l;for(l=0;l<e;l++)if(a[l]>=c){g=Math.max(0,l-h);break;}for(c=l;c<e;c++)if(a[c]>d){f=c+h;break;}return{xData:a.slice(g,f),yData:b.slice(g,f),start:g,end:f};},generatePoints:function(){var a=this.options.data,
			b=this.data,c,d=this.processedXData,e=this.processedYData,g=this.pointClass,f=d.length,h=this.cropStart||0,l,k=this.hasGroupedData,n,u=[],m;b||k||(b=[],b.length=a.length,b=this.data=b);for(m=0;m<f;m++)l=h+m,k?(u[m]=(new g).init(this,[d[m]].concat(t(e[m]))),u[m].dataGroup=this.groupMap[m]):(b[l]?n=b[l]:void 0!==a[l]&&(b[l]=n=(new g).init(this,a[l],d[m])),u[m]=n),u[m].index=l;if(b&&(f!==(c=b.length)||k))for(m=0;m<c;m++)m!==h||k||(m+=f),b[m]&&(b[m].destroyElements(),b[m].plotX=void 0);this.data=b;this.points=
u;},getExtremes:function(a){var b=this.yAxis,d=this.processedXData,g,f=[],h=0;g=this.xAxis.getExtremes();var l=g.min,k=g.max,r,n,t,m;a=a||this.stackedYData||this.processedYData||[];g=a.length;for(m=0;m<g;m++)if(n=d[m],t=a[m],r=(e(t,!0)||c(t))&&(!b.isLog||t.length||0<t),n=this.getExtremesFromAll||this.options.getExtremesFromAll||this.cropped||(d[m+1]||n)>=l&&(d[m-1]||n)<=k,r&&n)if(r=t.length)for(;r--;)null!==t[r]&&(f[h++]=t[r]);else f[h++]=t;this.dataMin=J(f);this.dataMax=F(f);},translate:function(){this.processedXData||
this.processData();this.generatePoints();for(var a=this.options,b=a.stacking,c=this.xAxis,d=c.categories,g=this.yAxis,f=this.points,h=f.length,l=!!this.modifyValue,k=a.pointPlacement,t="between"===k||e(k),u=a.threshold,x=a.startFromThreshold?u:0,y,q,w,v,K=Number.MAX_VALUE,a=0;a<h;a++){var I=f[a],B=I.x,z=I.y;q=I.low;var D=b&&g.stacks[(this.negStacks&&z<(x?0:u)?"-":"")+this.stackKey],F;g.isLog&&null!==z&&0>=z&&(I.isNull=!0);I.plotX=y=m(Math.min(Math.max(-1E5,c.translate(B,0,0,0,1,k,"flags"===this.type)),
			1E5));b&&this.visible&&!I.isNull&&D&&D[B]&&(v=this.getStackIndicator(v,B,this.index),F=D[B],z=F.points[v.key],q=z[0],z=z[1],q===x&&v.key===D[B].base&&(q=L(u,g.min)),g.isLog&&0>=q&&(q=null),I.total=I.stackTotal=F.total,I.percentage=F.total&&I.y/F.total*100,I.stackY=z,F.setOffset(this.pointXOffset||0,this.barW||0));I.yBottom=n(q)?g.translate(q,0,1,0,1):null;l&&(z=this.modifyValue(z,I));I.plotY=q="number"===typeof z&&Infinity!==z?Math.min(Math.max(-1E5,g.translate(z,0,1,0,1)),1E5):void 0;I.isInside=
void 0!==q&&0<=q&&q<=g.len&&0<=y&&y<=c.len;I.clientX=t?m(c.translate(B,0,0,0,1,k)):y;I.negative=I.y<(u||0);I.category=d&&void 0!==d[I.x]?d[I.x]:I.x;I.isNull||(void 0!==w&&(K=Math.min(K,Math.abs(y-w))),w=y);}this.closestPointRangePx=K;},getValidPoints:function(a,b){var c=this.chart;return B(a||this.points||[],function(a){return b&&!c.isInsidePlot(a.plotX,a.plotY,c.inverted)?!1:!a.isNull;});},setClip:function(a){var b=this.chart,c=this.options,d=b.renderer,e=b.inverted,g=this.clipBox,f=g||b.clipBox,h=this.sharedClipKey||
["_sharedClip",a&&a.duration,a&&a.easing,f.height,c.xAxis,c.yAxis].join(),l=b[h],k=b[h+"m"];l||(a&&(f.width=0,b[h+"m"]=k=d.clipRect(-99,e?-b.plotLeft:-b.plotTop,99,e?b.chartWidth:b.chartHeight)),b[h]=l=d.clipRect(f),l.count={length:0});a&&!l.count[this.index]&&(l.count[this.index]=!0,l.count.length+=1);!1!==c.clip&&(this.group.clip(a||g?l:b.clipRect),this.markerGroup.clip(k),this.sharedClipKey=h);a||(l.count[this.index]&&(delete l.count[this.index],--l.count.length),0===l.count.length&&h&&b[h]&&(g||
(b[h]=b[h].destroy()),b[h+"m"]&&(b[h+"m"]=b[h+"m"].destroy())));},animate:function(a){var b=this.chart,c=z(this.options.animation),d;a?this.setClip(c):(d=this.sharedClipKey,(a=b[d])&&a.animate({width:b.plotSizeX},c),b[d+"m"]&&b[d+"m"].animate({width:b.plotSizeX+99},c),this.animate=null);},afterAnimate:function(){this.setClip();w(this,"afterAnimate");},drawPoints:function(){var a=this.points,b=this.chart,c,d,g,f,h=this.options.marker,l,k,n,t,m=this.markerGroup,u=L(h.enabled,this.xAxis.isRadial?!0:null,
			this.closestPointRangePx>2*h.radius);if(!1!==h.enabled||this._hasPointMarkers)for(d=a.length;d--;)g=a[d],c=g.plotY,f=g.graphic,l=g.marker||{},k=!!g.marker,n=u&&void 0===l.enabled||l.enabled,t=g.isInside,n&&e(c)&&null!==g.y?(c=L(l.symbol,this.symbol),g.hasImage=0===c.indexOf("url"),n=this.markerAttribs(g,g.selected&&"select"),f?f[t?"show":"hide"](!0).animate(n):t&&(0<n.width||g.hasImage)&&(g.graphic=f=b.renderer.symbol(c,n.x,n.y,n.width,n.height,k?l:h).add(m)),f&&f.attr(this.pointAttribs(g,g.selected&&
"select")),f&&f.addClass(g.getClassName(),!0)):f&&(g.graphic=f.destroy());},markerAttribs:function(a,b){var c=this.options.marker,d=a&&a.options,e=d&&d.marker||{},d=L(e.radius,c.radius);b&&(c=c.states[b],b=e.states&&e.states[b],d=L(b&&b.radius,c&&c.radius,d+(c&&c.radiusPlus||0)));a.hasImage&&(d=0);a={x:Math.floor(a.plotX)-d,y:a.plotY-d};d&&(a.width=a.height=2*d);return a;},pointAttribs:function(a,b){var c=this.options.marker,d=a&&a.options,e=d&&d.marker||{},g=c.lineWidth,f=this.color,d=d&&d.color,h=
a&&a.color,l;a&&this.zones.length&&(a=a.getZone())&&a.color&&(l=a.color);f=d||l||h||f;l=e.fillColor||c.fillColor||f;f=e.lineColor||c.lineColor||f;b&&(c=c.states[b],b=e.states&&e.states[b]||{},g=c.lineWidth||g+c.lineWidthPlus,l=b.fillColor||c.fillColor||l,f=b.lineColor||c.lineColor||f);return{stroke:f,"stroke-width":g,fill:l};},destroy:function(){var a=this,c=a.chart,d=/AppleWebKit\/533/.test(I.navigator.userAgent),e,g=a.data||[],f,h,l;w(a,"destroy");b(a);k(a.axisTypes||[],function(b){(l=a[b])&&l.series&&
(v(l.series,a),l.isDirty=l.forceRedraw=!0);});a.legendItem&&a.chart.legend.destroyItem(a);for(e=g.length;e--;)(f=g[e])&&f.destroy&&f.destroy();a.points=null;clearTimeout(a.animationTimeout);for(h in a)a[h]instanceof K&&!a[h].survive&&(e=d&&"group"===h?"hide":"destroy",a[h][e]());c.hoverSeries===a&&(c.hoverSeries=null);v(c.series,a);for(h in a)delete a[h];},getGraphPath:function(a,b,c){var d=this,e=d.options,g=e.step,f,h=[],l=[],r;a=a||d.points;(f=a.reversed)&&a.reverse();(g={right:1,center:2}[g]||g&&
3)&&f&&(g=4-g);!e.connectNulls||b||c||(a=this.getValidPoints(a));k(a,function(f,k){var t=f.plotX,p=f.plotY,m=a[k-1];(f.leftCliff||m&&m.rightCliff)&&!c&&(r=!0);f.isNull&&!n(b)&&0<k?r=!e.connectNulls:f.isNull&&!b?r=!0:(0===k||r?k=["M",f.plotX,f.plotY]:d.getPointSpline?k=d.getPointSpline(a,f,k):g?(k=1===g?["L",m.plotX,p]:2===g?["L",(m.plotX+t)/2,m.plotY,"L",(m.plotX+t)/2,p]:["L",t,m.plotY],k.push("L",t,p)):k=["L",t,p],l.push(f.x),g&&l.push(f.x),h.push.apply(h,k),r=!1);});h.xMap=l;return d.graphPath=h;},
		drawGraph:function(){var a=this,b=this.options,c=(this.gappedPath||this.getGraphPath).call(this),d=[["graph","highcharts-graph",b.lineColor||this.color,b.dashStyle]];k(this.zones,function(c,e){d.push(["zone-graph-"+e,"highcharts-graph highcharts-zone-graph-"+e+" "+(c.className||""),c.color||a.color,c.dashStyle||b.dashStyle]);});k(d,function(d,e){var g=d[0],f=a[g];f?(f.endX=c.xMap,f.animate({d:c})):c.length&&(a[g]=a.chart.renderer.path(c).addClass(d[1]).attr({zIndex:1}).add(a.group),f={stroke:d[2],
			"stroke-width":b.lineWidth,fill:a.fillGraph&&a.color||"none"},d[3]?f.dashstyle=d[3]:"square"!==b.linecap&&(f["stroke-linecap"]=f["stroke-linejoin"]="round"),f=a[g].attr(f).shadow(2>e&&b.shadow));f&&(f.startX=c.xMap,f.isArea=c.isArea);});},applyZones:function(){var a=this,b=this.chart,c=b.renderer,d=this.zones,e,g,f=this.clips||[],h,l=this.graph,n=this.area,t=Math.max(b.chartWidth,b.chartHeight),m=this[(this.zoneAxis||"y")+"Axis"],u,x,y=b.inverted,q,w,v,K,I=!1;d.length&&(l||n)&&m&&void 0!==m.min&&(x=
m.reversed,q=m.horiz,l&&l.hide(),n&&n.hide(),u=m.getExtremes(),k(d,function(d,k){e=x?q?b.plotWidth:0:q?0:m.toPixels(u.min);e=Math.min(Math.max(L(g,e),0),t);g=Math.min(Math.max(Math.round(m.toPixels(L(d.value,u.max),!0)),0),t);I&&(e=g=m.toPixels(u.max));w=Math.abs(e-g);v=Math.min(e,g);K=Math.max(e,g);m.isXAxis?(h={x:y?K:v,y:0,width:w,height:t},q||(h.x=b.plotHeight-h.x)):(h={x:0,y:y?K:v,width:t,height:w},q&&(h.y=b.plotWidth-h.y));y&&c.isVML&&(h=m.isXAxis?{x:0,y:x?v:K,height:h.width,width:b.chartWidth}:
			{x:h.y-b.plotLeft-b.spacingBox.x,y:0,width:h.height,height:b.chartHeight});f[k]?f[k].animate(h):(f[k]=c.clipRect(h),l&&a["zone-graph-"+k].clip(f[k]),n&&a["zone-area-"+k].clip(f[k]));I=d.value>u.max;}),this.clips=f);},invertGroups:function(a){function c(){var b={width:d.yAxis.len,height:d.xAxis.len};k(["group","markerGroup"],function(c){d[c]&&d[c].attr(b).invert(a);});}var d=this,e=d.chart;d.xAxis&&(D(e,"resize",c),D(d,"destroy",function(){b(e,"resize",c);}),c(a),d.invertGroups=c);},plotGroup:function(a,
			b,c,d,e){var g=this[a],f=!g;f&&(this[a]=g=this.chart.renderer.g(b).attr({zIndex:d||.1}).add(e),g.addClass("highcharts-series-"+this.index+" highcharts-"+this.type+"-series highcharts-color-"+this.colorIndex+" "+(this.options.className||"")));g.attr({visibility:c})[f?"attr":"animate"](this.getPlotBox());return g;},getPlotBox:function(){var a=this.chart,b=this.xAxis,c=this.yAxis;a.inverted&&(b=c,c=this.xAxis);return{translateX:b?b.left:a.plotLeft,translateY:c?c.top:a.plotTop,scaleX:1,scaleY:1};},render:function(){var a=
this,b=a.chart,c,d=a.options,e=!!a.animate&&b.renderer.isSVG&&z(d.animation).duration,g=a.visible?"inherit":"hidden",f=d.zIndex,h=a.hasRendered,l=b.seriesGroup,k=b.inverted;c=a.plotGroup("group","series",g,f,l);a.markerGroup=a.plotGroup("markerGroup","markers",g,f,l);e&&a.animate(!0);c.inverted=a.isCartesian?k:!1;a.drawGraph&&(a.drawGraph(),a.applyZones());a.drawDataLabels&&a.drawDataLabels();a.visible&&a.drawPoints();a.drawTracker&&!1!==a.options.enableMouseTracking&&a.drawTracker();a.invertGroups(k);
		!1===d.clip||a.sharedClipKey||h||c.clip(b.clipRect);e&&a.animate();h||(a.animationTimeout=x(function(){a.afterAnimate();},e));a.isDirty=a.isDirtyData=!1;a.hasRendered=!0;},redraw:function(){var a=this.chart,b=this.isDirty||this.isDirtyData,c=this.group,d=this.xAxis,e=this.yAxis;c&&(a.inverted&&c.attr({width:a.plotWidth,height:a.plotHeight}),c.animate({translateX:L(d&&d.left,a.plotLeft),translateY:L(e&&e.top,a.plotTop)}));this.translate();this.render();b&&delete this.kdTree;},kdDimensions:1,kdAxisArray:["clientX",
			"plotY"],searchPoint:function(a,b){var c=this.xAxis,d=this.yAxis,e=this.chart.inverted;return this.searchKDTree({clientX:e?c.len-a.chartY+c.pos:a.chartX-c.pos,plotY:e?d.len-a.chartX+d.pos:a.chartY-d.pos},b);},buildKDTree:function(){function a(c,d,e){var g,f;if(f=c&&c.length)return g=b.kdAxisArray[d%e],c.sort(function(a,b){return a[g]-b[g];}),f=Math.floor(f/2),{point:c[f],left:a(c.slice(0,f),d+1,e),right:a(c.slice(f+1),d+1,e)};}var b=this,c=b.kdDimensions;delete b.kdTree;x(function(){b.kdTree=a(b.getValidPoints(null,
			!b.directTouch),c,c);},b.options.kdNow?0:1);},searchKDTree:function(a,b){function c(a,b,h,l){var k=b.point,t=d.kdAxisArray[h%l],m,u,r=k;u=n(a[e])&&n(k[e])?Math.pow(a[e]-k[e],2):null;m=n(a[g])&&n(k[g])?Math.pow(a[g]-k[g],2):null;m=(u||0)+(m||0);k.dist=n(m)?Math.sqrt(m):Number.MAX_VALUE;k.distX=n(u)?Math.sqrt(u):Number.MAX_VALUE;t=a[t]-k[t];m=0>t?"left":"right";u=0>t?"right":"left";b[m]&&(m=c(a,b[m],h+1,l),r=m[f]<r[f]?m:k);b[u]&&Math.sqrt(t*t)<r[f]&&(a=c(a,b[u],h+1,l),r=a[f]<r[f]?a:r);return r;}var d=
this,e=this.kdAxisArray[0],g=this.kdAxisArray[1],f=b?"distX":"dist";this.kdTree||this.buildKDTree();if(this.kdTree)return c(a,this.kdTree,this.kdDimensions,this.kdDimensions);}});})(M);(function(a){function D(a,f,d,g,h){var k=a.chart.inverted;this.axis=a;this.isNegative=d;this.options=f;this.x=g;this.total=null;this.points={};this.stack=h;this.rightCliff=this.leftCliff=0;this.alignOptions={align:f.align||(k?d?"left":"right":"center"),verticalAlign:f.verticalAlign||(k?"middle":d?"bottom":"top"),y:n(f.y,
		k?4:d?14:-6),x:n(f.x,k?d?-6:6:0)};this.textAlign=f.textAlign||(k?d?"right":"left":"center");}var z=a.Axis,F=a.Chart,J=a.correctFloat,m=a.defined,f=a.destroyObjectProperties,h=a.each,q=a.format,n=a.pick;a=a.Series;D.prototype={destroy:function(){f(this,this.axis);},render:function(a){var f=this.options,d=f.format,d=d?q(d,this):f.formatter.call(this);this.label?this.label.attr({text:d,visibility:"hidden"}):this.label=this.axis.chart.renderer.text(d,null,null,f.useHTML).css(f.style).attr({align:this.textAlign,
		rotation:f.rotation,visibility:"hidden"}).add(a);},setOffset:function(a,f){var d=this.axis,g=d.chart,h=g.inverted,k=d.reversed,k=this.isNegative&&!k||!this.isNegative&&k,c=d.translate(d.usePercentage?100:this.total,0,0,0,1),d=d.translate(0),d=Math.abs(c-d);a=g.xAxis[0].translate(this.x)+a;var e=g.plotHeight,h={x:h?k?c:c-d:a,y:h?e-a-f:k?e-c-d:e-c,width:h?d:f,height:h?f:d};if(f=this.label)f.align(this.alignOptions,null,h),h=f.alignAttr,f[!1===this.options.crop||g.isInsidePlot(h.x,h.y)?"show":"hide"](!0);}};
	F.prototype.getStacks=function(){var a=this;h(a.yAxis,function(a){a.stacks&&a.hasVisibleSeries&&(a.oldStacks=a.stacks);});h(a.series,function(f){!f.options.stacking||!0!==f.visible&&!1!==a.options.chart.ignoreHiddenSeries||(f.stackKey=f.type+n(f.options.stack,""));});};z.prototype.buildStacks=function(){var a=this.series,f,d=n(this.options.reversedStacks,!0),g=a.length,h;if(!this.isXAxis){this.usePercentage=!1;for(h=g;h--;)a[d?h:g-h-1].setStackedPoints();for(h=g;h--;)f=a[d?h:g-h-1],f.setStackCliffs&&
f.setStackCliffs();if(this.usePercentage)for(h=0;h<g;h++)a[h].setPercentStacks();}};z.prototype.renderStackTotals=function(){var a=this.chart,f=a.renderer,d=this.stacks,g,h,n=this.stackTotalGroup;n||(this.stackTotalGroup=n=f.g("stack-labels").attr({visibility:"visible",zIndex:6}).add());n.translate(a.plotLeft,a.plotTop);for(g in d)for(h in a=d[g],a)a[h].render(n);};z.prototype.resetStacks=function(){var a=this.stacks,f,d;if(!this.isXAxis)for(f in a)for(d in a[f])a[f][d].touched<this.stacksTouched?(a[f][d].destroy(),
	delete a[f][d]):(a[f][d].total=null,a[f][d].cum=0);};z.prototype.cleanStacks=function(){var a,f,d;if(!this.isXAxis)for(f in this.oldStacks&&(a=this.stacks=this.oldStacks),a)for(d in a[f])a[f][d].cum=a[f][d].total;};a.prototype.setStackedPoints=function(){if(this.options.stacking&&(!0===this.visible||!1===this.chart.options.chart.ignoreHiddenSeries)){var a=this.processedXData,f=this.processedYData,d=[],g=f.length,h=this.options,q=h.threshold,c=h.startFromThreshold?q:0,e=h.stack,h=h.stacking,l=this.stackKey,
		u="-"+l,z=this.negStacks,b=this.yAxis,t=b.stacks,y=b.oldStacks,K,x,I,r,G,H,F;b.stacksTouched+=1;for(G=0;G<g;G++)H=a[G],F=f[G],K=this.getStackIndicator(K,H,this.index),r=K.key,I=(x=z&&F<(c?0:q))?u:l,t[I]||(t[I]={}),t[I][H]||(y[I]&&y[I][H]?(t[I][H]=y[I][H],t[I][H].total=null):t[I][H]=new D(b,b.options.stackLabels,x,H,e)),I=t[I][H],null!==F&&(I.points[r]=I.points[this.index]=[n(I.cum,c)],m(I.cum)||(I.base=r),I.touched=b.stacksTouched,0<K.index&&!1===this.singleStacks&&(I.points[r][0]=I.points[this.index+
","+H+",0"][0])),"percent"===h?(x=x?l:u,z&&t[x]&&t[x][H]?(x=t[x][H],I.total=x.total=Math.max(x.total,I.total)+Math.abs(F)||0):I.total=J(I.total+(Math.abs(F)||0))):I.total=J(I.total+(F||0)),I.cum=n(I.cum,c)+(F||0),null!==F&&(I.points[r].push(I.cum),d[G]=I.cum);"percent"===h&&(b.usePercentage=!0);this.stackedYData=d;b.oldStacks={};}};a.prototype.setPercentStacks=function(){var a=this,f=a.stackKey,d=a.yAxis.stacks,g=a.processedXData,n;h([f,"-"+f],function(f){for(var c=g.length,e,h;c--;)if(e=g[c],n=a.getStackIndicator(n,
		e,a.index,f),e=(h=d[f]&&d[f][e])&&h.points[n.key])h=h.total?100/h.total:0,e[0]=J(e[0]*h),e[1]=J(e[1]*h),a.stackedYData[c]=e[1];});};a.prototype.getStackIndicator=function(a,f,d,g){!m(a)||a.x!==f||g&&a.key!==g?a={x:f,index:0,key:g}:a.index++;a.key=[d,f,a.index].join();return a;};})(M);(function(a){var D=a.addEvent,z=a.animate,F=a.Axis,J=a.createElement,m=a.css,f=a.defined,h=a.each,q=a.erase,n=a.extend,k=a.fireEvent,v=a.inArray,d=a.isNumber,g=a.isObject,w=a.merge,B=a.pick,c=a.Point,e=a.Series,l=a.seriesTypes,
		u=a.setAnimation,L=a.splat;n(a.Chart.prototype,{addSeries:function(a,c,d){var b,e=this;a&&(c=B(c,!0),k(e,"addSeries",{options:a},function(){b=e.initSeries(a);e.isDirtyLegend=!0;e.linkSeries();c&&e.redraw(d);}));return b;},addAxis:function(a,c,d,e){var b=c?"xAxis":"yAxis",f=this.options;a=w(a,{index:this[b].length,isX:c});new F(this,a);f[b]=L(f[b]||{});f[b].push(a);B(d,!0)&&this.redraw(e);},showLoading:function(a){var b=this,c=b.options,d=b.loadingDiv,e=c.loading,f=function(){d&&m(d,{left:b.plotLeft+
"px",top:b.plotTop+"px",width:b.plotWidth+"px",height:b.plotHeight+"px"});};d||(b.loadingDiv=d=J("div",{className:"highcharts-loading highcharts-loading-hidden"},null,b.container),b.loadingSpan=J("span",{className:"highcharts-loading-inner"},null,d),D(b,"redraw",f));d.className="highcharts-loading";b.loadingSpan.innerHTML=a||c.lang.loading;m(d,n(e.style,{zIndex:10}));m(b.loadingSpan,e.labelStyle);b.loadingShown||(m(d,{opacity:0,display:""}),z(d,{opacity:e.style.opacity||.5},{duration:e.showDuration||
0}));b.loadingShown=!0;f();},hideLoading:function(){var a=this.options,c=this.loadingDiv;c&&(c.className="highcharts-loading highcharts-loading-hidden",z(c,{opacity:0},{duration:a.loading.hideDuration||100,complete:function(){m(c,{display:"none"});}}));this.loadingShown=!1;},propsRequireDirtyBox:"backgroundColor borderColor borderWidth margin marginTop marginRight marginBottom marginLeft spacing spacingTop spacingRight spacingBottom spacingLeft borderRadius plotBackgroundColor plotBackgroundImage plotBorderColor plotBorderWidth plotShadow shadow".split(" "),
	propsRequireUpdateSeries:["chart.polar","chart.ignoreHiddenSeries","chart.type","colors","plotOptions"],update:function(a,c){var b,e={credits:"addCredits",title:"setTitle",subtitle:"setSubtitle"},g=a.chart,l,k;if(g){w(!0,this.options.chart,g);"className"in g&&this.setClassName(g.className);if("inverted"in g||"polar"in g)this.propFromSeries(),l=!0;for(b in g)g.hasOwnProperty(b)&&(-1!==v("chart."+b,this.propsRequireUpdateSeries)&&(k=!0),-1!==v(b,this.propsRequireDirtyBox)&&(this.isDirtyBox=!0));"style"in
g&&this.renderer.setStyle(g.style);}for(b in a){if(this[b]&&"function"===typeof this[b].update)this[b].update(a[b],!1);else if("function"===typeof this[e[b]])this[e[b]](a[b]);"chart"!==b&&-1!==v(b,this.propsRequireUpdateSeries)&&(k=!0);}a.colors&&(this.options.colors=a.colors);a.plotOptions&&w(!0,this.options.plotOptions,a.plotOptions);h(["xAxis","yAxis","series"],function(b){a[b]&&h(L(a[b]),function(a){var c=f(a.id)&&this.get(a.id)||this[b][0];c&&c.coll===b&&c.update(a,!1);},this);},this);l&&h(this.axes,
		function(a){a.update({},!1);});k&&h(this.series,function(a){a.update({},!1);});a.loading&&w(!0,this.options.loading,a.loading);b=g&&g.width;g=g&&g.height;d(b)&&b!==this.chartWidth||d(g)&&g!==this.chartHeight?this.setSize(b,g):B(c,!0)&&this.redraw();},setSubtitle:function(a){this.setTitle(void 0,a);}});n(c.prototype,{update:function(a,c,d,e){function b(){f.applyOptions(a);null===f.y&&l&&(f.graphic=l.destroy());g(a,!0)&&(l&&l.element&&a&&a.marker&&a.marker.symbol&&(f.graphic=l.destroy()),a&&a.dataLabels&&
f.dataLabel&&(f.dataLabel=f.dataLabel.destroy()));k=f.index;h.updateParallelArrays(f,k);m.data[k]=g(m.data[k],!0)?f.options:a;h.isDirty=h.isDirtyData=!0;!h.fixedBox&&h.hasCartesianSeries&&(n.isDirtyBox=!0);"point"===m.legendType&&(n.isDirtyLegend=!0);c&&n.redraw(d);}var f=this,h=f.series,l=f.graphic,k,n=h.chart,m=h.options;c=B(c,!0);!1===e?b():f.firePointEvent("update",{options:a},b);},remove:function(a,c){this.series.removePoint(v(this,this.series.data),a,c);}});n(e.prototype,{addPoint:function(a,c,
		d,e){var b=this.options,f=this.data,g=this.chart,h=this.xAxis&&this.xAxis.names,l=b.data,k,n,m=this.xData,u,t;c=B(c,!0);k={series:this};this.pointClass.prototype.applyOptions.apply(k,[a]);t=k.x;u=m.length;if(this.requireSorting&&t<m[u-1])for(n=!0;u&&m[u-1]>t;)u--;this.updateParallelArrays(k,"splice",u,0,0);this.updateParallelArrays(k,u);h&&k.name&&(h[t]=k.name);l.splice(u,0,a);n&&(this.data.splice(u,0,null),this.processData());"point"===b.legendType&&this.generatePoints();d&&(f[0]&&f[0].remove?f[0].remove(!1):
		(f.shift(),this.updateParallelArrays(k,"shift"),l.shift()));this.isDirtyData=this.isDirty=!0;c&&g.redraw(e);},removePoint:function(a,c,d){var b=this,e=b.data,f=e[a],g=b.points,h=b.chart,l=function(){g&&g.length===e.length&&g.splice(a,1);e.splice(a,1);b.options.data.splice(a,1);b.updateParallelArrays(f||{series:b},"splice",a,1);f&&f.destroy();b.isDirty=!0;b.isDirtyData=!0;c&&h.redraw();};u(d,h);c=B(c,!0);f?f.firePointEvent("remove",null,l):l();},remove:function(a,c,d){function b(){e.destroy();f.isDirtyLegend=
f.isDirtyBox=!0;f.linkSeries();B(a,!0)&&f.redraw(c);}var e=this,f=e.chart;!1!==d?k(e,"remove",null,b):b();},update:function(a,c){var b=this,d=this.chart,e=this.userOptions,f=this.type,g=a.type||e.type||d.options.chart.type,k=l[f].prototype,m=["group","markerGroup","dataLabelsGroup"],u;if(g&&g!==f||void 0!==a.zIndex)m.length=0;h(m,function(a){m[a]=b[a];delete b[a];});a=w(e,{animation:!1,index:this.index,pointStart:this.xData[0]},{data:this.options.data},a);this.remove(!1,null,!1);for(u in k)this[u]=void 0;
		n(this,l[g||f].prototype);h(m,function(a){b[a]=m[a];});this.init(d,a);d.linkSeries();B(c,!0)&&d.redraw(!1);}});n(F.prototype,{update:function(a,c){var b=this.chart;a=b.options[this.coll][this.options.index]=w(this.userOptions,a);this.destroy(!0);this.init(b,n(a,{events:void 0}));b.isDirtyBox=!0;B(c,!0)&&b.redraw();},remove:function(a){for(var b=this.chart,c=this.coll,d=this.series,e=d.length;e--;)d[e]&&d[e].remove(!1);q(b.axes,this);q(b[c],this);b.options[c].splice(this.options.index,1);h(b[c],function(a,
		b){a.options.index=b;});this.destroy();b.isDirtyBox=!0;B(a,!0)&&b.redraw();},setTitle:function(a,c){this.update({title:a},c);},setCategories:function(a,c){this.update({categories:a},c);}});})(M);(function(a){var D=a.color,z=a.each,F=a.map,J=a.pick,m=a.Series,f=a.seriesType;f("area","line",{softThreshold:!1,threshold:0},{singleStacks:!1,getStackPoints:function(){var a=[],f=[],n=this.xAxis,k=this.yAxis,m=k.stacks[this.stackKey],d={},g=this.points,w=this.index,B=k.series,c=B.length,e,l=J(k.options.reversedStacks,
			!0)?1:-1,u,L;if(this.options.stacking){for(u=0;u<g.length;u++)d[g[u].x]=g[u];for(L in m)null!==m[L].total&&f.push(L);f.sort(function(a,c){return a-c;});e=F(B,function(){return this.visible;});z(f,function(b,g){var h=0,t,q;if(d[b]&&!d[b].isNull)a.push(d[b]),z([-1,1],function(a){var h=1===a?"rightNull":"leftNull",k=0,n=m[f[g+a]];if(n)for(u=w;0<=u&&u<c;)t=n.points[u],t||(u===w?d[b][h]=!0:e[u]&&(q=m[b].points[u])&&(k-=q[1]-q[0])),u+=l;d[b][1===a?"rightCliff":"leftCliff"]=k;});else{for(u=w;0<=u&&u<c;){if(t=
m[b].points[u]){h=t[1];break;}u+=l;}h=k.toPixels(h,!0);a.push({isNull:!0,plotX:n.toPixels(b,!0),plotY:h,yBottom:h});}});}return a;},getGraphPath:function(a){var f=m.prototype.getGraphPath,h=this.options,k=h.stacking,v=this.yAxis,d,g,w=[],B=[],c=this.index,e,l=v.stacks[this.stackKey],u=h.threshold,z=v.getThreshold(h.threshold),b,h=h.connectNulls||"percent"===k,t=function(b,d,f){var g=a[b];b=k&&l[g.x].points[c];var h=g[f+"Null"]||0;f=g[f+"Cliff"]||0;var n,m,g=!0;f||h?(n=(h?b[0]:b[1])+f,m=b[0]+f,g=!!h):!k&&
a[d]&&a[d].isNull&&(n=m=u);void 0!==n&&(B.push({plotX:e,plotY:null===n?z:v.getThreshold(n),isNull:g}),w.push({plotX:e,plotY:null===m?z:v.getThreshold(m),doCurve:!1}));};a=a||this.points;k&&(a=this.getStackPoints());for(d=0;d<a.length;d++)if(g=a[d].isNull,e=J(a[d].rectPlotX,a[d].plotX),b=J(a[d].yBottom,z),!g||h)h||t(d,d-1,"left"),g&&!k&&h||(B.push(a[d]),w.push({x:d,plotX:e,plotY:b})),h||t(d,d+1,"right");d=f.call(this,B,!0,!0);w.reversed=!0;g=f.call(this,w,!0,!0);g.length&&(g[0]="L");g=d.concat(g);f=
f.call(this,B,!1,h);g.xMap=d.xMap;this.areaPath=g;return f;},drawGraph:function(){this.areaPath=[];m.prototype.drawGraph.apply(this);var a=this,f=this.areaPath,n=this.options,k=[["area","highcharts-area",this.color,n.fillColor]];z(this.zones,function(f,d){k.push(["zone-area-"+d,"highcharts-area highcharts-zone-area-"+d+" "+f.className,f.color||a.color,f.fillColor||n.fillColor]);});z(k,function(h){var d=h[0],g=a[d];g?(g.endX=f.xMap,g.animate({d:f})):(g=a[d]=a.chart.renderer.path(f).addClass(h[1]).attr({fill:J(h[3],
		D(h[2]).setOpacity(J(n.fillOpacity,.75)).get()),zIndex:0}).add(a.group),g.isArea=!0);g.startX=f.xMap;g.shiftUnit=n.step?2:1;});},drawLegendSymbol:a.LegendSymbolMixin.drawRectangle});})(M);(function(a){var D=a.extendClass,z=a.merge,F=a.pick,J=a.Series,m=a.seriesTypes;a.defaultPlotOptions.spline=z(a.defaultPlotOptions.line);m.spline=D(J,{type:"spline",getPointSpline:function(a,h,m){var f=h.plotX,k=h.plotY,q=a[m-1];m=a[m+1];var d,g,w,B;if(q&&!q.isNull&&!1!==q.doCurve&&m&&!m.isNull&&!1!==m.doCurve){a=q.plotY;
		w=m.plotX;m=m.plotY;var c=0;d=(1.5*f+q.plotX)/2.5;g=(1.5*k+a)/2.5;w=(1.5*f+w)/2.5;B=(1.5*k+m)/2.5;w!==d&&(c=(B-g)*(w-f)/(w-d)+k-B);g+=c;B+=c;g>a&&g>k?(g=Math.max(a,k),B=2*k-g):g<a&&g<k&&(g=Math.min(a,k),B=2*k-g);B>m&&B>k?(B=Math.max(m,k),g=2*k-B):B<m&&B<k&&(B=Math.min(m,k),g=2*k-B);h.rightContX=w;h.rightContY=B;}h=["C",F(q.rightContX,q.plotX),F(q.rightContY,q.plotY),F(d,f),F(g,k),f,k];q.rightContX=q.rightContY=null;return h;}});})(M);(function(a){var D=a.seriesTypes.area.prototype,z=a.seriesType;z("areaspline",
		"spline",a.defaultPlotOptions.area,{getStackPoints:D.getStackPoints,getGraphPath:D.getGraphPath,setStackCliffs:D.setStackCliffs,drawGraph:D.drawGraph,drawLegendSymbol:a.LegendSymbolMixin.drawRectangle});})(M);(function(a){var D=a.animObject,z=a.color,F=a.each,J=a.extend,m=a.isNumber,f=a.merge,h=a.pick,q=a.Series,n=a.seriesType,k=a.stop,v=a.svg;n("column","line",{borderRadius:0,groupPadding:.2,marker:null,pointPadding:.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{halo:!1,brightness:.1,
		shadow:!1},select:{color:"#cccccc",borderColor:"#000000",shadow:!1}},dataLabels:{align:null,verticalAlign:null,y:null},softThreshold:!1,startFromThreshold:!0,stickyTracking:!1,tooltip:{distance:6},threshold:0,borderColor:"#ffffff"},{cropShoulder:0,directTouch:!0,trackerGroups:["group","dataLabelsGroup"],negStacks:!0,init:function(){q.prototype.init.apply(this,arguments);var a=this,f=a.chart;f.hasRendered&&F(f.series,function(d){d.type===a.type&&(d.isDirty=!0);});},getColumnMetrics:function(){var a=
this,f=a.options,k=a.xAxis,m=a.yAxis,c=k.reversed,e,l={},n=0;!1===f.grouping?n=1:F(a.chart.series,function(b){var c=b.options,d=b.yAxis,f;b.type===a.type&&b.visible&&m.len===d.len&&m.pos===d.pos&&(c.stacking?(e=b.stackKey,void 0===l[e]&&(l[e]=n++),f=l[e]):!1!==c.grouping&&(f=n++),b.columnIndex=f);});var q=Math.min(Math.abs(k.transA)*(k.ordinalSlope||f.pointRange||k.closestPointRange||k.tickInterval||1),k.len),b=q*f.groupPadding,t=(q-2*b)/n,f=Math.min(f.maxPointWidth||k.len,h(f.pointWidth,t*(1-2*f.pointPadding)));
	a.columnMetrics={width:f,offset:(t-f)/2+(b+((a.columnIndex||0)+(c?1:0))*t-q/2)*(c?-1:1)};return a.columnMetrics;},crispCol:function(a,f,h,k){var c=this.chart,d=this.borderWidth,g=-(d%2?.5:0),d=d%2?.5:1;c.inverted&&c.renderer.isVML&&(d+=1);h=Math.round(a+h)+g;a=Math.round(a)+g;k=Math.round(f+k)+d;g=.5>=Math.abs(f)&&.5<k;f=Math.round(f)+d;k-=f;g&&k&&(--f,k+=1);return{x:a,y:f,width:h-a,height:k};},translate:function(){var a=this,f=a.chart,k=a.options,m=a.dense=2>a.closestPointRange*a.xAxis.transA,m=a.borderWidth=
h(k.borderWidth,m?0:1),c=a.yAxis,e=a.translatedThreshold=c.getThreshold(k.threshold),l=h(k.minPointLength,5),n=a.getColumnMetrics(),v=n.width,b=a.barW=Math.max(v,1+2*m),t=a.pointXOffset=n.offset;f.inverted&&(e-=.5);k.pointPadding&&(b=Math.ceil(b));q.prototype.translate.apply(a);F(a.points,function(d){var g=h(d.yBottom,e),k=999+Math.abs(g),k=Math.min(Math.max(-k,d.plotY),c.len+k),m=d.plotX+t,n=b,u=Math.min(k,g),q,y=Math.max(k,g)-u;Math.abs(y)<l&&l&&(y=l,q=!c.reversed&&!d.negative||c.reversed&&d.negative,
	u=Math.abs(u-e)>l?g-l:e-(q?l:0));d.barX=m;d.pointWidth=v;d.tooltipPos=f.inverted?[c.len+c.pos-f.plotLeft-k,a.xAxis.len-m-n/2,y]:[m+n/2,k+c.pos-f.plotTop,y];d.shapeType="rect";d.shapeArgs=a.crispCol.apply(a,d.isNull?[d.plotX,c.len/2,0,0]:[m,u,n,y]);});},getSymbol:a.noop,drawLegendSymbol:a.LegendSymbolMixin.drawRectangle,drawGraph:function(){this.group[this.dense?"addClass":"removeClass"]("highcharts-dense-data");},pointAttribs:function(a,f){var d=this.options,g=this.pointAttrToOptions||{},c=g.stroke||
"borderColor",e=g["stroke-width"]||"borderWidth",h=a&&a.color||this.color,k=a[c]||d[c]||this.color||h,g=d.dashStyle,m;a&&this.zones.length&&(h=(h=a.getZone())&&h.color||a.options.color||this.color);f&&(f=d.states[f],m=f.brightness,h=f.color||void 0!==m&&z(h).brighten(f.brightness).get()||h,k=f[c]||k,g=f.dashStyle||g);a={fill:h,stroke:k,"stroke-width":a[e]||d[e]||this[e]||0};d.borderRadius&&(a.r=d.borderRadius);g&&(a.dashstyle=g);return a;},drawPoints:function(){var a=this,g=this.chart,h=a.options,
		n=g.renderer,c=h.animationLimit||250,e;F(a.points,function(d){var l=d.graphic;m(d.plotY)&&null!==d.y?(e=d.shapeArgs,l?(k(l),l[g.pointCount<c?"animate":"attr"](f(e))):d.graphic=l=n[d.shapeType](e).attr({"class":d.getClassName()}).add(d.group||a.group),l.attr(a.pointAttribs(d,d.selected&&"select")).shadow(h.shadow,null,h.stacking&&!h.borderRadius)):l&&(d.graphic=l.destroy());});},animate:function(a){var d=this,f=this.yAxis,h=d.options,c=this.chart.inverted,e={};v&&(a?(e.scaleY=.001,a=Math.min(f.pos+f.len,
		Math.max(f.pos,f.toPixels(h.threshold))),c?e.translateX=a-f.len:e.translateY=a,d.group.attr(e)):(e[c?"translateX":"translateY"]=f.pos,d.group.animate(e,J(D(d.options.animation),{step:function(a,c){d.group.attr({scaleY:Math.max(.001,c.pos)});}})),d.animate=null));},remove:function(){var a=this,f=a.chart;f.hasRendered&&F(f.series,function(d){d.type===a.type&&(d.isDirty=!0);});q.prototype.remove.apply(a,arguments);}});})(M);(function(a){a=a.seriesType;a("bar","column",null,{inverted:!0});})(M);(function(a){var D=
a.Series;a=a.seriesType;a("scatter","line",{lineWidth:0,marker:{enabled:!0},tooltip:{headerFormat:'\x3cspan style\x3d"color:{point.color}"\x3e\u25cf\x3c/span\x3e \x3cspan style\x3d"font-size: 0.85em"\x3e {series.name}\x3c/span\x3e\x3cbr/\x3e',pointFormat:"x: \x3cb\x3e{point.x}\x3c/b\x3e\x3cbr/\x3ey: \x3cb\x3e{point.y}\x3c/b\x3e\x3cbr/\x3e"}},{sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","markerGroup","dataLabelsGroup"],takeOrdinalPosition:!1,kdDimensions:2,drawGraph:function(){this.options.lineWidth&&
D.prototype.drawGraph.call(this);}});})(M);(function(a){var D=a.pick,z=a.relativeLength;a.CenteredSeriesMixin={getCenter:function(){var a=this.options,J=this.chart,m=2*(a.slicedOffset||0),f=J.plotWidth-2*m,J=J.plotHeight-2*m,h=a.center,h=[D(h[0],"50%"),D(h[1],"50%"),a.size||"100%",a.innerSize||0],q=Math.min(f,J),n,k;for(n=0;4>n;++n)k=h[n],a=2>n||2===n&&/%$/.test(k),h[n]=z(k,[f,J,q,h[2]][n])+(a?m:0);h[3]>h[2]&&(h[3]=h[2]);return h;}};})(M);(function(a){var D=a.addEvent,z=a.defined,F=a.each,J=a.extend,
		m=a.inArray,f=a.noop,h=a.pick,q=a.Point,n=a.Series,k=a.seriesType,v=a.setAnimation;k("pie","line",{center:[null,null],clip:!1,colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return null===this.y?void 0:this.point.name;},x:0},ignoreHiddenPoint:!0,legendType:"point",marker:null,size:null,showInLegend:!1,slicedOffset:10,stickyTracking:!1,tooltip:{followPointer:!0},borderColor:"#ffffff",borderWidth:1,states:{hover:{brightness:.1,shadow:!1}}},{isCartesian:!1,requireSorting:!1,directTouch:!0,
		noSharedTooltip:!0,trackerGroups:["group","dataLabelsGroup"],axisTypes:[],pointAttribs:a.seriesTypes.column.prototype.pointAttribs,animate:function(a){var d=this,f=d.points,h=d.startAngleRad;a||(F(f,function(a){var c=a.graphic,f=a.shapeArgs;c&&(c.attr({r:a.startR||d.center[3]/2,start:h,end:h}),c.animate({r:f.r,start:f.start,end:f.end},d.options.animation));}),d.animate=null);},updateTotals:function(){var a,f=0,h=this.points,k=h.length,c,e=this.options.ignoreHiddenPoint;for(a=0;a<k;a++)c=h[a],0>c.y&&
(c.y=null),f+=e&&!c.visible?0:c.y;this.total=f;for(a=0;a<k;a++)c=h[a],c.percentage=0<f&&(c.visible||!e)?c.y/f*100:0,c.total=f;},generatePoints:function(){n.prototype.generatePoints.call(this);this.updateTotals();},translate:function(a){this.generatePoints();var d=0,f=this.options,k=f.slicedOffset,c=k+(f.borderWidth||0),e,l,m,n=f.startAngle||0,b=this.startAngleRad=Math.PI/180*(n-90),n=(this.endAngleRad=Math.PI/180*(h(f.endAngle,n+360)-90))-b,t=this.points,q=f.dataLabels.distance,f=f.ignoreHiddenPoint,
			v,x=t.length,I;a||(this.center=a=this.getCenter());this.getX=function(b,c){m=Math.asin(Math.min((b-a[1])/(a[2]/2+q),1));return a[0]+(c?-1:1)*Math.cos(m)*(a[2]/2+q);};for(v=0;v<x;v++){I=t[v];e=b+d*n;if(!f||I.visible)d+=I.percentage/100;l=b+d*n;I.shapeType="arc";I.shapeArgs={x:a[0],y:a[1],r:a[2]/2,innerR:a[3]/2,start:Math.round(1E3*e)/1E3,end:Math.round(1E3*l)/1E3};m=(l+e)/2;m>1.5*Math.PI?m-=2*Math.PI:m<-Math.PI/2&&(m+=2*Math.PI);I.slicedTranslation={translateX:Math.round(Math.cos(m)*k),translateY:Math.round(Math.sin(m)*
k)};e=Math.cos(m)*a[2]/2;l=Math.sin(m)*a[2]/2;I.tooltipPos=[a[0]+.7*e,a[1]+.7*l];I.half=m<-Math.PI/2||m>Math.PI/2?1:0;I.angle=m;c=Math.min(c,q/5);I.labelPos=[a[0]+e+Math.cos(m)*q,a[1]+l+Math.sin(m)*q,a[0]+e+Math.cos(m)*c,a[1]+l+Math.sin(m)*c,a[0]+e,a[1]+l,0>q?"center":I.half?"right":"left",m];}},drawGraph:null,drawPoints:function(){var a=this,f=a.chart.renderer,h,k,c,e,l=a.options.shadow;l&&!a.shadowGroup&&(a.shadowGroup=f.g("shadow").add(a.group));F(a.points,function(d){if(null!==d.y){k=d.graphic;
			e=d.shapeArgs;h=d.sliced?d.slicedTranslation:{};var g=d.shadowGroup;l&&!g&&(g=d.shadowGroup=f.g("shadow").add(a.shadowGroup));g&&g.attr(h);c=a.pointAttribs(d,d.selected&&"select");k?k.setRadialReference(a.center).attr(c).animate(J(e,h)):(d.graphic=k=f[d.shapeType](e).addClass(d.getClassName()).setRadialReference(a.center).attr(h).add(a.group),d.visible||k.attr({visibility:"hidden"}),k.attr(c).attr({"stroke-linejoin":"round"}).shadow(l,g));}});},searchPoint:f,sortByAngle:function(a,f){a.sort(function(a,
			d){return void 0!==a.angle&&(d.angle-a.angle)*f;});},drawLegendSymbol:a.LegendSymbolMixin.drawRectangle,getCenter:a.CenteredSeriesMixin.getCenter,getSymbol:f},{init:function(){q.prototype.init.apply(this,arguments);var a=this,f;a.name=h(a.name,"Slice");f=function(d){a.slice("select"===d.type);};D(a,"select",f);D(a,"unselect",f);return a;},setVisible:function(a,f){var d=this,g=d.series,c=g.chart,e=g.options.ignoreHiddenPoint;f=h(f,e);a!==d.visible&&(d.visible=d.options.visible=a=void 0===a?!d.visible:
		a,g.options.data[m(d,g.data)]=d.options,F(["graphic","dataLabel","connector","shadowGroup"],function(c){if(d[c])d[c][a?"show":"hide"](!0);}),d.legendItem&&c.legend.colorizeItem(d,a),a||"hover"!==d.state||d.setState(""),e&&(g.isDirty=!0),f&&c.redraw());},slice:function(a,f,k){var d=this.series;v(k,d.chart);h(f,!0);this.sliced=this.options.sliced=a=z(a)?a:!this.sliced;d.options.data[m(this,d.data)]=this.options;a=a?this.slicedTranslation:{translateX:0,translateY:0};this.graphic.animate(a);this.shadowGroup&&
this.shadowGroup.animate(a);},haloPath:function(a){var d=this.shapeArgs;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(d.x,d.y,d.r+a,d.r+a,{innerR:this.shapeArgs.r,start:d.start,end:d.end});}});})(M);(function(a){var D=a.addEvent,z=a.arrayMax,F=a.defined,J=a.each,m=a.extend,f=a.format,h=a.map,q=a.merge,n=a.noop,k=a.pick,v=a.relativeLength,d=a.Series,g=a.seriesTypes,w=a.stableSort,B=a.stop;a.distribute=function(a,d){function c(a,b){return a.target-b.target;}var e,f=!0,b=a,
		g=[],k;k=0;for(e=a.length;e--;)k+=a[e].size;if(k>d){w(a,function(a,b){return(b.rank||0)-(a.rank||0);});for(k=e=0;k<=d;)k+=a[e].size,e++;g=a.splice(e-1,a.length);}w(a,c);for(a=h(a,function(a){return{size:a.size,targets:[a.target]};});f;){for(e=a.length;e--;)f=a[e],k=(Math.min.apply(0,f.targets)+Math.max.apply(0,f.targets))/2,f.pos=Math.min(Math.max(0,k-f.size/2),d-f.size);e=a.length;for(f=!1;e--;)0<e&&a[e-1].pos+a[e-1].size>a[e].pos&&(a[e-1].size+=a[e].size,a[e-1].targets=a[e-1].targets.concat(a[e].targets),
	a[e-1].pos+a[e-1].size>d&&(a[e-1].pos=d-a[e-1].size),a.splice(e,1),f=!0);}e=0;J(a,function(a){var c=0;J(a.targets,function(){b[e].pos=a.pos+c;c+=b[e].size;e++;});});b.push.apply(b,g);w(b,c);};d.prototype.drawDataLabels=function(){var a=this,d=a.options,g=d.dataLabels,h=a.points,n,b,t=a.hasRendered||0,y,v,x=k(g.defer,!0),w=a.chart.renderer;if(g.enabled||a._hasPointLabels)a.dlProcessOptions&&a.dlProcessOptions(g),v=a.plotGroup("dataLabelsGroup","data-labels",x&&!t?"hidden":"visible",g.zIndex||6),x&&(v.attr({opacity:+t}),
	t||D(a,"afterAnimate",function(){a.visible&&v.show(!0);v[d.animation?"animate":"attr"]({opacity:1},{duration:200});})),b=g,J(h,function(c){var e,h=c.dataLabel,l,t,r=c.connector,u=!0,x,I={};n=c.dlOptions||c.options&&c.options.dataLabels;e=k(n&&n.enabled,b.enabled)&&null!==c.y;if(h&&!e)c.dataLabel=h.destroy();else if(e){g=q(b,n);x=g.style;e=g.rotation;l=c.getLabelConfig();y=g.format?f(g.format,l):g.formatter.call(l,g);x.color=k(g.color,x.color,a.color,"#000000");if(h)F(y)?(h.attr({text:y}),u=!1):(c.dataLabel=
h=h.destroy(),r&&(c.connector=r.destroy()));else if(F(y)){h={fill:g.backgroundColor,stroke:g.borderColor,"stroke-width":g.borderWidth,r:g.borderRadius||0,rotation:e,padding:g.padding,zIndex:1};"contrast"===x.color&&(I.color=g.inside||0>g.distance||d.stacking?w.getContrast(c.color||a.color):"#000000");d.cursor&&(I.cursor=d.cursor);for(t in h)void 0===h[t]&&delete h[t];h=c.dataLabel=w[e?"text":"label"](y,0,-9999,g.shape,null,null,g.useHTML,null,"data-label").attr(h);h.addClass("highcharts-data-label-color-"+
c.colorIndex+" "+(g.className||""));h.css(m(x,I));h.add(v);h.shadow(g.shadow);}h&&a.alignDataLabel(c,h,g,null,u);}});};d.prototype.alignDataLabel=function(a,d,f,g,h){var b=this.chart,c=b.inverted,e=k(a.plotX,-9999),l=k(a.plotY,-9999),n=d.getBBox(),q,r=f.rotation,u=f.align,v=this.visible&&(a.series.forceDL||b.isInsidePlot(e,Math.round(l),c)||g&&b.isInsidePlot(e,c?g.x+1:g.y+g.height-1,c)),w="justify"===k(f.overflow,"justify");v&&(q=f.style.fontSize,q=b.renderer.fontMetrics(q,d).b,g=m({x:c?b.plotWidth-
l:e,y:Math.round(c?b.plotHeight-e:l),width:0,height:0},g),m(f,{width:n.width,height:n.height}),r?(w=!1,c=b.renderer.rotCorr(q,r),c={x:g.x+f.x+g.width/2+c.x,y:g.y+f.y+{top:0,middle:.5,bottom:1}[f.verticalAlign]*g.height},d[h?"attr":"animate"](c).attr({align:u}),e=(r+720)%360,e=180<e&&360>e,"left"===u?c.y-=e?n.height:0:"center"===u?(c.x-=n.width/2,c.y-=n.height/2):"right"===u&&(c.x-=n.width,c.y-=e?0:n.height)):(d.align(f,null,g),c=d.alignAttr),w?this.justifyDataLabel(d,f,c,n,g,h):k(f.crop,!0)&&(v=b.isInsidePlot(c.x,
		c.y)&&b.isInsidePlot(c.x+n.width,c.y+n.height)),f.shape&&!r&&d.attr({anchorX:a.plotX,anchorY:a.plotY}));v||(B(d),d.attr({y:-9999}),d.placed=!1);};d.prototype.justifyDataLabel=function(a,d,f,g,h,b){var c=this.chart,e=d.align,k=d.verticalAlign,l,m,n=a.box?0:a.padding||0;l=f.x+n;0>l&&("right"===e?d.align="left":d.x=-l,m=!0);l=f.x+g.width-n;l>c.plotWidth&&("left"===e?d.align="right":d.x=c.plotWidth-l,m=!0);l=f.y+n;0>l&&("bottom"===k?d.verticalAlign="top":d.y=-l,m=!0);l=f.y+g.height-n;l>c.plotHeight&&("top"===
k?d.verticalAlign="bottom":d.y=c.plotHeight-l,m=!0);m&&(a.placed=!b,a.align(d,null,h));};g.pie&&(g.pie.prototype.drawDataLabels=function(){var c=this,e=c.data,f,g=c.chart,m=c.options.dataLabels,b=k(m.connectorPadding,10),n=k(m.connectorWidth,1),q=g.plotWidth,v=g.plotHeight,x,w=m.distance,r=c.center,B=r[2]/2,H=r[1],D=0<w,p,A,F,O,C=[[],[]],E,M,Q,R,T=[0,0,0,0];c.visible&&(m.enabled||c._hasPointLabels)&&(d.prototype.drawDataLabels.apply(c),J(e,function(a){a.dataLabel&&a.visible&&(C[a.half].push(a),a.dataLabel._pos=
null);}),J(C,function(d,e){var k,l,n=d.length,t,u,x;if(n)for(c.sortByAngle(d,e-.5),0<w&&(k=Math.max(0,H-B-w),l=Math.min(H+B+w,g.plotHeight),t=h(d,function(a){if(a.dataLabel)return x=a.dataLabel.getBBox().height||21,{target:a.labelPos[1]-k+x/2,size:x,rank:a.y};}),a.distribute(t,l+x-k)),R=0;R<n;R++)f=d[R],F=f.labelPos,p=f.dataLabel,Q=!1===f.visible?"hidden":"inherit",u=F[1],t?void 0===t[R].pos?Q="hidden":(O=t[R].size,M=k+t[R].pos):M=u,E=m.justify?r[0]+(e?-1:1)*(B+w):c.getX(M<k+2||M>l-2?u:M,e),p._attr=
{visibility:Q,align:F[6]},p._pos={x:E+m.x+({left:b,right:-b}[F[6]]||0),y:M+m.y-10},F.x=E,F.y=M,null===c.options.size&&(A=p.width,E-A<b?T[3]=Math.max(Math.round(A-E+b),T[3]):E+A>q-b&&(T[1]=Math.max(Math.round(E+A-q+b),T[1])),0>M-O/2?T[0]=Math.max(Math.round(-M+O/2),T[0]):M+O/2>v&&(T[2]=Math.max(Math.round(M+O/2-v),T[2])));}),0===z(T)||this.verifyDataLabelOverflow(T))&&(this.placeDataLabels(),D&&n&&J(this.points,function(a){var b;x=a.connector;if((p=a.dataLabel)&&p._pos&&a.visible){Q=p._attr.visibility;
		if(b=!x)a.connector=x=g.renderer.path().addClass("highcharts-data-label-connector highcharts-color-"+a.colorIndex).add(c.dataLabelsGroup),x.attr({"stroke-width":n,stroke:m.connectorColor||a.color||"#666666"});x[b?"attr":"animate"]({d:c.connectorPath(a.labelPos)});x.attr("visibility",Q);}else x&&(a.connector=x.destroy());}));},g.pie.prototype.connectorPath=function(a){var c=a.x,d=a.y;return k(this.options.softConnector,!0)?["M",c+("left"===a[6]?5:-5),d,"C",c,d,2*a[2]-a[4],2*a[3]-a[5],a[2],a[3],"L",a[4],
		a[5]]:["M",c+("left"===a[6]?5:-5),d,"L",a[2],a[3],"L",a[4],a[5]];},g.pie.prototype.placeDataLabels=function(){J(this.points,function(a){var c=a.dataLabel;c&&a.visible&&((a=c._pos)?(c.attr(c._attr),c[c.moved?"animate":"attr"](a),c.moved=!0):c&&c.attr({y:-9999}));});},g.pie.prototype.alignDataLabel=n,g.pie.prototype.verifyDataLabelOverflow=function(a){var c=this.center,d=this.options,f=d.center,g=d.minSize||80,b,h;null!==f[0]?b=Math.max(c[2]-Math.max(a[1],a[3]),g):(b=Math.max(c[2]-a[1]-a[3],g),c[0]+=(a[3]-
a[1])/2);null!==f[1]?b=Math.max(Math.min(b,c[2]-Math.max(a[0],a[2])),g):(b=Math.max(Math.min(b,c[2]-a[0]-a[2]),g),c[1]+=(a[0]-a[2])/2);b<c[2]?(c[2]=b,c[3]=Math.min(v(d.innerSize||0,b),b),this.translate(c),this.drawDataLabels&&this.drawDataLabels()):h=!0;return h;});g.column&&(g.column.prototype.alignDataLabel=function(a,e,f,g,h){var b=this.chart.inverted,c=a.series,l=a.dlBox||a.shapeArgs,m=k(a.below,a.plotY>k(this.translatedThreshold,c.yAxis.len)),n=k(f.inside,!!this.options.stacking);l&&(g=q(l),0>
g.y&&(g.height+=g.y,g.y=0),l=g.y+g.height-c.yAxis.len,0<l&&(g.height-=l),b&&(g={x:c.yAxis.len-g.y-g.height,y:c.xAxis.len-g.x-g.width,width:g.height,height:g.width}),n||(b?(g.x+=m?0:g.width,g.width=0):(g.y+=m?g.height:0,g.height=0)));f.align=k(f.align,!b||n?"center":m?"right":"left");f.verticalAlign=k(f.verticalAlign,b||n?"middle":m?"top":"bottom");d.prototype.alignDataLabel.call(this,a,e,f,g,h);});})(M);(function(a){var D=a.Chart,z=a.each,F=a.pick,J=a.addEvent;D.prototype.callbacks.push(function(a){function f(){var f=
[];z(a.series,function(a){var h=a.options.dataLabels,k=a.dataLabelCollections||["dataLabel"];(h.enabled||a._hasPointLabels)&&!h.allowOverlap&&a.visible&&z(k,function(h){z(a.points,function(a){a[h]&&(a[h].labelrank=F(a.labelrank,a.shapeArgs&&a.shapeArgs.height),f.push(a[h]));});});});a.hideOverlappingLabels(f);}f();J(a,"redraw",f);});D.prototype.hideOverlappingLabels=function(a){var f=a.length,h,m,n,k,v,d,g,w,B,c=function(a,c,d,f,b,g,h,k){return!(b>a+d||b+h<a||g>c+f||g+k<c);};for(m=0;m<f;m++)if(h=a[m])h.oldOpacity=
h.opacity,h.newOpacity=1;a.sort(function(a,c){return(c.labelrank||0)-(a.labelrank||0);});for(m=0;m<f;m++)for(n=a[m],h=m+1;h<f;++h)if(k=a[h],n&&k&&n.placed&&k.placed&&0!==n.newOpacity&&0!==k.newOpacity&&(v=n.alignAttr,d=k.alignAttr,g=n.parentGroup,w=k.parentGroup,B=2*(n.box?0:n.padding),v=c(v.x+g.translateX,v.y+g.translateY,n.width-B,n.height-B,d.x+w.translateX,d.y+w.translateY,k.width-B,k.height-B)))(n.labelrank<k.labelrank?n:k).newOpacity=0;z(a,function(a){var c,d;a&&(d=a.newOpacity,a.oldOpacity!==
d&&a.placed&&(d?a.show(!0):c=function(){a.hide();},a.alignAttr.opacity=d,a[a.isOld?"animate":"attr"](a.alignAttr,null,c)),a.isOld=!0);});};})(M);(function(a){var D=a.addEvent,z=a.Chart,F=a.createElement,J=a.css,m=a.defaultOptions,f=a.defaultPlotOptions,h=a.each,q=a.extend,n=a.fireEvent,k=a.hasTouch,v=a.inArray,d=a.isObject,g=a.Legend,w=a.merge,B=a.pick,c=a.Point,e=a.Series,l=a.seriesTypes,u=a.svg,L;L=a.TrackerMixin={drawTrackerPoint:function(){var a=this,c=a.chart,d=c.pointer,e=function(a){for(var b=
a.target,d;b&&!d;)d=b.point,b=b.parentNode;if(void 0!==d&&d!==c.hoverPoint)d.onMouseOver(a);};h(a.points,function(a){a.graphic&&(a.graphic.element.point=a);a.dataLabel&&(a.dataLabel.element.point=a);});a._hasTracking||(h(a.trackerGroups,function(b){if(a[b]){a[b].addClass("highcharts-tracker").on("mouseover",e).on("mouseout",function(a){d.onTrackerMouseOut(a);});if(k)a[b].on("touchstart",e);a.options.cursor&&a[b].css(J).css({cursor:a.options.cursor});}}),a._hasTracking=!0);},drawTrackerGraph:function(){var a=
this,c=a.options,d=c.trackByArea,e=[].concat(d?a.areaPath:a.graphPath),f=e.length,g=a.chart,l=g.pointer,m=g.renderer,n=g.options.tooltip.snap,q=a.tracker,p,v=function(){if(g.hoverSeries!==a)a.onMouseOver();},w="rgba(192,192,192,"+(u?.0001:.002)+")";if(f&&!d)for(p=f+1;p--;)"M"===e[p]&&e.splice(p+1,0,e[p+1]-n,e[p+2],"L"),(p&&"M"===e[p]||p===f)&&e.splice(p,0,"L",e[p-2]+n,e[p-1]);q?q.attr({d:e}):a.graph&&(a.tracker=m.path(e).attr({"stroke-linejoin":"round",visibility:a.visible?"visible":"hidden",stroke:w,
		fill:d?w:"none","stroke-width":a.graph.strokeWidth()+(d?0:2*n),zIndex:2}).add(a.group),h([a.tracker,a.markerGroup],function(a){a.addClass("highcharts-tracker").on("mouseover",v).on("mouseout",function(a){l.onTrackerMouseOut(a);});c.cursor&&a.css({cursor:c.cursor});if(k)a.on("touchstart",v);}));}};l.column&&(l.column.prototype.drawTracker=L.drawTrackerPoint);l.pie&&(l.pie.prototype.drawTracker=L.drawTrackerPoint);l.scatter&&(l.scatter.prototype.drawTracker=L.drawTrackerPoint);q(g.prototype,{setItemEvents:function(a,
		c,d){var b=this,e=b.chart,f="highcharts-legend-"+(a.series?"point":"series")+"-active";(d?c:a.legendGroup).on("mouseover",function(){a.setState("hover");e.seriesGroup.addClass(f);c.css(b.options.itemHoverStyle);}).on("mouseout",function(){c.css(a.visible?b.itemStyle:b.itemHiddenStyle);e.seriesGroup.removeClass(f);a.setState();}).on("click",function(b){var c=function(){a.setVisible&&a.setVisible();};b={browserEvent:b};a.firePointEvent?a.firePointEvent("legendItemClick",b,c):n(a,"legendItemClick",b,c);});},
	createCheckboxForItem:function(a){a.checkbox=F("input",{type:"checkbox",checked:a.selected,defaultChecked:a.selected},this.options.itemCheckboxStyle,this.chart.container);D(a.checkbox,"click",function(b){n(a.series||a,"checkboxClick",{checked:b.target.checked,item:a},function(){a.select();});});}});m.legend.itemStyle.cursor="pointer";q(z.prototype,{showResetZoom:function(){var a=this,c=m.lang,d=a.options.chart.resetZoomButton,e=d.theme,f=e.states,g="chart"===d.relativeTo?null:"plotBox";this.resetZoomButton=
a.renderer.button(c.resetZoom,null,null,function(){a.zoomOut();},e,f&&f.hover).attr({align:d.position.align,title:c.resetZoomTitle}).addClass("highcharts-reset-zoom").add().align(d.position,!1,g);},zoomOut:function(){var a=this;n(a,"selection",{resetSelection:!0},function(){a.zoom();});},zoom:function(a){var b,c=this.pointer,e=!1,f;!a||a.resetSelection?h(this.axes,function(a){b=a.zoom();}):h(a.xAxis.concat(a.yAxis),function(a){var d=a.axis,f=d.isXAxis;if(c[f?"zoomX":"zoomY"]||c[f?"pinchX":"pinchY"])b=
d.zoom(a.min,a.max),d.displayBtn&&(e=!0);});f=this.resetZoomButton;e&&!f?this.showResetZoom():!e&&d(f)&&(this.resetZoomButton=f.destroy());b&&this.redraw(B(this.options.chart.animation,a&&a.animation,100>this.pointCount));},pan:function(a,c){var b=this,d=b.hoverPoints,e;d&&h(d,function(a){a.setState();});h("xy"===c?[1,0]:[1],function(c){c=b[c?"xAxis":"yAxis"][0];var d=c.horiz,f=a[d?"chartX":"chartY"],d=d?"mouseDownX":"mouseDownY",g=b[d],h=(c.pointRange||0)/2,k=c.getExtremes(),l=c.toValue(g-f,!0)+h,h=
c.toValue(g+c.len-f,!0)-h,g=g>f;c.series.length&&(g||l>Math.min(k.dataMin,k.min))&&(!g||h<Math.max(k.dataMax,k.max))&&(c.setExtremes(l,h,!1,!1,{trigger:"pan"}),e=!0);b[d]=f;});e&&b.redraw(!1);J(b.container,{cursor:"move"});}});q(c.prototype,{select:function(a,c){var b=this,d=b.series,e=d.chart;a=B(a,!b.selected);b.firePointEvent(a?"select":"unselect",{accumulate:c},function(){b.selected=b.options.selected=a;d.options.data[v(b,d.data)]=b.options;b.setState(a&&"select");c||h(e.getSelectedPoints(),function(a){a.selected&&
a!==b&&(a.selected=a.options.selected=!1,d.options.data[v(a,d.data)]=a.options,a.setState(""),a.firePointEvent("unselect"));});});},onMouseOver:function(a,c){var b=this.series,d=b.chart,e=d.tooltip,f=d.hoverPoint;if(this.series){if(!c){if(f&&f!==this)f.onMouseOut();if(d.hoverSeries!==b)b.onMouseOver();d.hoverPoint=this;}!e||e.shared&&!b.noSharedTooltip?e||this.setState("hover"):(this.setState("hover"),e.refresh(this,a));this.firePointEvent("mouseOver");}},onMouseOut:function(){var a=this.series.chart,
		c=a.hoverPoints;this.firePointEvent("mouseOut");c&&-1!==v(this,c)||(this.setState(),a.hoverPoint=null);},importEvents:function(){if(!this.hasImportedEvents){var a=w(this.series.options.point,this.options).events,c;this.events=a;for(c in a)D(this,c,a[c]);this.hasImportedEvents=!0;}},setState:function(b,c){var d=Math.floor(this.plotX),e=this.plotY,g=this.series,h=g.options.states[b]||{},k=f[g.type].marker&&g.options.marker,l=k&&!1===k.enabled,m=k&&k.states&&k.states[b]||{},n=!1===m.enabled,p=g.stateMarkerGraphic,
		t=this.marker||{},u=g.chart,v=g.halo,w;b=b||"";if(!(b===this.state&&!c||this.selected&&"select"!==b||!1===h.enabled||b&&(n||l&&!1===m.enabled)||b&&t.states&&t.states[b]&&!1===t.states[b].enabled)){k&&g.markerAttribs&&(w=g.markerAttribs(this,b));if(this.graphic)this.state&&this.graphic.removeClass("highcharts-point-"+this.state),b&&this.graphic.addClass("highcharts-point-"+b),this.graphic.attr(g.pointAttribs(this,b)),w&&this.graphic.animate(w,B(u.options.chart.animation,m.animation,k.animation)),p&&
p.hide();else{if(b&&m){k=t.symbol||g.symbol;p&&p.currentSymbol!==k&&(p=p.destroy());if(p)p[c?"animate":"attr"]({x:w.x,y:w.y});else k&&(g.stateMarkerGraphic=p=u.renderer.symbol(k,w.x,w.y,w.width,w.height).add(g.markerGroup),p.currentSymbol=k);p&&p.attr(g.pointAttribs(this,b));}p&&(p[b&&u.isInsidePlot(d,e,u.inverted)?"show":"hide"](),p.element.point=this);}(d=h.halo)&&d.size?(v||(g.halo=v=u.renderer.path().add(g.markerGroup||g.group)),a.stop(v),v[c?"animate":"attr"]({d:this.haloPath(d.size)}),v.attr({"class":"highcharts-halo highcharts-color-"+
B(this.colorIndex,g.colorIndex)}),v.attr(q({fill:this.color||g.color,"fill-opacity":d.opacity,zIndex:-1},d.attributes))):v&&v.animate({d:this.haloPath(0)});this.state=b;}},haloPath:function(a){return this.series.chart.renderer.symbols.circle(Math.floor(this.plotX)-a,this.plotY-a,2*a,2*a);}});q(e.prototype,{onMouseOver:function(){var a=this.chart,c=a.hoverSeries;if(c&&c!==this)c.onMouseOut();this.options.events.mouseOver&&n(this,"mouseOver");this.setState("hover");a.hoverSeries=this;},onMouseOut:function(){var a=
this.options,c=this.chart,d=c.tooltip,e=c.hoverPoint;c.hoverSeries=null;if(e)e.onMouseOut();this&&a.events.mouseOut&&n(this,"mouseOut");!d||a.stickyTracking||d.shared&&!this.noSharedTooltip||d.hide();this.setState();},setState:function(a){var b=this,c=b.options,d=b.graph,e=c.states,f=c.lineWidth,c=0;a=a||"";if(b.state!==a&&(h([b.group,b.markerGroup],function(c){c&&(b.state&&c.removeClass("highcharts-series-"+b.state),a&&c.addClass("highcharts-series-"+a));}),b.state=a,!e[a]||!1!==e[a].enabled)&&(a&&
(f=e[a].lineWidth||f+(e[a].lineWidthPlus||0)),d&&!d.dashstyle))for(e={"stroke-width":f},d.attr(e);b["zone-graph-"+c];)b["zone-graph-"+c].attr(e),c+=1;},setVisible:function(a,c){var b=this,d=b.chart,e=b.legendItem,f,g=d.options.chart.ignoreHiddenSeries,k=b.visible;f=(b.visible=a=b.options.visible=b.userOptions.visible=void 0===a?!k:a)?"show":"hide";h(["group","dataLabelsGroup","markerGroup","tracker","tt"],function(a){if(b[a])b[a][f]();});if(d.hoverSeries===b||(d.hoverPoint&&d.hoverPoint.series)===b)b.onMouseOut();
		e&&d.legend.colorizeItem(b,a);b.isDirty=!0;b.options.stacking&&h(d.series,function(a){a.options.stacking&&a.visible&&(a.isDirty=!0);});h(b.linkedSeries,function(b){b.setVisible(a,!1);});g&&(d.isDirtyBox=!0);!1!==c&&d.redraw();n(b,f);},show:function(){this.setVisible(!0);},hide:function(){this.setVisible(!1);},select:function(a){this.selected=a=void 0===a?!this.selected:a;this.checkbox&&(this.checkbox.checked=a);n(this,a?"select":"unselect");},drawTracker:L.drawTrackerGraph});})(M);(function(a){var D=a.Chart,
		z=a.each,F=a.inArray,J=a.isObject,m=a.pick,f=a.splat;D.prototype.setResponsive=function(a){var f=this.options.responsive;f&&f.rules&&z(f.rules,function(f){this.matchResponsiveRule(f,a);},this);};D.prototype.matchResponsiveRule=function(f,q){var h=this.respRules,k=f.condition,v;v=f.callback||function(){return this.chartWidth<=m(k.maxWidth,Number.MAX_VALUE)&&this.chartHeight<=m(k.maxHeight,Number.MAX_VALUE)&&this.chartWidth>=m(k.minWidth,0)&&this.chartHeight>=m(k.minHeight,0);};void 0===f._id&&(f._id=
a.idCounter++);v=v.call(this);!h[f._id]&&v?f.chartOptions&&(h[f._id]=this.currentOptions(f.chartOptions),this.update(f.chartOptions,q)):h[f._id]&&!v&&(this.update(h[f._id],q),delete h[f._id]);};D.prototype.currentOptions=function(a){function h(a,m,d){var g,k;for(g in a)if(-1<F(g,["series","xAxis","yAxis"]))for(a[g]=f(a[g]),d[g]=[],k=0;k<a[g].length;k++)d[g][k]={},h(a[g][k],m[g][k],d[g][k]);else J(a[g])?(d[g]={},h(a[g],m[g]||{},d[g])):d[g]=m[g]||null;}var m={};h(a,this.options,m);return m;};})(M);return M;});

},{}],108:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)
 Highcharts Drilldown module

 Author: Torstein Honsi
 License: www.highcharts.com/license

*/
	(function(n){"object"===typeof module&&module.exports?module.exports=n:n(Highcharts);})(function(n){(function(f){function n(b,a,d){var c;a.rgba.length&&b.rgba.length?(b=b.rgba,a=a.rgba,c=1!==a[3]||1!==b[3],b=(c?"rgba(":"rgb(")+Math.round(a[0]+(b[0]-a[0])*(1-d))+","+Math.round(a[1]+(b[1]-a[1])*(1-d))+","+Math.round(a[2]+(b[2]-a[2])*(1-d))+(c?","+(a[3]+(b[3]-a[3])*(1-d)):"")+")"):b=a.input||"none";return b;}var B=f.noop,v=f.color,w=f.defaultOptions,l=f.each,p=f.extend,H=f.format,C=f.pick,x=f.wrap,q=f.Chart,
		t=f.seriesTypes,D=t.pie,r=t.column,E=f.Tick,y=f.fireEvent,F=f.inArray,G=1;l(["fill","stroke"],function(b){f.Fx.prototype[b+"Setter"]=function(){this.elem.attr(b,n(v(this.start),v(this.end),this.pos));};});p(w.lang,{drillUpText:"\u25c1 Back to {series.name}"});w.drilldown={activeAxisLabelStyle:{cursor:"pointer",color:"#003399",fontWeight:"bold",textDecoration:"underline"},activeDataLabelStyle:{cursor:"pointer",color:"#003399",fontWeight:"bold",textDecoration:"underline"},animation:{duration:500},drillUpButton:{position:{align:"right",
		x:-10,y:10}}};f.SVGRenderer.prototype.Element.prototype.fadeIn=function(b){this.attr({opacity:.1,visibility:"inherit"}).animate({opacity:C(this.newOpacity,1)},b||{duration:250});};q.prototype.addSeriesAsDrilldown=function(b,a){this.addSingleSeriesAsDrilldown(b,a);this.applyDrilldown();};q.prototype.addSingleSeriesAsDrilldown=function(b,a){var d=b.series,c=d.xAxis,e=d.yAxis,h,g=[],k=[],u,m,z;z={color:b.color||d.color};this.drilldownLevels||(this.drilldownLevels=[]);u=d.options._levelNumber||0;(m=this.drilldownLevels[this.drilldownLevels.length-
1])&&m.levelNumber!==u&&(m=void 0);a=p(p({_ddSeriesId:G++},z),a);h=F(b,d.points);l(d.chart.series,function(a){a.xAxis!==c||a.isDrilling||(a.options._ddSeriesId=a.options._ddSeriesId||G++,a.options._colorIndex=a.userOptions._colorIndex,a.options._levelNumber=a.options._levelNumber||u,m?(g=m.levelSeries,k=m.levelSeriesOptions):(g.push(a),k.push(a.options)));});b=p({levelNumber:u,seriesOptions:d.options,levelSeriesOptions:k,levelSeries:g,shapeArgs:b.shapeArgs,bBox:b.graphic?b.graphic.getBBox():{},color:b.isNull?
		(new f.Color(v)).setOpacity(0).get():v,lowerSeriesOptions:a,pointOptions:d.options.data[h],pointIndex:h,oldExtremes:{xMin:c&&c.userMin,xMax:c&&c.userMax,yMin:e&&e.userMin,yMax:e&&e.userMax}},z);this.drilldownLevels.push(b);a=b.lowerSeries=this.addSeries(a,!1);a.options._levelNumber=u+1;c&&(c.oldPos=c.pos,c.userMin=c.userMax=null,e.userMin=e.userMax=null);d.type===a.type&&(a.animate=a.animateDrilldown||B,a.options.animation=!0);};q.prototype.applyDrilldown=function(){var b=this.drilldownLevels,a;b&&
0<b.length&&(a=b[b.length-1].levelNumber,l(this.drilldownLevels,function(b){b.levelNumber===a&&l(b.levelSeries,function(c){c.options&&c.options._levelNumber===a&&c.remove(!1);});}));this.redraw();this.showDrillUpButton();};q.prototype.getDrilldownBackText=function(){var b=this.drilldownLevels;if(b&&0<b.length)return b=b[b.length-1],b.series=b.seriesOptions,H(this.options.lang.drillUpText,b);};q.prototype.showDrillUpButton=function(){var b=this,a=this.getDrilldownBackText(),d=b.options.drilldown.drillUpButton,
		c,e;this.drillUpButton?this.drillUpButton.attr({text:a}).align():(e=(c=d.theme)&&c.states,this.drillUpButton=this.renderer.button(a,null,null,function(){b.drillUp();},c,e&&e.hover,e&&e.select).addClass("highcharts-drillup-button").attr({align:d.position.align,zIndex:7}).add().align(d.position,!1,d.relativeTo||"plotBox"));};q.prototype.drillUp=function(){for(var b=this,a=b.drilldownLevels,d=a[a.length-1].levelNumber,c=a.length,e=b.series,h,g,k,f,m=function(a){var c;l(e,function(b){b.options._ddSeriesId===
a._ddSeriesId&&(c=b);});c=c||b.addSeries(a,!1);c.type===k.type&&c.animateDrillupTo&&(c.animate=c.animateDrillupTo);a===g.seriesOptions&&(f=c);};c--;)if(g=a[c],g.levelNumber===d){a.pop();k=g.lowerSeries;if(!k.chart)for(h=e.length;h--;)if(e[h].options.id===g.lowerSeriesOptions.id&&e[h].options._levelNumber===d+1){k=e[h];break;}k.xData=[];l(g.levelSeriesOptions,m);y(b,"drillup",{seriesOptions:g.seriesOptions});f.type===k.type&&(f.drilldownLevel=g,f.options.animation=b.options.drilldown.animation,k.animateDrillupFrom&&
k.chart&&k.animateDrillupFrom(g));f.options._levelNumber=d;k.remove(!1);f.xAxis&&(h=g.oldExtremes,f.xAxis.setExtremes(h.xMin,h.xMax,!1),f.yAxis.setExtremes(h.yMin,h.yMax,!1));}y(b,"drillupall");this.redraw();0===this.drilldownLevels.length?this.drillUpButton=this.drillUpButton.destroy():this.drillUpButton.attr({text:this.getDrilldownBackText()}).align();this.ddDupes.length=[];};r.prototype.supportsDrilldown=!0;r.prototype.animateDrillupTo=function(b){if(!b){var a=this,d=a.drilldownLevel;l(this.points,
		function(a){a.graphic&&a.graphic.hide();a.dataLabel&&a.dataLabel.hide();a.connector&&a.connector.hide();});setTimeout(function(){a.points&&l(a.points,function(a,b){b=b===(d&&d.pointIndex)?"show":"fadeIn";var c="show"===b?!0:void 0;if(a.graphic)a.graphic[b](c);if(a.dataLabel)a.dataLabel[b](c);if(a.connector)a.connector[b](c);});},Math.max(this.chart.options.drilldown.animation.duration-50,0));this.animate=B;}};r.prototype.animateDrilldown=function(b){var a=this,d=this.chart.drilldownLevels,c,e=this.chart.options.drilldown.animation,
		h=this.xAxis;b||(l(d,function(b){a.options._ddSeriesId===b.lowerSeriesOptions._ddSeriesId&&(c=b.shapeArgs,c.fill=b.color);}),c.x+=C(h.oldPos,h.pos)-h.pos,l(this.points,function(b){b.shapeArgs.fill=b.color;b.graphic&&b.graphic.attr(c).animate(p(b.shapeArgs,{fill:b.color||a.color}),e);b.dataLabel&&b.dataLabel.fadeIn(e);}),this.animate=null);};r.prototype.animateDrillupFrom=function(b){var a=this.chart.options.drilldown.animation,d=this.group,c=this;l(c.trackerGroups,function(a){if(c[a])c[a].on("mouseover");});
		delete this.group;l(this.points,function(c){var e=c.graphic,g=b.shapeArgs,k=function(){e.destroy();d&&(d=d.destroy());};e&&(delete c.graphic,g.fill=b.color,a?e.animate(g,f.merge(a,{complete:k})):(e.attr(g),k()));});};D&&p(D.prototype,{supportsDrilldown:!0,animateDrillupTo:r.prototype.animateDrillupTo,animateDrillupFrom:r.prototype.animateDrillupFrom,animateDrilldown:function(b){var a=this.chart.drilldownLevels[this.chart.drilldownLevels.length-1],d=this.chart.options.drilldown.animation,c=a.shapeArgs,
		e=c.start,h=(c.end-e)/this.points.length;b||(l(this.points,function(b,k){var g=b.shapeArgs;c.fill=a.color;g.fill=b.color;if(b.graphic)b.graphic.attr(f.merge(c,{start:e+k*h,end:e+(k+1)*h}))[d?"animate":"attr"](g,d);}),this.animate=null);}});f.Point.prototype.doDrilldown=function(b,a,d){var c=this.series.chart,e=c.options.drilldown,f=(e.series||[]).length,g;c.ddDupes||(c.ddDupes=[]);for(;f--&&!g;)e.series[f].id===this.drilldown&&-1===F(this.drilldown,c.ddDupes)&&(g=e.series[f],c.ddDupes.push(this.drilldown));
		y(c,"drilldown",{point:this,seriesOptions:g,category:a,originalEvent:d,points:void 0!==a&&this.series.xAxis.getDDPoints(a).slice(0)},function(a){var c=a.point.series&&a.point.series.chart,d=a.seriesOptions;c&&d&&(b?c.addSingleSeriesAsDrilldown(a.point,d):c.addSeriesAsDrilldown(a.point,d));});};f.Axis.prototype.drilldownCategory=function(b,a){var d,c,e=this.getDDPoints(b);for(d in e)(c=e[d])&&c.series&&c.series.visible&&c.doDrilldown&&c.doDrilldown(!0,b,a);this.chart.applyDrilldown();};f.Axis.prototype.getDDPoints=
function(b){var a=[];l(this.series,function(d){var c,e=d.xData,f=d.points;for(c=0;c<e.length;c++)if(e[c]===b&&d.options.data[c]&&d.options.data[c].drilldown){a.push(f?f[c]:!0);break;}});return a;};E.prototype.drillable=function(){var b=this.pos,a=this.label,d=this.axis,c="xAxis"===d.coll&&d.getDDPoints,e=c&&d.getDDPoints(b);c&&(a&&e.length?(a.drillable=!0,a.basicStyles||(a.basicStyles=f.merge(a.styles)),a.addClass("highcharts-drilldown-axis-label").css(d.chart.options.drilldown.activeAxisLabelStyle).on("click",
		function(a){d.drilldownCategory(b,a);})):a&&a.drillable&&(a.styles={},a.css(a.basicStyles),a.on("click",null),a.removeClass("highcharts-drilldown-axis-label")));};x(E.prototype,"addLabel",function(b){b.call(this);this.drillable();});x(f.Point.prototype,"init",function(b,a,d,c){var e=b.call(this,a,d,c);c=(b=a.xAxis)&&b.ticks[c];e.drilldown&&f.addEvent(e,"click",function(b){a.xAxis&&!1===a.chart.options.drilldown.allowPointDrilldown?a.xAxis.drilldownCategory(e.x,b):e.doDrilldown(void 0,void 0,b);});c&&
c.drillable();return e;});x(f.Series.prototype,"drawDataLabels",function(b){var a=this.chart.options.drilldown.activeDataLabelStyle,d=this.chart.renderer;b.call(this);l(this.points,function(b){var c={};b.drilldown&&b.dataLabel&&("contrast"===a.color&&(c.color=d.getContrast(b.color||this.color)),b.dataLabel.addClass("highcharts-drilldown-data-label"),b.dataLabel.css(a).css(c));},this);});var A,w=function(b){b.call(this);l(this.points,function(a){a.drilldown&&a.graphic&&(a.graphic.addClass("highcharts-drilldown-point"),
	a.graphic.css({cursor:"pointer"}));});};for(A in t)t[A].prototype.supportsDrilldown&&x(t[A].prototype,"drawTracker",w);})(n);});

},{}],109:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)

 (c) 2009-2016 Torstein Honsi

 License: www.highcharts.com/license
*/
	(function(n){"object"===typeof module&&module.exports?module.exports=n:n(Highcharts);})(function(n){(function(b){var h=b.Axis,r=b.Chart,m=b.color,k,e=b.each,v=b.extend,w=b.isNumber,p=b.Legend,g=b.LegendSymbolMixin,x=b.noop,q=b.merge,u=b.pick,t=b.wrap;k=b.ColorAxis=function(){this.init.apply(this,arguments);};v(k.prototype,h.prototype);v(k.prototype,{defaultColorAxisOptions:{lineWidth:0,minPadding:0,maxPadding:0,gridLineWidth:1,tickPixelInterval:72,startOnTick:!0,endOnTick:!0,offset:0,marker:{animation:{duration:50},
		width:.01,color:"#999999"},labels:{overflow:"justify"},minColor:"#e6ebf5",maxColor:"#003399",tickLength:5,showInLegend:!0},init:function(a,c){var d="vertical"!==a.options.legend.layout,f;this.coll="colorAxis";f=q(this.defaultColorAxisOptions,{side:d?2:1,reversed:!d},c,{opposite:!d,showEmpty:!1,title:null});h.prototype.init.call(this,a,f);c.dataClasses&&this.initDataClasses(c);this.initStops(c);this.horiz=d;this.zoomEnabled=!1;this.defaultLegendLength=200;},tweenColors:function(a,c,d){var f;c.rgba.length&&
a.rgba.length?(a=a.rgba,c=c.rgba,f=1!==c[3]||1!==a[3],a=(f?"rgba(":"rgb(")+Math.round(c[0]+(a[0]-c[0])*(1-d))+","+Math.round(c[1]+(a[1]-c[1])*(1-d))+","+Math.round(c[2]+(a[2]-c[2])*(1-d))+(f?","+(c[3]+(a[3]-c[3])*(1-d)):"")+")"):a=c.input||"none";return a;},initDataClasses:function(a){var c=this,d=this.chart,f,l=0,b=d.options.chart.colorCount,y=this.options,g=a.dataClasses.length;this.dataClasses=f=[];this.legendItems=[];e(a.dataClasses,function(a,e){a=q(a);f.push(a);a.color||("category"===y.dataClassColor?
		(e=d.options.colors,b=e.length,a.color=e[l],a.colorIndex=l,l++,l===b&&(l=0)):a.color=c.tweenColors(m(y.minColor),m(y.maxColor),2>g?.5:e/(g-1)));});},initStops:function(a){this.stops=a.stops||[[0,this.options.minColor],[1,this.options.maxColor]];e(this.stops,function(a){a.color=m(a[1]);});},setOptions:function(a){h.prototype.setOptions.call(this,a);this.options.crosshair=this.options.marker;},setAxisSize:function(){var a=this.legendSymbol,c=this.chart,d=c.options.legend||{},f,l;a?(this.left=d=a.attr("x"),
	this.top=f=a.attr("y"),this.width=l=a.attr("width"),this.height=a=a.attr("height"),this.right=c.chartWidth-d-l,this.bottom=c.chartHeight-f-a,this.len=this.horiz?l:a,this.pos=this.horiz?d:f):this.len=(this.horiz?d.symbolWidth:d.symbolHeight)||this.defaultLegendLength;},toColor:function(a,c){var d=this.stops,f,l,b=this.dataClasses,g,e;if(b)for(e=b.length;e--;){if(g=b[e],f=g.from,d=g.to,(void 0===f||a>=f)&&(void 0===d||a<=d)){l=g.color;c&&(c.dataClass=e,c.colorIndex=g.colorIndex);break;}}else{this.isLog&&
(a=this.val2lin(a));a=1-(this.max-a)/(this.max-this.min||1);for(e=d.length;e--&&!(a>d[e][0]););f=d[e]||d[e+1];d=d[e+1]||f;a=1-(d[0]-a)/(d[0]-f[0]||1);l=this.tweenColors(f.color,d.color,a);}return l;},getOffset:function(){var a=this.legendGroup,c=this.chart.axisOffset[this.side];a&&(this.axisParent=a,h.prototype.getOffset.call(this),this.added||(this.added=!0,this.labelLeft=0,this.labelRight=this.width),this.chart.axisOffset[this.side]=c);},setLegendColor:function(){var a,c=this.options,d=this.reversed;
		a=d?1:0;d=d?0:1;a=this.horiz?[a,0,d,0]:[0,d,0,a];this.legendColor={linearGradient:{x1:a[0],y1:a[1],x2:a[2],y2:a[3]},stops:c.stops||[[0,c.minColor],[1,c.maxColor]]};},drawLegendSymbol:function(a,c){var d=a.padding,f=a.options,l=this.horiz,b=u(f.symbolWidth,l?this.defaultLegendLength:12),e=u(f.symbolHeight,l?12:this.defaultLegendLength),g=u(f.labelPadding,l?16:30),f=u(f.itemDistance,10);this.setLegendColor();c.legendSymbol=this.chart.renderer.rect(0,a.baseline-11,b,e).attr({zIndex:1}).add(c.legendGroup);
		this.legendItemWidth=b+d+(l?f:g);this.legendItemHeight=e+d+(l?g:0);},setState:x,visible:!0,setVisible:x,getSeriesExtremes:function(){var a;this.series.length&&(a=this.series[0],this.dataMin=a.valueMin,this.dataMax=a.valueMax);},drawCrosshair:function(a,c){var d=c&&c.plotX,f=c&&c.plotY,b,e=this.pos,g=this.len;c&&(b=this.toPixels(c[c.series.colorKey]),b<e?b=e-2:b>e+g&&(b=e+g+2),c.plotX=b,c.plotY=this.len-b,h.prototype.drawCrosshair.call(this,a,c),c.plotX=d,c.plotY=f,this.cross&&(this.cross.addClass("highcharts-coloraxis-marker").add(this.legendGroup),
	this.cross.attr({fill:this.crosshair.color})));},getPlotLinePath:function(a,c,d,b,e){return w(e)?this.horiz?["M",e-4,this.top-6,"L",e+4,this.top-6,e,this.top,"Z"]:["M",this.left,e,"L",this.left-6,e+6,this.left-6,e-6,"Z"]:h.prototype.getPlotLinePath.call(this,a,c,d,b);},update:function(a,c){var d=this.chart,b=d.legend;e(this.series,function(a){a.isDirtyData=!0;});a.dataClasses&&b.allItems&&(e(b.allItems,function(a){a.isDataClass&&a.legendGroup.destroy();}),d.isDirtyLegend=!0);d.options[this.coll]=q(this.userOptions,
		a);h.prototype.update.call(this,a,c);this.legendItem&&(this.setLegendColor(),b.colorizeItem(this,!0));},getDataClassLegendSymbols:function(){var a=this,c=this.chart,d=this.legendItems,f=c.options.legend,l=f.valueDecimals,t=f.valueSuffix||"",h;d.length||e(this.dataClasses,function(f,p){var k=!0,q=f.from,m=f.to;h="";void 0===q?h="\x3c ":void 0===m&&(h="\x3e ");void 0!==q&&(h+=b.numberFormat(q,l)+t);void 0!==q&&void 0!==m&&(h+=" - ");void 0!==m&&(h+=b.numberFormat(m,l)+t);d.push(v({chart:c,name:h,options:{},
		drawLegendSymbol:g.drawRectangle,visible:!0,setState:x,isDataClass:!0,setVisible:function(){k=this.visible=!k;e(a.series,function(a){e(a.points,function(a){a.dataClass===p&&a.setVisible(k);});});c.legend.colorizeItem(this,k);}},f));});return d;},name:""});e(["fill","stroke"],function(a){b.Fx.prototype[a+"Setter"]=function(){this.elem.attr(a,k.prototype.tweenColors(m(this.start),m(this.end),this.pos));};});t(r.prototype,"getAxes",function(a){var c=this.options.colorAxis;a.call(this);this.colorAxis=[];c&&
new k(this,c);});t(p.prototype,"getAllItems",function(a){var c=[],d=this.chart.colorAxis[0];d&&d.options&&(d.options.showInLegend&&(d.options.dataClasses?c=c.concat(d.getDataClassLegendSymbols()):c.push(d)),e(d.series,function(a){a.options.showInLegend=!1;}));return c.concat(a.call(this));});t(p.prototype,"colorizeItem",function(a,c,d){a.call(this,c,d);d&&c.legendColor&&c.legendSymbol.attr({fill:c.legendColor});});})(n);(function(b){var h=b.defined,r=b.each,m=b.noop,k=b.seriesTypes;b.colorPointMixin={isValid:function(){return null!==
this.value;},setVisible:function(b){var e=this,h=b?"show":"hide";r(["graphic","dataLabel"],function(b){if(e[b])e[b][h]();});}};b.colorSeriesMixin={pointArrayMap:["value"],axisTypes:["xAxis","yAxis","colorAxis"],optionalAxis:"colorAxis",trackerGroups:["group","markerGroup","dataLabelsGroup"],getSymbol:m,parallelArrays:["x","y","value"],colorKey:"value",pointAttribs:k.column.prototype.pointAttribs,translateColors:function(){var b=this,h=this.options.nullColor,k=this.colorAxis,m=this.colorKey;r(this.data,
		function(e){var g=e[m];if(g=e.options.color||(e.isNull?h:k&&void 0!==g?k.toColor(g,e):e.color||b.color))e.color=g;});},colorAttribs:function(b){var e={};h(b.color)&&(e[this.colorProp||"fill"]=b.color);return e;}};})(n);(function(b){var h=b.colorPointMixin,r=b.each,m=b.merge,k=b.noop,e=b.pick,n=b.Series,w=b.seriesType,p=b.seriesTypes;w("heatmap","scatter",{animation:!1,borderWidth:0,nullColor:"#f7f7f7",dataLabels:{formatter:function(){return this.point.value;},inside:!0,verticalAlign:"middle",crop:!1,overflow:!1,
		padding:0},marker:null,pointRange:null,tooltip:{pointFormat:"{point.x}, {point.y}: {point.value}\x3cbr/\x3e"},states:{normal:{animation:!0},hover:{halo:!1,brightness:.2}}},m(b.colorSeriesMixin,{pointArrayMap:["y","value"],hasPointSpecificOptions:!0,supportsDrilldown:!0,getExtremesFromAll:!0,directTouch:!0,init:function(){var b;p.scatter.prototype.init.apply(this,arguments);b=this.options;b.pointRange=e(b.pointRange,b.colsize||1);this.yAxis.axisPointRange=b.rowsize||1;},translate:function(){var b=this.options,
		e=this.xAxis,h=this.yAxis,k=function(b,a,c){return Math.min(Math.max(a,b),c);};this.generatePoints();r(this.points,function(g){var a=(b.colsize||1)/2,c=(b.rowsize||1)/2,d=k(Math.round(e.len-e.translate(g.x-a,0,1,0,1)),-e.len,2*e.len),a=k(Math.round(e.len-e.translate(g.x+a,0,1,0,1)),-e.len,2*e.len),f=k(Math.round(h.translate(g.y-c,0,1,0,1)),-h.len,2*h.len),c=k(Math.round(h.translate(g.y+c,0,1,0,1)),-h.len,2*h.len);g.plotX=g.clientX=(d+a)/2;g.plotY=(f+c)/2;g.shapeType="rect";g.shapeArgs={x:Math.min(d,
		a),y:Math.min(f,c),width:Math.abs(a-d),height:Math.abs(c-f)};});this.translateColors();},drawPoints:function(){p.column.prototype.drawPoints.call(this);r(this.points,function(b){b.graphic.attr(this.colorAttribs(b,b.state));},this);},animate:k,getBox:k,drawLegendSymbol:b.LegendSymbolMixin.drawRectangle,alignDataLabel:p.column.prototype.alignDataLabel,getExtremes:function(){n.prototype.getExtremes.call(this,this.valueData);this.valueMin=this.dataMin;this.valueMax=this.dataMax;n.prototype.getExtremes.call(this);}}),
	h);})(n);});

},{}],110:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)
 Plugin for displaying a message when there is no data visible in chart.

 (c) 2010-2016 Highsoft AS
 Author: Oystein Moseng

 License: www.highcharts.com/license
*/
	(function(d){"object"===typeof module&&module.exports?module.exports=d:d(Highcharts);})(function(d){(function(c){function d(){return!!this.points.length;}function g(){this.hasData()?this.hideNoData():this.showNoData();}var h=c.seriesTypes,e=c.Chart.prototype,f=c.getOptions(),k=c.extend,l=c.each;k(f.lang,{noData:"No data to display"});f.noData={position:{x:0,y:0,align:"center",verticalAlign:"middle"}};f.noData.style={fontWeight:"bold",fontSize:"12px",color:"#666666"};l(["pie","gauge","waterfall","bubble",
		"treemap"],function(a){h[a]&&(h[a].prototype.hasData=d);});c.Series.prototype.hasData=function(){return this.visible&&void 0!==this.dataMax&&void 0!==this.dataMin;};e.showNoData=function(a){var b=this.options;a=a||b.lang.noData;b=b.noData;this.noDataLabel||(this.noDataLabel=this.renderer.label(a,0,0,null,null,null,b.useHTML,null,"no-data"),this.noDataLabel.attr(b.attr).css(b.style),this.noDataLabel.add(),this.noDataLabel.align(k(this.noDataLabel.getBBox(),b.position),!1,"plotBox"));};e.hideNoData=function(){this.noDataLabel&&
(this.noDataLabel=this.noDataLabel.destroy());};e.hasData=function(){for(var a=this.series,b=a.length;b--;)if(a[b].hasData()&&!a[b].options.isInternal)return!0;return!1;};e.callbacks.push(function(a){c.addEvent(a,"load",g);c.addEvent(a,"redraw",g);});})(d);});

},{}],111:[function(require,module,exports){
/*
  Highcharts JS v5.0.2 (2016-10-26)
 Solid angular gauge module

 (c) 2010-2016 Torstein Honsi

 License: www.highcharts.com/license
*/
	(function(l){"object"===typeof module&&module.exports?module.exports=l:l(Highcharts);})(function(l){(function(f){var l=f.pInt,u=f.pick,m=f.each,v=f.isNumber,n;n={initDataClasses:function(a){var c=this,d=this.chart,e,t=0,h=this.options;this.dataClasses=e=[];m(a.dataClasses,function(g,b){g=f.merge(g);e.push(g);g.color||("category"===h.dataClassColor?(b=d.options.colors,g.color=b[t++],t===b.length&&(t=0)):g.color=c.tweenColors(f.color(h.minColor),f.color(h.maxColor),b/(a.dataClasses.length-1)));});},initStops:function(a){this.stops=
a.stops||[[0,this.options.minColor],[1,this.options.maxColor]];m(this.stops,function(a){a.color=f.color(a[1]);});},toColor:function(a,c){var d=this.stops,e,f,h=this.dataClasses,g,b;if(h)for(b=h.length;b--;){if(g=h[b],e=g.from,d=g.to,(void 0===e||a>=e)&&(void 0===d||a<=d)){f=g.color;c&&(c.dataClass=b);break;}}else{this.isLog&&(a=this.val2lin(a));a=1-(this.max-a)/(this.max-this.min);for(b=d.length;b--&&!(a>d[b][0]););e=d[b]||d[b+1];d=d[b+1]||e;a=1-(d[0]-a)/(d[0]-e[0]||1);f=this.tweenColors(e.color,d.color,
		a);}return f;},tweenColors:function(a,c,d){var e;c.rgba.length&&a.rgba.length?(a=a.rgba,c=c.rgba,e=1!==c[3]||1!==a[3],a=(e?"rgba(":"rgb(")+Math.round(c[0]+(a[0]-c[0])*(1-d))+","+Math.round(c[1]+(a[1]-c[1])*(1-d))+","+Math.round(c[2]+(a[2]-c[2])*(1-d))+(e?","+(c[3]+(a[3]-c[3])*(1-d)):"")+")"):a=c.input||"none";return a;}};m(["fill","stroke"],function(a){f.Fx.prototype[a+"Setter"]=function(){this.elem.attr(a,n.tweenColors(f.color(this.start),f.color(this.end),this.pos));};});f.seriesType("solidgauge","gauge",
		{colorByPoint:!0},{bindAxes:function(){var a;f.seriesTypes.gauge.prototype.bindAxes.call(this);a=this.yAxis;f.extend(a,n);a.options.dataClasses&&a.initDataClasses(a.options);a.initStops(a.options);},drawPoints:function(){var a=this,c=a.yAxis,d=c.center,e=a.options,f=a.chart.renderer,h=e.overshoot,g=v(h)?h/180*Math.PI:0;m(a.points,function(b){var h=b.graphic,k=c.startAngleRad+c.translate(b.y,null,null,null,!0),m=l(u(b.options.radius,e.radius,100))*d[2]/200,p=l(u(b.options.innerRadius,e.innerRadius,
				60))*d[2]/200,q=c.toColor(b.y,b),r=Math.min(c.startAngleRad,c.endAngleRad),n=Math.max(c.startAngleRad,c.endAngleRad);"none"===q&&(q=b.color||a.color||"none");"none"!==q&&(b.color=q);k=Math.max(r-g,Math.min(n+g,k));!1===e.wrap&&(k=Math.max(r,Math.min(n,k)));r=Math.min(k,c.startAngleRad);k=Math.max(k,c.startAngleRad);k-r>2*Math.PI&&(k=r+2*Math.PI);b.shapeArgs=p={x:d[0],y:d[1],r:m,innerR:p,start:r,end:k,fill:q};b.startR=m;h?(b=p.d,h.animate(p),b&&(p.d=b)):(b.graphic=f.arc(p).addClass("highcharts-point").attr({fill:q,
			"sweep-flag":0}).add(a.group),"square"!==e.linecap&&b.graphic.attr({"stroke-linecap":"round","stroke-linejoin":"round"}),b.graphic.attr({stroke:e.borderColor||"none","stroke-width":e.borderWidth||0}));});},animate:function(a){a||(this.startAngleRad=this.yAxis.startAngleRad,f.seriesTypes.pie.prototype.animate.call(this,a));}});})(l);});

},{}],112:[function(require,module,exports){
/*
 Highcharts JS v5.0.2 (2016-10-26)

 (c) 2014 Highsoft AS
 Authors: Jon Arild Nygard / Oystein Moseng

 License: www.highcharts.com/license
*/
	(function(q){"object"===typeof module&&module.exports?module.exports=q:q(Highcharts);})(function(q){(function(g){var q=g.seriesType,n=g.seriesTypes,E=g.map,v=g.merge,y=g.extend,z=g.noop,m=g.each,x=g.grep,F=g.isNumber,k=g.pick,u=g.Series,G=g.stableSort,A=g.Color,H=function(a,b,c){var e;c=c||this;for(e in a)a.hasOwnProperty(e)&&b.call(c,a[e],e,a);},B=function(a,b,c,e){e=e||this;a=a||[];m(a,function(d,f){c=b.call(e,c,d,f,a);});return c;},w=function(a,b,c){c=c||this;a=b.call(c,a);!1!==a&&w(a,b,c);};q("treemap",
		"scatter",{showInLegend:!1,marker:!1,dataLabels:{enabled:!0,defer:!1,verticalAlign:"middle",formatter:function(){return this.point.name||this.point.id;},inside:!0},tooltip:{headerFormat:"",pointFormat:"\x3cb\x3e{point.name}\x3c/b\x3e: {point.value}\x3c/b\x3e\x3cbr/\x3e"},layoutAlgorithm:"sliceAndDice",layoutStartingDirection:"vertical",alternateStartingDirection:!1,levelIsConstant:!0,drillUpButton:{position:{align:"right",x:-10,y:10}},borderColor:"#e6e6e6",borderWidth:1,opacity:.15,states:{hover:{borderColor:"#999999",
			brightness:n.heatmap?0:.1,opacity:.75,shadow:!1}}},{pointArrayMap:["value"],axisTypes:n.heatmap?["xAxis","yAxis","colorAxis"]:["xAxis","yAxis"],optionalAxis:"colorAxis",getSymbol:z,parallelArrays:["x","y","value","colorValue"],colorKey:"colorValue",translateColors:n.heatmap&&n.heatmap.prototype.translateColors,trackerGroups:["group","dataLabelsGroup"],getListOfParents:function(a,b){a=B(a,function(a,b,d){b=k(b.parent,"");void 0===a[b]&&(a[b]=[]);a[b].push(d);return a;},{});H(a,function(a,e,d){""!==
e&&-1===g.inArray(e,b)&&(m(a,function(a){d[""].push(a);}),delete d[e]);});return a;},getTree:function(){var a,b=this;a=E(this.data,function(a){return a.id;});a=b.getListOfParents(this.data,a);b.nodeMap=[];a=b.buildNode("",-1,0,a,null);w(this.nodeMap[this.rootNode],function(a){var c=!1,d=a.parent;a.visible=!0;if(d||""===d)c=b.nodeMap[d];return c;});w(this.nodeMap[this.rootNode].children,function(a){var b=!1;m(a,function(a){a.visible=!0;a.children.length&&(b=(b||[]).concat(a.children));});return b;});this.setTreeValues(a);
			return a;},init:function(a,b){u.prototype.init.call(this,a,b);this.options.allowDrillToNode&&this.drillTo();},buildNode:function(a,b,c,e,d){var f=this,h=[],C=f.points[b],D;m(e[a]||[],function(b){D=f.buildNode(f.points[b].id,b,c+1,e,a);h.push(D);});b={id:a,i:b,children:h,level:c,parent:d,visible:!1};f.nodeMap[b.id]=b;C&&(C.node=b);return b;},setTreeValues:function(a){var b=this,c=b.options,e=0,d=[],f,h=b.points[a.i];m(a.children,function(a){a=b.setTreeValues(a);d.push(a);a.ignore?w(a.children,function(a){var b=
!1;m(a,function(a){y(a,{ignore:!0,isLeaf:!1,visible:!1});a.children.length&&(b=(b||[]).concat(a.children));});return b;}):e+=a.val;});G(d,function(a,b){return a.sortIndex-b.sortIndex;});f=k(h&&h.options.value,e);h&&(h.value=f);y(a,{children:d,childrenTotal:e,ignore:!(k(h&&h.visible,!0)&&0<f),isLeaf:a.visible&&!e,levelDynamic:c.levelIsConstant?a.level:a.level-b.nodeMap[b.rootNode].level,name:k(h&&h.name,""),sortIndex:k(h&&h.sortIndex,-f),val:f});return a;},calculateChildrenAreas:function(a,b){var c=this,
			e=c.options,d=this.levelMap[a.levelDynamic+1],f=k(c[d&&d.layoutAlgorithm]&&d.layoutAlgorithm,e.layoutAlgorithm),h=e.alternateStartingDirection,g=[];a=x(a.children,function(a){return!a.ignore;});d&&d.layoutStartingDirection&&(b.direction="vertical"===d.layoutStartingDirection?0:1);g=c[f](b,a);m(a,function(a,d){d=g[d];a.values=v(d,{val:a.childrenTotal,direction:h?1-b.direction:b.direction});a.pointValues=v(d,{x:d.x/c.axisRatio,width:d.width/c.axisRatio});a.children.length&&c.calculateChildrenAreas(a,
			a.values);});},setPointValues:function(){var a=this.xAxis,b=this.yAxis;m(this.points,function(c){var e=c.node,d=e.pointValues,f,h;d&&e.visible?(e=Math.round(a.translate(d.x,0,0,0,1))-.5,f=Math.round(a.translate(d.x+d.width,0,0,0,1))-.5,h=Math.round(b.translate(d.y,0,0,0,1))-.5,d=Math.round(b.translate(d.y+d.height,0,0,0,1))-.5,c.shapeType="rect",c.shapeArgs={x:Math.min(e,f),y:Math.min(h,d),width:Math.abs(f-e),height:Math.abs(d-h)},c.plotX=c.shapeArgs.x+c.shapeArgs.width/2,c.plotY=c.shapeArgs.y+c.shapeArgs.height/
2):(delete c.plotX,delete c.plotY);});},setColorRecursive:function(a,b,c){var e=this,d,f;a&&(d=e.points[a.i],f=e.levelMap[a.levelDynamic],b=k(d&&d.options.color,f&&f.color,b),c=k(d&&d.options.colorIndex,f&&f.colorIndex,c),d&&(d.color=b,d.colorIndex=c),a.children.length&&m(a.children,function(a){e.setColorRecursive(a,b,c);}));},algorithmGroup:function(a,b,c,e){this.height=a;this.width=b;this.plot=e;this.startDirection=this.direction=c;this.lH=this.nH=this.lW=this.nW=this.total=0;this.elArr=[];this.lP=
{total:0,lH:0,nH:0,lW:0,nW:0,nR:0,lR:0,aspectRatio:function(a,b){return Math.max(a/b,b/a);}};this.addElement=function(a){this.lP.total=this.elArr[this.elArr.length-1];this.total+=a;0===this.direction?(this.lW=this.nW,this.lP.lH=this.lP.total/this.lW,this.lP.lR=this.lP.aspectRatio(this.lW,this.lP.lH),this.nW=this.total/this.height,this.lP.nH=this.lP.total/this.nW,this.lP.nR=this.lP.aspectRatio(this.nW,this.lP.nH)):(this.lH=this.nH,this.lP.lW=this.lP.total/this.lH,this.lP.lR=this.lP.aspectRatio(this.lP.lW,
			this.lH),this.nH=this.total/this.width,this.lP.nW=this.lP.total/this.nH,this.lP.nR=this.lP.aspectRatio(this.lP.nW,this.nH));this.elArr.push(a);};this.reset=function(){this.lW=this.nW=0;this.elArr=[];this.total=0;};},algorithmCalcPoints:function(a,b,c,e){var d,f,h,g,k=c.lW,p=c.lH,l=c.plot,n,r=0,t=c.elArr.length-1;b?(k=c.nW,p=c.nH):n=c.elArr[c.elArr.length-1];m(c.elArr,function(a){if(b||r<t)0===c.direction?(d=l.x,f=l.y,h=k,g=a/h):(d=l.x,f=l.y,g=p,h=a/g),e.push({x:d,y:f,width:h,height:g}),0===c.direction?
			l.y+=g:l.x+=h;r+=1;});c.reset();0===c.direction?c.width-=k:c.height-=p;l.y=l.parent.y+(l.parent.height-c.height);l.x=l.parent.x+(l.parent.width-c.width);a&&(c.direction=1-c.direction);b||c.addElement(n);},algorithmLowAspectRatio:function(a,b,c){var e=[],d=this,f,h={x:b.x,y:b.y,parent:b},g=0,k=c.length-1,p=new this.algorithmGroup(b.height,b.width,b.direction,h);m(c,function(c){f=c.val/b.val*b.height*b.width;p.addElement(f);p.lP.nR>p.lP.lR&&d.algorithmCalcPoints(a,!1,p,e,h);g===k&&d.algorithmCalcPoints(a,
			!0,p,e,h);g+=1;});return e;},algorithmFill:function(a,b,c){var e=[],d,f=b.direction,g=b.x,k=b.y,n=b.width,p=b.height,l,q,r,t;m(c,function(c){d=c.val/b.val*b.height*b.width;l=g;q=k;0===f?(t=p,r=d/t,n-=r,g+=r):(r=n,t=d/r,p-=t,k+=t);e.push({x:l,y:q,width:r,height:t});a&&(f=1-f);});return e;},strip:function(a,b){return this.algorithmLowAspectRatio(!1,a,b);},squarified:function(a,b){return this.algorithmLowAspectRatio(!0,a,b);},sliceAndDice:function(a,b){return this.algorithmFill(!0,a,b);},stripes:function(a,
			b){return this.algorithmFill(!1,a,b);},translate:function(){var a,b;u.prototype.translate.call(this);this.rootNode=k(this.options.rootId,"");this.levelMap=B(this.options.levels,function(a,b){a[b.level]=b;return a;},{});b=this.tree=this.getTree();this.axisRatio=this.xAxis.len/this.yAxis.len;this.nodeMap[""].pointValues=a={x:0,y:0,width:100,height:100};this.nodeMap[""].values=a=v(a,{width:a.width*this.axisRatio,direction:"vertical"===this.options.layoutStartingDirection?0:1,val:b.val});this.calculateChildrenAreas(b,
			a);this.colorAxis?this.translateColors():this.options.colorByPoint||this.setColorRecursive(this.tree);this.options.allowDrillToNode&&(b=this.nodeMap[this.rootNode].pointValues,this.xAxis.setExtremes(b.x,b.x+b.width,!1),this.yAxis.setExtremes(b.y,b.y+b.height,!1),this.xAxis.setScale(),this.yAxis.setScale());this.setPointValues();},drawDataLabels:function(){var a=this,b=x(a.points,function(a){return a.node.visible;}),c,e;m(b,function(b){e=a.levelMap[b.node.levelDynamic];c={style:{}};b.node.isLeaf||(c.enabled=
!1);e&&e.dataLabels&&(c=v(c,e.dataLabels),a._hasPointLabels=!0);b.shapeArgs&&(c.style.width=b.shapeArgs.width,b.dataLabel&&b.dataLabel.css({width:b.shapeArgs.width+"px"}));b.dlOptions=v(c,b.options.dataLabels);});u.prototype.drawDataLabels.call(this);},alignDataLabel:function(a){n.column.prototype.alignDataLabel.apply(this,arguments);a.dataLabel&&a.dataLabel.attr({zIndex:a.node.zIndex+1});},pointAttribs:function(a,b){var c=this.levelMap[a.node.levelDynamic]||{},e=this.options,d=b&&e.states[b]||{},f=
a.getClassName();a={stroke:a.borderColor||c.borderColor||d.borderColor||e.borderColor,"stroke-width":k(a.borderWidth,c.borderWidth,d.borderWidth,e.borderWidth),dashstyle:a.borderDashStyle||c.borderDashStyle||d.borderDashStyle||e.borderDashStyle,fill:a.color||this.color};-1!==f.indexOf("highcharts-above-level")?(a.fill="none",a["stroke-width"]=0):-1!==f.indexOf("highcharts-internal-node-interactive")?(b=k(d.opacity,e.opacity),a.fill=A(a.fill).setOpacity(b).get(),a.cursor="pointer"):-1!==f.indexOf("highcharts-internal-node")?
			a.fill="none":b&&(a.fill=A(a.fill).brighten(d.brightness).get());return a;},drawPoints:function(){var a=this,b=x(a.points,function(a){return a.node.visible;});m(b,function(b){var c="levelGroup-"+b.node.levelDynamic;a[c]||(a[c]=a.chart.renderer.g(c).attr({zIndex:1E3-b.node.levelDynamic}).add(a.group));b.group=a[c];});n.column.prototype.drawPoints.call(this);a.options.allowDrillToNode&&m(b,function(b){b.graphic&&(b.drillId=a.options.interactByLeaf?a.drillToByLeaf(b):a.drillToByGroup(b));});},drillTo:function(){var a=
this;g.addEvent(a,"click",function(b){b=b.point;var c=b.drillId,e;c&&(e=a.nodeMap[a.rootNode].name||a.rootNode,b.setState(""),a.drillToNode(c),a.showDrillUpButton(e));});},drillToByGroup:function(a){var b=!1;1!==a.node.level-this.nodeMap[this.rootNode].level||a.node.isLeaf||(b=a.id);return b;},drillToByLeaf:function(a){var b=!1;if(a.node.parent!==this.rootNode&&a.node.isLeaf)for(a=a.node;!b;)a=this.nodeMap[a.parent],a.parent===this.rootNode&&(b=a.id);return b;},drillUp:function(){var a=null;this.rootNode&&
(a=this.nodeMap[this.rootNode],a=null!==a.parent?this.nodeMap[a.parent]:this.nodeMap[""]);null!==a&&(this.drillToNode(a.id),""===a.id?this.drillUpButton=this.drillUpButton.destroy():(a=this.nodeMap[a.parent],this.showDrillUpButton(a.name||a.id)));},drillToNode:function(a){this.options.rootId=a;this.isDirty=!0;this.chart.redraw();},showDrillUpButton:function(a){var b=this;a=a||"\x3c Back";var c=b.options.drillUpButton,e,d;c.text&&(a=c.text);this.drillUpButton?this.drillUpButton.attr({text:a}).align():
			(d=(e=c.theme)&&e.states,this.drillUpButton=this.chart.renderer.button(a,null,null,function(){b.drillUp();},e,d&&d.hover,d&&d.select).attr({align:c.position.align,zIndex:7}).add().align(c.position,!1,c.relativeTo||"plotBox"));},buildKDTree:z,drawLegendSymbol:g.LegendSymbolMixin.drawRectangle,getExtremes:function(){u.prototype.getExtremes.call(this,this.colorValueData);this.valueMin=this.dataMin;this.valueMax=this.dataMax;u.prototype.getExtremes.call(this);},getExtremesFromAll:!0,bindAxes:function(){var a=
{endOnTick:!1,gridLineWidth:0,lineWidth:0,min:0,dataMin:0,minPadding:0,max:100,dataMax:100,maxPadding:0,startOnTick:!1,title:null,tickPositions:[]};u.prototype.bindAxes.call(this);g.extend(this.yAxis.options,a);g.extend(this.xAxis.options,a);}},{getClassName:function(){var a=g.Point.prototype.getClassName.call(this),b=this.series,c=b.options;this.node.level<=b.nodeMap[b.rootNode].level?a+=" highcharts-above-level":this.node.isLeaf||k(c.interactByLeaf,!c.allowDrillToNode)?this.node.isLeaf||(a+=" highcharts-internal-node"):
			a+=" highcharts-internal-node-interactive";return a;},isValid:function(){return F(this.value);},setState:function(a){g.Point.prototype.setState.call(this,a);this.graphic.attr({zIndex:"hover"===a?1:0});},setVisible:n.pie.prototype.pointClass.prototype.setVisible});})(q);});

},{}],113:[function(require,module,exports){
	if (typeof Object.create === 'function') {
		// implementation from standard node.js 'util' module
		module.exports = function inherits(ctor, superCtor) {
			ctor.super_ = superCtor;
			ctor.prototype = Object.create(superCtor.prototype, {
				constructor: {
					value: ctor,
					enumerable: false,
					writable: true,
					configurable: true
				}
			});
		};
	} else {
		// old school shim for old browsers
		module.exports = function inherits(ctor, superCtor) {
			ctor.super_ = superCtor;
			var TempCtor = function () {};
			TempCtor.prototype = superCtor.prototype;
			ctor.prototype = new TempCtor();
			ctor.prototype.constructor = ctor;
		};
	}

},{}],114:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

		// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

		// Support: Firefox 18+
		// Can't be in strict mode, several libs including ASP.NET trace
		// the stack via arguments.caller.callee and Firefox dies if
		// you try to trace through "use strict" call chains. (#13335)
		//"use strict";
		var deletedIds = [];

		var document = window.document;

		var slice = deletedIds.slice;

		var concat = deletedIds.concat;

		var push = deletedIds.push;

		var indexOf = deletedIds.indexOf;

		var class2type = {};

		var toString = class2type.toString;

		var hasOwn = class2type.hasOwnProperty;

		var support = {};



		var
			version = "1.12.4",

			// Define a local copy of jQuery
			jQuery = function( selector, context ) {

				// The jQuery object is actually just the init constructor 'enhanced'
				// Need init if jQuery is called (just allow error to be thrown if not included)
				return new jQuery.fn.init( selector, context );
			},

			// Support: Android<4.1, IE<9
			// Make sure we trim BOM and NBSP
			rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

			// Matches dashed string for camelizing
			rmsPrefix = /^-ms-/,
			rdashAlpha = /-([\da-z])/gi,

			// Used by jQuery.camelCase as callback to replace()
			fcamelCase = function( all, letter ) {
				return letter.toUpperCase();
			};

		jQuery.fn = jQuery.prototype = {

			// The current version of jQuery being used
			jquery: version,

			constructor: jQuery,

			// Start with an empty selector
			selector: "",

			// The default length of a jQuery object is 0
			length: 0,

			toArray: function() {
				return slice.call( this );
			},

			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get: function( num ) {
				return num != null ?

				// Return just the one element from the set
					( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
					slice.call( this );
			},

			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack: function( elems ) {

				// Build a new jQuery matched element set
				var ret = jQuery.merge( this.constructor(), elems );

				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;
				ret.context = this.context;

				// Return the newly-formed element set
				return ret;
			},

			// Execute a callback for every element in the matched set.
			each: function( callback ) {
				return jQuery.each( this, callback );
			},

			map: function( callback ) {
				return this.pushStack( jQuery.map( this, function( elem, i ) {
					return callback.call( elem, i, elem );
				} ) );
			},

			slice: function() {
				return this.pushStack( slice.apply( this, arguments ) );
			},

			first: function() {
				return this.eq( 0 );
			},

			last: function() {
				return this.eq( -1 );
			},

			eq: function( i ) {
				var len = this.length,
					j = +i + ( i < 0 ? len : 0 );
				return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
			},

			end: function() {
				return this.prevObject || this.constructor();
			},

			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push: push,
			sort: deletedIds.sort,
			splice: deletedIds.splice
		};

		jQuery.extend = jQuery.fn.extend = function() {
			var src, copyIsArray, copy, name, options, clone,
				target = arguments[ 0 ] || {},
				i = 1,
				length = arguments.length,
				deep = false;

			// Handle a deep copy situation
			if ( typeof target === "boolean" ) {
				deep = target;

				// skip the boolean and the target
				target = arguments[ i ] || {};
				i++;
			}

			// Handle case when target is a string or something (possible in deep copy)
			if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
				target = {};
			}

			// extend jQuery itself if only one argument is passed
			if ( i === length ) {
				target = this;
				i--;
			}

			for ( ; i < length; i++ ) {

				// Only deal with non-null/undefined values
				if ( ( options = arguments[ i ] ) != null ) {

					// Extend the base object
					for ( name in options ) {
						src = target[ name ];
						copy = options[ name ];

						// Prevent never-ending loop
						if ( target === copy ) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

							if ( copyIsArray ) {
								copyIsArray = false;
								clone = src && jQuery.isArray( src ) ? src : [];

							} else {
								clone = src && jQuery.isPlainObject( src ) ? src : {};
							}

							// Never move original objects, clone them
							target[ name ] = jQuery.extend( deep, clone, copy );

							// Don't bring in undefined values
						} else if ( copy !== undefined ) {
							target[ name ] = copy;
						}
					}
				}
			}

			// Return the modified object
			return target;
		};

		jQuery.extend( {

			// Unique for each copy of jQuery on the page
			expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

			// Assume jQuery is ready without the ready module
			isReady: true,

			error: function( msg ) {
				throw new Error( msg );
			},

			noop: function() {},

			// See test/unit/core.js for details concerning isFunction.
			// Since version 1.3, DOM methods and functions like alert
			// aren't supported. They return false on IE (#2968).
			isFunction: function( obj ) {
				return jQuery.type( obj ) === "function";
			},

			isArray: Array.isArray || function( obj ) {
				return jQuery.type( obj ) === "array";
			},

			isWindow: function( obj ) {
				/* jshint eqeqeq: false */
				return obj != null && obj == obj.window;
			},

			isNumeric: function( obj ) {

				// parseFloat NaNs numeric-cast false positives (null|true|false|"")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				// adding 1 corrects loss of precision from parseFloat (#15100)
				var realStringObj = obj && obj.toString();
				return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
			},

			isEmptyObject: function( obj ) {
				var name;
				for ( name in obj ) {
					return false;
				}
				return true;
			},

			isPlainObject: function( obj ) {
				var key;

				// Must be an Object.
				// Because of IE, we also have to check the presence of the constructor property.
				// Make sure that DOM nodes and window objects don't pass through, as well
				if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
					return false;
				}

				try {

					// Not own constructor property must be Object
					if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
						return false;
					}
				} catch ( e ) {

					// IE8,9 Will throw exceptions on certain host objects #9897
					return false;
				}

				// Support: IE<9
				// Handle iteration over inherited properties before own properties.
				if ( !support.ownFirst ) {
					for ( key in obj ) {
						return hasOwn.call( obj, key );
					}
				}

				// Own properties are enumerated firstly, so to speed up,
				// if last one is own, then all properties are own.
				for ( key in obj ) {}

				return key === undefined || hasOwn.call( obj, key );
			},

			type: function( obj ) {
				if ( obj == null ) {
					return obj + "";
				}
				return typeof obj === "object" || typeof obj === "function" ?
					class2type[ toString.call( obj ) ] || "object" :
					typeof obj;
			},

			// Workarounds based on findings by Jim Driscoll
			// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
			globalEval: function( data ) {
				if ( data && jQuery.trim( data ) ) {

					// We use execScript on Internet Explorer
					// We use an anonymous function so that context is window
					// rather than jQuery in Firefox
					( window.execScript || function( data ) {
						window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
					} )( data );
				}
			},

			// Convert dashed to camelCase; used by the css and data modules
			// Microsoft forgot to hump their vendor prefix (#9572)
			camelCase: function( string ) {
				return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
			},

			nodeName: function( elem, name ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
			},

			each: function( obj, callback ) {
				var length, i = 0;

				if ( isArrayLike( obj ) ) {
					length = obj.length;
					for ( ; i < length; i++ ) {
						if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
							break;
						}
					}
				}

				return obj;
			},

			// Support: Android<4.1, IE<9
			trim: function( text ) {
				return text == null ?
					"" :
					( text + "" ).replace( rtrim, "" );
			},

			// results is for internal usage only
			makeArray: function( arr, results ) {
				var ret = results || [];

				if ( arr != null ) {
					if ( isArrayLike( Object( arr ) ) ) {
						jQuery.merge( ret,
							typeof arr === "string" ?
								[ arr ] : arr
						);
					} else {
						push.call( ret, arr );
					}
				}

				return ret;
			},

			inArray: function( elem, arr, i ) {
				var len;

				if ( arr ) {
					if ( indexOf ) {
						return indexOf.call( arr, elem, i );
					}

					len = arr.length;
					i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

					for ( ; i < len; i++ ) {

						// Skip accessing in sparse arrays
						if ( i in arr && arr[ i ] === elem ) {
							return i;
						}
					}
				}

				return -1;
			},

			merge: function( first, second ) {
				var len = +second.length,
					j = 0,
					i = first.length;

				while ( j < len ) {
					first[ i++ ] = second[ j++ ];
				}

				// Support: IE<9
				// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
				if ( len !== len ) {
					while ( second[ j ] !== undefined ) {
						first[ i++ ] = second[ j++ ];
					}
				}

				first.length = i;

				return first;
			},

			grep: function( elems, callback, invert ) {
				var callbackInverse,
					matches = [],
					i = 0,
					length = elems.length,
					callbackExpect = !invert;

				// Go through the array, only saving the items
				// that pass the validator function
				for ( ; i < length; i++ ) {
					callbackInverse = !callback( elems[ i ], i );
					if ( callbackInverse !== callbackExpect ) {
						matches.push( elems[ i ] );
					}
				}

				return matches;
			},

			// arg is for internal usage only
			map: function( elems, callback, arg ) {
				var length, value,
					i = 0,
					ret = [];

				// Go through the array, translating each of the items to their new values
				if ( isArrayLike( elems ) ) {
					length = elems.length;
					for ( ; i < length; i++ ) {
						value = callback( elems[ i ], i, arg );

						if ( value != null ) {
							ret.push( value );
						}
					}

					// Go through every key on the object,
				} else {
					for ( i in elems ) {
						value = callback( elems[ i ], i, arg );

						if ( value != null ) {
							ret.push( value );
						}
					}
				}

				// Flatten any nested arrays
				return concat.apply( [], ret );
			},

			// A global GUID counter for objects
			guid: 1,

			// Bind a function to a context, optionally partially applying any
			// arguments.
			proxy: function( fn, context ) {
				var args, proxy, tmp;

				if ( typeof context === "string" ) {
					tmp = fn[ context ];
					context = fn;
					fn = tmp;
				}

				// Quick check to determine if target is callable, in the spec
				// this throws a TypeError, but we will just return undefined.
				if ( !jQuery.isFunction( fn ) ) {
					return undefined;
				}

				// Simulated bind
				args = slice.call( arguments, 2 );
				proxy = function() {
					return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
				};

				// Set the guid of unique handler to the same of original handler, so it can be removed
				proxy.guid = fn.guid = fn.guid || jQuery.guid++;

				return proxy;
			},

			now: function() {
				return +( new Date() );
			},

			// jQuery.support is not used in Core but other projects attach their
			// properties to it so it needs to exist.
			support: support
		} );

		// JSHint would error on this code due to the Symbol not being defined in ES5.
		// Defining this global in .jshintrc would create a danger of using the global
		// unguarded in another place, it seems safer to just disable JSHint for these
		// three lines.
		/* jshint ignore: start */
		if ( typeof Symbol === "function" ) {
			jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
		}
		/* jshint ignore: end */

		// Populate the class2type map
		jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
			function( i, name ) {
				class2type[ "[object " + name + "]" ] = name.toLowerCase();
			} );

		function isArrayLike( obj ) {

			// Support: iOS 8.2 (not reproducible in simulator)
			// `in` check used to prevent JIT error (gh-2145)
			// hasOwn isn't used here due to false negatives
			// regarding Nodelist length in IE
			var length = !!obj && "length" in obj && obj.length,
				type = jQuery.type( obj );

			if ( type === "function" || jQuery.isWindow( obj ) ) {
				return false;
			}

			return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
		}
		var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
				// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

		// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

		// Support: IE<9
		// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

							// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

						// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

						// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

						// qSA looks outside Element context, which is not what we want
						// Thanks to Andrew Dupont for this workaround technique
						// Support: IE <=8
						// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
		// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
	isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

				// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
	---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
	---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

					// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
	---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
			assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
	---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
	---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
			function( a, b ) {

				// Flag for duplicate removal
				if ( a === b ) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if ( compare ) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
					a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
					1;

				// Disconnected nodes
				if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

					// Choose the first element that is related to our preferred document
					if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
						return -1;
					}
					if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
						return 1;
					}

					// Maintain original order
					return sortInput ?
						( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
						0;
				}

				return compare & 4 ? -1 : 1;
			} :
			function( a, b ) {
				// Exit early if the nodes are identical
				if ( a === b ) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
					i = 0,
					aup = a.parentNode,
					bup = b.parentNode,
					ap = [ a ],
					bp = [ b ];

				// Parentless nodes are either documents or disconnected
				if ( !aup || !bup ) {
					return a === document ? -1 :
						b === document ? 1 :
							aup ? -1 :
								bup ? 1 :
									sortInput ?
										( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
										0;

					// If the nodes are siblings, we can do a quick check
				} else if ( aup === bup ) {
					return siblingCheck( a, b );
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while ( (cur = cur.parentNode) ) {
					ap.unshift( cur );
				}
				cur = b;
				while ( (cur = cur.parentNode) ) {
					bp.unshift( cur );
				}

				// Walk down the tree looking for a discrepancy
				while ( ap[i] === bp[i] ) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
					siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 :
						bp[i] === preferredDoc ? 1 :
							0;
			};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
			// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

					// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

					// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
							operator === "^=" ? check && result.indexOf( check ) === 0 :
								operator === "*=" ? check && result.indexOf( check ) > -1 :
									operator === "$=" ? check && result.slice( -check.length ) === check :
										operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
											operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
												false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
							// Use previously-cached element index if available
								if ( useCache ) {
								// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
										++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
		// Potentially complex pseudos
			"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
				// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
			// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
		// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

		// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
							// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
						[] :

					// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

				// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
					// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

					// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
						null;
			}
		});
	}

	return Sizzle;

})( window );



		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[ ":" ] = jQuery.expr.pseudos;
		jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;



		var dir = function( elem, dir, until ) {
			var matched = [],
				truncate = until !== undefined;

			while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
				if ( elem.nodeType === 1 ) {
					if ( truncate && jQuery( elem ).is( until ) ) {
						break;
					}
					matched.push( elem );
				}
			}
			return matched;
		};


		var siblings = function( n, elem ) {
			var matched = [];

			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					matched.push( n );
				}
			}

			return matched;
		};


		var rneedsContext = jQuery.expr.match.needsContext;

		var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



		var risSimple = /^.[^:#\[\.,]*$/;

		// Implement the identical functionality for filter and not
		function winnow( elements, qualifier, not ) {
			if ( jQuery.isFunction( qualifier ) ) {
				return jQuery.grep( elements, function( elem, i ) {
					/* jshint -W018 */
					return !!qualifier.call( elem, i, elem ) !== not;
				} );

			}

			if ( qualifier.nodeType ) {
				return jQuery.grep( elements, function( elem ) {
					return ( elem === qualifier ) !== not;
				} );

			}

			if ( typeof qualifier === "string" ) {
				if ( risSimple.test( qualifier ) ) {
					return jQuery.filter( qualifier, elements, not );
				}

				qualifier = jQuery.filter( qualifier, elements );
			}

			return jQuery.grep( elements, function( elem ) {
				return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
			} );
		}

		jQuery.filter = function( expr, elems, not ) {
			var elem = elems[ 0 ];

			if ( not ) {
				expr = ":not(" + expr + ")";
			}

			return elems.length === 1 && elem.nodeType === 1 ?
				jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
				jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
					return elem.nodeType === 1;
				} ) );
		};

		jQuery.fn.extend( {
			find: function( selector ) {
				var i,
					ret = [],
					self = this,
					len = self.length;

				if ( typeof selector !== "string" ) {
					return this.pushStack( jQuery( selector ).filter( function() {
						for ( i = 0; i < len; i++ ) {
							if ( jQuery.contains( self[ i ], this ) ) {
								return true;
							}
						}
					} ) );
				}

				for ( i = 0; i < len; i++ ) {
					jQuery.find( selector, self[ i ], ret );
				}

				// Needed because $( selector, context ) becomes $( context ).find( selector )
				ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
				ret.selector = this.selector ? this.selector + " " + selector : selector;
				return ret;
			},
			filter: function( selector ) {
				return this.pushStack( winnow( this, selector || [], false ) );
			},
			not: function( selector ) {
				return this.pushStack( winnow( this, selector || [], true ) );
			},
			is: function( selector ) {
				return !!winnow(
					this,

					// If this is a positional/relative selector, check membership in the returned set
					// so $("p:first").is("p:last") won't return true for a doc with two "p".
					typeof selector === "string" && rneedsContext.test( selector ) ?
						jQuery( selector ) :
						selector || [],
					false
				).length;
			}
		} );


		// Initialize a jQuery object


		// A central reference to the root jQuery(document)
		var rootjQuery,

			// A simple way to check for HTML strings
			// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
			// Strict HTML recognition (#11290: must start with <)
			rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

			init = jQuery.fn.init = function( selector, context, root ) {
				var match, elem;

				// HANDLE: $(""), $(null), $(undefined), $(false)
				if ( !selector ) {
					return this;
				}

				// init accepts an alternate rootjQuery
				// so migrate can support jQuery.sub (gh-2101)
				root = root || rootjQuery;

				// Handle HTML strings
				if ( typeof selector === "string" ) {
					if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

						// Assume that strings that start and end with <> are HTML and skip the regex check
						match = [ null, selector, null ];

					} else {
						match = rquickExpr.exec( selector );
					}

					// Match html or make sure no context is specified for #id
					if ( match && ( match[ 1 ] || !context ) ) {

						// HANDLE: $(html) -> $(array)
						if ( match[ 1 ] ) {
							context = context instanceof jQuery ? context[ 0 ] : context;

							// scripts is true for back-compat
							// Intentionally let the error be thrown if parseHTML is not present
							jQuery.merge( this, jQuery.parseHTML(
								match[ 1 ],
								context && context.nodeType ? context.ownerDocument || context : document,
								true
							) );

							// HANDLE: $(html, props)
							if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
								for ( match in context ) {

									// Properties of context are called as methods if possible
									if ( jQuery.isFunction( this[ match ] ) ) {
										this[ match ]( context[ match ] );

										// ...and otherwise set as attributes
									} else {
										this.attr( match, context[ match ] );
									}
								}
							}

							return this;

							// HANDLE: $(#id)
						} else {
							elem = document.getElementById( match[ 2 ] );

							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							if ( elem && elem.parentNode ) {

								// Handle the case where IE and Opera return items
								// by name instead of ID
								if ( elem.id !== match[ 2 ] ) {
									return rootjQuery.find( selector );
								}

								// Otherwise, we inject the element directly into the jQuery object
								this.length = 1;
								this[ 0 ] = elem;
							}

							this.context = document;
							this.selector = selector;
							return this;
						}

						// HANDLE: $(expr, $(...))
					} else if ( !context || context.jquery ) {
						return ( context || root ).find( selector );

						// HANDLE: $(expr, context)
						// (which is just equivalent to: $(context).find(expr)
					} else {
						return this.constructor( context ).find( selector );
					}

					// HANDLE: $(DOMElement)
				} else if ( selector.nodeType ) {
					this.context = this[ 0 ] = selector;
					this.length = 1;
					return this;

					// HANDLE: $(function)
					// Shortcut for document ready
				} else if ( jQuery.isFunction( selector ) ) {
					return typeof root.ready !== "undefined" ?
						root.ready( selector ) :

					// Execute immediately if ready is not present
						selector( jQuery );
				}

				if ( selector.selector !== undefined ) {
					this.selector = selector.selector;
					this.context = selector.context;
				}

				return jQuery.makeArray( selector, this );
			};

		// Give the init function the jQuery prototype for later instantiation
		init.prototype = jQuery.fn;

		// Initialize central reference
		rootjQuery = jQuery( document );


		var rparentsprev = /^(?:parents|prev(?:Until|All))/,

			// methods guaranteed to produce a unique set when starting from a unique set
			guaranteedUnique = {
				children: true,
				contents: true,
				next: true,
				prev: true
			};

		jQuery.fn.extend( {
			has: function( target ) {
				var i,
					targets = jQuery( target, this ),
					len = targets.length;

				return this.filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( this, targets[ i ] ) ) {
							return true;
						}
					}
				} );
			},

			closest: function( selectors, context ) {
				var cur,
					i = 0,
					l = this.length,
					matched = [],
					pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
						jQuery( selectors, context || this.context ) :
						0;

				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( pos ?
							pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}

				return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
			},

			// Determine the position of an element within
			// the matched set of elements
			index: function( elem ) {

				// No argument, return index in parent
				if ( !elem ) {
					return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
				}

				// index in selector
				if ( typeof elem === "string" ) {
					return jQuery.inArray( this[ 0 ], jQuery( elem ) );
				}

				// Locate the position of the desired element
				return jQuery.inArray(

					// If it receives a jQuery object, the first element is used
					elem.jquery ? elem[ 0 ] : elem, this );
			},

			add: function( selector, context ) {
				return this.pushStack(
					jQuery.uniqueSort(
						jQuery.merge( this.get(), jQuery( selector, context ) )
					)
				);
			},

			addBack: function( selector ) {
				return this.add( selector == null ?
					this.prevObject : this.prevObject.filter( selector )
				);
			}
		} );

		function sibling( cur, dir ) {
			do {
				cur = cur[ dir ];
			} while ( cur && cur.nodeType !== 1 );

			return cur;
		}

		jQuery.each( {
			parent: function( elem ) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function( elem ) {
				return dir( elem, "parentNode" );
			},
			parentsUntil: function( elem, i, until ) {
				return dir( elem, "parentNode", until );
			},
			next: function( elem ) {
				return sibling( elem, "nextSibling" );
			},
			prev: function( elem ) {
				return sibling( elem, "previousSibling" );
			},
			nextAll: function( elem ) {
				return dir( elem, "nextSibling" );
			},
			prevAll: function( elem ) {
				return dir( elem, "previousSibling" );
			},
			nextUntil: function( elem, i, until ) {
				return dir( elem, "nextSibling", until );
			},
			prevUntil: function( elem, i, until ) {
				return dir( elem, "previousSibling", until );
			},
			siblings: function( elem ) {
				return siblings( ( elem.parentNode || {} ).firstChild, elem );
			},
			children: function( elem ) {
				return siblings( elem.firstChild );
			},
			contents: function( elem ) {
				return jQuery.nodeName( elem, "iframe" ) ?
					elem.contentDocument || elem.contentWindow.document :
					jQuery.merge( [], elem.childNodes );
			}
		}, function( name, fn ) {
			jQuery.fn[ name ] = function( until, selector ) {
				var ret = jQuery.map( this, fn, until );

				if ( name.slice( -5 ) !== "Until" ) {
					selector = until;
				}

				if ( selector && typeof selector === "string" ) {
					ret = jQuery.filter( selector, ret );
				}

				if ( this.length > 1 ) {

					// Remove duplicates
					if ( !guaranteedUnique[ name ] ) {
						ret = jQuery.uniqueSort( ret );
					}

					// Reverse order for parents* and prev-derivatives
					if ( rparentsprev.test( name ) ) {
						ret = ret.reverse();
					}
				}

				return this.pushStack( ret );
			};
		} );
		var rnotwhite = ( /\S+/g );



		// Convert String-formatted options into Object-formatted ones
		function createOptions( options ) {
			var object = {};
			jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
				object[ flag ] = true;
			} );
			return object;
		}

		/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
		jQuery.Callbacks = function( options ) {

			// Convert options from String-formatted to Object-formatted if needed
			// (we check in cache first)
			options = typeof options === "string" ?
				createOptions( options ) :
				jQuery.extend( {}, options );

			var // Flag to know if list is currently firing
				firing,

				// Last fire value for non-forgettable lists
				memory,

				// Flag to know if list was already fired
				fired,

				// Flag to prevent firing
				locked,

				// Actual callback list
				list = [],

				// Queue of execution data for repeatable lists
				queue = [],

				// Index of currently firing callback (modified by add/remove as needed)
				firingIndex = -1,

				// Fire callbacks
				fire = function() {

					// Enforce single-firing
					locked = options.once;

					// Execute callbacks for all pending executions,
					// respecting firingIndex overrides and runtime changes
					fired = firing = true;
					for ( ; queue.length; firingIndex = -1 ) {
						memory = queue.shift();
						while ( ++firingIndex < list.length ) {

							// Run callback and check for early termination
							if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

								// Jump to end and forget the data so .add doesn't re-fire
								firingIndex = list.length;
								memory = false;
							}
						}
					}

					// Forget the data if we're done with it
					if ( !options.memory ) {
						memory = false;
					}

					firing = false;

					// Clean up if we're done firing for good
					if ( locked ) {

						// Keep an empty list if we have data for future add calls
						if ( memory ) {
							list = [];

							// Otherwise, this object is spent
						} else {
							list = "";
						}
					}
				},

				// Actual Callbacks object
				self = {

					// Add a callback or a collection of callbacks to the list
					add: function() {
						if ( list ) {

							// If we have memory from a past run, we should fire after adding
							if ( memory && !firing ) {
								firingIndex = list.length - 1;
								queue.push( memory );
							}

							( function add( args ) {
								jQuery.each( args, function( _, arg ) {
									if ( jQuery.isFunction( arg ) ) {
										if ( !options.unique || !self.has( arg ) ) {
											list.push( arg );
										}
									} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

										// Inspect recursively
										add( arg );
									}
								} );
							} )( arguments );

							if ( memory && !firing ) {
								fire();
							}
						}
						return this;
					},

					// Remove a callback from the list
					remove: function() {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );

								// Handle firing indexes
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						} );
						return this;
					},

					// Check if a given callback is in the list.
					// If no argument is given, return whether or not list has callbacks attached.
					has: function( fn ) {
						return fn ?
							jQuery.inArray( fn, list ) > -1 :
							list.length > 0;
					},

					// Remove all callbacks from the list
					empty: function() {
						if ( list ) {
							list = [];
						}
						return this;
					},

					// Disable .fire and .add
					// Abort any current/pending executions
					// Clear all callbacks and values
					disable: function() {
						locked = queue = [];
						list = memory = "";
						return this;
					},
					disabled: function() {
						return !list;
					},

					// Disable .fire
					// Also disable .add unless we have memory (since it would have no effect)
					// Abort any pending executions
					lock: function() {
						locked = true;
						if ( !memory ) {
							self.disable();
						}
						return this;
					},
					locked: function() {
						return !!locked;
					},

					// Call all callbacks with the given context and arguments
					fireWith: function( context, args ) {
						if ( !locked ) {
							args = args || [];
							args = [ context, args.slice ? args.slice() : args ];
							queue.push( args );
							if ( !firing ) {
								fire();
							}
						}
						return this;
					},

					// Call all the callbacks with the given arguments
					fire: function() {
						self.fireWith( this, arguments );
						return this;
					},

					// To know if the callbacks have already been called at least once
					fired: function() {
						return !!fired;
					}
				};

			return self;
		};


		jQuery.extend( {

			Deferred: function( func ) {
				var tuples = [

						// action, add listener, listener list, final state
						[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
						[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
						[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
					],
					state = "pending",
					promise = {
						state: function() {
							return state;
						},
						always: function() {
							deferred.done( arguments ).fail( arguments );
							return this;
						},
						then: function( /* fnDone, fnFail, fnProgress */ ) {
							var fns = arguments;
							return jQuery.Deferred( function( newDefer ) {
								jQuery.each( tuples, function( i, tuple ) {
									var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

									// deferred[ done | fail | progress ] for forwarding actions to newDefer
									deferred[ tuple[ 1 ] ]( function() {
										var returned = fn && fn.apply( this, arguments );
										if ( returned && jQuery.isFunction( returned.promise ) ) {
											returned.promise()
												.progress( newDefer.notify )
												.done( newDefer.resolve )
												.fail( newDefer.reject );
										} else {
											newDefer[ tuple[ 0 ] + "With" ](
												this === promise ? newDefer.promise() : this,
												fn ? [ returned ] : arguments
											);
										}
									} );
								} );
								fns = null;
							} ).promise();
						},

						// Get a promise for this deferred
						// If obj is provided, the promise aspect is added to the object
						promise: function( obj ) {
							return obj != null ? jQuery.extend( obj, promise ) : promise;
						}
					},
					deferred = {};

				// Keep pipe for back-compat
				promise.pipe = promise.then;

				// Add list-specific methods
				jQuery.each( tuples, function( i, tuple ) {
					var list = tuple[ 2 ],
						stateString = tuple[ 3 ];

					// promise[ done | fail | progress ] = list.add
					promise[ tuple[ 1 ] ] = list.add;

					// Handle state
					if ( stateString ) {
						list.add( function() {

							// state = [ resolved | rejected ]
							state = stateString;

							// [ reject_list | resolve_list ].disable; progress_list.lock
						}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
					}

					// deferred[ resolve | reject | notify ]
					deferred[ tuple[ 0 ] ] = function() {
						deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
						return this;
					};
					deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
				} );

				// Make the deferred a promise
				promise.promise( deferred );

				// Call given func if any
				if ( func ) {
					func.call( deferred, deferred );
				}

				// All done!
				return deferred;
			},

			// Deferred helper
			when: function( subordinate /* , ..., subordinateN */ ) {
				var i = 0,
					resolveValues = slice.call( arguments ),
					length = resolveValues.length,

					// the count of uncompleted subordinates
					remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

					// the master Deferred.
					// If resolveValues consist of only a single Deferred, just use that.
					deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

					// Update function for both resolve and progress values
					updateFunc = function( i, contexts, values ) {
						return function( value ) {
							contexts[ i ] = this;
							values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
							if ( values === progressValues ) {
								deferred.notifyWith( contexts, values );

							} else if ( !( --remaining ) ) {
								deferred.resolveWith( contexts, values );
							}
						};
					},

					progressValues, progressContexts, resolveContexts;

				// add listeners to Deferred subordinates; treat others as resolved
				if ( length > 1 ) {
					progressValues = new Array( length );
					progressContexts = new Array( length );
					resolveContexts = new Array( length );
					for ( ; i < length; i++ ) {
						if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
							resolveValues[ i ].promise()
								.progress( updateFunc( i, progressContexts, progressValues ) )
								.done( updateFunc( i, resolveContexts, resolveValues ) )
								.fail( deferred.reject );
						} else {
							--remaining;
						}
					}
				}

				// if we're not waiting on anything, resolve the master
				if ( !remaining ) {
					deferred.resolveWith( resolveContexts, resolveValues );
				}

				return deferred.promise();
			}
		} );


		// The deferred used on DOM ready
		var readyList;

		jQuery.fn.ready = function( fn ) {

			// Add the callback
			jQuery.ready.promise().done( fn );

			return this;
		};

		jQuery.extend( {

			// Is the DOM ready to be used? Set to true once it occurs.
			isReady: false,

			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait: 1,

			// Hold (or release) the ready event
			holdReady: function( hold ) {
				if ( hold ) {
					jQuery.readyWait++;
				} else {
					jQuery.ready( true );
				}
			},

			// Handle when the DOM is ready
			ready: function( wait ) {

				// Abort if there are pending holds or we're already ready
				if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
					return;
				}

				// Remember that the DOM is ready
				jQuery.isReady = true;

				// If a normal DOM Ready event fired, decrement, and wait if need be
				if ( wait !== true && --jQuery.readyWait > 0 ) {
					return;
				}

				// If there are functions bound, to execute
				readyList.resolveWith( document, [ jQuery ] );

				// Trigger any bound ready events
				if ( jQuery.fn.triggerHandler ) {
					jQuery( document ).triggerHandler( "ready" );
					jQuery( document ).off( "ready" );
				}
			}
		} );

		/**
 * Clean-up method for dom ready events
 */
		function detach() {
			if ( document.addEventListener ) {
				document.removeEventListener( "DOMContentLoaded", completed );
				window.removeEventListener( "load", completed );

			} else {
				document.detachEvent( "onreadystatechange", completed );
				window.detachEvent( "onload", completed );
			}
		}

		/**
 * The ready event handler and self cleanup method
 */
		function completed() {

			// readyState === "complete" is good enough for us to call the dom ready in oldIE
			if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

				detach();
				jQuery.ready();
			}
		}

		jQuery.ready.promise = function( obj ) {
			if ( !readyList ) {

				readyList = jQuery.Deferred();

				// Catch cases where $(document).ready() is called
				// after the browser event has already occurred.
				// Support: IE6-10
				// Older IE sometimes signals "interactive" too soon
				if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

					// Handle it asynchronously to allow scripts the opportunity to delay ready
					window.setTimeout( jQuery.ready );

					// Standards-based browsers support DOMContentLoaded
				} else if ( document.addEventListener ) {

					// Use the handy event callback
					document.addEventListener( "DOMContentLoaded", completed );

					// A fallback to window.onload, that will always work
					window.addEventListener( "load", completed );

					// If IE event model is used
				} else {

					// Ensure firing before onload, maybe late but safe also for iframes
					document.attachEvent( "onreadystatechange", completed );

					// A fallback to window.onload, that will always work
					window.attachEvent( "onload", completed );

					// If IE and not a frame
					// continually check to see if the document is ready
					var top = false;

					try {
						top = window.frameElement == null && document.documentElement;
					} catch ( e ) {}

					if ( top && top.doScroll ) {
						( function doScrollCheck() {
							if ( !jQuery.isReady ) {

								try {

									// Use the trick by Diego Perini
									// http://javascript.nwbox.com/IEContentLoaded/
									top.doScroll( "left" );
								} catch ( e ) {
									return window.setTimeout( doScrollCheck, 50 );
								}

								// detach all dom ready events
								detach();

								// and execute any waiting functions
								jQuery.ready();
							}
						} )();
					}
				}
			}
			return readyList.promise( obj );
		};

		// Kick off the DOM ready check even if the user does not
		jQuery.ready.promise();




		// Support: IE<9
		// Iteration over object's inherited properties before its own
		var i;
		for ( i in jQuery( support ) ) {
			break;
		}
		support.ownFirst = i === "0";

		// Note: most support tests are defined in their respective modules.
		// false until the test is run
		support.inlineBlockNeedsLayout = false;

		// Execute ASAP in case we need to set body.style.zoom
		jQuery( function() {

			// Minified: var a,b,c,d
			var val, div, body, container;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {

				// Return for frameset docs that don't have a body
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			if ( typeof div.style.zoom !== "undefined" ) {

				// Support: IE<8
				// Check if natively block-level elements act like inline-block
				// elements when setting their display to 'inline' and giving
				// them layout
				div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

				support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
				if ( val ) {

					// Prevent IE 6 from affecting layout for positioned elements #11048
					// Prevent IE from shrinking the body in IE 7 mode #12869
					// Support: IE<8
					body.style.zoom = 1;
				}
			}

			body.removeChild( container );
		} );


		( function() {
			var div = document.createElement( "div" );

			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch ( e ) {
				support.deleteExpando = false;
			}

			// Null elements to avoid leaks in IE.
			div = null;
		} )();
		var acceptData = function( elem ) {
			var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
				nodeType = +elem.nodeType || 1;

			// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
			return nodeType !== 1 && nodeType !== 9 ?
				false :

			// Nodes accept data unless otherwise specified; rejection can be conditional
				!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
		};




		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
			rmultiDash = /([A-Z])/g;

		function dataAttr( elem, key, data ) {

			// If nothing was found internally, try to fetch any
			// data from the HTML5 data-* attribute
			if ( data === undefined && elem.nodeType === 1 ) {

				var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

				data = elem.getAttribute( name );

				if ( typeof data === "string" ) {
					try {
						data = data === "true" ? true :
							data === "false" ? false :
								data === "null" ? null :

								// Only convert to a number if it doesn't change the string
									+data + "" === data ? +data :
										rbrace.test( data ) ? jQuery.parseJSON( data ) :
											data;
					} catch ( e ) {}

					// Make sure we set the data so it isn't changed later
					jQuery.data( elem, key, data );

				} else {
					data = undefined;
				}
			}

			return data;
		}

		// checks a cache object for emptiness
		function isEmptyDataObject( obj ) {
			var name;
			for ( name in obj ) {

				// if the public data object is empty, the private is still empty
				if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
					continue;
				}
				if ( name !== "toJSON" ) {
					return false;
				}
			}

			return true;
		}

		function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
			if ( !acceptData( elem ) ) {
				return;
			}

			var ret, thisCache,
				internalKey = jQuery.expando,

				// We have to handle DOM nodes and JS objects differently because IE6-7
				// can't GC object references properly across the DOM-JS boundary
				isNode = elem.nodeType,

				// Only DOM nodes need the global jQuery cache; JS object data is
				// attached directly to the object so GC can occur automatically
				cache = isNode ? jQuery.cache : elem,

				// Only defining an ID for JS objects if its cache already exists allows
				// the code to shortcut on the same path as a DOM node with no cache
				id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

			// Avoid doing any more work than we need to when trying to get data on an
			// object that has no data at all
			if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
				return;
			}

			if ( !id ) {

				// Only DOM nodes need a new unique ID for each element since their data
				// ends up in the global cache
				if ( isNode ) {
					id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
				} else {
					id = internalKey;
				}
			}

			if ( !cache[ id ] ) {

				// Avoid exposing jQuery metadata on plain JS objects when the object
				// is serialized using JSON.stringify
				cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
			}

			// An object can be passed to jQuery.data instead of a key/value pair; this gets
			// shallow copied over onto the existing cache
			if ( typeof name === "object" || typeof name === "function" ) {
				if ( pvt ) {
					cache[ id ] = jQuery.extend( cache[ id ], name );
				} else {
					cache[ id ].data = jQuery.extend( cache[ id ].data, name );
				}
			}

			thisCache = cache[ id ];

			// jQuery data() is stored in a separate object inside the object's internal data
			// cache in order to avoid key collisions between internal data and user-defined
			// data.
			if ( !pvt ) {
				if ( !thisCache.data ) {
					thisCache.data = {};
				}

				thisCache = thisCache.data;
			}

			if ( data !== undefined ) {
				thisCache[ jQuery.camelCase( name ) ] = data;
			}

			// Check for both converted-to-camel and non-converted data property names
			// If a data property was specified
			if ( typeof name === "string" ) {

				// First Try to find as-is property data
				ret = thisCache[ name ];

				// Test for null|undefined property data
				if ( ret == null ) {

					// Try to find the camelCased property
					ret = thisCache[ jQuery.camelCase( name ) ];
				}
			} else {
				ret = thisCache;
			}

			return ret;
		}

		function internalRemoveData( elem, name, pvt ) {
			if ( !acceptData( elem ) ) {
				return;
			}

			var thisCache, i,
				isNode = elem.nodeType,

				// See jQuery.data for more information
				cache = isNode ? jQuery.cache : elem,
				id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

			// If there is already no cache entry for this object, there is no
			// purpose in continuing
			if ( !cache[ id ] ) {
				return;
			}

			if ( name ) {

				thisCache = pvt ? cache[ id ] : cache[ id ].data;

				if ( thisCache ) {

					// Support array or space separated string names for data keys
					if ( !jQuery.isArray( name ) ) {

						// try the string as a key before any manipulation
						if ( name in thisCache ) {
							name = [ name ];
						} else {

							// split the camel cased version by spaces unless a key with the spaces exists
							name = jQuery.camelCase( name );
							if ( name in thisCache ) {
								name = [ name ];
							} else {
								name = name.split( " " );
							}
						}
					} else {

						// If "name" is an array of keys...
						// When data is initially created, via ("key", "val") signature,
						// keys will be converted to camelCase.
						// Since there is no way to tell _how_ a key was added, remove
						// both plain key and camelCase key. #12786
						// This will only penalize the array argument path.
						name = name.concat( jQuery.map( name, jQuery.camelCase ) );
					}

					i = name.length;
					while ( i-- ) {
						delete thisCache[ name[ i ] ];
					}

					// If there is no data left in the cache, we want to continue
					// and let the cache object itself get destroyed
					if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
						return;
					}
				}
			}

			// See jQuery.data for more information
			if ( !pvt ) {
				delete cache[ id ].data;

				// Don't destroy the parent cache unless the internal data object
				// had been the only thing left in it
				if ( !isEmptyDataObject( cache[ id ] ) ) {
					return;
				}
			}

			// Destroy the cache
			if ( isNode ) {
				jQuery.cleanData( [ elem ], true );

				// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
				/* jshint eqeqeq: false */
			} else if ( support.deleteExpando || cache != cache.window ) {
				/* jshint eqeqeq: true */
				delete cache[ id ];

				// When all else fails, undefined
			} else {
				cache[ id ] = undefined;
			}
		}

		jQuery.extend( {
			cache: {},

			// The following elements (space-suffixed to avoid Object.prototype collisions)
			// throw uncatchable exceptions if you attempt to set expando properties
			noData: {
				"applet ": true,
				"embed ": true,

				// ...but Flash objects (which have this classid) *can* handle expandos
				"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
			},

			hasData: function( elem ) {
				elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
				return !!elem && !isEmptyDataObject( elem );
			},

			data: function( elem, name, data ) {
				return internalData( elem, name, data );
			},

			removeData: function( elem, name ) {
				return internalRemoveData( elem, name );
			},

			// For internal use only.
			_data: function( elem, name, data ) {
				return internalData( elem, name, data, true );
			},

			_removeData: function( elem, name ) {
				return internalRemoveData( elem, name, true );
			}
		} );

		jQuery.fn.extend( {
			data: function( key, value ) {
				var i, name, data,
					elem = this[ 0 ],
					attrs = elem && elem.attributes;

				// Special expections of .data basically thwart jQuery.access,
				// so implement the relevant behavior ourselves

				// Gets all values
				if ( key === undefined ) {
					if ( this.length ) {
						data = jQuery.data( elem );

						if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
							i = attrs.length;
							while ( i-- ) {

								// Support: IE11+
								// The attrs elements can be null (#14894)
								if ( attrs[ i ] ) {
									name = attrs[ i ].name;
									if ( name.indexOf( "data-" ) === 0 ) {
										name = jQuery.camelCase( name.slice( 5 ) );
										dataAttr( elem, name, data[ name ] );
									}
								}
							}
							jQuery._data( elem, "parsedAttrs", true );
						}
					}

					return data;
				}

				// Sets multiple values
				if ( typeof key === "object" ) {
					return this.each( function() {
						jQuery.data( this, key );
					} );
				}

				return arguments.length > 1 ?

				// Sets one value
					this.each( function() {
						jQuery.data( this, key, value );
					} ) :

				// Gets one value
				// Try to fetch any internally stored data first
					elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
			},

			removeData: function( key ) {
				return this.each( function() {
					jQuery.removeData( this, key );
				} );
			}
		} );


		jQuery.extend( {
			queue: function( elem, type, data ) {
				var queue;

				if ( elem ) {
					type = ( type || "fx" ) + "queue";
					queue = jQuery._data( elem, type );

					// Speed up dequeue by getting out quickly if this is just a lookup
					if ( data ) {
						if ( !queue || jQuery.isArray( data ) ) {
							queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
						} else {
							queue.push( data );
						}
					}
					return queue || [];
				}
			},

			dequeue: function( elem, type ) {
				type = type || "fx";

				var queue = jQuery.queue( elem, type ),
					startLength = queue.length,
					fn = queue.shift(),
					hooks = jQuery._queueHooks( elem, type ),
					next = function() {
						jQuery.dequeue( elem, type );
					};

				// If the fx queue is dequeued, always remove the progress sentinel
				if ( fn === "inprogress" ) {
					fn = queue.shift();
					startLength--;
				}

				if ( fn ) {

					// Add a progress sentinel to prevent the fx queue from being
					// automatically dequeued
					if ( type === "fx" ) {
						queue.unshift( "inprogress" );
					}

					// clear up the last queue stop function
					delete hooks.stop;
					fn.call( elem, next, hooks );
				}

				if ( !startLength && hooks ) {
					hooks.empty.fire();
				}
			},

			// not intended for public consumption - generates a queueHooks object,
			// or returns the current one
			_queueHooks: function( elem, type ) {
				var key = type + "queueHooks";
				return jQuery._data( elem, key ) || jQuery._data( elem, key, {
					empty: jQuery.Callbacks( "once memory" ).add( function() {
						jQuery._removeData( elem, type + "queue" );
						jQuery._removeData( elem, key );
					} )
				} );
			}
		} );

		jQuery.fn.extend( {
			queue: function( type, data ) {
				var setter = 2;

				if ( typeof type !== "string" ) {
					data = type;
					type = "fx";
					setter--;
				}

				if ( arguments.length < setter ) {
					return jQuery.queue( this[ 0 ], type );
				}

				return data === undefined ?
					this :
					this.each( function() {
						var queue = jQuery.queue( this, type, data );

						// ensure a hooks for this queue
						jQuery._queueHooks( this, type );

						if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
							jQuery.dequeue( this, type );
						}
					} );
			},
			dequeue: function( type ) {
				return this.each( function() {
					jQuery.dequeue( this, type );
				} );
			},
			clearQueue: function( type ) {
				return this.queue( type || "fx", [] );
			},

			// Get a promise resolved when queues of a certain type
			// are emptied (fx is the type by default)
			promise: function( type, obj ) {
				var tmp,
					count = 1,
					defer = jQuery.Deferred(),
					elements = this,
					i = this.length,
					resolve = function() {
						if ( !( --count ) ) {
							defer.resolveWith( elements, [ elements ] );
						}
					};

				if ( typeof type !== "string" ) {
					obj = type;
					type = undefined;
				}
				type = type || "fx";

				while ( i-- ) {
					tmp = jQuery._data( elements[ i ], type + "queueHooks" );
					if ( tmp && tmp.empty ) {
						count++;
						tmp.empty.add( resolve );
					}
				}
				resolve();
				return defer.promise( obj );
			}
		} );


		( function() {
			var shrinkWrapBlocksVal;

			support.shrinkWrapBlocks = function() {
				if ( shrinkWrapBlocksVal != null ) {
					return shrinkWrapBlocksVal;
				}

				// Will be changed later if needed.
				shrinkWrapBlocksVal = false;

				// Minified: var b,c,d
				var div, body, container;

				body = document.getElementsByTagName( "body" )[ 0 ];
				if ( !body || !body.style ) {

					// Test fired too early or in an unsupported environment, exit.
					return;
				}

				// Setup
				div = document.createElement( "div" );
				container = document.createElement( "div" );
				container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
				body.appendChild( container ).appendChild( div );

				// Support: IE6
				// Check if elements with layout shrink-wrap their children
				if ( typeof div.style.zoom !== "undefined" ) {

					// Reset CSS: box-sizing; display; margin; border
					div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
					div.appendChild( document.createElement( "div" ) ).style.width = "5px";
					shrinkWrapBlocksVal = div.offsetWidth !== 3;
				}

				body.removeChild( container );

				return shrinkWrapBlocksVal;
			};

		} )();
		var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

		var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


		var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

		var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
		};



		function adjustCSS( elem, prop, valueParts, tween ) {
			var adjusted,
				scale = 1,
				maxIterations = 20,
				currentValue = tween ?
					function() { return tween.cur(); } :
					function() { return jQuery.css( elem, prop, "" ); },
				initial = currentValue(),
				unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

			if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

				// Trust units reported by jQuery.css
				unit = unit || initialInUnit[ 3 ];

				// Make sure we update the tween properties later on
				valueParts = valueParts || [];

				// Iteratively approximate from a nonzero starting point
				initialInUnit = +initial || 1;

				do {

					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					initialInUnit = initialInUnit / scale;
					jQuery.style( elem, prop, initialInUnit + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// Break the loop if scale is unchanged or perfect, or if we've just had enough.
				} while (
					scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
				);
			}

			if ( valueParts ) {
				initialInUnit = +initialInUnit || +initial || 0;

				// Apply relative offset (+=/-=) if specified
				adjusted = valueParts[ 1 ] ?
					initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
					+valueParts[ 2 ];
				if ( tween ) {
					tween.unit = unit;
					tween.start = initialInUnit;
					tween.end = adjusted;
				}
			}
			return adjusted;
		}


		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
			var i = 0,
				length = elems.length,
				bulk = key == null;

			// Sets many values
			if ( jQuery.type( key ) === "object" ) {
				chainable = true;
				for ( i in key ) {
					access( elems, fn, i, key[ i ], true, emptyGet, raw );
				}

				// Sets one value
			} else if ( value !== undefined ) {
				chainable = true;

				if ( !jQuery.isFunction( value ) ) {
					raw = true;
				}

				if ( bulk ) {

					// Bulk operations run against the entire set
					if ( raw ) {
						fn.call( elems, value );
						fn = null;

						// ...except when executing function values
					} else {
						bulk = fn;
						fn = function( elem, key, value ) {
							return bulk.call( jQuery( elem ), value );
						};
					}
				}

				if ( fn ) {
					for ( ; i < length; i++ ) {
						fn(
							elems[ i ],
							key,
							raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
						);
					}
				}
			}

			return chainable ?
				elems :

			// Gets
				bulk ?
					fn.call( elems ) :
					length ? fn( elems[ 0 ], key ) : emptyGet;
		};
		var rcheckableType = ( /^(?:checkbox|radio)$/i );

		var rtagName = ( /<([\w:-]+)/ );

		var rscriptType = ( /^$|\/(?:java|ecma)script/i );

		var rleadingWhitespace = ( /^\s+/ );

		var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



		function createSafeFragment( document ) {
			var list = nodeNames.split( "|" ),
				safeFrag = document.createDocumentFragment();

			if ( safeFrag.createElement ) {
				while ( list.length ) {
					safeFrag.createElement(
						list.pop()
					);
				}
			}
			return safeFrag;
		}


		( function() {
			var div = document.createElement( "div" ),
				fragment = document.createDocumentFragment(),
				input = document.createElement( "input" );

			// Setup
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

			// IE strips leading whitespace when .innerHTML is used
			support.leadingWhitespace = div.firstChild.nodeType === 3;

			// Make sure that tbody elements aren't automatically inserted
			// IE will insert them into empty tables
			support.tbody = !div.getElementsByTagName( "tbody" ).length;

			// Make sure that link elements get serialized correctly by innerHTML
			// This requires a wrapper element in IE
			support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

			// Makes sure cloning an html5 element does not cause problems
			// Where outerHTML is undefined, this still works
			support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

			// Check if a disconnected checkbox will retain its checked
			// value of true after appended to the DOM (IE6/7)
			input.type = "checkbox";
			input.checked = true;
			fragment.appendChild( input );
			support.appendChecked = input.checked;

			// Make sure textarea (and checkbox) defaultValue is properly cloned
			// Support: IE6-IE11+
			div.innerHTML = "<textarea>x</textarea>";
			support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

			// #11217 - WebKit loses check when the name is after the checked attribute
			fragment.appendChild( div );

			// Support: Windows Web Apps (WWA)
			// `name` and `type` must use .setAttribute for WWA (#14901)
			input = document.createElement( "input" );
			input.setAttribute( "type", "radio" );
			input.setAttribute( "checked", "checked" );
			input.setAttribute( "name", "t" );

			div.appendChild( input );

			// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
			// old WebKit doesn't clone checked state correctly in fragments
			support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

			// Support: IE<9
			// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
			support.noCloneEvent = !!div.addEventListener;

			// Support: IE<9
			// Since attributes and properties are the same in IE,
			// cleanData must set properties to undefined rather than use removeAttribute
			div[ jQuery.expando ] = 1;
			support.attributes = !div.getAttribute( jQuery.expando );
		} )();


		// We have to close these tags to support XHTML (#13200)
		var wrapMap = {
			option: [ 1, "<select multiple='multiple'>", "</select>" ],
			legend: [ 1, "<fieldset>", "</fieldset>" ],
			area: [ 1, "<map>", "</map>" ],

			// Support: IE8
			param: [ 1, "<object>", "</object>" ],
			thead: [ 1, "<table>", "</table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

			// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
			// unless wrapped in a div with non-breaking characters in front of it.
			_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
		};

		// Support: IE8-IE9
		wrapMap.optgroup = wrapMap.option;

		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
		wrapMap.th = wrapMap.td;


		function getAll( context, tag ) {
			var elems, elem,
				i = 0,
				found = typeof context.getElementsByTagName !== "undefined" ?
					context.getElementsByTagName( tag || "*" ) :
					typeof context.querySelectorAll !== "undefined" ?
						context.querySelectorAll( tag || "*" ) :
						undefined;

			if ( !found ) {
				for ( found = [], elems = context.childNodes || context;
					( elem = elems[ i ] ) != null;
					i++
				) {
					if ( !tag || jQuery.nodeName( elem, tag ) ) {
						found.push( elem );
					} else {
						jQuery.merge( found, getAll( elem, tag ) );
					}
				}
			}

			return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
				jQuery.merge( [ context ], found ) :
				found;
		}


		// Mark scripts as having already been evaluated
		function setGlobalEval( elems, refElements ) {
			var elem,
				i = 0;
			for ( ; ( elem = elems[ i ] ) != null; i++ ) {
				jQuery._data(
					elem,
					"globalEval",
					!refElements || jQuery._data( refElements[ i ], "globalEval" )
				);
			}
		}


		var rhtml = /<|&#?\w+;/,
			rtbody = /<tbody/i;

		function fixDefaultChecked( elem ) {
			if ( rcheckableType.test( elem.type ) ) {
				elem.defaultChecked = elem.checked;
			}
		}

		function buildFragment( elems, context, scripts, selection, ignored ) {
			var j, elem, contains,
				tmp, tag, tbody, wrap,
				l = elems.length,

				// Ensure a safe fragment
				safe = createSafeFragment( context ),

				nodes = [],
				i = 0;

			for ( ; i < l; i++ ) {
				elem = elems[ i ];

				if ( elem || elem === 0 ) {

					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

						// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );

						// Convert html into DOM nodes
					} else {
						tmp = tmp || safe.appendChild( context.createElement( "div" ) );

						// Deserialize a standard representation
						tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;

						tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

						// Descend through wrappers to the right content
						j = wrap[ 0 ];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}

						// Manually add leading whitespace removed by IE
						if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
							nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
						}

						// Remove IE's autoinserted <tbody> from table fragments
						if ( !support.tbody ) {

							// String was a <table>, *may* have spurious <tbody>
							elem = tag === "table" && !rtbody.test( elem ) ?
								tmp.firstChild :

							// String was a bare <thead> or <tfoot>
								wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
									tmp :
									0;

							j = elem && elem.childNodes.length;
							while ( j-- ) {
								if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

									elem.removeChild( tbody );
								}
							}
						}

						jQuery.merge( nodes, tmp.childNodes );

						// Fix #12392 for WebKit and IE > 9
						tmp.textContent = "";

						// Fix #12392 for oldIE
						while ( tmp.firstChild ) {
							tmp.removeChild( tmp.firstChild );
						}

						// Remember the top-level container for proper cleanup
						tmp = safe.lastChild;
					}
				}
			}

			// Fix #11356: Clear elements from fragment
			if ( tmp ) {
				safe.removeChild( tmp );
			}

			// Reset defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			if ( !support.appendChecked ) {
				jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
			}

			i = 0;
			while ( ( elem = nodes[ i++ ] ) ) {

				// Skip elements already in the context collection (trac-4087)
				if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
					if ( ignored ) {
						ignored.push( elem );
					}

					continue;
				}

				contains = jQuery.contains( elem.ownerDocument, elem );

				// Append to fragment
				tmp = getAll( safe.appendChild( elem ), "script" );

				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}

				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( ( elem = tmp[ j++ ] ) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}

			tmp = null;

			return safe;
		}


		( function() {
			var i, eventName,
				div = document.createElement( "div" );

			// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
			for ( i in { submit: true, change: true, focusin: true } ) {
				eventName = "on" + i;

				if ( !( support[ i ] = eventName in window ) ) {

					// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
					div.setAttribute( eventName, "t" );
					support[ i ] = div.attributes[ eventName ].expando === false;
				}
			}

			// Null elements to avoid leaks in IE.
			div = null;
		} )();


		var rformElems = /^(?:input|select|textarea)$/i,
			rkeyEvent = /^key/,
			rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
			rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
			rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

		function returnTrue() {
			return true;
		}

		function returnFalse() {
			return false;
		}

		// Support: IE9
		// See #13393 for more info
		function safeActiveElement() {
			try {
				return document.activeElement;
			} catch ( err ) { }
		}

		function on( elem, types, selector, data, fn, one ) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {

				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {

					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					on( elem, type, selector, data, types[ type ], one );
				}
				return elem;
			}

			if ( data == null && fn == null ) {

				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {

					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {

					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return elem;
			}

			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {

					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};

				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return elem.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			} );
		}

		/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
		jQuery.event = {

			global: {},

			add: function( elem, types, handler, data, selector ) {
				var tmp, events, t, handleObjIn,
					special, eventHandle, handleObj,
					handlers, type, namespaces, origType,
					elemData = jQuery._data( elem );

				// Don't attach events to noData or text/comment nodes (but allow plain objects)
				if ( !elemData ) {
					return;
				}

				// Caller can pass in an object of custom data in lieu of the handler
				if ( handler.handler ) {
					handleObjIn = handler;
					handler = handleObjIn.handler;
					selector = handleObjIn.selector;
				}

				// Make sure that the handler has a unique ID, used to find/remove it later
				if ( !handler.guid ) {
					handler.guid = jQuery.guid++;
				}

				// Init the element's event structure and main handler, if this is the first
				if ( !( events = elemData.events ) ) {
					events = elemData.events = {};
				}
				if ( !( eventHandle = elemData.handle ) ) {
					eventHandle = elemData.handle = function( e ) {

						// Discard the second event of a jQuery.event.trigger() and
						// when an event is called after a page has unloaded
						return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
							jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
							undefined;
					};

					// Add elem as a property of the handle fn to prevent a memory leak
					// with IE non-native events
					eventHandle.elem = elem;
				}

				// Handle multiple events separated by a space
				types = ( types || "" ).match( rnotwhite ) || [ "" ];
				t = types.length;
				while ( t-- ) {
					tmp = rtypenamespace.exec( types[ t ] ) || [];
					type = origType = tmp[ 1 ];
					namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

					// There *must* be a type, no attaching namespace-only handlers
					if ( !type ) {
						continue;
					}

					// If event changes its type, use the special event handlers for the changed type
					special = jQuery.event.special[ type ] || {};

					// If selector defined, determine special event api type, otherwise given type
					type = ( selector ? special.delegateType : special.bindType ) || type;

					// Update special based on newly reset type
					special = jQuery.event.special[ type ] || {};

					// handleObj is passed to all event handlers
					handleObj = jQuery.extend( {
						type: type,
						origType: origType,
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
						namespace: namespaces.join( "." )
					}, handleObjIn );

					// Init the event handler queue if we're the first
					if ( !( handlers = events[ type ] ) ) {
						handlers = events[ type ] = [];
						handlers.delegateCount = 0;

						// Only use addEventListener/attachEvent if the special events handler returns false
						if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

							// Bind the global event handler to the element
							if ( elem.addEventListener ) {
								elem.addEventListener( type, eventHandle, false );

							} else if ( elem.attachEvent ) {
								elem.attachEvent( "on" + type, eventHandle );
							}
						}
					}

					if ( special.add ) {
						special.add.call( elem, handleObj );

						if ( !handleObj.handler.guid ) {
							handleObj.handler.guid = handler.guid;
						}
					}

					// Add to the element's handler list, delegates in front
					if ( selector ) {
						handlers.splice( handlers.delegateCount++, 0, handleObj );
					} else {
						handlers.push( handleObj );
					}

					// Keep track of which events have ever been used, for event optimization
					jQuery.event.global[ type ] = true;
				}

				// Nullify elem to prevent memory leaks in IE
				elem = null;
			},

			// Detach an event or set of events from an element
			remove: function( elem, types, handler, selector, mappedTypes ) {
				var j, handleObj, tmp,
					origCount, t, events,
					special, handlers, type,
					namespaces, origType,
					elemData = jQuery.hasData( elem ) && jQuery._data( elem );

				if ( !elemData || !( events = elemData.events ) ) {
					return;
				}

				// Once for each type.namespace in types; type may be omitted
				types = ( types || "" ).match( rnotwhite ) || [ "" ];
				t = types.length;
				while ( t-- ) {
					tmp = rtypenamespace.exec( types[ t ] ) || [];
					type = origType = tmp[ 1 ];
					namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

					// Unbind all events (on this namespace, if provided) for the element
					if ( !type ) {
						for ( type in events ) {
							jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
						}
						continue;
					}

					special = jQuery.event.special[ type ] || {};
					type = ( selector ? special.delegateType : special.bindType ) || type;
					handlers = events[ type ] || [];
					tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

					// Remove matching events
					origCount = j = handlers.length;
					while ( j-- ) {
						handleObj = handlers[ j ];

						if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
							handlers.splice( j, 1 );

							if ( handleObj.selector ) {
								handlers.delegateCount--;
							}
							if ( special.remove ) {
								special.remove.call( elem, handleObj );
							}
						}
					}

					// Remove generic event handler if we removed something and no more handlers exist
					// (avoids potential for endless recursion during removal of special event handlers)
					if ( origCount && !handlers.length ) {
						if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

							jQuery.removeEvent( elem, type, elemData.handle );
						}

						delete events[ type ];
					}
				}

				// Remove the expando if it's no longer used
				if ( jQuery.isEmptyObject( events ) ) {
					delete elemData.handle;

					// removeData also checks for emptiness and clears the expando if empty
					// so use it instead of delete
					jQuery._removeData( elem, "events" );
				}
			},

			trigger: function( event, data, elem, onlyHandlers ) {
				var handle, ontype, cur,
					bubbleType, special, tmp, i,
					eventPath = [ elem || document ],
					type = hasOwn.call( event, "type" ) ? event.type : event,
					namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

				cur = tmp = elem = elem || document;

				// Don't do events on text and comment nodes
				if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
					return;
				}

				// focus/blur morphs to focusin/out; ensure we're not firing them right now
				if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
					return;
				}

				if ( type.indexOf( "." ) > -1 ) {

					// Namespaced trigger; create a regexp to match event type in handle()
					namespaces = type.split( "." );
					type = namespaces.shift();
					namespaces.sort();
				}
				ontype = type.indexOf( ":" ) < 0 && "on" + type;

				// Caller can pass in a jQuery.Event object, Object, or just an event type string
				event = event[ jQuery.expando ] ?
					event :
					new jQuery.Event( type, typeof event === "object" && event );

				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
				event.isTrigger = onlyHandlers ? 2 : 3;
				event.namespace = namespaces.join( "." );
				event.rnamespace = event.namespace ?
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
					null;

				// Clean up the event in case it is being reused
				event.result = undefined;
				if ( !event.target ) {
					event.target = elem;
				}

				// Clone any incoming data and prepend the event, creating the handler arg list
				data = data == null ?
					[ event ] :
					jQuery.makeArray( data, [ event ] );

				// Allow special events to draw outside the lines
				special = jQuery.event.special[ type ] || {};
				if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
					return;
				}

				// Determine event propagation path in advance, per W3C events spec (#9951)
				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
				if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

					bubbleType = special.delegateType || type;
					if ( !rfocusMorph.test( bubbleType + type ) ) {
						cur = cur.parentNode;
					}
					for ( ; cur; cur = cur.parentNode ) {
						eventPath.push( cur );
						tmp = cur;
					}

					// Only add window if we got to document (e.g., not plain obj or detached DOM)
					if ( tmp === ( elem.ownerDocument || document ) ) {
						eventPath.push( tmp.defaultView || tmp.parentWindow || window );
					}
				}

				// Fire handlers on the event path
				i = 0;
				while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

					event.type = i > 1 ?
						bubbleType :
						special.bindType || type;

					// jQuery handler
					handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

					if ( handle ) {
						handle.apply( cur, data );
					}

					// Native handler
					handle = ontype && cur[ ontype ];
					if ( handle && handle.apply && acceptData( cur ) ) {
						event.result = handle.apply( cur, data );
						if ( event.result === false ) {
							event.preventDefault();
						}
					}
				}
				event.type = type;

				// If nobody prevented the default action, do it now
				if ( !onlyHandlers && !event.isDefaultPrevented() ) {

					if (
						( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
						) && acceptData( elem )
					) {

						// Call a native DOM method on the target with the same name name as the event.
						// Can't use an .isFunction() check here because IE6/7 fails that test.
						// Don't do default actions on window, that's where global variables be (#6170)
						if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

							// Don't re-trigger an onFOO event when we call its FOO() method
							tmp = elem[ ontype ];

							if ( tmp ) {
								elem[ ontype ] = null;
							}

							// Prevent re-triggering of the same event, since we already bubbled it above
							jQuery.event.triggered = type;
							try {
								elem[ type ]();
							} catch ( e ) {

								// IE<9 dies on focus/blur to hidden element (#1486,#12518)
								// only reproducible on winXP IE8 native, not IE9 in IE8 mode
							}
							jQuery.event.triggered = undefined;

							if ( tmp ) {
								elem[ ontype ] = tmp;
							}
						}
					}
				}

				return event.result;
			},

			dispatch: function( event ) {

				// Make a writable jQuery.Event from the native event object
				event = jQuery.event.fix( event );

				var i, j, ret, matched, handleObj,
					handlerQueue = [],
					args = slice.call( arguments ),
					handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
					special = jQuery.event.special[ event.type ] || {};

				// Use the fix-ed jQuery.Event rather than the (read-only) native event
				args[ 0 ] = event;
				event.delegateTarget = this;

				// Call the preDispatch hook for the mapped type, and let it bail if desired
				if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
					return;
				}

				// Determine handlers
				handlerQueue = jQuery.event.handlers.call( this, event, handlers );

				// Run delegates first; they may want to stop propagation beneath us
				i = 0;
				while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
					event.currentTarget = matched.elem;

					j = 0;
					while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

						// Triggered event must either 1) have no namespace, or 2) have namespace(s)
						// a subset or equal to those in the bound event (both can have no namespace).
						if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

							event.handleObj = handleObj;
							event.data = handleObj.data;

							ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

							if ( ret !== undefined ) {
								if ( ( event.result = ret ) === false ) {
									event.preventDefault();
									event.stopPropagation();
								}
							}
						}
					}
				}

				// Call the postDispatch hook for the mapped type
				if ( special.postDispatch ) {
					special.postDispatch.call( this, event );
				}

				return event.result;
			},

			handlers: function( event, handlers ) {
				var i, matches, sel, handleObj,
					handlerQueue = [],
					delegateCount = handlers.delegateCount,
					cur = event.target;

				// Support (at least): Chrome, IE9
				// Find delegate handlers
				// Black-hole SVG <use> instance trees (#13180)
				//
				// Support: Firefox<=42+
				// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
				if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

					/* jshint eqeqeq: false */
					for ( ; cur != this; cur = cur.parentNode || this ) {
						/* jshint eqeqeq: true */

						// Don't check non-elements (#13208)
						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
						if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
							matches = [];
							for ( i = 0; i < delegateCount; i++ ) {
								handleObj = handlers[ i ];

								// Don't conflict with Object.prototype properties (#13203)
								sel = handleObj.selector + " ";

								if ( matches[ sel ] === undefined ) {
									matches[ sel ] = handleObj.needsContext ?
										jQuery( sel, this ).index( cur ) > -1 :
										jQuery.find( sel, this, null, [ cur ] ).length;
								}
								if ( matches[ sel ] ) {
									matches.push( handleObj );
								}
							}
							if ( matches.length ) {
								handlerQueue.push( { elem: cur, handlers: matches } );
							}
						}
					}
				}

				// Add the remaining (directly-bound) handlers
				if ( delegateCount < handlers.length ) {
					handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
				}

				return handlerQueue;
			},

			fix: function( event ) {
				if ( event[ jQuery.expando ] ) {
					return event;
				}

				// Create a writable copy of the event object and normalize some properties
				var i, prop, copy,
					type = event.type,
					originalEvent = event,
					fixHook = this.fixHooks[ type ];

				if ( !fixHook ) {
					this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
						{};
				}
				copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

				event = new jQuery.Event( originalEvent );

				i = copy.length;
				while ( i-- ) {
					prop = copy[ i ];
					event[ prop ] = originalEvent[ prop ];
				}

				// Support: IE<9
				// Fix target property (#1925)
				if ( !event.target ) {
					event.target = originalEvent.srcElement || document;
				}

				// Support: Safari 6-8+
				// Target should not be a text node (#504, #13143)
				if ( event.target.nodeType === 3 ) {
					event.target = event.target.parentNode;
				}

				// Support: IE<9
				// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
				event.metaKey = !!event.metaKey;

				return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
			},

			// Includes some event props shared by KeyEvent and MouseEvent
			props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

			fixHooks: {},

			keyHooks: {
				props: "char charCode key keyCode".split( " " ),
				filter: function( event, original ) {

					// Add which for key events
					if ( event.which == null ) {
						event.which = original.charCode != null ? original.charCode : original.keyCode;
					}

					return event;
				}
			},

			mouseHooks: {
				props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
				filter: function( event, original ) {
					var body, eventDoc, doc,
						button = original.button,
						fromElement = original.fromElement;

					// Calculate pageX/Y if missing and clientX/Y available
					if ( event.pageX == null && original.clientX != null ) {
						eventDoc = event.target.ownerDocument || document;
						doc = eventDoc.documentElement;
						body = eventDoc.body;

						event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
						event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
					}

					// Add relatedTarget, if necessary
					if ( !event.relatedTarget && fromElement ) {
						event.relatedTarget = fromElement === event.target ?
							original.toElement :
							fromElement;
					}

					// Add which for click: 1 === left; 2 === middle; 3 === right
					// Note: button is not normalized, so don't use it
					if ( !event.which && button !== undefined ) {
						event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
					}

					return event;
				}
			},

			special: {
				load: {

					// Prevent triggered image.load events from bubbling to window.load
					noBubble: true
				},
				focus: {

					// Fire native event if possible so blur/focus sequence is correct
					trigger: function() {
						if ( this !== safeActiveElement() && this.focus ) {
							try {
								this.focus();
								return false;
							} catch ( e ) {

								// Support: IE<9
								// If we error on focus to hidden element (#1486, #12518),
								// let .trigger() run the handlers
							}
						}
					},
					delegateType: "focusin"
				},
				blur: {
					trigger: function() {
						if ( this === safeActiveElement() && this.blur ) {
							this.blur();
							return false;
						}
					},
					delegateType: "focusout"
				},
				click: {

					// For checkbox, fire native event so checked state will be right
					trigger: function() {
						if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
							this.click();
							return false;
						}
					},

					// For cross-browser consistency, don't fire native .click() on links
					_default: function( event ) {
						return jQuery.nodeName( event.target, "a" );
					}
				},

				beforeunload: {
					postDispatch: function( event ) {

						// Support: Firefox 20+
						// Firefox doesn't alert if the returnValue field is not set.
						if ( event.result !== undefined && event.originalEvent ) {
							event.originalEvent.returnValue = event.result;
						}
					}
				}
			},

			// Piggyback on a donor event to simulate a different one
			simulate: function( type, elem, event ) {
				var e = jQuery.extend(
					new jQuery.Event(),
					event,
					{
						type: type,
						isSimulated: true

						// Previously, `originalEvent: {}` was set here, so stopPropagation call
						// would not be triggered on donor event, since in our own
						// jQuery.event.stopPropagation function we had a check for existence of
						// originalEvent.stopPropagation method, so, consequently it would be a noop.
						//
						// Guard for simulated events was moved to jQuery.event.stopPropagation function
						// since `originalEvent` should point to the original event for the
						// constancy with other events and for more focused logic
					}
				);

				jQuery.event.trigger( e, null, elem );

				if ( e.isDefaultPrevented() ) {
					event.preventDefault();
				}
			}
		};

		jQuery.removeEvent = document.removeEventListener ?
			function( elem, type, handle ) {

				// This "if" is needed for plain objects
				if ( elem.removeEventListener ) {
					elem.removeEventListener( type, handle );
				}
			} :
			function( elem, type, handle ) {
				var name = "on" + type;

				if ( elem.detachEvent ) {

					// #8545, #7054, preventing memory leaks for custom events in IE6-8
					// detachEvent needed property on element, by name of that event,
					// to properly expose it to GC
					if ( typeof elem[ name ] === "undefined" ) {
						elem[ name ] = null;
					}

					elem.detachEvent( name, handle );
				}
			};

		jQuery.Event = function( src, props ) {

			// Allow instantiation without the 'new' keyword
			if ( !( this instanceof jQuery.Event ) ) {
				return new jQuery.Event( src, props );
			}

			// Event object
			if ( src && src.type ) {
				this.originalEvent = src;
				this.type = src.type;

				// Events bubbling up the document may have been marked as prevented
				// by a handler lower down the tree; reflect the correct value.
				this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
					returnTrue :
					returnFalse;

				// Event type
			} else {
				this.type = src;
			}

			// Put explicitly provided properties onto the event object
			if ( props ) {
				jQuery.extend( this, props );
			}

			// Create a timestamp if incoming event doesn't have one
			this.timeStamp = src && src.timeStamp || jQuery.now();

			// Mark it as fixed
			this[ jQuery.expando ] = true;
		};

		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
		// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
		jQuery.Event.prototype = {
			constructor: jQuery.Event,
			isDefaultPrevented: returnFalse,
			isPropagationStopped: returnFalse,
			isImmediatePropagationStopped: returnFalse,

			preventDefault: function() {
				var e = this.originalEvent;

				this.isDefaultPrevented = returnTrue;
				if ( !e ) {
					return;
				}

				// If preventDefault exists, run it on the original event
				if ( e.preventDefault ) {
					e.preventDefault();

					// Support: IE
					// Otherwise set the returnValue property of the original event to false
				} else {
					e.returnValue = false;
				}
			},
			stopPropagation: function() {
				var e = this.originalEvent;

				this.isPropagationStopped = returnTrue;

				if ( !e || this.isSimulated ) {
					return;
				}

				// If stopPropagation exists, run it on the original event
				if ( e.stopPropagation ) {
					e.stopPropagation();
				}

				// Support: IE
				// Set the cancelBubble property of the original event to true
				e.cancelBubble = true;
			},
			stopImmediatePropagation: function() {
				var e = this.originalEvent;

				this.isImmediatePropagationStopped = returnTrue;

				if ( e && e.stopImmediatePropagation ) {
					e.stopImmediatePropagation();
				}

				this.stopPropagation();
			}
		};

		// Create mouseenter/leave events using mouseover/out and event-time checks
		// so that event delegation works in jQuery.
		// Do the same for pointerenter/pointerleave and pointerover/pointerout
		//
		// Support: Safari 7 only
		// Safari sends mouseenter too often; see:
		// https://code.google.com/p/chromium/issues/detail?id=470258
		// for the description of the bug (it existed in older Chrome versions as well).
		jQuery.each( {
			mouseenter: "mouseover",
			mouseleave: "mouseout",
			pointerenter: "pointerover",
			pointerleave: "pointerout"
		}, function( orig, fix ) {
			jQuery.event.special[ orig ] = {
				delegateType: fix,
				bindType: fix,

				handle: function( event ) {
					var ret,
						target = this,
						related = event.relatedTarget,
						handleObj = event.handleObj;

					// For mouseenter/leave call the handler if related is outside the target.
					// NB: No relatedTarget if the mouse left/entered the browser window
					if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply( this, arguments );
						event.type = fix;
					}
					return ret;
				}
			};
		} );

		// IE submit delegation
		if ( !support.submit ) {

			jQuery.event.special.submit = {
				setup: function() {

					// Only need this for delegated form submit events
					if ( jQuery.nodeName( this, "form" ) ) {
						return false;
					}

					// Lazy-add a submit handler when a descendant form may potentially be submitted
					jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

						// Node name check avoids a VML-related crash in IE (#9807)
						var elem = e.target,
							form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

							// Support: IE <=8
							// We use jQuery.prop instead of elem.form
							// to allow fixing the IE8 delegated submit issue (gh-2332)
							// by 3rd party polyfills/workarounds.
								jQuery.prop( elem, "form" ) :
								undefined;

						if ( form && !jQuery._data( form, "submit" ) ) {
							jQuery.event.add( form, "submit._submit", function( event ) {
								event._submitBubble = true;
							} );
							jQuery._data( form, "submit", true );
						}
					} );

					// return undefined since we don't need an event listener
				},

				postDispatch: function( event ) {

					// If form was submitted by the user, bubble the event up the tree
					if ( event._submitBubble ) {
						delete event._submitBubble;
						if ( this.parentNode && !event.isTrigger ) {
							jQuery.event.simulate( "submit", this.parentNode, event );
						}
					}
				},

				teardown: function() {

					// Only need this for delegated form submit events
					if ( jQuery.nodeName( this, "form" ) ) {
						return false;
					}

					// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
					jQuery.event.remove( this, "._submit" );
				}
			};
		}

		// IE change delegation and checkbox/radio fix
		if ( !support.change ) {

			jQuery.event.special.change = {

				setup: function() {

					if ( rformElems.test( this.nodeName ) ) {

						// IE doesn't fire change on a check/radio until blur; trigger it on click
						// after a propertychange. Eat the blur-change in special.change.handle.
						// This still fires onchange a second time for check/radio after blur.
						if ( this.type === "checkbox" || this.type === "radio" ) {
							jQuery.event.add( this, "propertychange._change", function( event ) {
								if ( event.originalEvent.propertyName === "checked" ) {
									this._justChanged = true;
								}
							} );
							jQuery.event.add( this, "click._change", function( event ) {
								if ( this._justChanged && !event.isTrigger ) {
									this._justChanged = false;
								}

								// Allow triggered, simulated change events (#11500)
								jQuery.event.simulate( "change", this, event );
							} );
						}
						return false;
					}

					// Delegated event; lazy-add a change handler on descendant inputs
					jQuery.event.add( this, "beforeactivate._change", function( e ) {
						var elem = e.target;

						if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
							jQuery.event.add( elem, "change._change", function( event ) {
								if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
									jQuery.event.simulate( "change", this.parentNode, event );
								}
							} );
							jQuery._data( elem, "change", true );
						}
					} );
				},

				handle: function( event ) {
					var elem = event.target;

					// Swallow native change events from checkbox/radio, we already triggered them above
					if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

						return event.handleObj.handler.apply( this, arguments );
					}
				},

				teardown: function() {
					jQuery.event.remove( this, "._change" );

					return !rformElems.test( this.nodeName );
				}
			};
		}

		// Support: Firefox
		// Firefox doesn't have focus(in | out) events
		// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
		//
		// Support: Chrome, Safari
		// focus(in | out) events fire after focus & blur events,
		// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
		// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
		if ( !support.focusin ) {
			jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

				// Attach a single capturing handler on the document while someone wants focusin/focusout
				var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
				};

				jQuery.event.special[ fix ] = {
					setup: function() {
						var doc = this.ownerDocument || this,
							attaches = jQuery._data( doc, fix );

						if ( !attaches ) {
							doc.addEventListener( orig, handler, true );
						}
						jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
					},
					teardown: function() {
						var doc = this.ownerDocument || this,
							attaches = jQuery._data( doc, fix ) - 1;

						if ( !attaches ) {
							doc.removeEventListener( orig, handler, true );
							jQuery._removeData( doc, fix );
						} else {
							jQuery._data( doc, fix, attaches );
						}
					}
				};
			} );
		}

		jQuery.fn.extend( {

			on: function( types, selector, data, fn ) {
				return on( this, types, selector, data, fn );
			},
			one: function( types, selector, data, fn ) {
				return on( this, types, selector, data, fn, 1 );
			},
			off: function( types, selector, fn ) {
				var handleObj, type;
				if ( types && types.preventDefault && types.handleObj ) {

					// ( event )  dispatched jQuery.Event
					handleObj = types.handleObj;
					jQuery( types.delegateTarget ).off(
						handleObj.namespace ?
							handleObj.origType + "." + handleObj.namespace :
							handleObj.origType,
						handleObj.selector,
						handleObj.handler
					);
					return this;
				}
				if ( typeof types === "object" ) {

					// ( types-object [, selector] )
					for ( type in types ) {
						this.off( type, selector, types[ type ] );
					}
					return this;
				}
				if ( selector === false || typeof selector === "function" ) {

					// ( types [, fn] )
					fn = selector;
					selector = undefined;
				}
				if ( fn === false ) {
					fn = returnFalse;
				}
				return this.each( function() {
					jQuery.event.remove( this, types, fn, selector );
				} );
			},

			trigger: function( type, data ) {
				return this.each( function() {
					jQuery.event.trigger( type, data, this );
				} );
			},
			triggerHandler: function( type, data ) {
				var elem = this[ 0 ];
				if ( elem ) {
					return jQuery.event.trigger( type, data, elem, true );
				}
			}
		} );


		var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
			rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
			rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

			// Support: IE 10-11, Edge 10240+
			// In IE/Edge using regex groups here causes severe slowdowns.
			// See https://connect.microsoft.com/IE/feedback/details/1736512/
			rnoInnerhtml = /<script|<style|<link/i,

			// checked="checked" or checked
			rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
			rscriptTypeMasked = /^true\/(.*)/,
			rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
			safeFragment = createSafeFragment( document ),
			fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

		// Support: IE<8
		// Manipulating tables requires a tbody
		function manipulationTarget( elem, content ) {
			return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

				elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
				elem;
		}

		// Replace/restore the type attribute of script elements for safe DOM manipulation
		function disableScript( elem ) {
			elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
			return elem;
		}
		function restoreScript( elem ) {
			var match = rscriptTypeMasked.exec( elem.type );
			if ( match ) {
				elem.type = match[ 1 ];
			} else {
				elem.removeAttribute( "type" );
			}
			return elem;
		}

		function cloneCopyEvent( src, dest ) {
			if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
				return;
			}

			var type, i, l,
				oldData = jQuery._data( src ),
				curData = jQuery._data( dest, oldData ),
				events = oldData.events;

			if ( events ) {
				delete curData.handle;
				curData.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}

			// make the cloned public data object a copy from the original
			if ( curData.data ) {
				curData.data = jQuery.extend( {}, curData.data );
			}
		}

		function fixCloneNodeIssues( src, dest ) {
			var nodeName, e, data;

			// We do not need to do anything for non-Elements
			if ( dest.nodeType !== 1 ) {
				return;
			}

			nodeName = dest.nodeName.toLowerCase();

			// IE6-8 copies events bound via attachEvent when using cloneNode.
			if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
				data = jQuery._data( dest );

				for ( e in data.events ) {
					jQuery.removeEvent( dest, e, data.handle );
				}

				// Event data gets referenced instead of copied if the expando gets copied too
				dest.removeAttribute( jQuery.expando );
			}

			// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
			if ( nodeName === "script" && dest.text !== src.text ) {
				disableScript( dest ).text = src.text;
				restoreScript( dest );

				// IE6-10 improperly clones children of object elements using classid.
				// IE10 throws NoModificationAllowedError if parent is null, #12132.
			} else if ( nodeName === "object" ) {
				if ( dest.parentNode ) {
					dest.outerHTML = src.outerHTML;
				}

				// This path appears unavoidable for IE9. When cloning an object
				// element in IE9, the outerHTML strategy above is not sufficient.
				// If the src has innerHTML and the destination does not,
				// copy the src.innerHTML into the dest.innerHTML. #10324
				if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
					dest.innerHTML = src.innerHTML;
				}

			} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

				// IE6-8 fails to persist the checked state of a cloned checkbox
				// or radio button. Worse, IE6-7 fail to give the cloned element
				// a checked appearance if the defaultChecked value isn't also set

				dest.defaultChecked = dest.checked = src.checked;

				// IE6-7 get confused and end up setting the value of a cloned
				// checkbox/radio button to an empty string instead of "on"
				if ( dest.value !== src.value ) {
					dest.value = src.value;
				}

				// IE6-8 fails to return the selected option to the default selected
				// state when cloning options
			} else if ( nodeName === "option" ) {
				dest.defaultSelected = dest.selected = src.defaultSelected;

				// IE6-8 fails to set the defaultValue to the correct value when
				// cloning other types of input fields
			} else if ( nodeName === "input" || nodeName === "textarea" ) {
				dest.defaultValue = src.defaultValue;
			}
		}

		function domManip( collection, args, callback, ignored ) {

			// Flatten any nested arrays
			args = concat.apply( [], args );

			var first, node, hasScripts,
				scripts, doc, fragment,
				i = 0,
				l = collection.length,
				iNoClone = l - 1,
				value = args[ 0 ],
				isFunction = jQuery.isFunction( value );

			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
				return collection.each( function( index ) {
					var self = collection.eq( index );
					if ( isFunction ) {
						args[ 0 ] = value.call( this, index, self.html() );
					}
					domManip( self, args, callback, ignored );
				} );
			}

			if ( l ) {
				fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
				first = fragment.firstChild;

				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}

				// Require either new content or an interest in ignored elements to invoke the callback
				if ( first || ignored ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;

					// Use the original fragment for the last item
					// instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;

						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );

							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {

								// Support: Android<4.1, PhantomJS<2
								// push.apply(_, arraylike) throws on ancient WebKit
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}

						callback.call( collection[ i ], node, i );
					}

					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;

						// Reenable scripts
						jQuery.map( scripts, restoreScript );

						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

								if ( node.src ) {

									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval(
										( node.text || node.textContent || node.innerHTML || "" )
											.replace( rcleanScript, "" )
									);
								}
							}
						}
					}

					// Fix #11809: Avoid leaking memory
					fragment = first = null;
				}
			}

			return collection;
		}

		function remove( elem, selector, keepData ) {
			var node,
				elems = selector ? jQuery.filter( selector, elem ) : elem,
				i = 0;

			for ( ; ( node = elems[ i ] ) != null; i++ ) {

				if ( !keepData && node.nodeType === 1 ) {
					jQuery.cleanData( getAll( node ) );
				}

				if ( node.parentNode ) {
					if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
						setGlobalEval( getAll( node, "script" ) );
					}
					node.parentNode.removeChild( node );
				}
			}

			return elem;
		}

		jQuery.extend( {
			htmlPrefilter: function( html ) {
				return html.replace( rxhtmlTag, "<$1></$2>" );
			},

			clone: function( elem, dataAndEvents, deepDataAndEvents ) {
				var destElements, node, clone, i, srcElements,
					inPage = jQuery.contains( elem.ownerDocument, elem );

				if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

					clone = elem.cloneNode( true );

					// IE<=8 does not properly clone detached, unknown element nodes
				} else {
					fragmentDiv.innerHTML = elem.outerHTML;
					fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
				}

				if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

					// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
					destElements = getAll( clone );
					srcElements = getAll( elem );

					// Fix all IE cloning issues
					for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

						// Ensure that the destination node is not null; Fixes #9587
						if ( destElements[ i ] ) {
							fixCloneNodeIssues( node, destElements[ i ] );
						}
					}
				}

				// Copy the events from the original to the clone
				if ( dataAndEvents ) {
					if ( deepDataAndEvents ) {
						srcElements = srcElements || getAll( elem );
						destElements = destElements || getAll( clone );

						for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
							cloneCopyEvent( node, destElements[ i ] );
						}
					} else {
						cloneCopyEvent( elem, clone );
					}
				}

				// Preserve script evaluation history
				destElements = getAll( clone, "script" );
				if ( destElements.length > 0 ) {
					setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
				}

				destElements = srcElements = node = null;

				// Return the cloned set
				return clone;
			},

			cleanData: function( elems, /* internal */ forceAcceptData ) {
				var elem, type, id, data,
					i = 0,
					internalKey = jQuery.expando,
					cache = jQuery.cache,
					attributes = support.attributes,
					special = jQuery.event.special;

				for ( ; ( elem = elems[ i ] ) != null; i++ ) {
					if ( forceAcceptData || acceptData( elem ) ) {

						id = elem[ internalKey ];
						data = id && cache[ id ];

						if ( data ) {
							if ( data.events ) {
								for ( type in data.events ) {
									if ( special[ type ] ) {
										jQuery.event.remove( elem, type );

										// This is a shortcut to avoid jQuery.event.remove's overhead
									} else {
										jQuery.removeEvent( elem, type, data.handle );
									}
								}
							}

							// Remove cache only if it was not already removed by jQuery.event.remove
							if ( cache[ id ] ) {

								delete cache[ id ];

								// Support: IE<9
								// IE does not allow us to delete expando properties from nodes
								// IE creates expando attributes along with the property
								// IE does not have a removeAttribute function on Document nodes
								if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
									elem.removeAttribute( internalKey );

									// Webkit & Blink performance suffers when deleting properties
									// from DOM nodes, so set to undefined instead
									// https://code.google.com/p/chromium/issues/detail?id=378607
								} else {
									elem[ internalKey ] = undefined;
								}

								deletedIds.push( id );
							}
						}
					}
				}
			}
		} );

		jQuery.fn.extend( {

			// Keep domManip exposed until 3.0 (gh-2225)
			domManip: domManip,

			detach: function( selector ) {
				return remove( this, selector, true );
			},

			remove: function( selector ) {
				return remove( this, selector );
			},

			text: function( value ) {
				return access( this, function( value ) {
					return value === undefined ?
						jQuery.text( this ) :
						this.empty().append(
							( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
						);
				}, null, value, arguments.length );
			},

			append: function() {
				return domManip( this, arguments, function( elem ) {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						var target = manipulationTarget( this, elem );
						target.appendChild( elem );
					}
				} );
			},

			prepend: function() {
				return domManip( this, arguments, function( elem ) {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						var target = manipulationTarget( this, elem );
						target.insertBefore( elem, target.firstChild );
					}
				} );
			},

			before: function() {
				return domManip( this, arguments, function( elem ) {
					if ( this.parentNode ) {
						this.parentNode.insertBefore( elem, this );
					}
				} );
			},

			after: function() {
				return domManip( this, arguments, function( elem ) {
					if ( this.parentNode ) {
						this.parentNode.insertBefore( elem, this.nextSibling );
					}
				} );
			},

			empty: function() {
				var elem,
					i = 0;

				for ( ; ( elem = this[ i ] ) != null; i++ ) {

					// Remove element nodes and prevent memory leaks
					if ( elem.nodeType === 1 ) {
						jQuery.cleanData( getAll( elem, false ) );
					}

					// Remove any remaining nodes
					while ( elem.firstChild ) {
						elem.removeChild( elem.firstChild );
					}

					// If this is a select, ensure that it displays empty (#12336)
					// Support: IE<9
					if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
						elem.options.length = 0;
					}
				}

				return this;
			},

			clone: function( dataAndEvents, deepDataAndEvents ) {
				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

				return this.map( function() {
					return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
				} );
			},

			html: function( value ) {
				return access( this, function( value ) {
					var elem = this[ 0 ] || {},
						i = 0,
						l = this.length;

					if ( value === undefined ) {
						return elem.nodeType === 1 ?
							elem.innerHTML.replace( rinlinejQuery, "" ) :
							undefined;
					}

					// See if we can take a shortcut and just use innerHTML
					if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

						value = jQuery.htmlPrefilter( value );

						try {
							for ( ; i < l; i++ ) {

								// Remove element nodes and prevent memory leaks
								elem = this[ i ] || {};
								if ( elem.nodeType === 1 ) {
									jQuery.cleanData( getAll( elem, false ) );
									elem.innerHTML = value;
								}
							}

							elem = 0;

							// If using innerHTML throws an exception, use the fallback method
						} catch ( e ) {}
					}

					if ( elem ) {
						this.empty().append( value );
					}
				}, null, value, arguments.length );
			},

			replaceWith: function() {
				var ignored = [];

				// Make the changes, replacing each non-ignored context element with the new content
				return domManip( this, arguments, function( elem ) {
					var parent = this.parentNode;

					if ( jQuery.inArray( this, ignored ) < 0 ) {
						jQuery.cleanData( getAll( this ) );
						if ( parent ) {
							parent.replaceChild( elem, this );
						}
					}

					// Force callback invocation
				}, ignored );
			}
		} );

		jQuery.each( {
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function( name, original ) {
			jQuery.fn[ name ] = function( selector ) {
				var elems,
					i = 0,
					ret = [],
					insert = jQuery( selector ),
					last = insert.length - 1;

				for ( ; i <= last; i++ ) {
					elems = i === last ? this : this.clone( true );
					jQuery( insert[ i ] )[ original ]( elems );

					// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
					push.apply( ret, elems.get() );
				}

				return this.pushStack( ret );
			};
		} );


		var iframe,
			elemdisplay = {

				// Support: Firefox
				// We have to pre-define these values for FF (#10227)
				HTML: "block",
				BODY: "block"
			};

		/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

		// Called only from within defaultDisplay
		function actualDisplay( name, doc ) {
			var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

				display = jQuery.css( elem[ 0 ], "display" );

			// We don't have any data stored on the element,
			// so use "detach" method as fast way to get rid of the element
			elem.detach();

			return display;
		}

		/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
		function defaultDisplay( nodeName ) {
			var doc = document,
				display = elemdisplay[ nodeName ];

			if ( !display ) {
				display = actualDisplay( nodeName, doc );

				// If the simple way fails, read from inside an iframe
				if ( display === "none" || !display ) {

					// Use the already-created iframe if possible
					iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
						.appendTo( doc.documentElement );

					// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
					doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

					// Support: IE
					doc.write();
					doc.close();

					display = actualDisplay( nodeName, doc );
					iframe.detach();
				}

				// Store the correct default display
				elemdisplay[ nodeName ] = display;
			}

			return display;
		}
		var rmargin = ( /^margin/ );

		var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

		var swap = function( elem, options, callback, args ) {
			var ret, name,
				old = {};

			// Remember the old values, and insert the new ones
			for ( name in options ) {
				old[ name ] = elem.style[ name ];
				elem.style[ name ] = options[ name ];
			}

			ret = callback.apply( elem, args || [] );

			// Revert the old values
			for ( name in options ) {
				elem.style[ name ] = old[ name ];
			}

			return ret;
		};


		var documentElement = document.documentElement;



		( function() {
			var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
				reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
				container = document.createElement( "div" ),
				div = document.createElement( "div" );

			// Finish early in limited (non-browser) environments
			if ( !div.style ) {
				return;
			}

			div.style.cssText = "float:left;opacity:.5";

			// Support: IE<9
			// Make sure that element opacity exists (as opposed to filter)
			support.opacity = div.style.opacity === "0.5";

			// Verify style float existence
			// (IE uses styleFloat instead of cssFloat)
			support.cssFloat = !!div.style.cssFloat;

			div.style.backgroundClip = "content-box";
			div.cloneNode( true ).style.backgroundClip = "";
			support.clearCloneStyle = div.style.backgroundClip === "content-box";

			container = document.createElement( "div" );
			container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
			div.innerHTML = "";
			container.appendChild( div );

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

			jQuery.extend( support, {
				reliableHiddenOffsets: function() {
					if ( pixelPositionVal == null ) {
						computeStyleTests();
					}
					return reliableHiddenOffsetsVal;
				},

				boxSizingReliable: function() {

					// We're checking for pixelPositionVal here instead of boxSizingReliableVal
					// since that compresses better and they're computed together anyway.
					if ( pixelPositionVal == null ) {
						computeStyleTests();
					}
					return boxSizingReliableVal;
				},

				pixelMarginRight: function() {

					// Support: Android 4.0-4.3
					if ( pixelPositionVal == null ) {
						computeStyleTests();
					}
					return pixelMarginRightVal;
				},

				pixelPosition: function() {
					if ( pixelPositionVal == null ) {
						computeStyleTests();
					}
					return pixelPositionVal;
				},

				reliableMarginRight: function() {

					// Support: Android 2.3
					if ( pixelPositionVal == null ) {
						computeStyleTests();
					}
					return reliableMarginRightVal;
				},

				reliableMarginLeft: function() {

					// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
					if ( pixelPositionVal == null ) {
						computeStyleTests();
					}
					return reliableMarginLeftVal;
				}
			} );

			function computeStyleTests() {
				var contents, divStyle,
					documentElement = document.documentElement;

				// Setup
				documentElement.appendChild( container );

				div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

				// Support: IE<9
				// Assume reasonable values in the absence of getComputedStyle
				pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
				pixelMarginRightVal = reliableMarginRightVal = true;

				// Check for getComputedStyle so that this code is not run in IE<9.
				if ( window.getComputedStyle ) {
					divStyle = window.getComputedStyle( div );
					pixelPositionVal = ( divStyle || {} ).top !== "1%";
					reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
					boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

					// Support: Android 4.0 - 4.3 only
					// Some styles come back with percentage values, even though they shouldn't
					div.style.marginRight = "50%";
					pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

					// Support: Android 2.3 only
					// Div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					contents = div.appendChild( document.createElement( "div" ) );

					// Reset CSS: box-sizing; display; margin; border; padding
					contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					contents.style.marginRight = contents.style.width = "0";
					div.style.width = "1px";

					reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

					div.removeChild( contents );
				}

				// Support: IE6-8
				// First check that getClientRects works as expected
				// Check if table cells still have offsetWidth/Height when they are set
				// to display:none and there are still other visible table cells in a
				// table row; if so, offsetWidth/Height are not reliable for use when
				// determining if an element has been hidden directly using
				// display:none (it is still safe to use offsets if a parent element is
				// hidden; don safety goggles and see bug #4512 for more information).
				div.style.display = "none";
				reliableHiddenOffsetsVal = div.getClientRects().length === 0;
				if ( reliableHiddenOffsetsVal ) {
					div.style.display = "";
					div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
					div.childNodes[ 0 ].style.borderCollapse = "separate";
					contents = div.getElementsByTagName( "td" );
					contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
					reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
					if ( reliableHiddenOffsetsVal ) {
						contents[ 0 ].style.display = "";
						contents[ 1 ].style.display = "none";
						reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
					}
				}

				// Teardown
				documentElement.removeChild( container );
			}

		} )();


		var getStyles, curCSS,
			rposition = /^(top|right|bottom|left)$/;

		if ( window.getComputedStyle ) {
			getStyles = function( elem ) {

				// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
				// IE throws on elements created in popups
				// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
				var view = elem.ownerDocument.defaultView;

				if ( !view || !view.opener ) {
					view = window;
				}

				return view.getComputedStyle( elem );
			};

			curCSS = function( elem, name, computed ) {
				var width, minWidth, maxWidth, ret,
					style = elem.style;

				computed = computed || getStyles( elem );

				// getPropertyValue is only needed for .css('filter') in IE9, see #12537
				ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

				// Support: Opera 12.1x only
				// Fall back to style even without computed
				// computed is undefined for elems on document fragments
				if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
					ret = jQuery.style( elem, name );
				}

				if ( computed ) {

					// A tribute to the "awesome hack by Dean Edwards"
					// Chrome < 17 and Safari 5.0 uses "computed value"
					// instead of "used value" for margin-right
					// Safari 5.1.7 (at least) returns percentage for a larger set of values,
					// but width seems to be reliably pixels
					// this is against the CSSOM draft spec:
					// http://dev.w3.org/csswg/cssom/#resolved-values
					if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

						// Remember the original values
						width = style.width;
						minWidth = style.minWidth;
						maxWidth = style.maxWidth;

						// Put in the new values to get a computed value out
						style.minWidth = style.maxWidth = style.width = ret;
						ret = computed.width;

						// Revert the changed values
						style.width = width;
						style.minWidth = minWidth;
						style.maxWidth = maxWidth;
					}
				}

				// Support: IE
				// IE returns zIndex value as an integer.
				return ret === undefined ?
					ret :
					ret + "";
			};
		} else if ( documentElement.currentStyle ) {
			getStyles = function( elem ) {
				return elem.currentStyle;
			};

			curCSS = function( elem, name, computed ) {
				var left, rs, rsLeft, ret,
					style = elem.style;

				computed = computed || getStyles( elem );
				ret = computed ? computed[ name ] : undefined;

				// Avoid setting ret to empty string here
				// so we don't default to auto
				if ( ret == null && style && style[ name ] ) {
					ret = style[ name ];
				}

				// From the awesome hack by Dean Edwards
				// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

				// If we're not dealing with a regular pixel number
				// but a number that has a weird ending, we need to convert it to pixels
				// but not position css attributes, as those are
				// proportional to the parent element instead
				// and we can't measure the parent instead because it
				// might trigger a "stacking dolls" problem
				if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

					// Remember the original values
					left = style.left;
					rs = elem.runtimeStyle;
					rsLeft = rs && rs.left;

					// Put in the new values to get a computed value out
					if ( rsLeft ) {
						rs.left = elem.currentStyle.left;
					}
					style.left = name === "fontSize" ? "1em" : ret;
					ret = style.pixelLeft + "px";

					// Revert the changed values
					style.left = left;
					if ( rsLeft ) {
						rs.left = rsLeft;
					}
				}

				// Support: IE
				// IE returns zIndex value as an integer.
				return ret === undefined ?
					ret :
					ret + "" || "auto";
			};
		}




		function addGetHookIf( conditionFn, hookFn ) {

			// Define the hook, we'll check on the first run if it's really needed.
			return {
				get: function() {
					if ( conditionFn() ) {

						// Hook not needed (or it's not possible to use it due
						// to missing dependency), remove it.
						delete this.get;
						return;
					}

					// Hook needed; redefine it so that the support test is not executed again.
					return ( this.get = hookFn ).apply( this, arguments );
				}
			};
		}


		var

			ralpha = /alpha\([^)]*\)/i,
			ropacity = /opacity\s*=\s*([^)]*)/i,

			// swappable if display is none or starts with table except
			// "table", "table-cell", or "table-caption"
			// see here for display values:
			// https://developer.mozilla.org/en-US/docs/CSS/display
			rdisplayswap = /^(none|table(?!-c[ea]).+)/,
			rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

			cssShow = { position: "absolute", visibility: "hidden", display: "block" },
			cssNormalTransform = {
				letterSpacing: "0",
				fontWeight: "400"
			},

			cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
			emptyStyle = document.createElement( "div" ).style;


		// return a css property mapped to a potentially vendor prefixed property
		function vendorPropName( name ) {

			// shortcut for names that are not vendor prefixed
			if ( name in emptyStyle ) {
				return name;
			}

			// check for vendor prefixed names
			var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
				i = cssPrefixes.length;

			while ( i-- ) {
				name = cssPrefixes[ i ] + capName;
				if ( name in emptyStyle ) {
					return name;
				}
			}
		}

		function showHide( elements, show ) {
			var display, elem, hidden,
				values = [],
				index = 0,
				length = elements.length;

			for ( ; index < length; index++ ) {
				elem = elements[ index ];
				if ( !elem.style ) {
					continue;
				}

				values[ index ] = jQuery._data( elem, "olddisplay" );
				display = elem.style.display;
				if ( show ) {

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !values[ index ] && display === "none" ) {
						elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( elem.style.display === "" && isHidden( elem ) ) {
						values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
					}
				} else {
					hidden = isHidden( elem );

					if ( display && display !== "none" || !hidden ) {
						jQuery._data(
							elem,
							"olddisplay",
							hidden ? display : jQuery.css( elem, "display" )
						);
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( index = 0; index < length; index++ ) {
				elem = elements[ index ];
				if ( !elem.style ) {
					continue;
				}
				if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
					elem.style.display = show ? values[ index ] || "" : "none";
				}
			}

			return elements;
		}

		function setPositiveNumber( elem, value, subtract ) {
			var matches = rnumsplit.exec( value );
			return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
				Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
				value;
		}

		function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
			var i = extra === ( isBorderBox ? "border" : "content" ) ?

				// If we already have the right measurement, avoid augmentation
					4 :

				// Otherwise initialize for horizontal or vertical properties
					name === "width" ? 1 : 0,

				val = 0;

			for ( ; i < 4; i += 2 ) {

				// both box models exclude margin, so add it if we want it
				if ( extra === "margin" ) {
					val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
				}

				if ( isBorderBox ) {

					// border-box includes padding, so remove it if we want content
					if ( extra === "content" ) {
						val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
					}

					// at this point, extra isn't border nor margin, so remove border
					if ( extra !== "margin" ) {
						val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
					}
				} else {

					// at this point, extra isn't content, so add padding
					val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

					// at this point, extra isn't content nor padding, so add border
					if ( extra !== "padding" ) {
						val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
					}
				}
			}

			return val;
		}

		function getWidthOrHeight( elem, name, extra ) {

			// Start with offset property, which is equivalent to the border-box value
			var valueIsBorderBox = true,
				val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
				styles = getStyles( elem ),
				isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

			// some non-html elements return undefined for offsetWidth, so check for null/undefined
			// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
			// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
			if ( val <= 0 || val == null ) {

				// Fall back to computed then uncomputed css if necessary
				val = curCSS( elem, name, styles );
				if ( val < 0 || val == null ) {
					val = elem.style[ name ];
				}

				// Computed unit is not pixels. Stop here and return.
				if ( rnumnonpx.test( val ) ) {
					return val;
				}

				// we need the check for style in case a browser which returns unreliable values
				// for getComputedStyle silently falls back to the reliable elem.style
				valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

				// Normalize "", auto, and prepare for extra
				val = parseFloat( val ) || 0;
			}

			// use the active box-sizing model to add/subtract irrelevant styles
			return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
			) + "px";
		}

		jQuery.extend( {

			// Add in style property hooks for overriding the default
			// behavior of getting and setting a style property
			cssHooks: {
				opacity: {
					get: function( elem, computed ) {
						if ( computed ) {

							// We should always get a number back from opacity
							var ret = curCSS( elem, "opacity" );
							return ret === "" ? "1" : ret;
						}
					}
				}
			},

			// Don't automatically add "px" to these possibly-unitless properties
			cssNumber: {
				"animationIterationCount": true,
				"columnCount": true,
				"fillOpacity": true,
				"flexGrow": true,
				"flexShrink": true,
				"fontWeight": true,
				"lineHeight": true,
				"opacity": true,
				"order": true,
				"orphans": true,
				"widows": true,
				"zIndex": true,
				"zoom": true
			},

			// Add in properties whose names you wish to fix before
			// setting or getting the value
			cssProps: {

				// normalize float css property
				"float": support.cssFloat ? "cssFloat" : "styleFloat"
			},

			// Get and set the style property on a DOM Node
			style: function( elem, name, value, extra ) {

				// Don't set styles on text and comment nodes
				if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
					return;
				}

				// Make sure that we're working with the right name
				var ret, type, hooks,
					origName = jQuery.camelCase( name ),
					style = elem.style;

				name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

				// gets hook for the prefixed version
				// followed by the unprefixed version
				hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

				// Check if we're setting a value
				if ( value !== undefined ) {
					type = typeof value;

					// Convert "+=" or "-=" to relative numbers (#7345)
					if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
						value = adjustCSS( elem, name, ret );

						// Fixes bug #9237
						type = "number";
					}

					// Make sure that null and NaN values aren't set. See: #7116
					if ( value == null || value !== value ) {
						return;
					}

					// If a number was passed in, add the unit (except for certain CSS properties)
					if ( type === "number" ) {
						value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
					}

					// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
					// but it would mean to define eight
					// (for every problematic property) identical functions
					if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
						style[ name ] = "inherit";
					}

					// If a hook was provided, use that value, otherwise just set the specified value
					if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

						// Support: IE
						// Swallow errors from 'invalid' CSS values (#5509)
						try {
							style[ name ] = value;
						} catch ( e ) {}
					}

				} else {

					// If a hook was provided get the non-computed value from there
					if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

						return ret;
					}

					// Otherwise just get the value from the style object
					return style[ name ];
				}
			},

			css: function( elem, name, extra, styles ) {
				var num, val, hooks,
					origName = jQuery.camelCase( name );

				// Make sure that we're working with the right name
				name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

				// gets hook for the prefixed version
				// followed by the unprefixed version
				hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

				// If a hook was provided get the computed value from there
				if ( hooks && "get" in hooks ) {
					val = hooks.get( elem, true, extra );
				}

				// Otherwise, if a way to get the computed value exists, use that
				if ( val === undefined ) {
					val = curCSS( elem, name, styles );
				}

				//convert "normal" to computed value
				if ( val === "normal" && name in cssNormalTransform ) {
					val = cssNormalTransform[ name ];
				}

				// Return, converting to number if forced or a qualifier was provided and val looks numeric
				if ( extra === "" || extra ) {
					num = parseFloat( val );
					return extra === true || isFinite( num ) ? num || 0 : val;
				}
				return val;
			}
		} );

		jQuery.each( [ "height", "width" ], function( i, name ) {
			jQuery.cssHooks[ name ] = {
				get: function( elem, computed, extra ) {
					if ( computed ) {

						// certain elements can have dimension info if we invisibly show them
						// however, it must have a current display style that would benefit from this
						return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
					}
				},

				set: function( elem, value, extra ) {
					var styles = extra && getStyles( elem );
					return setPositiveNumber( elem, value, extra ?
						augmentWidthOrHeight(
							elem,
							name,
							extra,
							support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
							styles
						) : 0
					);
				}
			};
		} );

		if ( !support.opacity ) {
			jQuery.cssHooks.opacity = {
				get: function( elem, computed ) {

					// IE uses filters for opacity
					return ropacity.test( ( computed && elem.currentStyle ?
						elem.currentStyle.filter :
						elem.style.filter ) || "" ) ?
						( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
						computed ? "1" : "";
				},

				set: function( elem, value ) {
					var style = elem.style,
						currentStyle = elem.currentStyle,
						opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
						filter = currentStyle && currentStyle.filter || style.filter || "";

					// IE has trouble with opacity if it does not have layout
					// Force it by setting the zoom level
					style.zoom = 1;

					// if setting opacity to 1, and no other filters exist -
					// attempt to remove filter attribute #6652
					// if value === "", then remove inline opacity #12685
					if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

						// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
						// if "filter:" is present at all, clearType is disabled, we want to avoid this
						// style.removeAttribute is IE Only, but so apparently is this code path...
						style.removeAttribute( "filter" );

						// if there is no filter style applied in a css rule
						// or unset inline opacity, we are done
						if ( value === "" || currentStyle && !currentStyle.filter ) {
							return;
						}
					}

					// otherwise, set new filter values
					style.filter = ralpha.test( filter ) ?
						filter.replace( ralpha, opacity ) :
						filter + " " + opacity;
				}
			};
		}

		jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
			function( elem, computed ) {
				if ( computed ) {
					return swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		);

		jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
			function( elem, computed ) {
				if ( computed ) {
					return (
						parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
					) + "px";
				}
			}
		);

		// These hooks are used by animate to expand properties
		jQuery.each( {
			margin: "",
			padding: "",
			border: "Width"
		}, function( prefix, suffix ) {
			jQuery.cssHooks[ prefix + suffix ] = {
				expand: function( value ) {
					var i = 0,
						expanded = {},

						// assumes a single number if not a string
						parts = typeof value === "string" ? value.split( " " ) : [ value ];

					for ( ; i < 4; i++ ) {
						expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
					}

					return expanded;
				}
			};

			if ( !rmargin.test( prefix ) ) {
				jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
			}
		} );

		jQuery.fn.extend( {
			css: function( name, value ) {
				return access( this, function( elem, name, value ) {
					var styles, len,
						map = {},
						i = 0;

					if ( jQuery.isArray( name ) ) {
						styles = getStyles( elem );
						len = name.length;

						for ( ; i < len; i++ ) {
							map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
						}

						return map;
					}

					return value !== undefined ?
						jQuery.style( elem, name, value ) :
						jQuery.css( elem, name );
				}, name, value, arguments.length > 1 );
			},
			show: function() {
				return showHide( this, true );
			},
			hide: function() {
				return showHide( this );
			},
			toggle: function( state ) {
				if ( typeof state === "boolean" ) {
					return state ? this.show() : this.hide();
				}

				return this.each( function() {
					if ( isHidden( this ) ) {
						jQuery( this ).show();
					} else {
						jQuery( this ).hide();
					}
				} );
			}
		} );


		function Tween( elem, options, prop, end, easing ) {
			return new Tween.prototype.init( elem, options, prop, end, easing );
		}
		jQuery.Tween = Tween;

		Tween.prototype = {
			constructor: Tween,
			init: function( elem, options, prop, end, easing, unit ) {
				this.elem = elem;
				this.prop = prop;
				this.easing = easing || jQuery.easing._default;
				this.options = options;
				this.start = this.now = this.cur();
				this.end = end;
				this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
			},
			cur: function() {
				var hooks = Tween.propHooks[ this.prop ];

				return hooks && hooks.get ?
					hooks.get( this ) :
					Tween.propHooks._default.get( this );
			},
			run: function( percent ) {
				var eased,
					hooks = Tween.propHooks[ this.prop ];

				if ( this.options.duration ) {
					this.pos = eased = jQuery.easing[ this.easing ](
						percent, this.options.duration * percent, 0, 1, this.options.duration
					);
				} else {
					this.pos = eased = percent;
				}
				this.now = ( this.end - this.start ) * eased + this.start;

				if ( this.options.step ) {
					this.options.step.call( this.elem, this.now, this );
				}

				if ( hooks && hooks.set ) {
					hooks.set( this );
				} else {
					Tween.propHooks._default.set( this );
				}
				return this;
			}
		};

		Tween.prototype.init.prototype = Tween.prototype;

		Tween.propHooks = {
			_default: {
				get: function( tween ) {
					var result;

					// Use a property on the element directly when it is not a DOM element,
					// or when there is no matching style property that exists.
					if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
						return tween.elem[ tween.prop ];
					}

					// passing an empty string as a 3rd parameter to .css will automatically
					// attempt a parseFloat and fallback to a string if the parse fails
					// so, simple values such as "10px" are parsed to Float.
					// complex values such as "rotate(1rad)" are returned as is.
					result = jQuery.css( tween.elem, tween.prop, "" );

					// Empty strings, null, undefined and "auto" are converted to 0.
					return !result || result === "auto" ? 0 : result;
				},
				set: function( tween ) {

					// use step hook for back compat - use cssHook if its there - use .style if its
					// available and use plain properties where available
					if ( jQuery.fx.step[ tween.prop ] ) {
						jQuery.fx.step[ tween.prop ]( tween );
					} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
						jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
					} else {
						tween.elem[ tween.prop ] = tween.now;
					}
				}
			}
		};

		// Support: IE <=9
		// Panic based approach to setting things on disconnected nodes

		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
			set: function( tween ) {
				if ( tween.elem.nodeType && tween.elem.parentNode ) {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		};

		jQuery.easing = {
			linear: function( p ) {
				return p;
			},
			swing: function( p ) {
				return 0.5 - Math.cos( p * Math.PI ) / 2;
			},
			_default: "swing"
		};

		jQuery.fx = Tween.prototype.init;

		// Back Compat <1.8 extension point
		jQuery.fx.step = {};




		var
			fxNow, timerId,
			rfxtypes = /^(?:toggle|show|hide)$/,
			rrun = /queueHooks$/;

		// Animations created synchronously will run synchronously
		function createFxNow() {
			window.setTimeout( function() {
				fxNow = undefined;
			} );
			return ( fxNow = jQuery.now() );
		}

		// Generate parameters to create a standard animation
		function genFx( type, includeWidth ) {
			var which,
				attrs = { height: type },
				i = 0;

			// if we include width, step value is 1 to do all cssExpand values,
			// if we don't include width, step value is 2 to skip over Left and Right
			includeWidth = includeWidth ? 1 : 0;
			for ( ; i < 4 ; i += 2 - includeWidth ) {
				which = cssExpand[ i ];
				attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
			}

			if ( includeWidth ) {
				attrs.opacity = attrs.width = type;
			}

			return attrs;
		}

		function createTween( value, prop, animation ) {
			var tween,
				collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
				index = 0,
				length = collection.length;
			for ( ; index < length; index++ ) {
				if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

					// we're done with this property
					return tween;
				}
			}
		}

		function defaultPrefilter( elem, props, opts ) {
			/* jshint validthis: true */
			var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
				anim = this,
				orig = {},
				style = elem.style,
				hidden = elem.nodeType && isHidden( elem ),
				dataShow = jQuery._data( elem, "fxshow" );

			// handle queue: false promises
			if ( !opts.queue ) {
				hooks = jQuery._queueHooks( elem, "fx" );
				if ( hooks.unqueued == null ) {
					hooks.unqueued = 0;
					oldfire = hooks.empty.fire;
					hooks.empty.fire = function() {
						if ( !hooks.unqueued ) {
							oldfire();
						}
					};
				}
				hooks.unqueued++;

				anim.always( function() {

					// doing this makes sure that the complete handler will be called
					// before this completes
					anim.always( function() {
						hooks.unqueued--;
						if ( !jQuery.queue( elem, "fx" ).length ) {
							hooks.empty.fire();
						}
					} );
				} );
			}

			// height/width overflow pass
			if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

				// Make sure that nothing sneaks out
				// Record all 3 overflow attributes because IE does not
				// change the overflow attribute when overflowX and
				// overflowY are set to the same value
				opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

				// Set display property to inline-block for height/width
				// animations on inline elements that are having width/height animated
				display = jQuery.css( elem, "display" );

				// Test default display if display is currently "none"
				checkDisplay = display === "none" ?
					jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

				if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

					// inline-level elements accept inline-block;
					// block-level elements need to be inline with layout
					if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
						style.display = "inline-block";
					} else {
						style.zoom = 1;
					}
				}
			}

			if ( opts.overflow ) {
				style.overflow = "hidden";
				if ( !support.shrinkWrapBlocks() ) {
					anim.always( function() {
						style.overflow = opts.overflow[ 0 ];
						style.overflowX = opts.overflow[ 1 ];
						style.overflowY = opts.overflow[ 2 ];
					} );
				}
			}

			// show/hide pass
			for ( prop in props ) {
				value = props[ prop ];
				if ( rfxtypes.exec( value ) ) {
					delete props[ prop ];
					toggle = toggle || value === "toggle";
					if ( value === ( hidden ? "hide" : "show" ) ) {

						// If there is dataShow left over from a stopped hide or show
						// and we are going to proceed with show, we should pretend to be hidden
						if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
							hidden = true;
						} else {
							continue;
						}
					}
					orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

					// Any non-fx value stops us from restoring the original display value
				} else {
					display = undefined;
				}
			}

			if ( !jQuery.isEmptyObject( orig ) ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = jQuery._data( elem, "fxshow", {} );
				}

				// store state if its toggle - enables .stop().toggle() to "reverse"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
				if ( hidden ) {
					jQuery( elem ).show();
				} else {
					anim.done( function() {
						jQuery( elem ).hide();
					} );
				}
				anim.done( function() {
					var prop;
					jQuery._removeData( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
				for ( prop in orig ) {
					tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

					if ( !( prop in dataShow ) ) {
						dataShow[ prop ] = tween.start;
						if ( hidden ) {
							tween.end = tween.start;
							tween.start = prop === "width" || prop === "height" ? 1 : 0;
						}
					}
				}

				// If this is a noop like .hide().hide(), restore an overwritten display value
			} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
				style.display = display;
			}
		}

		function propFilter( props, specialEasing ) {
			var index, name, easing, value, hooks;

			// camelCase, specialEasing and expand cssHook pass
			for ( index in props ) {
				name = jQuery.camelCase( index );
				easing = specialEasing[ name ];
				value = props[ index ];
				if ( jQuery.isArray( value ) ) {
					easing = value[ 1 ];
					value = props[ index ] = value[ 0 ];
				}

				if ( index !== name ) {
					props[ name ] = value;
					delete props[ index ];
				}

				hooks = jQuery.cssHooks[ name ];
				if ( hooks && "expand" in hooks ) {
					value = hooks.expand( value );
					delete props[ name ];

					// not quite $.extend, this wont overwrite keys already present.
					// also - reusing 'index' from above because we have the correct "name"
					for ( index in value ) {
						if ( !( index in props ) ) {
							props[ index ] = value[ index ];
							specialEasing[ index ] = easing;
						}
					}
				} else {
					specialEasing[ name ] = easing;
				}
			}
		}

		function Animation( elem, properties, options ) {
			var result,
				stopped,
				index = 0,
				length = Animation.prefilters.length,
				deferred = jQuery.Deferred().always( function() {

					// don't match elem in the :animated selector
					delete tick.elem;
				} ),
				tick = function() {
					if ( stopped ) {
						return false;
					}
					var currentTime = fxNow || createFxNow(),
						remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

						// Support: Android 2.3
						// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
						temp = remaining / animation.duration || 0,
						percent = 1 - temp,
						index = 0,
						length = animation.tweens.length;

					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( percent );
					}

					deferred.notifyWith( elem, [ animation, percent, remaining ] );

					if ( percent < 1 && length ) {
						return remaining;
					} else {
						deferred.resolveWith( elem, [ animation ] );
						return false;
					}
				},
				animation = deferred.promise( {
					elem: elem,
					props: jQuery.extend( {}, properties ),
					opts: jQuery.extend( true, {
						specialEasing: {},
						easing: jQuery.easing._default
					}, options ),
					originalProperties: properties,
					originalOptions: options,
					startTime: fxNow || createFxNow(),
					duration: options.duration,
					tweens: [],
					createTween: function( prop, end ) {
						var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
						animation.tweens.push( tween );
						return tween;
					},
					stop: function( gotoEnd ) {
						var index = 0,

							// if we are going to the end, we want to run all the tweens
							// otherwise we skip this part
							length = gotoEnd ? animation.tweens.length : 0;
						if ( stopped ) {
							return this;
						}
						stopped = true;
						for ( ; index < length ; index++ ) {
							animation.tweens[ index ].run( 1 );
						}

						// resolve when we played the last frame
						// otherwise, reject
						if ( gotoEnd ) {
							deferred.notifyWith( elem, [ animation, 1, 0 ] );
							deferred.resolveWith( elem, [ animation, gotoEnd ] );
						} else {
							deferred.rejectWith( elem, [ animation, gotoEnd ] );
						}
						return this;
					}
				} ),
				props = animation.props;

			propFilter( props, animation.opts.specialEasing );

			for ( ; index < length ; index++ ) {
				result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
				if ( result ) {
					if ( jQuery.isFunction( result.stop ) ) {
						jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
					}
					return result;
				}
			}

			jQuery.map( props, createTween, animation );

			if ( jQuery.isFunction( animation.opts.start ) ) {
				animation.opts.start.call( elem, animation );
			}

			jQuery.fx.timer(
				jQuery.extend( tick, {
					elem: elem,
					anim: animation,
					queue: animation.opts.queue
				} )
			);

			// attach callbacks from options
			return animation.progress( animation.opts.progress )
				.done( animation.opts.done, animation.opts.complete )
				.fail( animation.opts.fail )
				.always( animation.opts.always );
		}

		jQuery.Animation = jQuery.extend( Animation, {

			tweeners: {
				"*": [ function( prop, value ) {
					var tween = this.createTween( prop, value );
					adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
					return tween;
				} ]
			},

			tweener: function( props, callback ) {
				if ( jQuery.isFunction( props ) ) {
					callback = props;
					props = [ "*" ];
				} else {
					props = props.match( rnotwhite );
				}

				var prop,
					index = 0,
					length = props.length;

				for ( ; index < length ; index++ ) {
					prop = props[ index ];
					Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
					Animation.tweeners[ prop ].unshift( callback );
				}
			},

			prefilters: [ defaultPrefilter ],

			prefilter: function( callback, prepend ) {
				if ( prepend ) {
					Animation.prefilters.unshift( callback );
				} else {
					Animation.prefilters.push( callback );
				}
			}
		} );

		jQuery.speed = function( speed, easing, fn ) {
			var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
				complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
			};

			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
				opt.duration in jQuery.fx.speeds ?
					jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

			// normalize opt.queue - true/undefined/null -> "fx"
			if ( opt.queue == null || opt.queue === true ) {
				opt.queue = "fx";
			}

			// Queueing
			opt.old = opt.complete;

			opt.complete = function() {
				if ( jQuery.isFunction( opt.old ) ) {
					opt.old.call( this );
				}

				if ( opt.queue ) {
					jQuery.dequeue( this, opt.queue );
				}
			};

			return opt;
		};

		jQuery.fn.extend( {
			fadeTo: function( speed, to, easing, callback ) {

				// show any hidden elements after setting opacity to 0
				return this.filter( isHidden ).css( "opacity", 0 ).show()

				// animate to the value specified
					.end().animate( { opacity: to }, speed, easing, callback );
			},
			animate: function( prop, speed, easing, callback ) {
				var empty = jQuery.isEmptyObject( prop ),
					optall = jQuery.speed( speed, easing, callback ),
					doAnimation = function() {

						// Operate on a copy of prop so per-property easing won't be lost
						var anim = Animation( this, jQuery.extend( {}, prop ), optall );

						// Empty animations, or finishing resolves immediately
						if ( empty || jQuery._data( this, "finish" ) ) {
							anim.stop( true );
						}
					};
				doAnimation.finish = doAnimation;

				return empty || optall.queue === false ?
					this.each( doAnimation ) :
					this.queue( optall.queue, doAnimation );
			},
			stop: function( type, clearQueue, gotoEnd ) {
				var stopQueue = function( hooks ) {
					var stop = hooks.stop;
					delete hooks.stop;
					stop( gotoEnd );
				};

				if ( typeof type !== "string" ) {
					gotoEnd = clearQueue;
					clearQueue = type;
					type = undefined;
				}
				if ( clearQueue && type !== false ) {
					this.queue( type || "fx", [] );
				}

				return this.each( function() {
					var dequeue = true,
						index = type != null && type + "queueHooks",
						timers = jQuery.timers,
						data = jQuery._data( this );

					if ( index ) {
						if ( data[ index ] && data[ index ].stop ) {
							stopQueue( data[ index ] );
						}
					} else {
						for ( index in data ) {
							if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
								stopQueue( data[ index ] );
							}
						}
					}

					for ( index = timers.length; index--; ) {
						if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

							timers[ index ].anim.stop( gotoEnd );
							dequeue = false;
							timers.splice( index, 1 );
						}
					}

					// start the next in the queue if the last step wasn't forced
					// timers currently will call their complete callbacks, which will dequeue
					// but only if they were gotoEnd
					if ( dequeue || !gotoEnd ) {
						jQuery.dequeue( this, type );
					}
				} );
			},
			finish: function( type ) {
				if ( type !== false ) {
					type = type || "fx";
				}
				return this.each( function() {
					var index,
						data = jQuery._data( this ),
						queue = data[ type + "queue" ],
						hooks = data[ type + "queueHooks" ],
						timers = jQuery.timers,
						length = queue ? queue.length : 0;

					// enable finishing flag on private data
					data.finish = true;

					// empty the queue first
					jQuery.queue( this, type, [] );

					if ( hooks && hooks.stop ) {
						hooks.stop.call( this, true );
					}

					// look for any active animations, and finish them
					for ( index = timers.length; index--; ) {
						if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
							timers[ index ].anim.stop( true );
							timers.splice( index, 1 );
						}
					}

					// look for any animations in the old queue and finish them
					for ( index = 0; index < length; index++ ) {
						if ( queue[ index ] && queue[ index ].finish ) {
							queue[ index ].finish.call( this );
						}
					}

					// turn off finishing flag
					delete data.finish;
				} );
			}
		} );

		jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
			var cssFn = jQuery.fn[ name ];
			jQuery.fn[ name ] = function( speed, easing, callback ) {
				return speed == null || typeof speed === "boolean" ?
					cssFn.apply( this, arguments ) :
					this.animate( genFx( name, true ), speed, easing, callback );
			};
		} );

		// Generate shortcuts for custom animations
		jQuery.each( {
			slideDown: genFx( "show" ),
			slideUp: genFx( "hide" ),
			slideToggle: genFx( "toggle" ),
			fadeIn: { opacity: "show" },
			fadeOut: { opacity: "hide" },
			fadeToggle: { opacity: "toggle" }
		}, function( name, props ) {
			jQuery.fn[ name ] = function( speed, easing, callback ) {
				return this.animate( props, speed, easing, callback );
			};
		} );

		jQuery.timers = [];
		jQuery.fx.tick = function() {
			var timer,
				timers = jQuery.timers,
				i = 0;

			fxNow = jQuery.now();

			for ( ; i < timers.length; i++ ) {
				timer = timers[ i ];

				// Checks the timer has not already been removed
				if ( !timer() && timers[ i ] === timer ) {
					timers.splice( i--, 1 );
				}
			}

			if ( !timers.length ) {
				jQuery.fx.stop();
			}
			fxNow = undefined;
		};

		jQuery.fx.timer = function( timer ) {
			jQuery.timers.push( timer );
			if ( timer() ) {
				jQuery.fx.start();
			} else {
				jQuery.timers.pop();
			}
		};

		jQuery.fx.interval = 13;

		jQuery.fx.start = function() {
			if ( !timerId ) {
				timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
			}
		};

		jQuery.fx.stop = function() {
			window.clearInterval( timerId );
			timerId = null;
		};

		jQuery.fx.speeds = {
			slow: 600,
			fast: 200,

			// Default speed
			_default: 400
		};


		// Based off of the plugin by Clint Helfers, with permission.
		// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
		jQuery.fn.delay = function( time, type ) {
			time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
			type = type || "fx";

			return this.queue( type, function( next, hooks ) {
				var timeout = window.setTimeout( next, time );
				hooks.stop = function() {
					window.clearTimeout( timeout );
				};
			} );
		};


		( function() {
			var a,
				input = document.createElement( "input" ),
				div = document.createElement( "div" ),
				select = document.createElement( "select" ),
				opt = select.appendChild( document.createElement( "option" ) );

			// Setup
			div = document.createElement( "div" );
			div.setAttribute( "className", "t" );
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
			a = div.getElementsByTagName( "a" )[ 0 ];

			// Support: Windows Web Apps (WWA)
			// `type` must use .setAttribute for WWA (#14901)
			input.setAttribute( "type", "checkbox" );
			div.appendChild( input );

			a = div.getElementsByTagName( "a" )[ 0 ];

			// First batch of tests.
			a.style.cssText = "top:1px";

			// Test setAttribute on camelCase class.
			// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
			support.getSetAttribute = div.className !== "t";

			// Get the style information from getAttribute
			// (IE uses .cssText instead)
			support.style = /top/.test( a.getAttribute( "style" ) );

			// Make sure that URLs aren't manipulated
			// (IE normalizes it by default)
			support.hrefNormalized = a.getAttribute( "href" ) === "/a";

			// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
			support.checkOn = !!input.value;

			// Make sure that a selected-by-default option has a working selected property.
			// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
			support.optSelected = opt.selected;

			// Tests for enctype support on a form (#6743)
			support.enctype = !!document.createElement( "form" ).enctype;

			// Make sure that the options inside disabled selects aren't marked as disabled
			// (WebKit marks them as disabled)
			select.disabled = true;
			support.optDisabled = !opt.disabled;

			// Support: IE8 only
			// Check if we can trust getAttribute("value")
			input = document.createElement( "input" );
			input.setAttribute( "value", "" );
			support.input = input.getAttribute( "value" ) === "";

			// Check if an input maintains its value after becoming a radio
			input.value = "t";
			input.setAttribute( "type", "radio" );
			support.radioValue = input.value === "t";
		} )();


		var rreturn = /\r/g,
			rspaces = /[\x20\t\r\n\f]+/g;

		jQuery.fn.extend( {
			val: function( value ) {
				var hooks, ret, isFunction,
					elem = this[ 0 ];

				if ( !arguments.length ) {
					if ( elem ) {
						hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

						if (
							hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
						) {
							return ret;
						}

						ret = elem.value;

						return typeof ret === "string" ?

						// handle most common string cases
							ret.replace( rreturn, "" ) :

						// handle cases where value is null/undef or number
							ret == null ? "" : ret;
					}

					return;
				}

				isFunction = jQuery.isFunction( value );

				return this.each( function( i ) {
					var val;

					if ( this.nodeType !== 1 ) {
						return;
					}

					if ( isFunction ) {
						val = value.call( this, i, jQuery( this ).val() );
					} else {
						val = value;
					}

					// Treat null/undefined as ""; convert numbers to string
					if ( val == null ) {
						val = "";
					} else if ( typeof val === "number" ) {
						val += "";
					} else if ( jQuery.isArray( val ) ) {
						val = jQuery.map( val, function( value ) {
							return value == null ? "" : value + "";
						} );
					}

					hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

					// If set returns undefined, fall back to normal setting
					if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
						this.value = val;
					}
				} );
			}
		} );

		jQuery.extend( {
			valHooks: {
				option: {
					get: function( elem ) {
						var val = jQuery.find.attr( elem, "value" );
						return val != null ?
							val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
							jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
					}
				},
				select: {
					get: function( elem ) {
						var value, option,
							options = elem.options,
							index = elem.selectedIndex,
							one = elem.type === "select-one" || index < 0,
							values = one ? null : [],
							max = one ? index + 1 : options.length,
							i = index < 0 ?
								max :
								one ? index : 0;

						// Loop through all the selected options
						for ( ; i < max; i++ ) {
							option = options[ i ];

							// oldIE doesn't update selected after form reset (#2551)
							if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

								// Get the specific value for the option
								value = jQuery( option ).val();

								// We don't need an array for one selects
								if ( one ) {
									return value;
								}

								// Multi-Selects return an array
								values.push( value );
							}
						}

						return values;
					},

					set: function( elem, value ) {
						var optionSet, option,
							options = elem.options,
							values = jQuery.makeArray( value ),
							i = options.length;

						while ( i-- ) {
							option = options[ i ];

							if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

								// Support: IE6
								// When new option element is added to select box we need to
								// force reflow of newly added node in order to workaround delay
								// of initialization properties
								try {
									option.selected = optionSet = true;

								} catch ( _ ) {

									// Will be executed only in IE6
									option.scrollHeight;
								}

							} else {
								option.selected = false;
							}
						}

						// Force browsers to behave consistently when non-matching value is set
						if ( !optionSet ) {
							elem.selectedIndex = -1;
						}

						return options;
					}
				}
			}
		} );

		// Radios and checkboxes getter/setter
		jQuery.each( [ "radio", "checkbox" ], function() {
			jQuery.valHooks[ this ] = {
				set: function( elem, value ) {
					if ( jQuery.isArray( value ) ) {
						return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
					}
				}
			};
			if ( !support.checkOn ) {
				jQuery.valHooks[ this ].get = function( elem ) {
					return elem.getAttribute( "value" ) === null ? "on" : elem.value;
				};
			}
		} );




		var nodeHook, boolHook,
			attrHandle = jQuery.expr.attrHandle,
			ruseDefault = /^(?:checked|selected)$/i,
			getSetAttribute = support.getSetAttribute,
			getSetInput = support.input;

		jQuery.fn.extend( {
			attr: function( name, value ) {
				return access( this, jQuery.attr, name, value, arguments.length > 1 );
			},

			removeAttr: function( name ) {
				return this.each( function() {
					jQuery.removeAttr( this, name );
				} );
			}
		} );

		jQuery.extend( {
			attr: function( elem, name, value ) {
				var ret, hooks,
					nType = elem.nodeType;

				// Don't get/set attributes on text, comment and attribute nodes
				if ( nType === 3 || nType === 8 || nType === 2 ) {
					return;
				}

				// Fallback to prop when attributes are not supported
				if ( typeof elem.getAttribute === "undefined" ) {
					return jQuery.prop( elem, name, value );
				}

				// All attributes are lowercase
				// Grab necessary hook if one is defined
				if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
					name = name.toLowerCase();
					hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
				}

				if ( value !== undefined ) {
					if ( value === null ) {
						jQuery.removeAttr( elem, name );
						return;
					}

					if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
						return ret;
					}

					elem.setAttribute( name, value + "" );
					return value;
				}

				if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
					return ret;
				}

				ret = jQuery.find.attr( elem, name );

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			},

			attrHooks: {
				type: {
					set: function( elem, value ) {
						if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

							// Setting the type on a radio button after the value resets the value in IE8-9
							// Reset value to default in case type is set after value during creation
							var val = elem.value;
							elem.setAttribute( "type", value );
							if ( val ) {
								elem.value = val;
							}
							return value;
						}
					}
				}
			},

			removeAttr: function( elem, value ) {
				var name, propName,
					i = 0,
					attrNames = value && value.match( rnotwhite );

				if ( attrNames && elem.nodeType === 1 ) {
					while ( ( name = attrNames[ i++ ] ) ) {
						propName = jQuery.propFix[ name ] || name;

						// Boolean attributes get special treatment (#10870)
						if ( jQuery.expr.match.bool.test( name ) ) {

							// Set corresponding property to false
							if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
								elem[ propName ] = false;

								// Support: IE<9
								// Also clear defaultChecked/defaultSelected (if appropriate)
							} else {
								elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
							}

							// See #9699 for explanation of this approach (setting first, then removal)
						} else {
							jQuery.attr( elem, name, "" );
						}

						elem.removeAttribute( getSetAttribute ? name : propName );
					}
				}
			}
		} );

		// Hooks for boolean attributes
		boolHook = {
			set: function( elem, value, name ) {
				if ( value === false ) {

					// Remove boolean attributes when set to false
					jQuery.removeAttr( elem, name );
				} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

					// IE<8 needs the *property* name
					elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

				} else {

					// Support: IE<9
					// Use defaultChecked and defaultSelected for oldIE
					elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
				}
				return name;
			}
		};

		jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
			var getter = attrHandle[ name ] || jQuery.find.attr;

			if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
				attrHandle[ name ] = function( elem, name, isXML ) {
					var ret, handle;
					if ( !isXML ) {

						// Avoid an infinite loop by temporarily removing this function from the getter
						handle = attrHandle[ name ];
						attrHandle[ name ] = ret;
						ret = getter( elem, name, isXML ) != null ?
							name.toLowerCase() :
							null;
						attrHandle[ name ] = handle;
					}
					return ret;
				};
			} else {
				attrHandle[ name ] = function( elem, name, isXML ) {
					if ( !isXML ) {
						return elem[ jQuery.camelCase( "default-" + name ) ] ?
							name.toLowerCase() :
							null;
					}
				};
			}
		} );

		// fix oldIE attroperties
		if ( !getSetInput || !getSetAttribute ) {
			jQuery.attrHooks.value = {
				set: function( elem, value, name ) {
					if ( jQuery.nodeName( elem, "input" ) ) {

						// Does not return so that setAttribute is also used
						elem.defaultValue = value;
					} else {

						// Use nodeHook if defined (#1954); otherwise setAttribute is fine
						return nodeHook && nodeHook.set( elem, value, name );
					}
				}
			};
		}

		// IE6/7 do not support getting/setting some attributes with get/setAttribute
		if ( !getSetAttribute ) {

			// Use this for any attribute in IE6/7
			// This fixes almost every IE6/7 issue
			nodeHook = {
				set: function( elem, value, name ) {

					// Set the existing or create a new attribute node
					var ret = elem.getAttributeNode( name );
					if ( !ret ) {
						elem.setAttributeNode(
							( ret = elem.ownerDocument.createAttribute( name ) )
						);
					}

					ret.value = value += "";

					// Break association with cloned elements by also using setAttribute (#9646)
					if ( name === "value" || value === elem.getAttribute( name ) ) {
						return value;
					}
				}
			};

			// Some attributes are constructed with empty-string values when not defined
			attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

			// Fixing value retrieval on a button requires this module
			jQuery.valHooks.button = {
				get: function( elem, name ) {
					var ret = elem.getAttributeNode( name );
					if ( ret && ret.specified ) {
						return ret.value;
					}
				},
				set: nodeHook.set
			};

			// Set contenteditable to false on removals(#10429)
			// Setting to empty string throws an error as an invalid value
			jQuery.attrHooks.contenteditable = {
				set: function( elem, value, name ) {
					nodeHook.set( elem, value === "" ? false : value, name );
				}
			};

			// Set width and height to auto instead of 0 on empty string( Bug #8150 )
			// This is for removals
			jQuery.each( [ "width", "height" ], function( i, name ) {
				jQuery.attrHooks[ name ] = {
					set: function( elem, value ) {
						if ( value === "" ) {
							elem.setAttribute( name, "auto" );
							return value;
						}
					}
				};
			} );
		}

		if ( !support.style ) {
			jQuery.attrHooks.style = {
				get: function( elem ) {

					// Return undefined in the case of empty string
					// Note: IE uppercases css property names, but if we were to .toLowerCase()
					// .cssText, that would destroy case sensitivity in URL's, like in "background"
					return elem.style.cssText || undefined;
				},
				set: function( elem, value ) {
					return ( elem.style.cssText = value + "" );
				}
			};
		}




		var rfocusable = /^(?:input|select|textarea|button|object)$/i,
			rclickable = /^(?:a|area)$/i;

		jQuery.fn.extend( {
			prop: function( name, value ) {
				return access( this, jQuery.prop, name, value, arguments.length > 1 );
			},

			removeProp: function( name ) {
				name = jQuery.propFix[ name ] || name;
				return this.each( function() {

					// try/catch handles cases where IE balks (such as removing a property on window)
					try {
						this[ name ] = undefined;
						delete this[ name ];
					} catch ( e ) {}
				} );
			}
		} );

		jQuery.extend( {
			prop: function( elem, name, value ) {
				var ret, hooks,
					nType = elem.nodeType;

				// Don't get/set properties on text, comment and attribute nodes
				if ( nType === 3 || nType === 8 || nType === 2 ) {
					return;
				}

				if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

					// Fix name and attach hooks
					name = jQuery.propFix[ name ] || name;
					hooks = jQuery.propHooks[ name ];
				}

				if ( value !== undefined ) {
					if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
						return ret;
					}

					return ( elem[ name ] = value );
				}

				if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
					return ret;
				}

				return elem[ name ];
			},

			propHooks: {
				tabIndex: {
					get: function( elem ) {

						// elem.tabIndex doesn't always return the
						// correct value when it hasn't been explicitly set
						// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
						// Use proper attribute retrieval(#12072)
						var tabindex = jQuery.find.attr( elem, "tabindex" );

						return tabindex ?
							parseInt( tabindex, 10 ) :
							rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
					}
				}
			},

			propFix: {
				"for": "htmlFor",
				"class": "className"
			}
		} );

		// Some attributes require a special call on IE
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if ( !support.hrefNormalized ) {

			// href/src property should get the full normalized URL (#10299/#12915)
			jQuery.each( [ "href", "src" ], function( i, name ) {
				jQuery.propHooks[ name ] = {
					get: function( elem ) {
						return elem.getAttribute( name, 4 );
					}
				};
			} );
		}

		// Support: Safari, IE9+
		// Accessing the selectedIndex property
		// forces the browser to respect setting selected
		// on the option
		// The getter ensures a default option is selected
		// when in an optgroup
		if ( !support.optSelected ) {
			jQuery.propHooks.selected = {
				get: function( elem ) {
					var parent = elem.parentNode;

					if ( parent ) {
						parent.selectedIndex;

						// Make sure that it also works with optgroups, see #5701
						if ( parent.parentNode ) {
							parent.parentNode.selectedIndex;
						}
					}
					return null;
				},
				set: function( elem ) {
					var parent = elem.parentNode;
					if ( parent ) {
						parent.selectedIndex;

						if ( parent.parentNode ) {
							parent.parentNode.selectedIndex;
						}
					}
				}
			};
		}

		jQuery.each( [
			"tabIndex",
			"readOnly",
			"maxLength",
			"cellSpacing",
			"cellPadding",
			"rowSpan",
			"colSpan",
			"useMap",
			"frameBorder",
			"contentEditable"
		], function() {
			jQuery.propFix[ this.toLowerCase() ] = this;
		} );

		// IE6/7 call enctype encoding
		if ( !support.enctype ) {
			jQuery.propFix.enctype = "encoding";
		}




		var rclass = /[\t\r\n\f]/g;

		function getClass( elem ) {
			return jQuery.attr( elem, "class" ) || "";
		}

		jQuery.fn.extend( {
			addClass: function( value ) {
				var classes, elem, cur, curValue, clazz, j, finalValue,
					i = 0;

				if ( jQuery.isFunction( value ) ) {
					return this.each( function( j ) {
						jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
					} );
				}

				if ( typeof value === "string" && value ) {
					classes = value.match( rnotwhite ) || [];

					while ( ( elem = this[ i++ ] ) ) {
						curValue = getClass( elem );
						cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

						if ( cur ) {
							j = 0;
							while ( ( clazz = classes[ j++ ] ) ) {
								if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
									cur += clazz + " ";
								}
							}

							// only assign if different to avoid unneeded rendering.
							finalValue = jQuery.trim( cur );
							if ( curValue !== finalValue ) {
								jQuery.attr( elem, "class", finalValue );
							}
						}
					}
				}

				return this;
			},

			removeClass: function( value ) {
				var classes, elem, cur, curValue, clazz, j, finalValue,
					i = 0;

				if ( jQuery.isFunction( value ) ) {
					return this.each( function( j ) {
						jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
					} );
				}

				if ( !arguments.length ) {
					return this.attr( "class", "" );
				}

				if ( typeof value === "string" && value ) {
					classes = value.match( rnotwhite ) || [];

					while ( ( elem = this[ i++ ] ) ) {
						curValue = getClass( elem );

						// This expression is here for better compressibility (see addClass)
						cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

						if ( cur ) {
							j = 0;
							while ( ( clazz = classes[ j++ ] ) ) {

								// Remove *all* instances
								while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
									cur = cur.replace( " " + clazz + " ", " " );
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = jQuery.trim( cur );
							if ( curValue !== finalValue ) {
								jQuery.attr( elem, "class", finalValue );
							}
						}
					}
				}

				return this;
			},

			toggleClass: function( value, stateVal ) {
				var type = typeof value;

				if ( typeof stateVal === "boolean" && type === "string" ) {
					return stateVal ? this.addClass( value ) : this.removeClass( value );
				}

				if ( jQuery.isFunction( value ) ) {
					return this.each( function( i ) {
						jQuery( this ).toggleClass(
							value.call( this, i, getClass( this ), stateVal ),
							stateVal
						);
					} );
				}

				return this.each( function() {
					var className, i, self, classNames;

					if ( type === "string" ) {

						// Toggle individual class names
						i = 0;
						self = jQuery( this );
						classNames = value.match( rnotwhite ) || [];

						while ( ( className = classNames[ i++ ] ) ) {

							// Check each className given, space separated list
							if ( self.hasClass( className ) ) {
								self.removeClass( className );
							} else {
								self.addClass( className );
							}
						}

						// Toggle whole class name
					} else if ( value === undefined || type === "boolean" ) {
						className = getClass( this );
						if ( className ) {

							// store className if set
							jQuery._data( this, "__className__", className );
						}

						// If the element has a class name or if we're passed "false",
						// then remove the whole classname (if there was one, the above saved it).
						// Otherwise bring back whatever was previously saved (if anything),
						// falling back to the empty string if nothing was stored.
						jQuery.attr( this, "class",
							className || value === false ?
								"" :
								jQuery._data( this, "__className__" ) || ""
						);
					}
				} );
			},

			hasClass: function( selector ) {
				var className, elem,
					i = 0;

				className = " " + selector + " ";
				while ( ( elem = this[ i++ ] ) ) {
					if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
					) {
						return true;
					}
				}

				return false;
			}
		} );




		// Return jQuery for attributes-only inclusion


		jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

			// Handle event binding
			jQuery.fn[ name ] = function( data, fn ) {
				return arguments.length > 0 ?
					this.on( name, null, data, fn ) :
					this.trigger( name );
			};
		} );

		jQuery.fn.extend( {
			hover: function( fnOver, fnOut ) {
				return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
			}
		} );


		var location = window.location;

		var nonce = jQuery.now();

		var rquery = ( /\?/ );



		var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

		jQuery.parseJSON = function( data ) {

			// Attempt to parse using the native JSON parser first
			if ( window.JSON && window.JSON.parse ) {

				// Support: Android 2.3
				// Workaround failure to string-cast null input
				return window.JSON.parse( data + "" );
			}

			var requireNonComma,
				depth = null,
				str = jQuery.trim( data + "" );

			// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
			// after removing valid tokens
			return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

				// Force termination if we see a misplaced comma
				if ( requireNonComma && comma ) {
					depth = 0;
				}

				// Perform no more replacements after returning to outermost depth
				if ( depth === 0 ) {
					return token;
				}

				// Commas must not follow "[", "{", or ","
				requireNonComma = open || comma;

				// Determine new depth
				// array/object open ("[" or "{"): depth += true - false (increment)
				// array/object close ("]" or "}"): depth += false - true (decrement)
				// other cases ("," or primitive): depth += true - true (numeric cast)
				depth += !close - !open;

				// Remove this token
				return "";
			} ) ) ?
				( Function( "return " + str ) )() :
				jQuery.error( "Invalid JSON: " + data );
		};


		// Cross-browser xml parsing
		jQuery.parseXML = function( data ) {
			var xml, tmp;
			if ( !data || typeof data !== "string" ) {
				return null;
			}
			try {
				if ( window.DOMParser ) { // Standard
					tmp = new window.DOMParser();
					xml = tmp.parseFromString( data, "text/xml" );
				} else { // IE
					xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
					xml.async = "false";
					xml.loadXML( data );
				}
			} catch ( e ) {
				xml = undefined;
			}
			if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
				jQuery.error( "Invalid XML: " + data );
			}
			return xml;
		};


		var
			rhash = /#.*$/,
			rts = /([?&])_=[^&]*/,

			// IE leaves an \r character at EOL
			rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

			// #7653, #8125, #8152: local protocol detection
			rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
			rnoContent = /^(?:GET|HEAD)$/,
			rprotocol = /^\/\//,
			rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

			/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
			prefilters = {},

			/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
			transports = {},

			// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
			allTypes = "*/".concat( "*" ),

			// Document location
			ajaxLocation = location.href,

			// Segment location into parts
			ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
		function addToPrefiltersOrTransports( structure ) {

			// dataTypeExpression is optional and defaults to "*"
			return function( dataTypeExpression, func ) {

				if ( typeof dataTypeExpression !== "string" ) {
					func = dataTypeExpression;
					dataTypeExpression = "*";
				}

				var dataType,
					i = 0,
					dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

				if ( jQuery.isFunction( func ) ) {

					// For each dataType in the dataTypeExpression
					while ( ( dataType = dataTypes[ i++ ] ) ) {

						// Prepend if requested
						if ( dataType.charAt( 0 ) === "+" ) {
							dataType = dataType.slice( 1 ) || "*";
							( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

							// Otherwise append
						} else {
							( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
						}
					}
				}
			};
		}

		// Base inspection function for prefilters and transports
		function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

			var inspected = {},
				seekingTransport = ( structure === transports );

			function inspect( dataType ) {
				var selected;
				inspected[ dataType ] = true;
				jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
					var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
					if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

						options.dataTypes.unshift( dataTypeOrTransport );
						inspect( dataTypeOrTransport );
						return false;
					} else if ( seekingTransport ) {
						return !( selected = dataTypeOrTransport );
					}
				} );
				return selected;
			}

			return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
		}

		// A special extend for ajax options
		// that takes "flat" options (not to be deep extended)
		// Fixes #9887
		function ajaxExtend( target, src ) {
			var deep, key,
				flatOptions = jQuery.ajaxSettings.flatOptions || {};

			for ( key in src ) {
				if ( src[ key ] !== undefined ) {
					( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
				}
			}
			if ( deep ) {
				jQuery.extend( true, target, deep );
			}

			return target;
		}

		/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
		function ajaxHandleResponses( s, jqXHR, responses ) {
			var firstDataType, ct, finalDataType, type,
				contents = s.contents,
				dataTypes = s.dataTypes;

			// Remove auto dataType and get content-type in the process
			while ( dataTypes[ 0 ] === "*" ) {
				dataTypes.shift();
				if ( ct === undefined ) {
					ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
				}
			}

			// Check if we're dealing with a known content-type
			if ( ct ) {
				for ( type in contents ) {
					if ( contents[ type ] && contents[ type ].test( ct ) ) {
						dataTypes.unshift( type );
						break;
					}
				}
			}

			// Check to see if we have a response for the expected dataType
			if ( dataTypes[ 0 ] in responses ) {
				finalDataType = dataTypes[ 0 ];
			} else {

				// Try convertible dataTypes
				for ( type in responses ) {
					if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
						finalDataType = type;
						break;
					}
					if ( !firstDataType ) {
						firstDataType = type;
					}
				}

				// Or just use first one
				finalDataType = finalDataType || firstDataType;
			}

			// If we found a dataType
			// We add the dataType to the list if needed
			// and return the corresponding response
			if ( finalDataType ) {
				if ( finalDataType !== dataTypes[ 0 ] ) {
					dataTypes.unshift( finalDataType );
				}
				return responses[ finalDataType ];
			}
		}

		/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
		function ajaxConvert( s, response, jqXHR, isSuccess ) {
			var conv2, current, conv, tmp, prev,
				converters = {},

				// Work with a copy of dataTypes in case we need to modify it for conversion
				dataTypes = s.dataTypes.slice();

			// Create converters map with lowercased keys
			if ( dataTypes[ 1 ] ) {
				for ( conv in s.converters ) {
					converters[ conv.toLowerCase() ] = s.converters[ conv ];
				}
			}

			current = dataTypes.shift();

			// Convert to each sequential dataType
			while ( current ) {

				if ( s.responseFields[ current ] ) {
					jqXHR[ s.responseFields[ current ] ] = response;
				}

				// Apply the dataFilter if provided
				if ( !prev && isSuccess && s.dataFilter ) {
					response = s.dataFilter( response, s.dataType );
				}

				prev = current;
				current = dataTypes.shift();

				if ( current ) {

					// There's only work to do if current dataType is non-auto
					if ( current === "*" ) {

						current = prev;

						// Convert response if prev dataType is non-auto and differs from current
					} else if ( prev !== "*" && prev !== current ) {

						// Seek a direct converter
						conv = converters[ prev + " " + current ] || converters[ "* " + current ];

						// If none found, seek a pair
						if ( !conv ) {
							for ( conv2 in converters ) {

								// If conv2 outputs current
								tmp = conv2.split( " " );
								if ( tmp[ 1 ] === current ) {

									// If prev can be converted to accepted input
									conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
									if ( conv ) {

										// Condense equivalence converters
										if ( conv === true ) {
											conv = converters[ conv2 ];

											// Otherwise, insert the intermediate dataType
										} else if ( converters[ conv2 ] !== true ) {
											current = tmp[ 0 ];
											dataTypes.unshift( tmp[ 1 ] );
										}
										break;
									}
								}
							}
						}

						// Apply converter (if not an equivalence)
						if ( conv !== true ) {

							// Unless errors are allowed to bubble, catch and return them
							if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
								response = conv( response );
							} else {
								try {
									response = conv( response );
								} catch ( e ) {
									return {
										state: "parsererror",
										error: conv ? e : "No conversion from " + prev + " to " + current
									};
								}
							}
						}
					}
				}
			}

			return { state: "success", data: response };
		}

		jQuery.extend( {

			// Counter for holding the number of active queries
			active: 0,

			// Last-Modified header cache for next request
			lastModified: {},
			etag: {},

			ajaxSettings: {
				url: ajaxLocation,
				type: "GET",
				isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
				global: true,
				processData: true,
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",
				/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

				accepts: {
					"*": allTypes,
					text: "text/plain",
					html: "text/html",
					xml: "application/xml, text/xml",
					json: "application/json, text/javascript"
				},

				contents: {
					xml: /\bxml\b/,
					html: /\bhtml/,
					json: /\bjson\b/
				},

				responseFields: {
					xml: "responseXML",
					text: "responseText",
					json: "responseJSON"
				},

				// Data converters
				// Keys separate source (or catchall "*") and destination types with a single space
				converters: {

					// Convert anything to text
					"* text": String,

					// Text to html (true = no transformation)
					"text html": true,

					// Evaluate text as a json expression
					"text json": jQuery.parseJSON,

					// Parse text as xml
					"text xml": jQuery.parseXML
				},

				// For options that shouldn't be deep extended:
				// you can add your own custom options here if
				// and when you create one that shouldn't be
				// deep extended (see ajaxExtend)
				flatOptions: {
					url: true,
					context: true
				}
			},

			// Creates a full fledged settings object into target
			// with both ajaxSettings and settings fields.
			// If target is omitted, writes into ajaxSettings.
			ajaxSetup: function( target, settings ) {
				return settings ?

				// Building a settings object
					ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
					ajaxExtend( jQuery.ajaxSettings, target );
			},

			ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
			ajaxTransport: addToPrefiltersOrTransports( transports ),

			// Main method
			ajax: function( url, options ) {

				// If url is an object, simulate pre-1.5 signature
				if ( typeof url === "object" ) {
					options = url;
					url = undefined;
				}

				// Force options to be an object
				options = options || {};

				var

					// Cross-domain detection vars
					parts,

					// Loop variable
					i,

					// URL without anti-cache param
					cacheURL,

					// Response headers as string
					responseHeadersString,

					// timeout handle
					timeoutTimer,

					// To know if global events are to be dispatched
					fireGlobals,

					transport,

					// Response headers
					responseHeaders,

					// Create the final options object
					s = jQuery.ajaxSetup( {}, options ),

					// Callbacks context
					callbackContext = s.context || s,

					// Context for global events is callbackContext if it is a DOM node or jQuery collection
					globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

					// Deferreds
					deferred = jQuery.Deferred(),
					completeDeferred = jQuery.Callbacks( "once memory" ),

					// Status-dependent callbacks
					statusCode = s.statusCode || {},

					// Headers (they are sent all at once)
					requestHeaders = {},
					requestHeadersNames = {},

					// The jqXHR state
					state = 0,

					// Default abort message
					strAbort = "canceled",

					// Fake xhr
					jqXHR = {
						readyState: 0,

						// Builds headers hashtable if needed
						getResponseHeader: function( key ) {
							var match;
							if ( state === 2 ) {
								if ( !responseHeaders ) {
									responseHeaders = {};
									while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
										responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
									}
								}
								match = responseHeaders[ key.toLowerCase() ];
							}
							return match == null ? null : match;
						},

						// Raw string
						getAllResponseHeaders: function() {
							return state === 2 ? responseHeadersString : null;
						},

						// Caches the header
						setRequestHeader: function( name, value ) {
							var lname = name.toLowerCase();
							if ( !state ) {
								name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
								requestHeaders[ name ] = value;
							}
							return this;
						},

						// Overrides response content-type header
						overrideMimeType: function( type ) {
							if ( !state ) {
								s.mimeType = type;
							}
							return this;
						},

						// Status-dependent callbacks
						statusCode: function( map ) {
							var code;
							if ( map ) {
								if ( state < 2 ) {
									for ( code in map ) {

										// Lazy-add the new callback in a way that preserves old ones
										statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
									}
								} else {

									// Execute the appropriate callbacks
									jqXHR.always( map[ jqXHR.status ] );
								}
							}
							return this;
						},

						// Cancel the request
						abort: function( statusText ) {
							var finalText = statusText || strAbort;
							if ( transport ) {
								transport.abort( finalText );
							}
							done( 0, finalText );
							return this;
						}
					};

				// Attach deferreds
				deferred.promise( jqXHR ).complete = completeDeferred.add;
				jqXHR.success = jqXHR.done;
				jqXHR.error = jqXHR.fail;

				// Remove hash character (#7531: and string promotion)
				// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
				// Handle falsy url in the settings object (#10093: consistency with old signature)
				// We also use the url parameter if available
				s.url = ( ( url || s.url || ajaxLocation ) + "" )
					.replace( rhash, "" )
					.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

				// Alias method option to type as per ticket #12004
				s.type = options.method || options.type || s.method || s.type;

				// Extract dataTypes list
				s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

				// A cross-domain request is in order when we have a protocol:host:port mismatch
				if ( s.crossDomain == null ) {
					parts = rurl.exec( s.url.toLowerCase() );
					s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
					);
				}

				// Convert data if not already a string
				if ( s.data && s.processData && typeof s.data !== "string" ) {
					s.data = jQuery.param( s.data, s.traditional );
				}

				// Apply prefilters
				inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

				// If request was aborted inside a prefilter, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// We can fire global events as of now if asked to
				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
				fireGlobals = jQuery.event && s.global;

				// Watch for a new set of requests
				if ( fireGlobals && jQuery.active++ === 0 ) {
					jQuery.event.trigger( "ajaxStart" );
				}

				// Uppercase the type
				s.type = s.type.toUpperCase();

				// Determine if request has content
				s.hasContent = !rnoContent.test( s.type );

				// Save the URL in case we're toying with the If-Modified-Since
				// and/or If-None-Match header later on
				cacheURL = s.url;

				// More options handling for requests with no content
				if ( !s.hasContent ) {

					// If data is available, append data to url
					if ( s.data ) {
						cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

						// #9682: remove data so that it's not used in an eventual retry
						delete s.data;
					}

					// Add anti-cache in url if needed
					if ( s.cache === false ) {
						s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
							cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
							cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
					}
				}

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					if ( jQuery.lastModified[ cacheURL ] ) {
						jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
					}
					if ( jQuery.etag[ cacheURL ] ) {
						jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
					}
				}

				// Set the correct header, if data is being sent
				if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
					jqXHR.setRequestHeader( "Content-Type", s.contentType );
				}

				// Set the Accepts header for the server, depending on the dataType
				jqXHR.setRequestHeader(
					"Accept",
					s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
						s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
						s.accepts[ "*" ]
				);

				// Check for headers option
				for ( i in s.headers ) {
					jqXHR.setRequestHeader( i, s.headers[ i ] );
				}

				// Allow custom headers/mimetypes and early abort
				if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

					// Abort if not done already and return
					return jqXHR.abort();
				}

				// aborting is no longer a cancellation
				strAbort = "abort";

				// Install callbacks on deferreds
				for ( i in { success: 1, error: 1, complete: 1 } ) {
					jqXHR[ i ]( s[ i ] );
				}

				// Get transport
				transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

				// If no transport, we auto-abort
				if ( !transport ) {
					done( -1, "No Transport" );
				} else {
					jqXHR.readyState = 1;

					// Send global event
					if ( fireGlobals ) {
						globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
					}

					// If request was aborted inside ajaxSend, stop there
					if ( state === 2 ) {
						return jqXHR;
					}

					// Timeout
					if ( s.async && s.timeout > 0 ) {
						timeoutTimer = window.setTimeout( function() {
							jqXHR.abort( "timeout" );
						}, s.timeout );
					}

					try {
						state = 1;
						transport.send( requestHeaders, done );
					} catch ( e ) {

						// Propagate exception as error if not done
						if ( state < 2 ) {
							done( -1, e );

							// Simply rethrow otherwise
						} else {
							throw e;
						}
					}
				}

				// Callback for when everything is done
				function done( status, nativeStatusText, responses, headers ) {
					var isSuccess, success, error, response, modified,
						statusText = nativeStatusText;

					// Called once
					if ( state === 2 ) {
						return;
					}

					// State is "done" now
					state = 2;

					// Clear timeout if it exists
					if ( timeoutTimer ) {
						window.clearTimeout( timeoutTimer );
					}

					// Dereference transport for early garbage collection
					// (no matter how long the jqXHR object will be used)
					transport = undefined;

					// Cache response headers
					responseHeadersString = headers || "";

					// Set readyState
					jqXHR.readyState = status > 0 ? 4 : 0;

					// Determine if successful
					isSuccess = status >= 200 && status < 300 || status === 304;

					// Get response data
					if ( responses ) {
						response = ajaxHandleResponses( s, jqXHR, responses );
					}

					// Convert no matter what (that way responseXXX fields are always set)
					response = ajaxConvert( s, response, jqXHR, isSuccess );

					// If successful, handle type chaining
					if ( isSuccess ) {

						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
						if ( s.ifModified ) {
							modified = jqXHR.getResponseHeader( "Last-Modified" );
							if ( modified ) {
								jQuery.lastModified[ cacheURL ] = modified;
							}
							modified = jqXHR.getResponseHeader( "etag" );
							if ( modified ) {
								jQuery.etag[ cacheURL ] = modified;
							}
						}

						// if no content
						if ( status === 204 || s.type === "HEAD" ) {
							statusText = "nocontent";

							// if not modified
						} else if ( status === 304 ) {
							statusText = "notmodified";

							// If we have data, let's convert it
						} else {
							statusText = response.state;
							success = response.data;
							error = response.error;
							isSuccess = !error;
						}
					} else {

						// We extract error from statusText
						// then normalize statusText and status for non-aborts
						error = statusText;
						if ( status || !statusText ) {
							statusText = "error";
							if ( status < 0 ) {
								status = 0;
							}
						}
					}

					// Set data for the fake xhr object
					jqXHR.status = status;
					jqXHR.statusText = ( nativeStatusText || statusText ) + "";

					// Success/Error
					if ( isSuccess ) {
						deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
					} else {
						deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
					}

					// Status-dependent callbacks
					jqXHR.statusCode( statusCode );
					statusCode = undefined;

					if ( fireGlobals ) {
						globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
							[ jqXHR, s, isSuccess ? success : error ] );
					}

					// Complete
					completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

					if ( fireGlobals ) {
						globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

						// Handle the global AJAX counter
						if ( !( --jQuery.active ) ) {
							jQuery.event.trigger( "ajaxStop" );
						}
					}
				}

				return jqXHR;
			},

			getJSON: function( url, data, callback ) {
				return jQuery.get( url, data, callback, "json" );
			},

			getScript: function( url, callback ) {
				return jQuery.get( url, undefined, callback, "script" );
			}
		} );

		jQuery.each( [ "get", "post" ], function( i, method ) {
			jQuery[ method ] = function( url, data, callback, type ) {

				// shift arguments if data argument was omitted
				if ( jQuery.isFunction( data ) ) {
					type = type || callback;
					callback = data;
					data = undefined;
				}

				// The url can be an options object (which then must have .url)
				return jQuery.ajax( jQuery.extend( {
					url: url,
					type: method,
					dataType: type,
					data: data,
					success: callback
				}, jQuery.isPlainObject( url ) && url ) );
			};
		} );


		jQuery._evalUrl = function( url ) {
			return jQuery.ajax( {
				url: url,

				// Make this explicit, since user can override this through ajaxSetup (#11264)
				type: "GET",
				dataType: "script",
				cache: true,
				async: false,
				global: false,
				"throws": true
			} );
		};


		jQuery.fn.extend( {
			wrapAll: function( html ) {
				if ( jQuery.isFunction( html ) ) {
					return this.each( function( i ) {
						jQuery( this ).wrapAll( html.call( this, i ) );
					} );
				}

				if ( this[ 0 ] ) {

					// The elements to wrap the target around
					var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

					if ( this[ 0 ].parentNode ) {
						wrap.insertBefore( this[ 0 ] );
					}

					wrap.map( function() {
						var elem = this;

						while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
							elem = elem.firstChild;
						}

						return elem;
					} ).append( this );
				}

				return this;
			},

			wrapInner: function( html ) {
				if ( jQuery.isFunction( html ) ) {
					return this.each( function( i ) {
						jQuery( this ).wrapInner( html.call( this, i ) );
					} );
				}

				return this.each( function() {
					var self = jQuery( this ),
						contents = self.contents();

					if ( contents.length ) {
						contents.wrapAll( html );

					} else {
						self.append( html );
					}
				} );
			},

			wrap: function( html ) {
				var isFunction = jQuery.isFunction( html );

				return this.each( function( i ) {
					jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
				} );
			},

			unwrap: function() {
				return this.parent().each( function() {
					if ( !jQuery.nodeName( this, "body" ) ) {
						jQuery( this ).replaceWith( this.childNodes );
					}
				} ).end();
			}
		} );


		function getDisplay( elem ) {
			return elem.style && elem.style.display || jQuery.css( elem, "display" );
		}

		function filterHidden( elem ) {

			// Disconnected elements are considered hidden
			if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {
				return true;
			}
			while ( elem && elem.nodeType === 1 ) {
				if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
					return true;
				}
				elem = elem.parentNode;
			}
			return false;
		}

		jQuery.expr.filters.hidden = function( elem ) {

			// Support: Opera <= 12.12
			// Opera reports offsetWidths and offsetHeights less than zero on some elements
			return support.reliableHiddenOffsets() ?
				( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
				filterHidden( elem );
		};

		jQuery.expr.filters.visible = function( elem ) {
			return !jQuery.expr.filters.hidden( elem );
		};




		var r20 = /%20/g,
			rbracket = /\[\]$/,
			rCRLF = /\r?\n/g,
			rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
			rsubmittable = /^(?:input|select|textarea|keygen)/i;

		function buildParams( prefix, obj, traditional, add ) {
			var name;

			if ( jQuery.isArray( obj ) ) {

				// Serialize array item.
				jQuery.each( obj, function( i, v ) {
					if ( traditional || rbracket.test( prefix ) ) {

						// Treat each array item as a scalar.
						add( prefix, v );

					} else {

						// Item is non-scalar (array or object), encode its numeric index.
						buildParams(
							prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
							v,
							traditional,
							add
						);
					}
				} );

			} else if ( !traditional && jQuery.type( obj ) === "object" ) {

				// Serialize object item.
				for ( name in obj ) {
					buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
				}

			} else {

				// Serialize scalar item.
				add( prefix, obj );
			}
		}

		// Serialize an array of form elements or a set of
		// key/values into a query string
		jQuery.param = function( a, traditional ) {
			var prefix,
				s = [],
				add = function( key, value ) {

					// If value is a function, invoke it and return its value
					value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
					s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
				};

			// Set traditional to true for jQuery <= 1.3.2 behavior.
			if ( traditional === undefined ) {
				traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
			}

			// If an array was passed in, assume that it is an array of form elements.
			if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

				// Serialize the form elements
				jQuery.each( a, function() {
					add( this.name, this.value );
				} );

			} else {

				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for ( prefix in a ) {
					buildParams( prefix, a[ prefix ], traditional, add );
				}
			}

			// Return the resulting serialization
			return s.join( "&" ).replace( r20, "+" );
		};

		jQuery.fn.extend( {
			serialize: function() {
				return jQuery.param( this.serializeArray() );
			},
			serializeArray: function() {
				return this.map( function() {

					// Can add propHook for "elements" to filter or add form elements
					var elements = jQuery.prop( this, "elements" );
					return elements ? jQuery.makeArray( elements ) : this;
				} )
					.filter( function() {
						var type = this.type;

						// Use .is(":disabled") so that fieldset[disabled] works
						return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
					} )
					.map( function( i, elem ) {
						var val = jQuery( this ).val();

						return val == null ?
							null :
							jQuery.isArray( val ) ?
								jQuery.map( val, function( val ) {
									return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
								} ) :
								{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ).get();
			}
		} );


		// Create the request object
		// (This is still attached to ajaxSettings for backward compatibility)
		jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

		// Support: IE6-IE8
			function() {

				// XHR cannot access local files, always use ActiveX for that case
				if ( this.isLocal ) {
					return createActiveXHR();
				}

				// Support: IE 9-11
				// IE seems to error on cross-domain PATCH requests when ActiveX XHR
				// is used. In IE 9+ always use the native XHR.
				// Note: this condition won't catch Edge as it doesn't define
				// document.documentMode but it also doesn't support ActiveX so it won't
				// reach this code.
				if ( document.documentMode > 8 ) {
					return createStandardXHR();
				}

				// Support: IE<9
				// oldIE XHR does not support non-RFC2616 methods (#13240)
				// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
				// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
				// Although this check for six methods instead of eight
				// since IE also does not support "trace" and "connect"
				return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
			} :

		// For all other browsers, use the standard XMLHttpRequest object
			createStandardXHR;

		var xhrId = 0,
			xhrCallbacks = {},
			xhrSupported = jQuery.ajaxSettings.xhr();

		// Support: IE<10
		// Open requests must be manually aborted on unload (#5280)
		// See https://support.microsoft.com/kb/2856746 for more info
		if ( window.attachEvent ) {
			window.attachEvent( "onunload", function() {
				for ( var key in xhrCallbacks ) {
					xhrCallbacks[ key ]( undefined, true );
				}
			} );
		}

		// Determine support properties
		support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
		xhrSupported = support.ajax = !!xhrSupported;

		// Create transport if the browser can provide an xhr
		if ( xhrSupported ) {

			jQuery.ajaxTransport( function( options ) {

				// Cross domain only allowed if supported through XMLHttpRequest
				if ( !options.crossDomain || support.cors ) {

					var callback;

					return {
						send: function( headers, complete ) {
							var i,
								xhr = options.xhr(),
								id = ++xhrId;

							// Open the socket
							xhr.open(
								options.type,
								options.url,
								options.async,
								options.username,
								options.password
							);

							// Apply custom fields if provided
							if ( options.xhrFields ) {
								for ( i in options.xhrFields ) {
									xhr[ i ] = options.xhrFields[ i ];
								}
							}

							// Override mime type if needed
							if ( options.mimeType && xhr.overrideMimeType ) {
								xhr.overrideMimeType( options.mimeType );
							}

							// X-Requested-With header
							// For cross-domain requests, seeing as conditions for a preflight are
							// akin to a jigsaw puzzle, we simply never set it to be sure.
							// (it can always be set on a per-request basis or even using ajaxSetup)
							// For same-domain requests, won't change header if already provided.
							if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
								headers[ "X-Requested-With" ] = "XMLHttpRequest";
							}

							// Set headers
							for ( i in headers ) {

								// Support: IE<9
								// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
								// request header to a null-value.
								//
								// To keep consistent with other XHR implementations, cast the value
								// to string and ignore `undefined`.
								if ( headers[ i ] !== undefined ) {
									xhr.setRequestHeader( i, headers[ i ] + "" );
								}
							}

							// Do send the request
							// This may raise an exception which is actually
							// handled in jQuery.ajax (so no try/catch here)
							xhr.send( ( options.hasContent && options.data ) || null );

							// Listener
							callback = function( _, isAbort ) {
								var status, statusText, responses;

								// Was never called and is aborted or complete
								if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

									// Clean up
									delete xhrCallbacks[ id ];
									callback = undefined;
									xhr.onreadystatechange = jQuery.noop;

									// Abort manually if needed
									if ( isAbort ) {
										if ( xhr.readyState !== 4 ) {
											xhr.abort();
										}
									} else {
										responses = {};
										status = xhr.status;

										// Support: IE<10
										// Accessing binary-data responseText throws an exception
										// (#11426)
										if ( typeof xhr.responseText === "string" ) {
											responses.text = xhr.responseText;
										}

										// Firefox throws an exception when accessing
										// statusText for faulty cross-domain requests
										try {
											statusText = xhr.statusText;
										} catch ( e ) {

											// We normalize with Webkit giving an empty statusText
											statusText = "";
										}

										// Filter status for non standard behaviors

										// If the request is local and we have data: assume a success
										// (success with no data won't get notified, that's the best we
										// can do given current implementations)
										if ( !status && options.isLocal && !options.crossDomain ) {
											status = responses.text ? 200 : 404;

											// IE - #1450: sometimes returns 1223 when it should be 204
										} else if ( status === 1223 ) {
											status = 204;
										}
									}
								}

								// Call complete if needed
								if ( responses ) {
									complete( status, statusText, responses, xhr.getAllResponseHeaders() );
								}
							};

							// Do send the request
							// `xhr.send` may raise an exception, but it will be
							// handled in jQuery.ajax (so no try/catch here)
							if ( !options.async ) {

								// If we're in sync mode we fire the callback
								callback();
							} else if ( xhr.readyState === 4 ) {

								// (IE6 & IE7) if it's in cache and has been
								// retrieved directly we need to fire the callback
								window.setTimeout( callback );
							} else {

								// Register the callback, but delay it in case `xhr.send` throws
								// Add to the list of active xhr callbacks
								xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
							}
						},

						abort: function() {
							if ( callback ) {
								callback( undefined, true );
							}
						}
					};
				}
			} );
		}

		// Functions to create xhrs
		function createStandardXHR() {
			try {
				return new window.XMLHttpRequest();
			} catch ( e ) {}
		}

		function createActiveXHR() {
			try {
				return new window.ActiveXObject( "Microsoft.XMLHTTP" );
			} catch ( e ) {}
		}




		// Install script dataType
		jQuery.ajaxSetup( {
			accepts: {
				script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
			},
			contents: {
				script: /\b(?:java|ecma)script\b/
			},
			converters: {
				"text script": function( text ) {
					jQuery.globalEval( text );
					return text;
				}
			}
		} );

		// Handle cache's special case and global
		jQuery.ajaxPrefilter( "script", function( s ) {
			if ( s.cache === undefined ) {
				s.cache = false;
			}
			if ( s.crossDomain ) {
				s.type = "GET";
				s.global = false;
			}
		} );

		// Bind script tag hack transport
		jQuery.ajaxTransport( "script", function( s ) {

			// This transport only deals with cross domain requests
			if ( s.crossDomain ) {

				var script,
					head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

				return {

					send: function( _, callback ) {

						script = document.createElement( "script" );

						script.async = true;

						if ( s.scriptCharset ) {
							script.charset = s.scriptCharset;
						}

						script.src = s.url;

						// Attach handlers for all browsers
						script.onload = script.onreadystatechange = function( _, isAbort ) {

							if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

								// Handle memory leak in IE
								script.onload = script.onreadystatechange = null;

								// Remove the script
								if ( script.parentNode ) {
									script.parentNode.removeChild( script );
								}

								// Dereference the script
								script = null;

								// Callback if not abort
								if ( !isAbort ) {
									callback( 200, "success" );
								}
							}
						};

						// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
						// Use native DOM manipulation to avoid our domManip AJAX trickery
						head.insertBefore( script, head.firstChild );
					},

					abort: function() {
						if ( script ) {
							script.onload( undefined, true );
						}
					}
				};
			}
		} );




		var oldCallbacks = [],
			rjsonp = /(=)\?(?=&|$)|\?\?/;

		// Default jsonp settings
		jQuery.ajaxSetup( {
			jsonp: "callback",
			jsonpCallback: function() {
				var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
				this[ callback ] = true;
				return callback;
			}
		} );

		// Detect, normalize options and install callbacks for jsonp requests
		jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

			var callbackName, overwritten, responseContainer,
				jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
					"url" :
					typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
				);

			// Handle iff the expected data type is "jsonp" or we have a parameter to set
			if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

				// Get callback name, remembering preexisting value associated with it
				callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
					s.jsonpCallback() :
					s.jsonpCallback;

				// Insert callback into url or form data
				if ( jsonProp ) {
					s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
				} else if ( s.jsonp !== false ) {
					s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
				}

				// Use data converter to retrieve json after script execution
				s.converters[ "script json" ] = function() {
					if ( !responseContainer ) {
						jQuery.error( callbackName + " was not called" );
					}
					return responseContainer[ 0 ];
				};

				// force json dataType
				s.dataTypes[ 0 ] = "json";

				// Install callback
				overwritten = window[ callbackName ];
				window[ callbackName ] = function() {
					responseContainer = arguments;
				};

				// Clean-up function (fires after converters)
				jqXHR.always( function() {

					// If previous value didn't exist - remove it
					if ( overwritten === undefined ) {
						jQuery( window ).removeProp( callbackName );

						// Otherwise restore preexisting value
					} else {
						window[ callbackName ] = overwritten;
					}

					// Save back as free
					if ( s[ callbackName ] ) {

						// make sure that re-using the options doesn't screw things around
						s.jsonpCallback = originalSettings.jsonpCallback;

						// save the callback name for future use
						oldCallbacks.push( callbackName );
					}

					// Call if it was a function and we have a response
					if ( responseContainer && jQuery.isFunction( overwritten ) ) {
						overwritten( responseContainer[ 0 ] );
					}

					responseContainer = overwritten = undefined;
				} );

				// Delegate to script
				return "script";
			}
		} );




		// data: string of html
		// context (optional): If specified, the fragment will be created in this context,
		// defaults to document
		// keepScripts (optional): If true, will include scripts passed in the html string
		jQuery.parseHTML = function( data, context, keepScripts ) {
			if ( !data || typeof data !== "string" ) {
				return null;
			}
			if ( typeof context === "boolean" ) {
				keepScripts = context;
				context = false;
			}
			context = context || document;

			var parsed = rsingleTag.exec( data ),
				scripts = !keepScripts && [];

			// Single tag
			if ( parsed ) {
				return [ context.createElement( parsed[ 1 ] ) ];
			}

			parsed = buildFragment( [ data ], context, scripts );

			if ( scripts && scripts.length ) {
				jQuery( scripts ).remove();
			}

			return jQuery.merge( [], parsed.childNodes );
		};


		// Keep a copy of the old load method
		var _load = jQuery.fn.load;

		/**
 * Load a url into a page
 */
		jQuery.fn.load = function( url, params, callback ) {
			if ( typeof url !== "string" && _load ) {
				return _load.apply( this, arguments );
			}

			var selector, type, response,
				self = this,
				off = url.indexOf( " " );

			if ( off > -1 ) {
				selector = jQuery.trim( url.slice( off, url.length ) );
				url = url.slice( 0, off );
			}

			// If it's a function
			if ( jQuery.isFunction( params ) ) {

				// We assume that it's the callback
				callback = params;
				params = undefined;

				// Otherwise, build a param string
			} else if ( params && typeof params === "object" ) {
				type = "POST";
			}

			// If we have elements to modify, make the request
			if ( self.length > 0 ) {
				jQuery.ajax( {
					url: url,

					// If "type" variable is undefined, then "GET" method will be used.
					// Make value of this field explicit since
					// user can override it through ajaxSetup method
					type: type || "GET",
					dataType: "html",
					data: params
				} ).done( function( responseText ) {

					// Save response for use in complete callback
					response = arguments;

					self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
						jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
						responseText );

					// If the request succeeds, this function gets "data", "status", "jqXHR"
					// but they are ignored because response was set above.
					// If it fails, this function gets "jqXHR", "status", "error"
				} ).always( callback && function( jqXHR, status ) {
					self.each( function() {
						callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
					} );
				} );
			}

			return this;
		};




		// Attach a bunch of functions for handling common AJAX events
		jQuery.each( [
			"ajaxStart",
			"ajaxStop",
			"ajaxComplete",
			"ajaxError",
			"ajaxSuccess",
			"ajaxSend"
		], function( i, type ) {
			jQuery.fn[ type ] = function( fn ) {
				return this.on( type, fn );
			};
		} );




		jQuery.expr.filters.animated = function( elem ) {
			return jQuery.grep( jQuery.timers, function( fn ) {
				return elem === fn.elem;
			} ).length;
		};





		/**
 * Gets a window from an element
 */
		function getWindow( elem ) {
			return jQuery.isWindow( elem ) ?
				elem :
				elem.nodeType === 9 ?
					elem.defaultView || elem.parentWindow :
					false;
		}

		jQuery.offset = {
			setOffset: function( elem, options, i ) {
				var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
					position = jQuery.css( elem, "position" ),
					curElem = jQuery( elem ),
					props = {};

				// set position first, in-case top/left are set even on static elem
				if ( position === "static" ) {
					elem.style.position = "relative";
				}

				curOffset = curElem.offset();
				curCSSTop = jQuery.css( elem, "top" );
				curCSSLeft = jQuery.css( elem, "left" );
				calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

				// need to be able to calculate position if either top or left
				// is auto and position is either absolute or fixed
				if ( calculatePosition ) {
					curPosition = curElem.position();
					curTop = curPosition.top;
					curLeft = curPosition.left;
				} else {
					curTop = parseFloat( curCSSTop ) || 0;
					curLeft = parseFloat( curCSSLeft ) || 0;
				}

				if ( jQuery.isFunction( options ) ) {

					// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
					options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
				}

				if ( options.top != null ) {
					props.top = ( options.top - curOffset.top ) + curTop;
				}
				if ( options.left != null ) {
					props.left = ( options.left - curOffset.left ) + curLeft;
				}

				if ( "using" in options ) {
					options.using.call( elem, props );
				} else {
					curElem.css( props );
				}
			}
		};

		jQuery.fn.extend( {
			offset: function( options ) {
				if ( arguments.length ) {
					return options === undefined ?
						this :
						this.each( function( i ) {
							jQuery.offset.setOffset( this, options, i );
						} );
				}

				var docElem, win,
					box = { top: 0, left: 0 },
					elem = this[ 0 ],
					doc = elem && elem.ownerDocument;

				if ( !doc ) {
					return;
				}

				docElem = doc.documentElement;

				// Make sure it's not a disconnected DOM node
				if ( !jQuery.contains( docElem, elem ) ) {
					return box;
				}

				// If we don't have gBCR, just use 0,0 rather than error
				// BlackBerry 5, iOS 3 (original iPhone)
				if ( typeof elem.getBoundingClientRect !== "undefined" ) {
					box = elem.getBoundingClientRect();
				}
				win = getWindow( doc );
				return {
					top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
					left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
				};
			},

			position: function() {
				if ( !this[ 0 ] ) {
					return;
				}

				var offsetParent, offset,
					parentOffset = { top: 0, left: 0 },
					elem = this[ 0 ];

				// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
				// because it is its only offset parent
				if ( jQuery.css( elem, "position" ) === "fixed" ) {

					// we assume that getBoundingClientRect is available when computed position is fixed
					offset = elem.getBoundingClientRect();
				} else {

					// Get *real* offsetParent
					offsetParent = this.offsetParent();

					// Get correct offsets
					offset = this.offset();
					if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
						parentOffset = offsetParent.offset();
					}

					// Add offsetParent borders
					parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
				}

				// Subtract parent offsets and element margins
				// note: when an element has margin: auto the offsetLeft and marginLeft
				// are the same in Safari causing offset.left to incorrectly be 0
				return {
					top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
					left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
				};
			},

			offsetParent: function() {
				return this.map( function() {
					var offsetParent = this.offsetParent;

					while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
						offsetParent = offsetParent.offsetParent;
					}
					return offsetParent || documentElement;
				} );
			}
		} );

		// Create scrollLeft and scrollTop methods
		jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
			var top = /Y/.test( prop );

			jQuery.fn[ method ] = function( val ) {
				return access( this, function( elem, method, val ) {
					var win = getWindow( elem );

					if ( val === undefined ) {
						return win ? ( prop in win ) ? win[ prop ] :
							win.document.documentElement[ method ] :
							elem[ method ];
					}

					if ( win ) {
						win.scrollTo(
							!top ? val : jQuery( win ).scrollLeft(),
							top ? val : jQuery( win ).scrollTop()
						);

					} else {
						elem[ method ] = val;
					}
				}, method, val, arguments.length, null );
			};
		} );

		// Support: Safari<7-8+, Chrome<37-44+
		// Add the top/left cssHooks using jQuery.fn.position
		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// getComputedStyle returns percent when specified for top/left/bottom/right
		// rather than make the css module depend on the offset module, we just check for it here
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
				function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );

						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			);
		} );


		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
		jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
			jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
				function( defaultExtra, funcName ) {

					// margin is only for outerHeight, outerWidth
					jQuery.fn[ funcName ] = function( margin, value ) {
						var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
							extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

						return access( this, function( elem, type, value ) {
							var doc;

							if ( jQuery.isWindow( elem ) ) {

								// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
								// isn't a whole lot we can do. See pull request at this URL for discussion:
								// https://github.com/jquery/jquery/pull/764
								return elem.document.documentElement[ "client" + name ];
							}

							// Get document width or height
							if ( elem.nodeType === 9 ) {
								doc = elem.documentElement;

								// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
								// whichever is greatest
								// unfortunately, this causes bug #3838 in IE6/8 only,
								// but there is currently no good, small way to fix it.
								return Math.max(
									elem.body[ "scroll" + name ], doc[ "scroll" + name ],
									elem.body[ "offset" + name ], doc[ "offset" + name ],
									doc[ "client" + name ]
								);
							}

							return value === undefined ?

							// Get width or height on the element, requesting but not forcing parseFloat
								jQuery.css( elem, type, extra ) :

							// Set width or height on the element
								jQuery.style( elem, type, value, extra );
						}, type, chainable ? margin : undefined, chainable, null );
					};
				} );
		} );


		jQuery.fn.extend( {

			bind: function( types, data, fn ) {
				return this.on( types, null, data, fn );
			},
			unbind: function( types, fn ) {
				return this.off( types, null, fn );
			},

			delegate: function( selector, types, data, fn ) {
				return this.on( types, selector, data, fn );
			},
			undelegate: function( selector, types, fn ) {

				// ( namespace ) or ( selector, types [, fn] )
				return arguments.length === 1 ?
					this.off( selector, "**" ) :
					this.off( types, selector || "**", fn );
			}
		} );

		// The number of elements contained in the matched element set
		jQuery.fn.size = function() {
			return this.length;
		};

		jQuery.fn.andSelf = jQuery.fn.addBack;




		// Register as a named AMD module, since jQuery can be concatenated with other
		// files that may use define, but not via a proper concatenation script that
		// understands anonymous AMD modules. A named AMD is safest and most robust
		// way to register. Lowercase jquery is used because AMD module names are
		// derived from file names, and jQuery is normally delivered in a lowercase
		// file name. Do this after creating the global so that if an AMD module wants
		// to call noConflict to hide this version of jQuery, it will work.

		// Note that for maximum portability, libraries that are not jQuery should
		// declare themselves as anonymous modules, and avoid setting a global if an
		// AMD loader is present. jQuery is a special case. For more information, see
		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

		if ( typeof define === "function" && define.amd ) {
			define( "jquery", [], function() {
				return jQuery;
			} );
		}



		var

			// Map over jQuery in case of overwrite
			_jQuery = window.jQuery,

			// Map over the $ in case of overwrite
			_$ = window.$;

		jQuery.noConflict = function( deep ) {
			if ( window.$ === jQuery ) {
				window.$ = _$;
			}

			if ( deep && window.jQuery === jQuery ) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		};

		// Expose jQuery and $ identifiers, even in
		// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
		// and CommonJS for browser emulators (#13566)
		if ( !noGlobal ) {
			window.jQuery = window.$ = jQuery;
		}

		return jQuery;
	}));

},{}],115:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

	"use strict";

	/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
	var keyMirror = function(obj) {
		var ret = {};
		var key;
		if (!(obj instanceof Object && !Array.isArray(obj))) {
			throw new Error('keyMirror(...): Argument must be an object.');
		}
		for (key in obj) {
			if (!obj.hasOwnProperty(key)) {
				continue;
			}
			ret[key] = key;
		}
		return ret;
	};

	module.exports = keyMirror;

},{}],116:[function(require,module,exports){
	(function (global){
		/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';

		/** Used as references for various `Number` constants. */
		var NAN = 0 / 0;

		/** `Object#toString` result references. */
		var symbolTag = '[object Symbol]';

		/** Used to match leading and trailing whitespace. */
		var reTrim = /^\s+|\s+$/g;

		/** Used to detect bad signed hexadecimal string values. */
		var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		/** Used to detect binary string values. */
		var reIsBinary = /^0b[01]+$/i;

		/** Used to detect octal string values. */
		var reIsOctal = /^0o[0-7]+$/i;

		/** Built-in method references without a dependency on `root`. */
		var freeParseInt = parseInt;

		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
		var objectToString = objectProto.toString;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeMax = Math.max,
			nativeMin = Math.min;

		/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
		var now = function() {
			return root.Date.now();
		};

		/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
		function debounce(func, wait, options) {
			var lastArgs,
				lastThis,
				maxWait,
				result,
				timerId,
				lastCallTime,
				lastInvokeTime = 0,
				leading = false,
				maxing = false,
				trailing = true;

			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			wait = toNumber(wait) || 0;
			if (isObject(options)) {
				leading = !!options.leading;
				maxing = 'maxWait' in options;
				maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
				trailing = 'trailing' in options ? !!options.trailing : trailing;
			}

			function invokeFunc(time) {
				var args = lastArgs,
					thisArg = lastThis;

				lastArgs = lastThis = undefined;
				lastInvokeTime = time;
				result = func.apply(thisArg, args);
				return result;
			}

			function leadingEdge(time) {
				// Reset any `maxWait` timer.
				lastInvokeTime = time;
				// Start the timer for the trailing edge.
				timerId = setTimeout(timerExpired, wait);
				// Invoke the leading edge.
				return leading ? invokeFunc(time) : result;
			}

			function remainingWait(time) {
				var timeSinceLastCall = time - lastCallTime,
					timeSinceLastInvoke = time - lastInvokeTime,
					result = wait - timeSinceLastCall;

				return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
			}

			function shouldInvoke(time) {
				var timeSinceLastCall = time - lastCallTime,
					timeSinceLastInvoke = time - lastInvokeTime;

				// Either this is the first call, activity has stopped and we're at the
				// trailing edge, the system time has gone backwards and we're treating
				// it as the trailing edge, or we've hit the `maxWait` limit.
				return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
			}

			function timerExpired() {
				var time = now();
				if (shouldInvoke(time)) {
					return trailingEdge(time);
				}
				// Restart the timer.
				timerId = setTimeout(timerExpired, remainingWait(time));
			}

			function trailingEdge(time) {
				timerId = undefined;

				// Only invoke if we have `lastArgs` which means `func` has been
				// debounced at least once.
				if (trailing && lastArgs) {
					return invokeFunc(time);
				}
				lastArgs = lastThis = undefined;
				return result;
			}

			function cancel() {
				if (timerId !== undefined) {
					clearTimeout(timerId);
				}
				lastInvokeTime = 0;
				lastArgs = lastCallTime = lastThis = timerId = undefined;
			}

			function flush() {
				return timerId === undefined ? result : trailingEdge(now());
			}

			function debounced() {
				var time = now(),
					isInvoking = shouldInvoke(time);

				lastArgs = arguments;
				lastThis = this;
				lastCallTime = time;

				if (isInvoking) {
					if (timerId === undefined) {
						return leadingEdge(lastCallTime);
					}
					if (maxing) {
						// Handle invocations in a tight loop.
						timerId = setTimeout(timerExpired, wait);
						return invokeFunc(lastCallTime);
					}
				}
				if (timerId === undefined) {
					timerId = setTimeout(timerExpired, wait);
				}
				return result;
			}
			debounced.cancel = cancel;
			debounced.flush = flush;
			return debounced;
		}

		/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
		function isObject(value) {
			var type = typeof value;
			return !!value && (type == 'object' || type == 'function');
		}

		/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
		function isObjectLike(value) {
			return !!value && typeof value == 'object';
		}

		/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
		function isSymbol(value) {
			return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
		}

		/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
		function toNumber(value) {
			if (typeof value == 'number') {
				return value;
			}
			if (isSymbol(value)) {
				return NAN;
			}
			if (isObject(value)) {
				var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
				value = isObject(other) ? (other + '') : other;
			}
			if (typeof value != 'string') {
				return value === 0 ? value : +value;
			}
			value = value.replace(reTrim, '');
			var isBinary = reIsBinary.test(value);
			return (isBinary || reIsOctal.test(value))
				? freeParseInt(value.slice(2), isBinary ? 2 : 8)
				: (reIsBadHex.test(value) ? NAN : +value);
		}

		module.exports = debounce;

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{}],117:[function(require,module,exports){
	module.exports = require('./lib/core/core');
},{"./lib/core/core":120}],118:[function(require,module,exports){
	var core = require('./core');

	/**
 * math.js factory function. Creates a new instance of math.js
 *
 * @param {Object} [config] Available configuration options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'matrix' (default) or 'array'.
 *                            {string} number
 *                              A string 'number' (default), 'bignumber', or
 *                              'fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-2)`
 *                              returns `NaN` when predictable is false, and
 *                              returns `complex('2i')` when true.
 */
	function create (config) {
		// create a new math.js instance
		var math = core.create(config);
		math.create = create;

		// import data types, functions, constants, expression parser, etc.
		math['import'](require('./lib'));

		return math;
	}

	// return a new instance of math.js
	module.exports = create();

},{"./core":117,"./lib":527}],119:[function(require,module,exports){
	'use strict';

	var object = require('./utils/object');
	var bigConstants = require('./utils/bignumber/constants');

	function factory (type, config, load, typed, math) {
		// listen for changed in the configuration, automatically reload
		// constants when needed
		math.on('config', function (curr, prev) {
			if (curr.number !== prev.number) {
				factory(type, config, load, typed, math);
			}
		});

		math['true']     = true;
		math['false']    = false;
		math['null']     = null;
		math['uninitialized'] = require('./utils/array').UNINITIALIZED;

		if (config.number === 'BigNumber') {
			math['Infinity'] = new type.BigNumber(Infinity);
			math['NaN']      = new type.BigNumber(NaN);

			object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber);});
			object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber);});
			object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber);});
			object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber);}); // golden ratio, (1+sqrt(5))/2

			// uppercase constants (for compatibility with built-in Math)
			object.lazy(math, 'E',       function () {return math.e;});
			object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});
			object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln();});
			object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});
			object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln());});
			object.lazy(math, 'PI',      function () {return math.pi;});
			object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt();});
			object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt();});
		}
		else {
			math['Infinity'] = Infinity;
			math['NaN']      = NaN;

			math.pi  = Math.PI;
			math.tau = Math.PI * 2;
			math.e   = Math.E;
			math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2

			// uppercase constants (for compatibility with built-in Math)
			math.E           = math.e;
			math.LN2         = Math.LN2;
			math.LN10        = Math.LN10;
			math.LOG2E       = Math.LOG2E;
			math.LOG10E      = Math.LOG10E;
			math.PI          = math.pi;
			math.SQRT1_2     = Math.SQRT1_2;
			math.SQRT2       = Math.SQRT2;
		}

		// complex i
		math.i = type.Complex.I;

		// meta information
		math.version = require('./version');
	}

	exports.factory = factory;
	exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
	exports.math = true;   // request access to the math namespace
},{"./utils/array":581,"./utils/bignumber/constants":587,"./utils/object":604,"./version":607}],120:[function(require,module,exports){
	var isFactory = require('./../utils/object').isFactory;
	var deepExtend = require('./../utils/object').deepExtend;
	var typedFactory = require('./typed');
	var emitter = require('./../utils/emitter');

	var importFactory = require('./function/import');
	var configFactory = require('./function/config');

	/**
 * Math.js core. Creates a new, empty math.js instance
 * @param {Object} [options] Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-2)`
 *                              returns `NaN` when predictable is false, and
 *                              returns `complex('2i')` when true.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */
	exports.create = function create (options) {
		// simple test for ES5 support
		if (typeof Object.create !== 'function') {
			throw new Error('ES5 not supported by this JavaScript engine. ' +
    'Please load the es5-shim and es5-sham library for compatibility.');
		}

		// cached factories and instances
		var factories = [];
		var instances = [];

		// create a namespace for the mathjs instance, and attach emitter functions
		var math = emitter.mixin({});
		math.type = {};
		math.expression = {
			transform: Object.create(math)
		};

		// create a new typed instance
		math.typed = typedFactory.create(math.type);

		// create configuration options. These are private
		var _config = {
			// minimum relative difference between two compared values,
			// used by all comparison functions
			epsilon: 1e-12,

			// type of default matrix output. Choose 'matrix' (default) or 'array'
			matrix: 'Matrix',

			// type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
			number: 'number',

			// number of significant digits in BigNumbers
			precision: 64,

			// predictable output type of functions. When true, output type depends only
			// on the input types. When false (default), output type can vary depending
			// on input values. For example `math.sqrt(-2)` returns `NaN` when
			// predictable is false, and returns `complex('2i')` when true.
			predictable: false
		};

		/**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {{type: string, name: string, factory: Function}} factory
   * @returns {*}
   */
		function load (factory) {
			if (!isFactory(factory)) {
				throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
			}

			var index = factories.indexOf(factory);
			var instance;
			if (index === -1) {
				// doesn't yet exist
				if (factory.math === true) {
					// pass with math namespace
					instance = factory.factory(math.type, _config, load, math.typed, math);
				}
				else {
					instance = factory.factory(math.type, _config, load, math.typed);
				}

				// append to the cache
				factories.push(factory);
				instances.push(instance);
			}
			else {
				// already existing function, return the cached instance
				instance = instances[index];
			}

			return instance;
		}

		// load the import and config functions
		math['import'] = load(importFactory);
		math['config'] = load(configFactory);

		// apply options
		if (options) {
			math.config(options);
		}

		return math;
	};

},{"./../utils/emitter":599,"./../utils/object":604,"./function/config":121,"./function/import":122,"./typed":123}],121:[function(require,module,exports){
	'use strict';

	var object = require('../../utils/object');

	function factory (type, config, load, typed, math) {
		var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix
		var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number

		/**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev).
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *     math.config().number;                // outputs 'number'
   *     math.eval('0.4');                    // outputs number 0.4
   *     math.config({number: 'Fraction'});
   *     math.eval('0.4');                    // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   * @return {Object} Returns the current configuration
   */
		function _config(options) {
			if (options) {
				var prev = object.clone(config);

				// validate some of the options
				validateOption(options, 'matrix', MATRIX);
				validateOption(options, 'number', NUMBER);

				// merge options
				object.deepExtend(config, options);

				var curr = object.clone(config);

				// emit 'config' event
				math.emit('config', curr, prev);

				return curr;
			}
			else {
				return object.clone(config);
			}
		}

		// attach the valid options to the function so they can be extended
		_config.MATRIX = MATRIX;
		_config.NUMBER = NUMBER;

		return _config;
	}

	/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */
	function contains (array, item) {
		return array.indexOf(item) !== -1;
	}

	/**
 * Find a string in an array. Case insensitive search
 * @param {Array.<string>} array
 * @param {string} item
 * @return {number} Returns the index when found. Returns -1 when not found
 */
	function findIndex (array, item) {
		return array
			.map(function (i) {
				return i.toLowerCase();
			})
			.indexOf(item.toLowerCase());
	}

	/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */
	function validateOption(options, name, values) {
		if (options[name] !== undefined && !contains(values, options[name])) {
			var index = findIndex(values, options[name]);
			if (index !== -1) {
				// right value, wrong casing
				// TODO: lower case values are deprecated since v3, remove this warning some day.
				console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');

				options[name] = values[index]; // change the option to the right casing
			}
			else {
				// unknown value
				console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
			}
		}
	}

	exports.name = 'config';
	exports.math = true; // request the math namespace as fifth argument
	exports.factory = factory;

},{"../../utils/object":604}],122:[function(require,module,exports){
	'use strict';

	var lazy = require('../../utils/object').lazy;
	var isFactory = require('../../utils/object').isFactory;
	var traverse = require('../../utils/object').traverse;
	var extend = require('../../utils/object').extend;
	var ArgumentsError = require('../../error/ArgumentsError');

	function factory (type, config, load, typed, math) {
		/**
   * Import functions from an object or a module
   *
   * Syntax:
   *
   *    math.import(object)
   *    math.import(object, options)
   *
   * Where:
   *
   * - `object: Object`
   *   An object with functions to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!';
   *      }
   *    });
   *
   *    // use the imported function and variable
   *    math.myvalue * 2;               // 84
   *    math.hello('user');             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(require('numbers'), {wrap: true});
   *
   *    math.fibonacci(7); // returns 13
   *
   * @param {Object | Array} object   Object with functions to be imported.
   * @param {Object} [options]        Import options.
   */
		function math_import(object, options) {
			var num = arguments.length;
			if (num != 1 && num != 2) {
				throw new ArgumentsError('import', num, 1, 2);
			}

			if (!options) {
				options = {};
			}

			if (isFactory(object)) {
				_importFactory(object, options);
			}
			// TODO: allow a typed-function with name too
			else if (Array.isArray(object)) {
				object.forEach(function (entry) {
					math_import(entry, options);
				});
			}
			else if (typeof object === 'object') {
				// a map with functions
				for (var name in object) {
					if (object.hasOwnProperty(name)) {
						var value = object[name];
						if (isSupportedType(value)) {
							_import(name, value, options);
						}
						else if (isFactory(object)) {
							_importFactory(object, options);
						}
						else {
							math_import(value, options);
						}
					}
				}
			}
			else {
				if (!options.silent) {
					throw new TypeError('Factory, Object, or Array expected');
				}
			}
		}

		/**
   * Add a property to the math namespace and create a chain proxy for it.
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */
		function _import(name, value, options) {
			if (options.wrap && typeof value === 'function') {
				// create a wrapper around the function
				value = _wrap(value);
			}

			if (isTypedFunction(math[name]) && isTypedFunction(value)) {
				if (options.override) {
					// give the typed function the right name
					value = typed(name, value.signatures);
				}
				else {
					// merge the existing and typed function
					value = typed(math[name], value);
				}

				math[name] = value;
				_importTransform(name, value);
				math.emit('import', name, function resolver() {
					return value;
				});
				return;
			}

			if (math[name] === undefined || options.override) {
				math[name] = value;
				_importTransform(name, value);
				math.emit('import', name, function resolver() {
					return value;
				});
				return;
			}

			if (!options.silent) {
				throw new Error('Cannot import "' + name + '": already exists');
			}
		}

		function _importTransform (name, value) {
			if (value && typeof value.transform === 'function') {
				math.expression.transform[name] = value.transform;
			}
		}

		/**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */
		function _wrap (fn) {
			var wrapper = function wrapper () {
				var args = [];
				for (var i = 0, len = arguments.length; i < len; i++) {
					var arg = arguments[i];
					args[i] = arg && arg.valueOf();
				}
				return fn.apply(math, args);
			};

			if (fn.transform) {
				wrapper.transform = fn.transform;
			}

			return wrapper;
		}

		/**
   * Import an instance of a factory into math.js
   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
   * @param {Object} options  See import for a description of the options
   * @private
   */
		function _importFactory(factory, options) {
			if (typeof factory.name === 'string') {
				var name = factory.name;
				var namespace = factory.path ? traverse(math, factory.path) : math;
				var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

				var resolver = function () {
					var instance = load(factory);

					if (isTypedFunction(existing) && isTypedFunction(instance)) {
						if (options.override) {
							// replace the existing typed function (nothing to do)
						}
						else {
							// merge the existing and new typed function
							instance = typed(existing, instance);
						}

						return instance;
					}

					if (existing === undefined || options.override) {
						return instance;
					}

					if (!options.silent) {
						throw new Error('Cannot import "' + name + '": already exists');
					}
				};

				if (factory.lazy !== false) {
					lazy(namespace, name, resolver);
				}
				else {
					namespace[name] = resolver();
				}

				math.emit('import', name, resolver, factory.path);
			}
			else {
				// unnamed factory.
				// no lazy loading
				load(factory);
			}
		}

		/**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */
		function isSupportedType(object) {
			return typeof object == 'function'
        || typeof object === 'number'
        || typeof object === 'string'
        || typeof object === 'boolean'
        || object === null
        || (object && object.isUnit === true)
        || (object && object.isComplex === true)
        || (object && object.isBigNumber === true)
        || (object && object.isFraction === true)
        || (object && object.isMatrix === true)
        || (object && Array.isArray(object) === true);
		}

		/**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */
		function isTypedFunction (fn) {
			return typeof fn === 'function' && typeof fn.signatures === 'object';
		}

		return math_import;
	}

	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'import';
	exports.factory = factory;
	exports.lazy = true;

},{"../../error/ArgumentsError":124,"../../utils/object":604}],123:[function(require,module,exports){
	var typedFunction = require('typed-function');
	var digits = require('./../utils/number').digits;

	// returns a new instance of typed-function
	var createTyped = function () {
		// initially, return the original instance of typed-function
		// consecutively, return a new instance from typed.create.
		createTyped = typedFunction.create;
		return typedFunction;
	};

	/**
 * Factory function for creating a new typed instance
 * @param {Object} type   Object with data types like Complex and BigNumber
 * @returns {Function}
 */
	exports.create = function create(type) {
		// TODO: typed-function must be able to silently ignore signatures with unknown data types

		// get a new instance of typed-function
		var typed = createTyped();

		// define all types. The order of the types determines in which order function
		// arguments are type-checked (so for performance it's important to put the
		// most used types first).
		typed.types = [
			{ name: 'number',               test: function (x) { return typeof x === 'number'; } },
			{ name: 'Complex',              test: function (x) { return x && x.isComplex; } },
			{ name: 'BigNumber',            test: function (x) { return x && x.isBigNumber; } },
			{ name: 'Fraction',             test: function (x) { return x && x.isFraction; } },
			{ name: 'Unit',                 test: function (x) { return x && x.isUnit; } },
			{ name: 'string',               test: function (x) { return typeof x === 'string'; } },
			{ name: 'Array',                test: Array.isArray },
			{ name: 'Matrix',               test: function (x) { return x && x.isMatrix; } },
			{ name: 'DenseMatrix',          test: function (x) { return x && x.isDenseMatrix; } },
			{ name: 'SparseMatrix',         test: function (x) { return x && x.isSparseMatrix; } },
			{ name: 'ImmutableDenseMatrix', test: function (x) { return x && x.isImmutableDenseMatrix; } },
			{ name: 'Range',                test: function (x) { return x && x.isRange; } },
			{ name: 'Index',                test: function (x) { return x && x.isIndex; } },
			{ name: 'boolean',              test: function (x) { return typeof x === 'boolean'; } },
			{ name: 'ResultSet',            test: function (x) { return x && x.isResultSet; } },
			{ name: 'Help',                 test: function (x) { return x && x.isHelp; } },
			{ name: 'function',             test: function (x) { return typeof x === 'function';} },
			{ name: 'Date',                 test: function (x) { return x instanceof Date; } },
			{ name: 'RegExp',               test: function (x) { return x instanceof RegExp; } },
			{ name: 'Object',               test: function (x) { return typeof x === 'object'; } },
			{ name: 'null',                 test: function (x) { return x === null; } },
			{ name: 'undefined',            test: function (x) { return x === undefined; } }
		];

		// TODO: add conversion from BigNumber to number?
		typed.conversions = [
			{
				from: 'number',
				to: 'BigNumber',
				convert: function (x) {
					// note: conversion from number to BigNumber can fail if x has >15 digits
					if (digits(x) > 15) {
						throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +
          '(value: ' + x + '). ' +
          'Use function bignumber(x) to convert to BigNumber.');
					}
					return new type.BigNumber(x);
				}
			}, {
				from: 'number',
				to: 'Complex',
				convert: function (x) {
					return new type.Complex(x, 0);
				}
			}, {
				from: 'number',
				to: 'string',
				convert: function (x) {
					return x + '';
				}
			}, {
				from: 'BigNumber',
				to: 'Complex',
				convert: function (x) {
					return new type.Complex(x.toNumber(), 0);
				}
			}, {
				from: 'Fraction',
				to: 'Complex',
				convert: function (x) {
					return new type.Complex(x.valueOf(), 0);
				}
			}, {
				from: 'number',
				to: 'Fraction',
				convert: function (x) {
					if (digits(x) > 15) {
						throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' +
              '(value: ' + x + '). ' +
              'Use function fraction(x) to convert to Fraction.');
					}
					return new type.Fraction(x);
				}
			}, {
				// FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
				//  from: 'Fraction',
				//  to: 'number',
				//  convert: function (x) {
				//    return x.valueOf();
				//  }
				//}, {
				from: 'string',
				to: 'number',
				convert: function (x) {
					var n = Number(x);
					if (isNaN(n)) {
						throw new Error('Cannot convert "' + x + '" to a number');
					}
					return n;
				}
			}, {
				from: 'boolean',
				to: 'number',
				convert: function (x) {
					return +x;
				}
			}, {
				from: 'boolean',
				to: 'BigNumber',
				convert: function (x) {
					return new type.BigNumber(+x);
				}
			}, {
				from: 'boolean',
				to: 'Fraction',
				convert: function (x) {
					return new type.Fraction(+x);
				}
			}, {
				from: 'boolean',
				to: 'string',
				convert: function (x) {
					return +x;
				}
			}, {
				from: 'null',
				to: 'number',
				convert: function () {
					return 0;
				}
			}, {
				from: 'null',
				to: 'string',
				convert: function () {
					return 'null';
				}
			}, {
				from: 'null',
				to: 'BigNumber',
				convert: function () {
					return new type.BigNumber(0);
				}
			}, {
				from: 'null',
				to: 'Fraction',
				convert: function () {
					return new type.Fraction(0);
				}
			}, {
				from: 'Array',
				to: 'Matrix',
				convert: function (array) {
					// TODO: how to decide on the right type of matrix to create?
					return new type.DenseMatrix(array);
				}
			}, {
				from: 'Matrix',
				to: 'Array',
				convert: function (matrix) {
					return matrix.valueOf();
				}
			}
		];

		return typed;
	};

},{"./../utils/number":603,"typed-function":790}],124:[function(require,module,exports){
	'use strict';

	/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
	function ArgumentsError(fn, count, min, max) {
		if (!(this instanceof ArgumentsError)) {
			throw new SyntaxError('Constructor must be called with the new operator');
		}

		this.fn = fn;
		this.count = count;
		this.min = min;
		this.max = max;

		this.message = 'Wrong number of arguments in function ' + fn +
      ' (' + count + ' provided, ' +
      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';

		this.stack = (new Error()).stack;
	}

	ArgumentsError.prototype = new Error();
	ArgumentsError.prototype.constructor = Error;
	ArgumentsError.prototype.name = 'ArgumentsError';
	ArgumentsError.prototype.isArgumentsError = true;

	module.exports = ArgumentsError;

},{}],125:[function(require,module,exports){
	'use strict';

	/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
	function DimensionError(actual, expected, relation) {
		if (!(this instanceof DimensionError)) {
			throw new SyntaxError('Constructor must be called with the new operator');
		}

		this.actual   = actual;
		this.expected = expected;
		this.relation = relation;

		this.message = 'Dimension mismatch (' +
      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +
      ' ' + (this.relation || '!=') + ' ' +
      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +
      ')';

		this.stack = (new Error()).stack;
	}

	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;

	module.exports = DimensionError;

},{}],126:[function(require,module,exports){
	'use strict';

	/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
	function IndexError(index, min, max) {
		if (!(this instanceof IndexError)) {
			throw new SyntaxError('Constructor must be called with the new operator');
		}

		this.index = index;
		if (arguments.length < 3) {
			this.min = 0;
			this.max = min;
		}
		else {
			this.min = min;
			this.max = max;
		}

		if (this.min !== undefined && this.index < this.min) {
			this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
		}
		else if (this.max !== undefined && this.index >= this.max) {
			this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
		}
		else {
			this.message = 'Index out of range (' + this.index + ')';
		}

		this.stack = (new Error()).stack;
	}

	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;

	module.exports = IndexError;

},{}],127:[function(require,module,exports){
	'use strict';

	var ArgumentsError = require('./ArgumentsError');
	var DimensionError = require('./DimensionError');
	var IndexError = require('./IndexError');

	module.exports = [
		{
			name: 'ArgumentsError', path: 'error',
			factory: function () {
				return ArgumentsError;
			}
		},
		{
			name: 'DimensionError',
			path: 'error',
			factory: function () {
				return DimensionError;
			}
		},
		{
			name: 'IndexError',
			path: 'error',
			factory: function () {
				return IndexError;
			}
		}
	];

	// TODO: implement an InvalidValueError?

},{"./ArgumentsError":124,"./DimensionError":125,"./IndexError":126}],128:[function(require,module,exports){
	'use strict';

	var object = require('../utils/object');
	var string = require('../utils/string');

	function factory (type, config, load, typed) {
		var parser = load(require('./function/parser'))();

		/**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
		function Help(doc) {
			if (!(this instanceof Help)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			if (!doc)  throw new Error('Argument "doc" missing');

			this.doc = doc;
		}

		/**
   * Attach type information
   */
		Help.prototype.type = 'Help';
		Help.prototype.isHelp = true;

		/**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */
		Help.prototype.toString = function () {
			var doc = this.doc || {};
			var desc = '\n';

			if (doc.name) {
				desc += 'Name: ' + doc.name + '\n\n';
			}
			if (doc.category) {
				desc += 'Category: ' + doc.category + '\n\n';
			}
			if (doc.description) {
				desc += 'Description:\n    ' + doc.description + '\n\n';
			}
			if (doc.syntax) {
				desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
			}
			if (doc.examples) {
				desc += 'Examples:\n';
				for (var i = 0; i < doc.examples.length; i++) {
					var expr = doc.examples[i];
					desc += '    ' + expr + '\n';

					var res;
					try {
						res = parser.eval(expr);
					}
					catch (e) {
						res = e;
					}
					if (res && !res.isHelp) {
						desc += '        ' + string.format(res, {precision: 14}) + '\n';
					}
				}
				desc += '\n';
			}
			if (doc.seealso) {
				desc += 'See also: ' + doc.seealso.join(', ') + '\n';
			}

			return desc;
		};

		/**
   * Export the help object to JSON
   */
		Help.prototype.toJSON = function () {
			var obj = object.clone(this.doc);
			obj.mathjs = 'Help';
			return obj;
		};

		/**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */
		Help.fromJSON = function (json) {
			var doc = {};
			for (var prop in json) {
				if (prop !== 'mathjs') { // ignore mathjs field
					doc[prop] = json[prop];
				}
			}
			return new Help(doc);
		};

		/**
   * Returns a string representation of the Help object
   */
		Help.prototype.valueOf = Help.prototype.toString;

		return Help;
	}

	exports.name = 'Help';
	exports.path = 'type';
	exports.factory = factory;

},{"../utils/object":604,"../utils/string":605,"./function/parser":309}],129:[function(require,module,exports){
	'use strict';

	var extend = require('../utils/object').extend;

	function factory (type, config, load, typed, math) {
		var _parse = load(require('./parse'));

		/**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    var result = parser.eval(expr);    // evaluate an expression
   *    var value = parser.get(name);      // retrieve a variable from the parser
   *    var values = parser.getAll();      // retrieve all defined variables
   *    parser.set(name, value);           // set a variable in the parser
   *    parser.remove(name);               // clear a variable from the
   *                                       // parsers scope
   *    parser.clear();                    // clear the parsers scope
   *
   * Example usage:
   *    var parser = new Parser();
   *    // Note: there is a convenience method which can be used instead:
   *    // var parser = new math.parser();
   *
   *    // evaluate expressions
   *    parser.eval('sqrt(3^2 + 4^2)');         // 5
   *    parser.eval('sqrt(-4)');                // 2i
   *    parser.eval('2 inch in cm');            // 5.08 cm
   *    parser.eval('cos(45 deg)');             // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.eval('x = 7 / 2');               // 3.5
   *    parser.eval('x + 3');                   // 6.5
   *    parser.eval('function f(x, y) = x^y');  // f(x, y)
   *    parser.eval('f(2, 3)');                 // 8
   *
   *    // get and set variables and functions
   *    var x = parser.get('x');                // 7
   *    var f = parser.get('f');                // function
   *    var g = f(3, 2);                        // 9
   *    parser.set('h', 500);
   *    var i = parser.eval('h / 2');           // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!';
   *    });
   *    parser.eval('hello("user")');           // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear();
   *
   */
		function Parser() {
			if (!(this instanceof Parser)) {
				throw new SyntaxError(
					'Constructor must be called with the new operator');
			}
			this.scope = {};
		}

		/**
   * Attach type information
   */
		Parser.prototype.type = 'Parser';
		Parser.prototype.isParser = true;

		/**
   * Parse an expression and return the parsed function node.
   * The node tree can be compiled via `code = node.compile(math)`,
   * and the compiled code can be executed as `code.eval([scope])`
   * @param {string} expr
   * @return {Node} node
   * @throws {Error}
   */
		Parser.prototype.parse = function (expr) {
			throw new Error('Parser.parse is deprecated. Use math.parse instead.');
		};

		/**
   * Parse and compile an expression, return the compiled javascript code.
   * The node can be evaluated via code.eval([scope])
   * @param {string} expr
   * @return {{eval: function}} code
   * @throws {Error}
   */
		Parser.prototype.compile = function (expr) {
			throw new Error('Parser.compile is deprecated. Use math.compile instead.');
		};

		/**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */
		Parser.prototype.eval = function (expr) {
			// TODO: validate arguments
			return _parse(expr)
				.compile()
				.eval(this.scope);
		};

		/**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */
		Parser.prototype.get = function (name) {
			// TODO: validate arguments
			return this.scope[name];
		};

		/**
   * Get a map with all defined variables
   * @return {Object} values
   */
		Parser.prototype.getAll = function () {
			return extend({}, this.scope);
		};

		/**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */
		Parser.prototype.set = function (name, value) {
			// TODO: validate arguments
			return this.scope[name] = value;
		};

		/**
   * Remove a variable from the parsers scope
   * @param {string} name
   */
		Parser.prototype.remove = function (name) {
			// TODO: validate arguments
			delete this.scope[name];
		};

		/**
   * Clear the scope with variables and functions
   */
		Parser.prototype.clear = function () {
			for (var name in this.scope) {
				if (this.scope.hasOwnProperty(name)) {
					delete this.scope[name];
				}
			}
		};

		return Parser;
	}

	exports.name = 'Parser';
	exports.path = 'expression';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument

},{"../utils/object":604,"./parse":332}],130:[function(require,module,exports){
	module.exports = {
		'name': 'Infinity',
		'category': 'Constants',
		'syntax': [
			'Infinity'
		],
		'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
		'examples': [
			'Infinity',
			'1 / 0'
		],
		'seealso': []
	};

},{}],131:[function(require,module,exports){
	module.exports = {
		'name': 'LN10',
		'category': 'Constants',
		'syntax': [
			'LN10'
		],
		'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
		'examples': [
			'LN10',
			'log(10)'
		],
		'seealso': []
	};

},{}],132:[function(require,module,exports){
	module.exports = {
		'name': 'LN2',
		'category': 'Constants',
		'syntax': [
			'LN2'
		],
		'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
		'examples': [
			'LN2',
			'log(2)'
		],
		'seealso': []
	};

},{}],133:[function(require,module,exports){
	module.exports = {
		'name': 'LOG10E',
		'category': 'Constants',
		'syntax': [
			'LOG10E'
		],
		'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
		'examples': [
			'LOG10E',
			'log(e, 10)'
		],
		'seealso': []
	};

},{}],134:[function(require,module,exports){
	module.exports = {
		'name': 'LOG2E',
		'category': 'Constants',
		'syntax': [
			'LOG2E'
		],
		'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
		'examples': [
			'LOG2E',
			'log(e, 2)'
		],
		'seealso': []
	};

},{}],135:[function(require,module,exports){
	module.exports = {
		'name': 'NaN',
		'category': 'Constants',
		'syntax': [
			'NaN'
		],
		'description': 'Not a number',
		'examples': [
			'NaN',
			'0 / 0'
		],
		'seealso': []
	};

},{}],136:[function(require,module,exports){
	module.exports = {
		'name': 'SQRT1_2',
		'category': 'Constants',
		'syntax': [
			'SQRT1_2'
		],
		'description': 'Returns the square root of 1/2, approximately equal to 0.707',
		'examples': [
			'SQRT1_2',
			'sqrt(1/2)'
		],
		'seealso': []
	};

},{}],137:[function(require,module,exports){
	module.exports = {
		'name': 'SQRT2',
		'category': 'Constants',
		'syntax': [
			'SQRT2'
		],
		'description': 'Returns the square root of 2, approximately equal to 1.414',
		'examples': [
			'SQRT2',
			'sqrt(2)'
		],
		'seealso': []
	};

},{}],138:[function(require,module,exports){
	module.exports = {
		'name': 'e',
		'category': 'Constants',
		'syntax': [
			'e'
		],
		'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
		'examples': [
			'e',
			'e ^ 2',
			'exp(2)',
			'log(e)'
		],
		'seealso': ['exp']
	};

},{}],139:[function(require,module,exports){
	module.exports = {
		'name': 'false',
		'category': 'Constants',
		'syntax': [
			'false'
		],
		'description': 'Boolean value false',
		'examples': [
			'false'
		],
		'seealso': ['true']
	};

},{}],140:[function(require,module,exports){
	module.exports = {
		'name': 'i',
		'category': 'Constants',
		'syntax': [
			'i'
		],
		'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
		'examples': [
			'i',
			'i * i',
			'sqrt(-1)'
		],
		'seealso': []
	};

},{}],141:[function(require,module,exports){
	module.exports = {
		'name': 'null',
		'category': 'Constants',
		'syntax': [
			'null'
		],
		'description': 'Value null',
		'examples': [
			'null'
		],
		'seealso': ['true', 'false']
	};

},{}],142:[function(require,module,exports){
	module.exports = {
		'name': 'phi',
		'category': 'Constants',
		'syntax': [
			'phi'
		],
		'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
		'examples': [
			'tau'
		],
		'seealso': []
	};

},{}],143:[function(require,module,exports){
	module.exports = {
		'name': 'pi',
		'category': 'Constants',
		'syntax': [
			'pi'
		],
		'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
		'examples': [
			'pi',
			'sin(pi/2)'
		],
		'seealso': ['tau']
	};

},{}],144:[function(require,module,exports){
	module.exports = {
		'name': 'tau',
		'category': 'Constants',
		'syntax': [
			'tau'
		],
		'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
		'examples': [
			'tau',
			'2 * pi'
		],
		'seealso': ['pi']
	};

},{}],145:[function(require,module,exports){
	module.exports = {
		'name': 'true',
		'category': 'Constants',
		'syntax': [
			'true'
		],
		'description': 'Boolean value true',
		'examples': [
			'true'
		],
		'seealso': ['false']
	};

},{}],146:[function(require,module,exports){
	module.exports = {
		'name': 'version',
		'category': 'Constants',
		'syntax': [
			'version'
		],
		'description': 'A string with the version number of math.js',
		'examples': [
			'version'
		],
		'seealso': []
	};

},{}],147:[function(require,module,exports){
	module.exports = {
		'name': 'bignumber',
		'category': 'Construction',
		'syntax': [
			'bignumber(x)'
		],
		'description':
      'Create a big number from a number or string.',
		'examples': [
			'0.1 + 0.2',
			'bignumber(0.1) + bignumber(0.2)',
			'bignumber("7.2")',
			'bignumber("7.2e500")',
			'bignumber([0.1, 0.2, 0.3])'
		],
		'seealso': [
			'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
		]
	};

},{}],148:[function(require,module,exports){
	module.exports = {
		'name': 'boolean',
		'category': 'Construction',
		'syntax': [
			'x',
			'boolean(x)'
		],
		'description':
      'Convert a string or number into a boolean.',
		'examples': [
			'boolean(0)',
			'boolean(1)',
			'boolean(3)',
			'boolean("true")',
			'boolean("false")',
			'boolean([1, 0, 1, 1])'
		],
		'seealso': [
			'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'
		]
	};

},{}],149:[function(require,module,exports){
	module.exports = {
		'name': 'complex',
		'category': 'Construction',
		'syntax': [
			'complex()',
			'complex(re, im)',
			'complex(string)'
		],
		'description':
      'Create a complex number.',
		'examples': [
			'complex()',
			'complex(2, 3)',
			'complex("7 - 2i")'
		],
		'seealso': [
			'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'
		]
	};

},{}],150:[function(require,module,exports){
	module.exports = {
		'name': 'fraction',
		'category': 'Construction',
		'syntax': [
			'fraction(num)',
			'fraction(num,den)'
		],
		'description':
    'Create a fraction from a number or from a numerator and denominator.',
		'examples': [
			'fraction(0.125)',
			'fraction(1, 3) + fraction(2, 5)'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'
		]
	};

},{}],151:[function(require,module,exports){
	module.exports = {
		'name': 'index',
		'category': 'Construction',
		'syntax': [
			'[start]',
			'[start:end]',
			'[start:step:end]',
			'[start1, start 2, ...]',
			'[start1:end1, start2:end2, ...]',
			'[start1:step1:end1, start2:step2:end2, ...]'
		],
		'description':
      'Create an index to get or replace a subset of a matrix',
		'examples': [
			'[]',
			'[1, 2, 3]',
			'A = [1, 2, 3; 4, 5, 6]',
			'A[1, :]',
			'A[1, 2] = 50',
			'A[0:2, 0:2] = ones(2, 2)'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'
		]
	};

},{}],152:[function(require,module,exports){
	module.exports = {
		'name': 'matrix',
		'category': 'Construction',
		'syntax': [
			'[]',
			'[a1, b1, ...; a2, b2, ...]',
			'matrix()',
			'matrix("dense")',
			'matrix([...])'
		],
		'description':
      'Create a matrix.',
		'examples': [
			'[]',
			'[1, 2, 3]',
			'[1, 2, 3; 4, 5, 6]',
			'matrix()',
			'matrix([3, 4])',
			'matrix([3, 4; 5, 6], "sparse")',
			'matrix([3, 4; 5, 6], "sparse", "number")'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'
		]
	};

},{}],153:[function(require,module,exports){
	module.exports = {
		'name': 'number',
		'category': 'Construction',
		'syntax': [
			'x',
			'number(x)'
		],
		'description':
      'Create a number or convert a string or boolean into a number.',
		'examples': [
			'2',
			'2e3',
			'4.05',
			'number(2)',
			'number("7.2")',
			'number(true)',
			'number([true, false, true, true])',
			'number("52cm", "m")'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
		]
	};

},{}],154:[function(require,module,exports){
	module.exports = {
		'name': 'sparse',
		'category': 'Construction',
		'syntax': [
			'sparse()',
			'sparse([a1, b1, ...; a1, b2, ...])',
			'sparse([a1, b1, ...; a1, b2, ...], "number")'
		],
		'description':
  'Create a sparse matrix.',
		'examples': [
			'sparse()',
			'sparse([3, 4; 5, 6])',
			'sparse([3, 0; 5, 0], "number")'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'
		]
	};

},{}],155:[function(require,module,exports){
	module.exports = {
		'name': 'string',
		'category': 'Construction',
		'syntax': [
			'"text"',
			'string(x)'
		],
		'description':
      'Create a string or convert a value to a string',
		'examples': [
			'"Hello World!"',
			'string(4.2)',
			'string(3 + 2i)'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'
		]
	};

},{}],156:[function(require,module,exports){
	module.exports = {
		'name': 'unit',
		'category': 'Construction',
		'syntax': [
			'value unit',
			'unit(value, unit)',
			'unit(string)'
		],
		'description':
      'Create a unit.',
		'examples': [
			'5.5 mm',
			'3 inch',
			'unit(7.1, "kilogram")',
			'unit("23 deg")'
		],
		'seealso': [
			'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'
		]
	};

},{}],157:[function(require,module,exports){
	module.exports = {
		'name': 'config',
		'category': 'Core',
		'syntax': [
			'config()',
			'config(options)'
		],
		'description': 'Get configuration or change configuration.',
		'examples': [
			'config()',
			'1/3 + 1/4',
			'config({number: "Fraction"})',
			'1/3 + 1/4'
		],
		'seealso': []
	};

},{}],158:[function(require,module,exports){
	module.exports = {
		'name': 'import',
		'category': 'Core',
		'syntax': [
			'import(functions)',
			'import(functions, options)'
		],
		'description': 'Import functions or constants from an object.',
		'examples': [
			'import({myFn: f(x)=x^2, myConstant: 32 })',
			'myFn(2)',
			'myConstant'
		],
		'seealso': []
	};

},{}],159:[function(require,module,exports){
	module.exports = {
		'name': 'typed',
		'category': 'Core',
		'syntax': [
			'typed(signatures)',
			'typed(name, signatures)'
		],
		'description': 'Create a typed function.',
		'examples': [
			'double = typed({ "number, number": f(x)=x+x })',
			'double(2)',
			'double("hello")'
		],
		'seealso': []
	};

},{}],160:[function(require,module,exports){
	module.exports = {
		'name': 'lsolve',
		'category': 'Algebra',
		'syntax': [
			'x=lsolve(L, b)'
		],
		'description':
  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
		'examples': [
			'a = [-2, 3; 2, 1]',
			'b = [11, 9]',
			'x = lsolve(a, b)'
		],
		'seealso': [
			'lup', 'lusolve', 'usolve', 'matrix', 'sparse'
		]
	};

},{}],161:[function(require,module,exports){
	module.exports = {
		'name': 'lup',
		'category': 'Algebra',
		'syntax': [
			'lup(m)'
		],
		'description':
  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
		'examples': [
			'lup([[2, 1], [1, 4]])',
			'lup(matrix([[2, 1], [1, 4]]))',
			'lup(sparse([[2, 1], [1, 4]]))'
		],
		'seealso': [
			'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'
		]
	};

},{}],162:[function(require,module,exports){
	module.exports = {
		'name': 'lusolve',
		'category': 'Algebra',
		'syntax': [
			'x=lusolve(A, b)',
			'x=lusolve(lu, b)'
		],
		'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
		'examples': [
			'a = [-2, 3; 2, 1]',
			'b = [11, 9]',
			'x = lusolve(a, b)'
		],
		'seealso': [
			'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'
		]
	};

},{}],163:[function(require,module,exports){
	module.exports = {
		'name': 'slu',
		'category': 'Algebra',
		'syntax': [
			'slu(A, order, threshold)'
		],
		'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
		'examples': [
			'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
		],
		'seealso': [
			'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'
		]
	};

},{}],164:[function(require,module,exports){
	module.exports = {
		'name': 'usolve',
		'category': 'Algebra',
		'syntax': [
			'x=usolve(U, b)'
		],
		'description':
  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
		'examples': [
			'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
		],
		'seealso': [
			'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'
		]
	};

},{}],165:[function(require,module,exports){
	module.exports = {
		'name': 'abs',
		'category': 'Arithmetic',
		'syntax': [
			'abs(x)'
		],
		'description': 'Compute the absolute value.',
		'examples': [
			'abs(3.5)',
			'abs(-4.2)'
		],
		'seealso': ['sign']
	};

},{}],166:[function(require,module,exports){
	module.exports = {
		'name': 'add',
		'category': 'Operators',
		'syntax': [
			'x + y',
			'add(x, y)'
		],
		'description': 'Add two values.',
		'examples': [
			'a = 2.1 + 3.6',
			'a - 3.6',
			'3 + 2i',
			'3 cm + 2 inch',
			'"2.3" + "4"'
		],
		'seealso': [
			'subtract'
		]
	};

},{}],167:[function(require,module,exports){
	module.exports = {
		'name': 'cbrt',
		'category': 'Arithmetic',
		'syntax': [
			'cbrt(x)',
			'cbrt(x, allRoots)'
		],
		'description':
      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
		'examples': [
			'cbrt(64)',
			'cube(4)',
			'cbrt(-8)',
			'cbrt(2 + 3i)',
			'cbrt(8i)',
			'cbrt(8i, true)',
			'cbrt(27 m^3)'
		],
		'seealso': [
			'square',
			'sqrt',
			'cube',
			'multiply'
		]
	};

},{}],168:[function(require,module,exports){
	module.exports = {
		'name': 'ceil',
		'category': 'Arithmetic',
		'syntax': [
			'ceil(x)'
		],
		'description':
      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
		'examples': [
			'ceil(3.2)',
			'ceil(3.8)',
			'ceil(-4.2)'
		],
		'seealso': ['floor', 'fix', 'round']
	};

},{}],169:[function(require,module,exports){
	module.exports = {
		'name': 'cube',
		'category': 'Arithmetic',
		'syntax': [
			'cube(x)'
		],
		'description': 'Compute the cube of a value. The cube of x is x * x * x.',
		'examples': [
			'cube(2)',
			'2^3',
			'2 * 2 * 2'
		],
		'seealso': [
			'multiply',
			'square',
			'pow'
		]
	};

},{}],170:[function(require,module,exports){
	module.exports = {
		'name': 'divide',
		'category': 'Operators',
		'syntax': [
			'x / y',
			'divide(x, y)'
		],
		'description': 'Divide two values.',
		'examples': [
			'a = 2 / 3',
			'a * 3',
			'4.5 / 2',
			'3 + 4 / 2',
			'(3 + 4) / 2',
			'18 km / 4.5'
		],
		'seealso': [
			'multiply'
		]
	};

},{}],171:[function(require,module,exports){
	module.exports = {
		'name': 'dotDivide',
		'category': 'Operators',
		'syntax': [
			'x ./ y',
			'dotDivide(x, y)'
		],
		'description': 'Divide two values element wise.',
		'examples': [
			'a = [1, 2, 3; 4, 5, 6]',
			'b = [2, 1, 1; 3, 2, 5]',
			'a ./ b'
		],
		'seealso': [
			'multiply',
			'dotMultiply',
			'divide'
		]
	};

},{}],172:[function(require,module,exports){
	module.exports = {
		'name': 'dotMultiply',
		'category': 'Operators',
		'syntax': [
			'x .* y',
			'dotMultiply(x, y)'
		],
		'description': 'Multiply two values element wise.',
		'examples': [
			'a = [1, 2, 3; 4, 5, 6]',
			'b = [2, 1, 1; 3, 2, 5]',
			'a .* b'
		],
		'seealso': [
			'multiply',
			'divide',
			'dotDivide'
		]
	};

},{}],173:[function(require,module,exports){
	module.exports = {
		'name': 'dotpow',
		'category': 'Operators',
		'syntax': [
			'x .^ y',
			'dotpow(x, y)'
		],
		'description':
      'Calculates the power of x to y element wise.',
		'examples': [
			'a = [1, 2, 3; 4, 5, 6]',
			'a .^ 2'
		],
		'seealso': [
			'pow'
		]
	};

},{}],174:[function(require,module,exports){
	module.exports = {
		'name': 'exp',
		'category': 'Arithmetic',
		'syntax': [
			'exp(x)'
		],
		'description': 'Calculate the exponent of a value.',
		'examples': [
			'exp(1.3)',
			'e ^ 1.3',
			'log(exp(1.3))',
			'x = 2.4',
			'(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
		],
		'seealso': [
			'pow',
			'log'
		]
	};

},{}],175:[function(require,module,exports){
	module.exports = {
		'name': 'fix',
		'category': 'Arithmetic',
		'syntax': [
			'fix(x)'
		],
		'description':
      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
		'examples': [
			'fix(3.2)',
			'fix(3.8)',
			'fix(-4.2)',
			'fix(-4.8)'
		],
		'seealso': ['ceil', 'floor', 'round']
	};

},{}],176:[function(require,module,exports){
	module.exports = {
		'name': 'floor',
		'category': 'Arithmetic',
		'syntax': [
			'floor(x)'
		],
		'description':
      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
		'examples': [
			'floor(3.2)',
			'floor(3.8)',
			'floor(-4.2)'
		],
		'seealso': ['ceil', 'fix', 'round']
	};

},{}],177:[function(require,module,exports){
	module.exports = {
		'name': 'gcd',
		'category': 'Arithmetic',
		'syntax': [
			'gcd(a, b)',
			'gcd(a, b, c, ...)'
		],
		'description': 'Compute the greatest common divisor.',
		'examples': [
			'gcd(8, 12)',
			'gcd(-4, 6)',
			'gcd(25, 15, -10)'
		],
		'seealso': [ 'lcm', 'xgcd' ]
	};

},{}],178:[function(require,module,exports){
	module.exports = {
		'name': 'hypot',
		'category': 'Arithmetic',
		'syntax': [
			'hypot(a, b, c, ...)',
			'hypot([a, b, c, ...])'
		],
		'description': 'Calculate the hypotenusa of a list with values. ',
		'examples': [
			'hypot(3, 4)',
			'sqrt(3^2 + 4^2)',
			'hypot(-2)',
			'hypot([3, 4, 5])'
		],
		'seealso': [ 'abs', 'norm' ]
	};

},{}],179:[function(require,module,exports){
	module.exports = {
		'name': 'lcm',
		'category': 'Arithmetic',
		'syntax': [
			'lcm(x, y)'
		],
		'description': 'Compute the least common multiple.',
		'examples': [
			'lcm(4, 6)',
			'lcm(6, 21)',
			'lcm(6, 21, 5)'
		],
		'seealso': [ 'gcd' ]
	};

},{}],180:[function(require,module,exports){
	module.exports = {
		'name': 'log',
		'category': 'Arithmetic',
		'syntax': [
			'log(x)',
			'log(x, base)'
		],
		'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
		'examples': [
			'log(3.5)',
			'a = log(2.4)',
			'exp(a)',
			'10 ^ 4',
			'log(10000, 10)',
			'log(10000) / log(10)',
			'b = log(1024, 2)',
			'2 ^ b'
		],
		'seealso': [
			'exp',
			'log10'
		]
	};
},{}],181:[function(require,module,exports){
	module.exports = {
		'name': 'log10',
		'category': 'Arithmetic',
		'syntax': [
			'log10(x)'
		],
		'description': 'Compute the 10-base logarithm of a value.',
		'examples': [
			'log10(0.00001)',
			'log10(10000)',
			'10 ^ 4',
			'log(10000) / log(10)',
			'log(10000, 10)'
		],
		'seealso': [
			'exp',
			'log'
		]
	};

},{}],182:[function(require,module,exports){
	module.exports = {
		'name': 'mod',
		'category': 'Operators',
		'syntax': [
			'x % y',
			'x mod y',
			'mod(x, y)'
		],
		'description':
      'Calculates the modulus, the remainder of an integer division.',
		'examples': [
			'7 % 3',
			'11 % 2',
			'10 mod 4',
			'function isOdd(x) = x % 2',
			'isOdd(2)',
			'isOdd(3)'
		],
		'seealso': ['divide']
	};

},{}],183:[function(require,module,exports){
	module.exports = {
		'name': 'multiply',
		'category': 'Operators',
		'syntax': [
			'x * y',
			'multiply(x, y)'
		],
		'description': 'multiply two values.',
		'examples': [
			'a = 2.1 * 3.4',
			'a / 3.4',
			'2 * 3 + 4',
			'2 * (3 + 4)',
			'3 * 2.1 km'
		],
		'seealso': [
			'divide'
		]
	};

},{}],184:[function(require,module,exports){
	module.exports = {
		'name': 'norm',
		'category': 'Arithmetic',
		'syntax': [
			'norm(x)',
			'norm(x, p)'
		],
		'description': 'Calculate the norm of a number, vector or matrix.',
		'examples': [
			'abs(-3.5)',
			'norm(-3.5)',
			'norm(3 - 4i))',
			'norm([1, 2, -3], Infinity)',
			'norm([1, 2, -3], -Infinity)',
			'norm([3, 4], 2)',
			'norm([[1, 2], [3, 4]], 1)',
			'norm([[1, 2], [3, 4]], \'inf\')',
			'norm([[1, 2], [3, 4]], \'fro\')'
		]
	};

},{}],185:[function(require,module,exports){
	module.exports = {
		'name': 'nthRoot',
		'category': 'Arithmetic',
		'syntax': [
			'nthRoot(a)',
			'nthRoot(a, root)'
		],
		'description': 'Calculate the nth root of a value. ' +
      'The principal nth root of a positive real number A, ' +
      'is the positive real solution of the equation "x^root = A".',
		'examples': [
			'4 ^ 3',
			'nthRoot(64, 3)',
			'nthRoot(9, 2)',
			'sqrt(9)'
		],
		'seealso': [
			'sqrt',
			'pow'
		]
	};
},{}],186:[function(require,module,exports){
	module.exports = {
		'name': 'pow',
		'category': 'Operators',
		'syntax': [
			'x ^ y',
			'pow(x, y)'
		],
		'description':
      'Calculates the power of x to y, x^y.',
		'examples': [
			'2^3 = 8',
			'2*2*2',
			'1 + e ^ (pi * i)'
		],
		'seealso': [ 'multiply' ]
	};

},{}],187:[function(require,module,exports){
	module.exports = {
		'name': 'round',
		'category': 'Arithmetic',
		'syntax': [
			'round(x)',
			'round(x, n)'
		],
		'description':
      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
		'examples': [
			'round(3.2)',
			'round(3.8)',
			'round(-4.2)',
			'round(-4.8)',
			'round(pi, 3)',
			'round(123.45678, 2)'
		],
		'seealso': ['ceil', 'floor', 'fix']
	};

},{}],188:[function(require,module,exports){
	module.exports = {
		'name': 'sign',
		'category': 'Arithmetic',
		'syntax': [
			'sign(x)'
		],
		'description':
      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
		'examples': [
			'sign(3.5)',
			'sign(-4.2)',
			'sign(0)'
		],
		'seealso': [
			'abs'
		]
	};

},{}],189:[function(require,module,exports){
	module.exports = {
		'name': 'sqrt',
		'category': 'Arithmetic',
		'syntax': [
			'sqrt(x)'
		],
		'description':
      'Compute the square root value. If x = y * y, then y is the square root of x.',
		'examples': [
			'sqrt(25)',
			'5 * 5',
			'sqrt(-1)'
		],
		'seealso': [
			'square',
			'multiply'
		]
	};

},{}],190:[function(require,module,exports){
	module.exports = {
		'name': 'square',
		'category': 'Arithmetic',
		'syntax': [
			'square(x)'
		],
		'description':
      'Compute the square of a value. The square of x is x * x.',
		'examples': [
			'square(3)',
			'sqrt(9)',
			'3^2',
			'3 * 3'
		],
		'seealso': [
			'multiply',
			'pow',
			'sqrt',
			'cube'
		]
	};

},{}],191:[function(require,module,exports){
	module.exports = {
		'name': 'subtract',
		'category': 'Operators',
		'syntax': [
			'x - y',
			'subtract(x, y)'
		],
		'description': 'subtract two values.',
		'examples': [
			'a = 5.3 - 2',
			'a + 2',
			'2/3 - 1/6',
			'2 * 3 - 3',
			'2.1 km - 500m'
		],
		'seealso': [
			'add'
		]
	};

},{}],192:[function(require,module,exports){
	module.exports = {
		'name': 'unaryMinus',
		'category': 'Operators',
		'syntax': [
			'-x',
			'unaryMinus(x)'
		],
		'description':
      'Inverse the sign of a value. Converts booleans and strings to numbers.',
		'examples': [
			'-4.5',
			'-(-5.6)',
			'-"22"'
		],
		'seealso': [
			'add', 'subtract', 'unaryPlus'
		]
	};

},{}],193:[function(require,module,exports){
	module.exports = {
		'name': 'unaryPlus',
		'category': 'Operators',
		'syntax': [
			'+x',
			'unaryPlus(x)'
		],
		'description':
      'Converts booleans and strings to numbers.',
		'examples': [
			'+true',
			'+"2"'
		],
		'seealso': [
			'add', 'subtract', 'unaryMinus'
		]
	};

},{}],194:[function(require,module,exports){
	module.exports = {
		'name': 'xgcd',
		'category': 'Arithmetic',
		'syntax': [
			'xgcd(a, b)'
		],
		'description': 'Calculate the extended greatest common divisor for two values',
		'examples': [
			'xgcd(8, 12)',
			'gcd(8, 12)',
			'xgcd(36163, 21199)'
		],
		'seealso': [ 'gcd', 'lcm' ]
	};

},{}],195:[function(require,module,exports){
	module.exports = {
		'name': 'bitAnd',
		'category': 'Bitwise',
		'syntax': [
			'x & y',
			'bitAnd(x, y)'
		],
		'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
		'examples': [
			'5 & 3',
			'bitAnd(53, 131)',
			'[1, 12, 31] & 42'
		],
		'seealso': [
			'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
		]
	};

},{}],196:[function(require,module,exports){
	module.exports = {
		'name': 'bitNot',
		'category': 'Bitwise',
		'syntax': [
			'~x',
			'bitNot(x)'
		],
		'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
		'examples': [
			'~1',
			'~2',
			'bitNot([2, -3, 4])'
		],
		'seealso': [
			'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
		]
	};

},{}],197:[function(require,module,exports){
	module.exports = {
		'name': 'bitOr',
		'category': 'Bitwise',
		'syntax': [
			'x | y',
			'bitOr(x, y)'
		],
		'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
		'examples': [
			'5 | 3',
			'bitOr([1, 2, 3], 4)'
		],
		'seealso': [
			'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
		]
	};

},{}],198:[function(require,module,exports){
	module.exports = {
		'name': 'bitXor',
		'category': 'Bitwise',
		'syntax': [
			'bitXor(x, y)'
		],
		'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
		'examples': [
			'bitOr(1, 2)',
			'bitXor([2, 3, 4], 4)'
		],
		'seealso': [
			'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'
		]
	};

},{}],199:[function(require,module,exports){
	module.exports = {
		'name': 'leftShift',
		'category': 'Bitwise',
		'syntax': [
			'x << y',
			'leftShift(x, y)'
		],
		'description': 'Bitwise left logical shift of a value x by y number of bits.',
		'examples': [
			'4 << 1',
			'8 >> 1'
		],
		'seealso': [
			'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'
		]
	};

},{}],200:[function(require,module,exports){
	module.exports = {
		'name': 'rightArithShift',
		'category': 'Bitwise',
		'syntax': [
			'x >> y',
			'leftShift(x, y)'
		],
		'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
		'examples': [
			'8 >> 1',
			'4 << 1',
			'-12 >> 2'
		],
		'seealso': [
			'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'
		]
	};

},{}],201:[function(require,module,exports){
	module.exports = {
		'name': 'rightLogShift',
		'category': 'Bitwise',
		'syntax': [
			'x >> y',
			'leftShift(x, y)'
		],
		'description': 'Bitwise right logical shift of a value x by y number of bits.',
		'examples': [
			'8 >>> 1',
			'4 << 1',
			'-12 >>> 2'
		],
		'seealso': [
			'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'
		]
	};

},{}],202:[function(require,module,exports){
	module.exports = {
		'name': 'bellNumbers',
		'category': 'Combinatorics',
		'syntax': [
			'bellNumbers(n)'
		],
		'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
		'examples': [
			'bellNumbers(3)',
			'bellNumbers(8)'
		],
		'seealso': ['stirlingS2']
	};
},{}],203:[function(require,module,exports){
	module.exports = {
		'name': 'catalan',
		'category': 'Combinatorics',
		'syntax': [
			'catalan(n)'
		],
		'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
		'examples': [
			'catalan(3)',
			'catalan(8)'
		],
		'seealso': ['bellNumbers']
	};
},{}],204:[function(require,module,exports){
	module.exports = {
		'name': 'composition',
		'category': 'Combinatorics',
		'syntax': [
			'composition(n, k)'
		],
		'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
		'examples': [
			'composition(5, 3)'
		],
		'seealso': ['combinations']
	};
},{}],205:[function(require,module,exports){
	module.exports = {
		'name': 'stirlingS2',
		'category': 'Combinatorics',
		'syntax': [
			'stirlingS2(n, k)'
		],
		'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
		'examples': [
			'stirlingS2(5, 3)'
		],
		'seealso': ['bellNumbers']
	};

},{}],206:[function(require,module,exports){
	module.exports = {
		'name': 'arg',
		'category': 'Complex',
		'syntax': [
			'arg(x)'
		],
		'description':
      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
		'examples': [
			'arg(2 + 2i)',
			'atan2(3, 2)',
			'arg(2 + 3i)'
		],
		'seealso': [
			're',
			'im',
			'conj',
			'abs'
		]
	};

},{}],207:[function(require,module,exports){
	module.exports = {
		'name': 'conj',
		'category': 'Complex',
		'syntax': [
			'conj(x)'
		],
		'description':
      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
		'examples': [
			'conj(2 + 3i)',
			'conj(2 - 3i)',
			'conj(-5.2i)'
		],
		'seealso': [
			're',
			'im',
			'abs',
			'arg'
		]
	};

},{}],208:[function(require,module,exports){
	module.exports = {
		'name': 'im',
		'category': 'Complex',
		'syntax': [
			'im(x)'
		],
		'description': 'Get the imaginary part of a complex number.',
		'examples': [
			'im(2 + 3i)',
			're(2 + 3i)',
			'im(-5.2i)',
			'im(2.4)'
		],
		'seealso': [
			're',
			'conj',
			'abs',
			'arg'
		]
	};

},{}],209:[function(require,module,exports){
	module.exports = {
		'name': 're',
		'category': 'Complex',
		'syntax': [
			're(x)'
		],
		'description': 'Get the real part of a complex number.',
		'examples': [
			're(2 + 3i)',
			'im(2 + 3i)',
			're(-5.2i)',
			're(2.4)'
		],
		'seealso': [
			'im',
			'conj',
			'abs',
			'arg'
		]
	};

},{}],210:[function(require,module,exports){
	module.exports = {
		'name': 'eval',
		'category': 'Expression',
		'syntax': [
			'eval(expression)',
			'eval([expr1, expr2, expr3, ...])'
		],
		'description': 'Evaluate an expression or an array with expressions.',
		'examples': [
			'eval("2 + 3")',
			'eval("sqrt(" + 4 + ")")'
		],
		'seealso': []
	};

},{}],211:[function(require,module,exports){
	module.exports = {
		'name': 'help',
		'category': 'Expression',
		'syntax': [
			'help(object)',
			'help(string)'
		],
		'description': 'Display documentation on a function or data type.',
		'examples': [
			'help(sqrt)',
			'help("complex")'
		],
		'seealso': []
	};

},{}],212:[function(require,module,exports){
	module.exports = {
		'name': 'distance',
		'category': 'Geometry',
		'syntax': [
			'distance([x1, y1], [x2, y2])',
			'distance([[x1, y1], [x2, y2])'
		],
		'description': 'Calculates the Euclidean distance between two points.',
		'examples': [
			'distance([0,0], [4,4])',
			'distance([[0,0], [4,4]])'
		],
		'seealso': []
	};

},{}],213:[function(require,module,exports){
	module.exports = {
		'name': 'intersect',
		'category': 'Geometry',
		'syntax': [
			'intersect(expr1, expr2, expr3, expr4)',
			'intersect(expr1, expr2, expr3)'
		],
		'description': 'Computes the intersection point of lines and/or planes.',
		'examples': [
			'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
			'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
		],
		'seealso': []
	};

},{}],214:[function(require,module,exports){
	module.exports = {
		'name': 'and',
		'category': 'Logical',
		'syntax': [
			'x and y',
			'and(x, y)'
		],
		'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
		'examples': [
			'true and false',
			'true and true',
			'2 and 4'
		],
		'seealso': [
			'not', 'or', 'xor'
		]
	};

},{}],215:[function(require,module,exports){
	module.exports = {
		'name': 'not',
		'category': 'Logical',
		'syntax': [
			'not x',
			'not(x)'
		],
		'description': 'Logical not. Flips the boolean value of given argument.',
		'examples': [
			'not true',
			'not false',
			'not 2',
			'not 0'
		],
		'seealso': [
			'and', 'or', 'xor'
		]
	};

},{}],216:[function(require,module,exports){
	module.exports = {
		'name': 'or',
		'category': 'Logical',
		'syntax': [
			'x or y',
			'or(x, y)'
		],
		'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
		'examples': [
			'true or false',
			'false or false',
			'0 or 4'
		],
		'seealso': [
			'not', 'and', 'xor'
		]
	};

},{}],217:[function(require,module,exports){
	module.exports = {
		'name': 'xor',
		'category': 'Logical',
		'syntax': [
			'x or y',
			'or(x, y)'
		],
		'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
		'examples': [
			'true xor false',
			'false xor false',
			'true xor true',
			'0 or 4'
		],
		'seealso': [
			'not', 'and', 'or'
		]
	};

},{}],218:[function(require,module,exports){
	module.exports = {
		'name': 'concat',
		'category': 'Matrix',
		'syntax': [
			'concat(A, B, C, ...)',
			'concat(A, B, C, ..., dim)'
		],
		'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
		'examples': [
			'A = [1, 2; 5, 6]',
			'B = [3, 4; 7, 8]',
			'concat(A, B)',
			'concat(A, B, 1)',
			'concat(A, B, 2)'
		],
		'seealso': [
			'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],219:[function(require,module,exports){
	module.exports = {
		'name': 'cross',
		'category': 'Matrix',
		'syntax': [
			'cross(A, B)'
		],
		'description': 'Calculate the cross product for two vectors in three dimensional space.',
		'examples': [
			'cross([1, 1, 0],  [0, 1, 1])',
			'cross([3, -3, 1], [4, 9, 2])',
			'cross([2, 3, 4],  [5, 6, 7])'
		],
		'seealso': [
			'multiply',
			'dot'
		]
	};

},{}],220:[function(require,module,exports){
	module.exports = {
		'name': 'det',
		'category': 'Matrix',
		'syntax': [
			'det(x)'
		],
		'description': 'Calculate the determinant of a matrix',
		'examples': [
			'det([1, 2; 3, 4])',
			'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
		],
		'seealso': [
			'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],221:[function(require,module,exports){
	module.exports = {
		'name': 'diag',
		'category': 'Matrix',
		'syntax': [
			'diag(x)',
			'diag(x, k)'
		],
		'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
		'examples': [
			'diag(1:3)',
			'diag(1:3, 1)',
			'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
			'diag(a)'
		],
		'seealso': [
			'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],222:[function(require,module,exports){
	module.exports = {
		'name': 'dot',
		'category': 'Matrix',
		'syntax': [
			'dot(A, B)'
		],
		'description': 'Calculate the dot product of two vectors. ' +
      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +
      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
		'examples': [
			'dot([2, 4, 1], [2, 2, 3])',
			'[2, 4, 1] * [2, 2, 3]'
		],
		'seealso': [
			'multiply',
			'cross'
		]
	};

},{}],223:[function(require,module,exports){
	module.exports = {
		'name': 'eye',
		'category': 'Matrix',
		'syntax': [
			'eye(n)',
			'eye(m, n)',
			'eye([m, n])',
			'eye'
		],
		'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
		'examples': [
			'eye(3)',
			'eye(3, 5)',
			'a = [1, 2, 3; 4, 5, 6]',
			'eye(size(a))'
		],
		'seealso': [
			'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],224:[function(require,module,exports){
	module.exports = {
		'name': 'filter',
		'category': 'Matrix',
		'syntax': [
			'filter(x, test)'
		],
		'description': 'Filter items in a matrix.',
		'examples': [
			'isPositive(x) = x > 0',
			'filter([6, -2, -1, 4, 3], isPositive)',
			'filter([6, -2, 0, 1, 0], x != 0)'
		],
		'seealso': ['sort', 'map', 'forEach']
	};

},{}],225:[function(require,module,exports){
	module.exports = {
		'name': 'flatten',
		'category': 'Matrix',
		'syntax': [
			'flatten(x)'
		],
		'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
		'examples': [
			'a = [1, 2, 3; 4, 5, 6]',
			'size(a)',
			'b = flatten(a)',
			'size(b)'
		],
		'seealso': [
			'concat', 'resize', 'size', 'squeeze'
		]
	};

},{}],226:[function(require,module,exports){
	module.exports = {
		'name': 'forEach',
		'category': 'Matrix',
		'syntax': [
			'forEach(x, callback)'
		],
		'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
		'examples': [
			'forEach([1, 2, 3], function(val) { console.log(val) })'
		],
		'seealso': ['map', 'sort', 'filter']
	};

},{}],227:[function(require,module,exports){
	module.exports = {
		'name': 'inv',
		'category': 'Matrix',
		'syntax': [
			'inv(x)'
		],
		'description': 'Calculate the inverse of a matrix',
		'examples': [
			'inv([1, 2; 3, 4])',
			'inv(4)',
			'1 / 4'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],228:[function(require,module,exports){
	module.exports = {
		'name': 'map',
		'category': 'Matrix',
		'syntax': [
			'map(x, callback)'
		],
		'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
		'examples': [
			'map([1, 2, 3], function(val) { return value * value })'
		],
		'seealso': ['filter', 'forEach']
	};

},{}],229:[function(require,module,exports){
	module.exports = {
		'name': 'ones',
		'category': 'Matrix',
		'syntax': [
			'ones(m)',
			'ones(m, n)',
			'ones(m, n, p, ...)',
			'ones([m])',
			'ones([m, n])',
			'ones([m, n, p, ...])',
			'ones'
		],
		'description': 'Create a matrix containing ones.',
		'examples': [
			'ones(3)',
			'ones(3, 5)',
			'ones([2,3]) * 4.5',
			'a = [1, 2, 3; 4, 5, 6]',
			'ones(size(a))'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],230:[function(require,module,exports){
	module.exports = {
		'name': 'partitionSelect',
		'category': 'Matrix',
		'syntax': [
			'partitionSelect(x, k)',
			'partitionSelect(x, k, compare)'
		],
		'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
		'examples': [
			'partitionSelect([5, 10, 1], 2)',
			'partitionSelect(["C", "B", "A", "D"], 1)'
		],
		'seealso': ['sort']
	};

},{}],231:[function(require,module,exports){
	module.exports = {
		'name': 'range',
		'category': 'Type',
		'syntax': [
			'start:end',
			'start:step:end',
			'range(start, end)',
			'range(start, end, step)',
			'range(string)'
		],
		'description':
      'Create a range. Lower bound of the range is included, upper bound is excluded.',
		'examples': [
			'1:5',
			'3:-1:-3',
			'range(3, 7)',
			'range(0, 12, 2)',
			'range("4:10")',
			'a = [1, 2, 3, 4; 5, 6, 7, 8]',
			'a[1:2, 1:2]'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],232:[function(require,module,exports){
	module.exports = {
		'name': 'resize',
		'category': 'Matrix',
		'syntax': [
			'resize(x, size)',
			'resize(x, size, defaultValue)'
		],
		'description': 'Resize a matrix.',
		'examples': [
			'resize([1,2,3,4,5], [3])',
			'resize([1,2,3], [5])',
			'resize([1,2,3], [5], -1)',
			'resize(2, [2, 3])',
			'resize("hello", [8], "!")'
		],
		'seealso': [
			'size', 'subset', 'squeeze'
		]
	};

},{}],233:[function(require,module,exports){
	module.exports = {
		'name': 'size',
		'category': 'Matrix',
		'syntax': [
			'size(x)'
		],
		'description': 'Calculate the size of a matrix.',
		'examples': [
			'size(2.3)',
			'size("hello world")',
			'a = [1, 2; 3, 4; 5, 6]',
			'size(a)',
			'size(1:6)'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],234:[function(require,module,exports){
	module.exports = {
		'name': 'sort',
		'category': 'Matrix',
		'syntax': [
			'sort(x)',
			'sort(x, compare)'
		],
		'description': 'Sort the items in a matrix. Compare can be a string "asc" or "desc", or a custom sort function.',
		'examples': [
			'sort([5, 10, 1])',
			'sort(["C", "B", "A", "D"])',
			'sortByLength(a, b) = size(a)[1] - size(b)[1]',
			'sort(["Langdon", "Tom", "Sara"], sortByLength)'
		],
		'seealso': ['map', 'filter', 'forEach']
	};

},{}],235:[function(require,module,exports){
	module.exports = {
		'name': 'squeeze',
		'category': 'Matrix',
		'syntax': [
			'squeeze(x)'
		],
		'description': 'Remove inner and outer singleton dimensions from a matrix.',
		'examples': [
			'a = zeros(3,2,1)',
			'size(squeeze(a))',
			'b = zeros(1,1,3)',
			'size(squeeze(b))'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'
		]
	};

},{}],236:[function(require,module,exports){
	module.exports = {
		'name': 'subset',
		'category': 'Matrix',
		'syntax': [
			'value(index)',
			'value(index) = replacement',
			'subset(value, [index])',
			'subset(value, [index], replacement)'
		],
		'description': 'Get or set a subset of a matrix or string. ' +
      'Indexes are one-based. ' +
      'Both the ranges lower-bound and upper-bound are included.',
		'examples': [
			'd = [1, 2; 3, 4]',
			'e = []',
			'e[1, 1:2] = [5, 6]',
			'e[2, :] = [7, 8]',
			'f = d * e',
			'f[2, 1]',
			'f[:, 1]'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'
		]
	};

},{}],237:[function(require,module,exports){
	module.exports = {
		'name': 'trace',
		'category': 'Matrix',
		'syntax': [
			'trace(A)'
		],
		'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
		'examples': [
			'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
			'trace(A)'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'
		]
	};

},{}],238:[function(require,module,exports){
	module.exports = {
		'name': 'transpose',
		'category': 'Matrix',
		'syntax': [
			'x\'',
			'transpose(x)'
		],
		'description': 'Transpose a matrix',
		'examples': [
			'a = [1, 2, 3; 4, 5, 6]',
			'a\'',
			'transpose(a)'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'
		]
	};

},{}],239:[function(require,module,exports){
	module.exports = {
		'name': 'zeros',
		'category': 'Matrix',
		'syntax': [
			'zeros(m)',
			'zeros(m, n)',
			'zeros(m, n, p, ...)',
			'zeros([m])',
			'zeros([m, n])',
			'zeros([m, n, p, ...])',
			'zeros'
		],
		'description': 'Create a matrix containing zeros.',
		'examples': [
			'zeros(3)',
			'zeros(3, 5)',
			'a = [1, 2, 3; 4, 5, 6]',
			'zeros(size(a))'
		],
		'seealso': [
			'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'
		]
	};

},{}],240:[function(require,module,exports){
	module.exports = {
		'name': 'combinations',
		'category': 'Probability',
		'syntax': [
			'combinations(n, k)'
		],
		'description': 'Compute the number of combinations of n items taken k at a time',
		'examples': [
			'combinations(7, 5)'
		],
		'seealso': ['permutations', 'factorial']
	};

},{}],241:[function(require,module,exports){
	module.exports = {
		'name': 'factorial',
		'category': 'Probability',
		'syntax': [
			'kldivergence(x, y)'
		],
		'description': 'Compute the factorial of a value',
		'examples': [
			'5!',
			'5 * 4 * 3 * 2 * 1',
			'3!'
		],
		'seealso': ['combinations', 'permutations', 'gamma']
	};

},{}],242:[function(require,module,exports){
	module.exports = {
		'name': 'gamma',
		'category': 'Probability',
		'syntax': [
			'gamma(n)'
		],
		'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
		'examples': [
			'gamma(4)',
			'3!',
			'gamma(1/2)',
			'sqrt(pi)'
		],
		'seealso': ['factorial']
	};

},{}],243:[function(require,module,exports){
	module.exports = {
		'name': 'kldivergence',
		'category': 'Probability',
		'syntax': [
			'n!',
			'factorial(n)'
		],
		'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
		'examples': [
			'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'
		],
		'seealso': []
	};

},{}],244:[function(require,module,exports){
	module.exports = {
		'name': 'multinomial',
		'category': 'Probability',
		'syntax': [
			'multinomial(A)'
		],
		'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',
		'examples': [
			'multinomial([1, 2, 1])'
		],
		'seealso': ['combinations', 'factorial']
	};
},{}],245:[function(require,module,exports){
	module.exports = {
		'name': 'permutations',
		'category': 'Probability',
		'syntax': [
			'permutations(n)',
			'permutations(n, k)'
		],
		'description': 'Compute the number of permutations of n items taken k at a time',
		'examples': [
			'permutations(5)',
			'permutations(5, 3)'
		],
		'seealso': ['combinations', 'factorial']
	};

},{}],246:[function(require,module,exports){
	module.exports = {
		'name': 'pickRandom',
		'category': 'Probability',
		'syntax': [
			'pickRandom(array)'
		],
		'description':
      'Pick a random entry from a given array.',
		'examples': [
			'pickRandom(0:10)',
			'pickRandom([1, 3, 1, 6])'
		],
		'seealso': ['random', 'randomInt']
	};

},{}],247:[function(require,module,exports){
	module.exports = {
		'name': 'random',
		'category': 'Probability',
		'syntax': [
			'random()',
			'random(max)',
			'random(min, max)',
			'random(size)',
			'random(size, max)',
			'random(size, min, max)'
		],
		'description':
      'Return a random number.',
		'examples': [
			'random()',
			'random(10, 20)',
			'random([2, 3])'
		],
		'seealso': ['pickRandom', 'randomInt']
	};

},{}],248:[function(require,module,exports){
	module.exports = {
		'name': 'randInt',
		'category': 'Probability',
		'syntax': [
			'randInt(max)',
			'randInt(min, max)',
			'randInt(size)',
			'randInt(size, max)',
			'randInt(size, min, max)'
		],
		'description':
      'Return a random integer number',
		'examples': [
			'randInt(10, 20)',
			'randInt([2, 3], 10)'
		],
		'seealso': ['pickRandom', 'random']
	};
},{}],249:[function(require,module,exports){
	module.exports = {
		'name': 'compare',
		'category': 'Relational',
		'syntax': [
			'compare(x, y)'
		],
		'description':
      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
		'examples': [
			'compare(2, 3)',
			'compare(3, 2)',
			'compare(2, 2)',
			'compare(5cm, 40mm)',
			'compare(2, [1, 2, 3])'
		],
		'seealso': [
			'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'
		]
	};

},{}],250:[function(require,module,exports){
	module.exports = {
		'name': 'deepEqual',
		'category': 'Relational',
		'syntax': [
			'deepEqual(x, y)'
		],
		'description':
      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
		'examples': [
			'[1,3,4] == [1,3,4]',
			'[1,3,4] == [1,3]'
		],
		'seealso': [
			'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'
		]
	};

},{}],251:[function(require,module,exports){
	module.exports = {
		'name': 'equal',
		'category': 'Relational',
		'syntax': [
			'x == y',
			'equal(x, y)'
		],
		'description':
      'Check equality of two values. Returns true if the values are equal, and false if not.',
		'examples': [
			'2+2 == 3',
			'2+2 == 4',
			'a = 3.2',
			'b = 6-2.8',
			'a == b',
			'50cm == 0.5m'
		],
		'seealso': [
			'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
		]
	};

},{}],252:[function(require,module,exports){
	module.exports = {
		'name': 'larger',
		'category': 'Relational',
		'syntax': [
			'x > y',
			'larger(x, y)'
		],
		'description':
      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
		'examples': [
			'2 > 3',
			'5 > 2*2',
			'a = 3.3',
			'b = 6-2.8',
			'(a > b)',
			'(b < a)',
			'5 cm > 2 inch'
		],
		'seealso': [
			'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
		]
	};

},{}],253:[function(require,module,exports){
	module.exports = {
		'name': 'largerEq',
		'category': 'Relational',
		'syntax': [
			'x >= y',
			'largerEq(x, y)'
		],
		'description':
      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
		'examples': [
			'2 > 1+1',
			'2 >= 1+1',
			'a = 3.2',
			'b = 6-2.8',
			'(a > b)'
		],
		'seealso': [
			'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'
		]
	};

},{}],254:[function(require,module,exports){
	module.exports = {
		'name': 'smaller',
		'category': 'Relational',
		'syntax': [
			'x < y',
			'smaller(x, y)'
		],
		'description':
      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
		'examples': [
			'2 < 3',
			'5 < 2*2',
			'a = 3.3',
			'b = 6-2.8',
			'(a < b)',
			'5 cm < 2 inch'
		],
		'seealso': [
			'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'
		]
	};

},{}],255:[function(require,module,exports){
	module.exports = {
		'name': 'smallerEq',
		'category': 'Relational',
		'syntax': [
			'x <= y',
			'smallerEq(x, y)'
		],
		'description':
      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
		'examples': [
			'2 < 1+1',
			'2 <= 1+1',
			'a = 3.2',
			'b = 6-2.8',
			'(a < b)'
		],
		'seealso': [
			'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'
		]
	};

},{}],256:[function(require,module,exports){
	module.exports = {
		'name': 'unequal',
		'category': 'Relational',
		'syntax': [
			'x != y',
			'unequal(x, y)'
		],
		'description':
      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
		'examples': [
			'2+2 != 3',
			'2+2 != 4',
			'a = 3.2',
			'b = 6-2.8',
			'a != b',
			'50cm != 0.5m',
			'5 cm != 2 inch'
		],
		'seealso': [
			'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
		]
	};

},{}],257:[function(require,module,exports){
	module.exports = {
		'name': 'max',
		'category': 'Statistics',
		'syntax': [
			'max(a, b, c, ...)',
			'max(A)',
			'max(A, dim)'
		],
		'description': 'Compute the maximum value of a list of values.',
		'examples': [
			'max(2, 3, 4, 1)',
			'max([2, 3, 4, 1])',
			'max([2, 5; 4, 3])',
			'max([2, 5; 4, 3], 1)',
			'max([2, 5; 4, 3], 2)',
			'max(2.7, 7.1, -4.5, 2.0, 4.1)',
			'min(2.7, 7.1, -4.5, 2.0, 4.1)'
		],
		'seealso': [
			'mean',
			'median',
			'min',
			'prod',
			'std',
			'sum',
			'var'
		]
	};

},{}],258:[function(require,module,exports){
	module.exports = {
		'name': 'mean',
		'category': 'Statistics',
		'syntax': [
			'mean(a, b, c, ...)',
			'mean(A)',
			'mean(A, dim)'
		],
		'description': 'Compute the arithmetic mean of a list of values.',
		'examples': [
			'mean(2, 3, 4, 1)',
			'mean([2, 3, 4, 1])',
			'mean([2, 5; 4, 3])',
			'mean([2, 5; 4, 3], 1)',
			'mean([2, 5; 4, 3], 2)',
			'mean([1.0, 2.7, 3.2, 4.0])'
		],
		'seealso': [
			'max',
			'median',
			'min',
			'prod',
			'std',
			'sum',
			'var'
		]
	};

},{}],259:[function(require,module,exports){
	module.exports = {
		'name': 'median',
		'category': 'Statistics',
		'syntax': [
			'median(a, b, c, ...)',
			'median(A)'
		],
		'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
		'examples': [
			'median(5, 2, 7)',
			'median([3, -1, 5, 7])'
		],
		'seealso': [
			'max',
			'mean',
			'min',
			'prod',
			'std',
			'sum',
			'var'
		]
	};

},{}],260:[function(require,module,exports){
	module.exports = {
		'name': 'min',
		'category': 'Statistics',
		'syntax': [
			'min(a, b, c, ...)',
			'min(A)',
			'min(A, dim)'
		],
		'description': 'Compute the minimum value of a list of values.',
		'examples': [
			'min(2, 3, 4, 1)',
			'min([2, 3, 4, 1])',
			'min([2, 5; 4, 3])',
			'min([2, 5; 4, 3], 1)',
			'min([2, 5; 4, 3], 2)',
			'min(2.7, 7.1, -4.5, 2.0, 4.1)',
			'max(2.7, 7.1, -4.5, 2.0, 4.1)'
		],
		'seealso': [
			'max',
			'mean',
			'median',
			'prod',
			'std',
			'sum',
			'var'
		]
	};

},{}],261:[function(require,module,exports){
	module.exports = {
		'name': 'mode',
		'category': 'Statistics',
		'syntax': [
			'mode(a, b, c, ...)',
			'mode(A)',
			'mode(A, a, b, B, c, ...)'
		],
		'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
		'examples': [
			'mode(5, 2, 7)',
			'mode([3, -1, 5, 7])'
		],
		'seealso': [
			'max',
			'mean',
			'min',
			'median',
			'prod',
			'std',
			'sum',
			'var'
		]
	};

},{}],262:[function(require,module,exports){
	module.exports = {
		'name': 'prod',
		'category': 'Statistics',
		'syntax': [
			'prod(a, b, c, ...)',
			'prod(A)'
		],
		'description': 'Compute the product of all values.',
		'examples': [
			'prod(2, 3, 4)',
			'prod([2, 3, 4])',
			'prod([2, 5; 4, 3])'
		],
		'seealso': [
			'max',
			'mean',
			'min',
			'median',
			'min',
			'std',
			'sum',
			'var'
		]
	};

},{}],263:[function(require,module,exports){
	module.exports = {
		'name': 'quantileSeq',
		'category': 'Statistics',
		'syntax': [
			'quantileSeq(A, prob[, sorted])',
			'quantileSeq(A, [prob1, prob2, ...][, sorted])',
			'quantileSeq(A, N[, sorted])'
		],
		'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
		'examples': [
			'quantileSeq([3, -1, 5, 7], 0.5)',
			'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
			'quantileSeq([3, -1, 5, 7], 2)',
			'quantileSeq([-1, 3, 5, 7], 0.5, true)'
		],
		'seealso': [
			'mean',
			'median',
			'min',
			'max',
			'prod',
			'std',
			'sum',
			'var'
		]
	};
},{}],264:[function(require,module,exports){
	module.exports = {
		'name': 'std',
		'category': 'Statistics',
		'syntax': [
			'std(a, b, c, ...)',
			'std(A)',
			'std(A, normalization)'
		],
		'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
		'examples': [
			'std(2, 4, 6)',
			'std([2, 4, 6, 8])',
			'std([2, 4, 6, 8], "uncorrected")',
			'std([2, 4, 6, 8], "biased")',
			'std([1, 2, 3; 4, 5, 6])'
		],
		'seealso': [
			'max',
			'mean',
			'min',
			'median',
			'min',
			'prod',
			'sum',
			'var'
		]
	};

},{}],265:[function(require,module,exports){
	module.exports = {
		'name': 'sum',
		'category': 'Statistics',
		'syntax': [
			'sum(a, b, c, ...)',
			'sum(A)'
		],
		'description': 'Compute the sum of all values.',
		'examples': [
			'sum(2, 3, 4, 1)',
			'sum([2, 3, 4, 1])',
			'sum([2, 5; 4, 3])'
		],
		'seealso': [
			'max',
			'mean',
			'median',
			'min',
			'prod',
			'std',
			'sum',
			'var'
		]
	};

},{}],266:[function(require,module,exports){
	module.exports = {
		'name': 'var',
		'category': 'Statistics',
		'syntax': [
			'var(a, b, c, ...)',
			'var(A)',
			'var(A, normalization)'
		],
		'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
		'examples': [
			'var(2, 4, 6)',
			'var([2, 4, 6, 8])',
			'var([2, 4, 6, 8], "uncorrected")',
			'var([2, 4, 6, 8], "biased")',
			'var([1, 2, 3; 4, 5, 6])'
		],
		'seealso': [
			'max',
			'mean',
			'min',
			'median',
			'min',
			'prod',
			'std',
			'sum'
		]
	};

},{}],267:[function(require,module,exports){
	module.exports = {
		'name': 'acos',
		'category': 'Trigonometry',
		'syntax': [
			'acos(x)'
		],
		'description': 'Compute the inverse cosine of a value in radians.',
		'examples': [
			'acos(0.5)',
			'acos(cos(2.3))'
		],
		'seealso': [
			'cos',
			'atan',
			'asin'
		]
	};

},{}],268:[function(require,module,exports){
	module.exports = {
		'name': 'acosh',
		'category': 'Trigonometry',
		'syntax': [
			'acosh(x)'
		],
		'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
		'examples': [
			'acosh(1.5)'
		],
		'seealso': [
			'cosh',
			'asinh',
			'atanh'
		]
	};
},{}],269:[function(require,module,exports){
	module.exports = {
		'name': 'acot',
		'category': 'Trigonometry',
		'syntax': [
			'acot(x)'
		],
		'description': 'Calculate the inverse cotangent of a value.',
		'examples': [
			'acot(0.5)',
			'acot(cot(0.5))',
			'acot(2)'
		],
		'seealso': [
			'cot',
			'atan'
		]
	};

},{}],270:[function(require,module,exports){
	module.exports = {
		'name': 'acoth',
		'category': 'Trigonometry',
		'syntax': [
			'acoth(x)'
		],
		'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
		'examples': [
			'acoth(0.5)'
		],
		'seealso': [
			'acsch',
			'asech'
		]
	};
},{}],271:[function(require,module,exports){
	module.exports = {
		'name': 'acsc',
		'category': 'Trigonometry',
		'syntax': [
			'acsc(x)'
		],
		'description': 'Calculate the inverse cotangent of a value.',
		'examples': [
			'acsc(0.5)',
			'acsc(csc(0.5))',
			'acsc(2)'
		],
		'seealso': [
			'csc',
			'asin',
			'asec'
		]
	};

},{}],272:[function(require,module,exports){
	module.exports = {
		'name': 'acsch',
		'category': 'Trigonometry',
		'syntax': [
			'acsch(x)'
		],
		'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
		'examples': [
			'acsch(0.5)'
		],
		'seealso': [
			'asech',
			'acoth'
		]
	};

},{}],273:[function(require,module,exports){
	module.exports = {
		'name': 'asec',
		'category': 'Trigonometry',
		'syntax': [
			'asec(x)'
		],
		'description': 'Calculate the inverse secant of a value.',
		'examples': [
			'asec(0.5)',
			'asec(sec(0.5))',
			'asec(2)'
		],
		'seealso': [
			'acos',
			'acot',
			'acsc'
		]
	};

},{}],274:[function(require,module,exports){
	module.exports = {
		'name': 'asech',
		'category': 'Trigonometry',
		'syntax': [
			'asech(x)'
		],
		'description': 'Calculate the inverse secant of a value.',
		'examples': [
			'asech(0.5)'
		],
		'seealso': [
			'acsch',
			'acoth'
		]
	};

},{}],275:[function(require,module,exports){
	module.exports = {
		'name': 'asin',
		'category': 'Trigonometry',
		'syntax': [
			'asin(x)'
		],
		'description': 'Compute the inverse sine of a value in radians.',
		'examples': [
			'asin(0.5)',
			'asin(sin(2.3))'
		],
		'seealso': [
			'sin',
			'acos',
			'atan'
		]
	};

},{}],276:[function(require,module,exports){
	module.exports = {
		'name': 'asinh',
		'category': 'Trigonometry',
		'syntax': [
			'asinh(x)'
		],
		'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
		'examples': [
			'asinh(0.5)'
		],
		'seealso': [
			'acosh',
			'atanh'
		]
	};

},{}],277:[function(require,module,exports){
	module.exports = {
		'name': 'atan',
		'category': 'Trigonometry',
		'syntax': [
			'atan(x)'
		],
		'description': 'Compute the inverse tangent of a value in radians.',
		'examples': [
			'atan(0.5)',
			'atan(tan(2.3))'
		],
		'seealso': [
			'tan',
			'acos',
			'asin'
		]
	};

},{}],278:[function(require,module,exports){
	module.exports = {
		'name': 'atan2',
		'category': 'Trigonometry',
		'syntax': [
			'atan2(y, x)'
		],
		'description':
      'Computes the principal value of the arc tangent of y/x in radians.',
		'examples': [
			'atan2(2, 2) / pi',
			'angle = 60 deg in rad',
			'x = cos(angle)',
			'y = sin(angle)',
			'atan2(y, x)'
		],
		'seealso': [
			'sin',
			'cos',
			'tan'
		]
	};

},{}],279:[function(require,module,exports){
	module.exports = {
		'name': 'atanh',
		'category': 'Trigonometry',
		'syntax': [
			'atanh(x)'
		],
		'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
		'examples': [
			'atanh(0.5)'
		],
		'seealso': [
			'acosh',
			'asinh'
		]
	};

},{}],280:[function(require,module,exports){
	module.exports = {
		'name': 'cos',
		'category': 'Trigonometry',
		'syntax': [
			'cos(x)'
		],
		'description': 'Compute the cosine of x in radians.',
		'examples': [
			'cos(2)',
			'cos(pi / 4) ^ 2',
			'cos(180 deg)',
			'cos(60 deg)',
			'sin(0.2)^2 + cos(0.2)^2'
		],
		'seealso': [
			'acos',
			'sin',
			'tan'
		]
	};

},{}],281:[function(require,module,exports){
	module.exports = {
		'name': 'cosh',
		'category': 'Trigonometry',
		'syntax': [
			'cosh(x)'
		],
		'description': 'Compute the hyperbolic cosine of x in radians.',
		'examples': [
			'cosh(0.5)'
		],
		'seealso': [
			'sinh',
			'tanh',
			'coth'
		]
	};

},{}],282:[function(require,module,exports){
	module.exports = {
		'name': 'cot',
		'category': 'Trigonometry',
		'syntax': [
			'cot(x)'
		],
		'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
		'examples': [
			'cot(2)',
			'1 / tan(2)'
		],
		'seealso': [
			'sec',
			'csc',
			'tan'
		]
	};

},{}],283:[function(require,module,exports){
	module.exports = {
		'name': 'coth',
		'category': 'Trigonometry',
		'syntax': [
			'coth(x)'
		],
		'description': 'Compute the hyperbolic cotangent of x in radians.',
		'examples': [
			'coth(2)',
			'1 / tanh(2)'
		],
		'seealso': [
			'sech',
			'csch',
			'tanh'
		]
	};

},{}],284:[function(require,module,exports){
	module.exports = {
		'name': 'csc',
		'category': 'Trigonometry',
		'syntax': [
			'csc(x)'
		],
		'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
		'examples': [
			'csc(2)',
			'1 / sin(2)'
		],
		'seealso': [
			'sec',
			'cot',
			'sin'
		]
	};

},{}],285:[function(require,module,exports){
	module.exports = {
		'name': 'csch',
		'category': 'Trigonometry',
		'syntax': [
			'csch(x)'
		],
		'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
		'examples': [
			'csch(2)',
			'1 / sinh(2)'
		],
		'seealso': [
			'sech',
			'coth',
			'sinh'
		]
	};

},{}],286:[function(require,module,exports){
	module.exports = {
		'name': 'sec',
		'category': 'Trigonometry',
		'syntax': [
			'sec(x)'
		],
		'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
		'examples': [
			'sec(2)',
			'1 / cos(2)'
		],
		'seealso': [
			'cot',
			'csc',
			'cos'
		]
	};

},{}],287:[function(require,module,exports){
	module.exports = {
		'name': 'sech',
		'category': 'Trigonometry',
		'syntax': [
			'sech(x)'
		],
		'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
		'examples': [
			'sech(2)',
			'1 / cosh(2)'
		],
		'seealso': [
			'coth',
			'csch',
			'cosh'
		]
	};

},{}],288:[function(require,module,exports){
	module.exports = {
		'name': 'sin',
		'category': 'Trigonometry',
		'syntax': [
			'sin(x)'
		],
		'description': 'Compute the sine of x in radians.',
		'examples': [
			'sin(2)',
			'sin(pi / 4) ^ 2',
			'sin(90 deg)',
			'sin(30 deg)',
			'sin(0.2)^2 + cos(0.2)^2'
		],
		'seealso': [
			'asin',
			'cos',
			'tan'
		]
	};

},{}],289:[function(require,module,exports){
	module.exports = {
		'name': 'sinh',
		'category': 'Trigonometry',
		'syntax': [
			'sinh(x)'
		],
		'description': 'Compute the hyperbolic sine of x in radians.',
		'examples': [
			'sinh(0.5)'
		],
		'seealso': [
			'cosh',
			'tanh'
		]
	};

},{}],290:[function(require,module,exports){
	module.exports = {
		'name': 'tan',
		'category': 'Trigonometry',
		'syntax': [
			'tan(x)'
		],
		'description': 'Compute the tangent of x in radians.',
		'examples': [
			'tan(0.5)',
			'sin(0.5) / cos(0.5)',
			'tan(pi / 4)',
			'tan(45 deg)'
		],
		'seealso': [
			'atan',
			'sin',
			'cos'
		]
	};

},{}],291:[function(require,module,exports){
	module.exports = {
		'name': 'tanh',
		'category': 'Trigonometry',
		'syntax': [
			'tanh(x)'
		],
		'description': 'Compute the hyperbolic tangent of x in radians.',
		'examples': [
			'tanh(0.5)',
			'sinh(0.5) / cosh(0.5)'
		],
		'seealso': [
			'sinh',
			'cosh'
		]
	};

},{}],292:[function(require,module,exports){
	module.exports = {
		'name': 'to',
		'category': 'Units',
		'syntax': [
			'x to unit',
			'to(x, unit)'
		],
		'description': 'Change the unit of a value.',
		'examples': [
			'5 inch to cm',
			'3.2kg to g',
			'16 bytes in bits'
		],
		'seealso': []
	};

},{}],293:[function(require,module,exports){
	module.exports = {
		'name': 'clone',
		'category': 'Utils',
		'syntax': [
			'clone(x)'
		],
		'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
		'examples': [
			'clone(3.5)',
			'clone(2 - 4i)',
			'clone(45 deg)',
			'clone([1, 2; 3, 4])',
			'clone("hello world")'
		],
		'seealso': []
	};

},{}],294:[function(require,module,exports){
	module.exports = {
		'name': 'format',
		'category': 'Utils',
		'syntax': [
			'format(value)',
			'format(value, precision)'
		],
		'description': 'Format a value of any type as string.',
		'examples': [
			'format(2.3)',
			'format(3 - 4i)',
			'format([])',
			'format(pi, 3)'
		],
		'seealso': ['print']
	};

},{}],295:[function(require,module,exports){
	module.exports = {
		'name': 'isInteger',
		'category': 'Utils',
		'syntax': [
			'isInteger(x)'
		],
		'description': 'Test whether a value is an integer number.',
		'examples': [
			'isInteger(2)',
			'isInteger(3.5)',
			'isInteger([3, 0.5, -2])'
		],
		'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};

},{}],296:[function(require,module,exports){
	module.exports = {
		'name': 'isNaN',
		'category': 'Utils',
		'syntax': [
			'isNaN(x)'
		],
		'description': 'Test whether a value is NaN (not a number)',
		'examples': [
			'isNaN(2)',
			'isNaN(0 / 0)',
			'isNaN(NaN)',
			'isNaN(Infinity)'
		],
		'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};

},{}],297:[function(require,module,exports){
	module.exports = {
		'name': 'isNegative',
		'category': 'Utils',
		'syntax': [
			'isNegative(x)'
		],
		'description': 'Test whether a value is negative: smaller than zero.',
		'examples': [
			'isNegative(2)',
			'isNegative(0)',
			'isNegative(-4)',
			'isNegative([3, 0.5, -2])'
		],
		'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
	};

},{}],298:[function(require,module,exports){
	module.exports = {
		'name': 'isNumeric',
		'category': 'Utils',
		'syntax': [
			'isNumeric(x)'
		],
		'description': 'Test whether a value is a numeric value. ' +
    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
		'examples': [
			'isNumeric(2)',
			'isNumeric(0)',
			'isNumeric(bignumber(500))',
			'isNumeric(fraction(0.125))',
			'isNumeric("3")',
			'isNumeric(2 + 3i)',
			'isNumeric([2.3, "foo", false])'
		],
		'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
	};

},{}],299:[function(require,module,exports){
	module.exports = {
		'name': 'isPositive',
		'category': 'Utils',
		'syntax': [
			'isPositive(x)'
		],
		'description': 'Test whether a value is positive: larger than zero.',
		'examples': [
			'isPositive(2)',
			'isPositive(0)',
			'isPositive(-4)',
			'isPositive([3, 0.5, -2])'
		],
		'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};

},{}],300:[function(require,module,exports){
	module.exports = {
		'name': 'isPrime',
		'category': 'Utils',
		'syntax': [
			'isPrime(x)'
		],
		'description': 'Test whether a value is prime: has no divisors other than itself and one.',
		'examples': [
			'isPrime(3)',
			'isPrime(-2)',
			'isPrime([2, 17, 100])'
		],
		'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};
},{}],301:[function(require,module,exports){
	module.exports = {
		'name': 'isZero',
		'category': 'Utils',
		'syntax': [
			'isZero(x)'
		],
		'description': 'Test whether a value is zero.',
		'examples': [
			'isZero(2)',
			'isZero(0)',
			'isZero(-4)',
			'isZero([3, 0, -2, 0])'
		],
		'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
	};

},{}],302:[function(require,module,exports){
	module.exports = {
		'name': 'typeof',
		'category': 'Utils',
		'syntax': [
			'typeof(x)'
		],
		'description': 'Get the type of a variable.',
		'examples': [
			'typeof(3.5)',
			'typeof(2 - 4i)',
			'typeof(45 deg)',
			'typeof("hello world")'
		],
		'seealso': []
	};

},{}],303:[function(require,module,exports){
	function factory (construction, config, load, typed) {
		var docs = {};


		// construction functions
		docs.bignumber = require('./construction/bignumber');
		docs['boolean'] = require('./construction/boolean');
		docs.complex = require('./construction/complex');
		docs.fraction = require('./construction/fraction');
		docs.index = require('./construction/index');
		docs.matrix = require('./construction/matrix');
		docs.number = require('./construction/number');
		docs.sparse = require('./construction/sparse');
		docs.string = require('./construction/string');
		docs.unit = require('./construction/unit');

		// constants
		docs.e = require('./constants/e');
		docs.E = require('./constants/e');
		docs['false'] = require('./constants/false');
		docs.i = require('./constants/i');
		docs['Infinity'] = require('./constants/Infinity');
		docs.LN2 = require('./constants/LN2');
		docs.LN10 = require('./constants/LN10');
		docs.LOG2E = require('./constants/LOG2E');
		docs.LOG10E = require('./constants/LOG10E');
		docs.NaN = require('./constants/NaN');
		docs['null'] = require('./constants/null');
		docs.pi = require('./constants/pi');
		docs.PI = require('./constants/pi');
		docs.phi = require('./constants/phi');
		docs.SQRT1_2 = require('./constants/SQRT1_2');
		docs.SQRT2 = require('./constants/SQRT2');
		docs.tau = require('./constants/tau');
		docs['true'] = require('./constants/true');
		docs.version = require('./constants/version');

		// physical constants
		// TODO: more detailed docs for physical constants
		docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};
		docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};
		docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};
		docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};

		docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};
		docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};
		docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};
		docs.coulomb = {description: 'Coulomb\'s constant', examples: ['coulomb']};
		docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};
		docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};
		docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};
		docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};
		//docs.josephson = {description: 'Josephson constant', examples: ['josephson']};
		docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};
		docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};
		docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};

		docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};
		docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};
		docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};
		docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};
		docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};
		docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};
		docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};
		docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};
		docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};
		docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};
		docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};
		docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};
		docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};
		docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};

		docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};
		docs.avogadro = {description: 'Avogadro\'s number', examples: ['avogadro']};
		docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};
		docs.faraday = {description: 'Faraday constant', examples: ['faraday']};
		docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};
		docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};
		docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};
		docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};
		docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};
		docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};
		docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};
		docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};
		docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};
		//docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};

		docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};
		docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};
		docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};

		docs.planckLength = {description: 'Planck length', examples: ['planckLength']};
		docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};
		docs.planckTime = {description: 'Planck time', examples: ['planckTime']};
		docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};
		docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};

		// functions - algebra
		docs.lsolve = require('./function/algebra/lsolve');
		docs.lup = require('./function/algebra/lup');
		docs.lusolve = require('./function/algebra/lusolve');
		docs.slu = require('./function/algebra/slu');
		docs.usolve = require('./function/algebra/usolve');

		// functions - arithmetic
		docs.abs = require('./function/arithmetic/abs');
		docs.add = require('./function/arithmetic/add');
		docs.cbrt = require('./function/arithmetic/cbrt');
		docs.ceil = require('./function/arithmetic/ceil');
		docs.cube = require('./function/arithmetic/cube');
		docs.divide = require('./function/arithmetic/divide');
		docs.dotDivide = require('./function/arithmetic/dotDivide');
		docs.dotMultiply = require('./function/arithmetic/dotMultiply');
		docs.dotPow = require('./function/arithmetic/dotPow');
		docs.exp = require('./function/arithmetic/exp');
		docs.fix = require('./function/arithmetic/fix');
		docs.floor = require('./function/arithmetic/floor');
		docs.gcd = require('./function/arithmetic/gcd');
		docs.hypot = require('./function/arithmetic/hypot');
		docs.lcm = require('./function/arithmetic/lcm');
		docs.log = require('./function/arithmetic/log');
		docs.log10 = require('./function/arithmetic/log10');
		docs.mod = require('./function/arithmetic/mod');
		docs.multiply = require('./function/arithmetic/multiply');
		docs.norm = require('./function/arithmetic/norm');
		docs.nthRoot = require('./function/arithmetic/nthRoot');
		docs.pow = require('./function/arithmetic/pow');
		docs.round = require('./function/arithmetic/round');
		docs.sign = require('./function/arithmetic/sign');
		docs.sqrt = require('./function/arithmetic/sqrt');
		docs.square = require('./function/arithmetic/square');
		docs.subtract = require('./function/arithmetic/subtract');
		docs.unaryMinus = require('./function/arithmetic/unaryMinus');
		docs.unaryPlus = require('./function/arithmetic/unaryPlus');
		docs.xgcd = require('./function/arithmetic/xgcd');

		// functions - bitwise
		docs.bitAnd = require('./function/bitwise/bitAnd');
		docs.bitNot = require('./function/bitwise/bitNot');
		docs.bitOr = require('./function/bitwise/bitOr');
		docs.bitXor = require('./function/bitwise/bitXor');
		docs.leftShift = require('./function/bitwise/leftShift');
		docs.rightArithShift = require('./function/bitwise/rightArithShift');
		docs.rightLogShift = require('./function/bitwise/rightLogShift');

		// functions - combinatorics
		docs.bellNumbers = require('./function/combinatorics/bellNumbers');
		docs.catalan = require('./function/combinatorics/catalan');
		docs.composition = require('./function/combinatorics/composition');
		docs.stirlingS2 = require('./function/combinatorics/stirlingS2');

		// functions - core
		docs['config'] =  require('./core/config');
		docs['import'] =  require('./core/import');
		docs['typed'] =  require('./core/typed');

		// functions - complex
		docs.arg = require('./function/complex/arg');
		docs.conj = require('./function/complex/conj');
		docs.re = require('./function/complex/re');
		docs.im = require('./function/complex/im');

		// functions - expression
		docs['eval'] =  require('./function/expression/eval');
		docs.help =  require('./function/expression/help');

		// functions - geometry
		docs.distance = require('./function/geometry/distance');
		docs.intersect = require('./function/geometry/intersect');

		// functions - logical
		docs['and'] = require('./function/logical/and');
		docs['not'] = require('./function/logical/not');
		docs['or'] = require('./function/logical/or');
		docs['xor'] = require('./function/logical/xor');

		// functions - matrix
		docs['concat'] = require('./function/matrix/concat');
		docs.cross = require('./function/matrix/cross');
		docs.det = require('./function/matrix/det');
		docs.diag = require('./function/matrix/diag');
		docs.dot = require('./function/matrix/dot');
		docs.eye = require('./function/matrix/eye');
		docs.filter =  require('./function/matrix/filter');
		docs.flatten = require('./function/matrix/flatten');
		docs.forEach =  require('./function/matrix/forEach');
		docs.inv = require('./function/matrix/inv');
		docs.map =  require('./function/matrix/map');
		docs.ones = require('./function/matrix/ones');
		docs.partitionSelect =  require('./function/matrix/partitionSelect');
		docs.range = require('./function/matrix/range');
		docs.resize = require('./function/matrix/resize');
		docs.size = require('./function/matrix/size');
		docs.sort =  require('./function/matrix/sort');
		docs.squeeze = require('./function/matrix/squeeze');
		docs.subset = require('./function/matrix/subset');
		docs.trace = require('./function/matrix/trace');
		docs.transpose = require('./function/matrix/transpose');
		docs.zeros = require('./function/matrix/zeros');

		// functions - probability
		docs.combinations = require('./function/probability/combinations');
		//docs.distribution = require('./function/probability/distribution');
		docs.factorial = require('./function/probability/factorial');
		docs.gamma = require('./function/probability/gamma');
		docs.kldivergence = require('./function/probability/kldivergence');
		docs.multinomial = require('./function/probability/multinomial');
		docs.permutations = require('./function/probability/permutations');
		docs.pickRandom = require('./function/probability/pickRandom');
		docs.random = require('./function/probability/random');
		docs.randomInt = require('./function/probability/randomInt');

		// functions - relational
		docs.compare = require('./function/relational/compare');
		docs.deepEqual = require('./function/relational/deepEqual');
		docs['equal'] = require('./function/relational/equal');
		docs.larger = require('./function/relational/larger');
		docs.largerEq = require('./function/relational/largerEq');
		docs.smaller = require('./function/relational/smaller');
		docs.smallerEq = require('./function/relational/smallerEq');
		docs.unequal = require('./function/relational/unequal');

		// functions - statistics
		docs.max = require('./function/statistics/max');
		docs.mean = require('./function/statistics/mean');
		docs.median = require('./function/statistics/median');
		docs.min = require('./function/statistics/min');
		docs.mode = require('./function/statistics/mode');
		docs.prod = require('./function/statistics/prod');
		docs.quantileSeq = require('./function/statistics/quantileSeq');
		docs.std = require('./function/statistics/std');
		docs.sum = require('./function/statistics/sum');
		docs['var'] = require('./function/statistics/var');

		// functions - trigonometry
		docs.acos = require('./function/trigonometry/acos');
		docs.acosh = require('./function/trigonometry/acosh');
		docs.acot = require('./function/trigonometry/acot');
		docs.acoth = require('./function/trigonometry/acoth');
		docs.acsc = require('./function/trigonometry/acsc');
		docs.acsch = require('./function/trigonometry/acsch');
		docs.asec = require('./function/trigonometry/asec');
		docs.asech = require('./function/trigonometry/asech');
		docs.asin = require('./function/trigonometry/asin');
		docs.asinh = require('./function/trigonometry/asinh');
		docs.atan = require('./function/trigonometry/atan');
		docs.atanh = require('./function/trigonometry/atanh');
		docs.atan2 = require('./function/trigonometry/atan2');
		docs.cos = require('./function/trigonometry/cos');
		docs.cosh = require('./function/trigonometry/cosh');
		docs.cot = require('./function/trigonometry/cot');
		docs.coth = require('./function/trigonometry/coth');
		docs.csc = require('./function/trigonometry/csc');
		docs.csch = require('./function/trigonometry/csch');
		docs.sec = require('./function/trigonometry/sec');
		docs.sech = require('./function/trigonometry/sech');
		docs.sin = require('./function/trigonometry/sin');
		docs.sinh = require('./function/trigonometry/sinh');
		docs.tan = require('./function/trigonometry/tan');
		docs.tanh = require('./function/trigonometry/tanh');

		// functions - units
		docs.to = require('./function/units/to');

		// functions - utils
		docs.clone = require('./function/utils/clone');
		docs.format = require('./function/utils/format');
		docs.isNaN = require('./function/utils/isNaN');
		docs.isInteger = require('./function/utils/isInteger');
		docs.isNegative = require('./function/utils/isNegative');
		docs.isNumeric = require('./function/utils/isNumeric');
		docs.isPositive = require('./function/utils/isPositive');
		docs.isPrime = require('./function/utils/isPrime');
		docs.isZero = require('./function/utils/isZero');
		// docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.
		docs['typeof'] =  require('./function/utils/typeof');

		return docs;
	}

	exports.name = 'docs';
	exports.path = 'expression';
	exports.factory = factory;

},{"./constants/Infinity":130,"./constants/LN10":131,"./constants/LN2":132,"./constants/LOG10E":133,"./constants/LOG2E":134,"./constants/NaN":135,"./constants/SQRT1_2":136,"./constants/SQRT2":137,"./constants/e":138,"./constants/false":139,"./constants/i":140,"./constants/null":141,"./constants/phi":142,"./constants/pi":143,"./constants/tau":144,"./constants/true":145,"./constants/version":146,"./construction/bignumber":147,"./construction/boolean":148,"./construction/complex":149,"./construction/fraction":150,"./construction/index":151,"./construction/matrix":152,"./construction/number":153,"./construction/sparse":154,"./construction/string":155,"./construction/unit":156,"./core/config":157,"./core/import":158,"./core/typed":159,"./function/algebra/lsolve":160,"./function/algebra/lup":161,"./function/algebra/lusolve":162,"./function/algebra/slu":163,"./function/algebra/usolve":164,"./function/arithmetic/abs":165,"./function/arithmetic/add":166,"./function/arithmetic/cbrt":167,"./function/arithmetic/ceil":168,"./function/arithmetic/cube":169,"./function/arithmetic/divide":170,"./function/arithmetic/dotDivide":171,"./function/arithmetic/dotMultiply":172,"./function/arithmetic/dotPow":173,"./function/arithmetic/exp":174,"./function/arithmetic/fix":175,"./function/arithmetic/floor":176,"./function/arithmetic/gcd":177,"./function/arithmetic/hypot":178,"./function/arithmetic/lcm":179,"./function/arithmetic/log":180,"./function/arithmetic/log10":181,"./function/arithmetic/mod":182,"./function/arithmetic/multiply":183,"./function/arithmetic/norm":184,"./function/arithmetic/nthRoot":185,"./function/arithmetic/pow":186,"./function/arithmetic/round":187,"./function/arithmetic/sign":188,"./function/arithmetic/sqrt":189,"./function/arithmetic/square":190,"./function/arithmetic/subtract":191,"./function/arithmetic/unaryMinus":192,"./function/arithmetic/unaryPlus":193,"./function/arithmetic/xgcd":194,"./function/bitwise/bitAnd":195,"./function/bitwise/bitNot":196,"./function/bitwise/bitOr":197,"./function/bitwise/bitXor":198,"./function/bitwise/leftShift":199,"./function/bitwise/rightArithShift":200,"./function/bitwise/rightLogShift":201,"./function/combinatorics/bellNumbers":202,"./function/combinatorics/catalan":203,"./function/combinatorics/composition":204,"./function/combinatorics/stirlingS2":205,"./function/complex/arg":206,"./function/complex/conj":207,"./function/complex/im":208,"./function/complex/re":209,"./function/expression/eval":210,"./function/expression/help":211,"./function/geometry/distance":212,"./function/geometry/intersect":213,"./function/logical/and":214,"./function/logical/not":215,"./function/logical/or":216,"./function/logical/xor":217,"./function/matrix/concat":218,"./function/matrix/cross":219,"./function/matrix/det":220,"./function/matrix/diag":221,"./function/matrix/dot":222,"./function/matrix/eye":223,"./function/matrix/filter":224,"./function/matrix/flatten":225,"./function/matrix/forEach":226,"./function/matrix/inv":227,"./function/matrix/map":228,"./function/matrix/ones":229,"./function/matrix/partitionSelect":230,"./function/matrix/range":231,"./function/matrix/resize":232,"./function/matrix/size":233,"./function/matrix/sort":234,"./function/matrix/squeeze":235,"./function/matrix/subset":236,"./function/matrix/trace":237,"./function/matrix/transpose":238,"./function/matrix/zeros":239,"./function/probability/combinations":240,"./function/probability/factorial":241,"./function/probability/gamma":242,"./function/probability/kldivergence":243,"./function/probability/multinomial":244,"./function/probability/permutations":245,"./function/probability/pickRandom":246,"./function/probability/random":247,"./function/probability/randomInt":248,"./function/relational/compare":249,"./function/relational/deepEqual":250,"./function/relational/equal":251,"./function/relational/larger":252,"./function/relational/largerEq":253,"./function/relational/smaller":254,"./function/relational/smallerEq":255,"./function/relational/unequal":256,"./function/statistics/max":257,"./function/statistics/mean":258,"./function/statistics/median":259,"./function/statistics/min":260,"./function/statistics/mode":261,"./function/statistics/prod":262,"./function/statistics/quantileSeq":263,"./function/statistics/std":264,"./function/statistics/sum":265,"./function/statistics/var":266,"./function/trigonometry/acos":267,"./function/trigonometry/acosh":268,"./function/trigonometry/acot":269,"./function/trigonometry/acoth":270,"./function/trigonometry/acsc":271,"./function/trigonometry/acsch":272,"./function/trigonometry/asec":273,"./function/trigonometry/asech":274,"./function/trigonometry/asin":275,"./function/trigonometry/asinh":276,"./function/trigonometry/atan":277,"./function/trigonometry/atan2":278,"./function/trigonometry/atanh":279,"./function/trigonometry/cos":280,"./function/trigonometry/cosh":281,"./function/trigonometry/cot":282,"./function/trigonometry/coth":283,"./function/trigonometry/csc":284,"./function/trigonometry/csch":285,"./function/trigonometry/sec":286,"./function/trigonometry/sech":287,"./function/trigonometry/sin":288,"./function/trigonometry/sinh":289,"./function/trigonometry/tan":290,"./function/trigonometry/tanh":291,"./function/units/to":292,"./function/utils/clone":293,"./function/utils/format":294,"./function/utils/isInteger":295,"./function/utils/isNaN":296,"./function/utils/isNegative":297,"./function/utils/isNumeric":298,"./function/utils/isPositive":299,"./function/utils/isPrime":300,"./function/utils/isZero":301,"./function/utils/typeof":302}],304:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var parse = load(require('../parse'));

		/**
   * Parse and compile an expression.
   * Returns a an object with a function `eval([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     var code = math.compile('sqrt(3^2 + 4^2)');
   *     code.eval(); // 5
   *
   *     var scope = {a: 3, b: 4}
   *     var code = math.compile('a * b'); // 12
   *     code.eval(scope); // 12
   *     scope.a = 5;
   *     code.eval(scope); // 20
   *
   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);
   *     nodes[2].eval(); // 12
   *
   * See also:
   *
   *    parse, eval
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{eval: Function} | Array.<{eval: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
		return typed('compile', {
			'string': function (expr) {
				return parse(expr).compile();
			},

			'Array | Matrix': function (expr) {
				return deepMap(expr, function (entry) {
					return parse(entry).compile();
				});
			}
		});
	}

	exports.name = 'compile';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../parse":332}],305:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var parse = load(require('../parse'));

		/**
   * Evaluate an expression.
   *
   * Syntax:
   *
   *     math.eval(expr)
   *     math.eval(expr, scope)
   *     math.eval([expr1, expr2, expr3, ...])
   *     math.eval([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.eval('(2+3)/4');                // 1.25
   *     math.eval('sqrt(3^2 + 4^2)');        // 5
   *     math.eval('sqrt(-4)');               // 2i
   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]
   *
   *     var scope = {a:3, b:4};
   *     math.eval('a * b', scope);           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
		return typed('compile', {
			'string': function (expr) {
				var scope = {};
				return parse(expr).compile().eval(scope);
			},

			'string, Object': function (expr, scope) {
				return parse(expr).compile().eval(scope);
			},

			'Array | Matrix': function (expr) {
				var scope = {};
				return deepMap(expr, function (entry) {
					return parse(entry).compile().eval(scope);
				});
			},

			'Array | Matrix, Object': function (expr, scope) {
				return deepMap(expr, function (entry) {
					return parse(entry).compile().eval(scope);
				});
			}
		});
	}

	exports.name = 'eval';
	exports.factory = factory;
},{"../../utils/collection/deepMap":595,"../parse":332}],306:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed, math) {
		var docs = load(require('../docs'));

		/**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the documentation in math.expression.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString());
   *    console.log(math.help(math.add).toString());
   *    console.log(math.help(math.add).toJSON());
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
		return typed('help', {
			'any': function (search) {
				var prop;
				var name = search;

				if (typeof search !== 'string') {
					for (prop in math) {
						// search in functions and constants
						if (math.hasOwnProperty(prop) && (search === math[prop])) {
							name = prop;
							break;
						}
					}

					/* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (math.type.hasOwnProperty(prop)) {
         if (search === math.type[prop]) {
         text = prop;
         break;
         }
         }
         }
         }
         */
				}

				var doc = docs[name];
				if (!doc) {
					throw new Error('No documentation found on "' + name + '"');
				}
				return new type.Help(doc);
			}
		});
	}

	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'help';
	exports.factory = factory;

},{"../docs":303}],307:[function(require,module,exports){
	module.exports = [
		require('./compile'),
		require('./eval'),
		require('./help'),
		require('./parse'),
		require('./parser')
	];

},{"./compile":304,"./eval":305,"./help":306,"./parse":308,"./parser":309}],308:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var parse = load(require('../parse'));

		/**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.eval();
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     var node = math.parse('sqrt(3^2 + 4^2)');
   *     node.compile().eval(); // 5
   *
   *     var scope = {a:3, b:4}
   *     var node = math.parse('a * b'); // 12
   *     var code = node.compile();
   *     code.eval(scope); // 12
   *     scope.a = 5;
   *     code.eval(scope); // 20
   *
   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
   *     nodes[2].compile().eval(); // 12
   *
   * See also:
   *
   *     eval, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
		return typed('parse', {
			'string | Array | Matrix': parse,
			'string | Array | Matrix, Object': parse
		});
	}

	exports.name = 'parse';
	exports.factory = factory;

},{"../parse":332}],309:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed, math) {
		var Parser = load(require('../Parser'));

		/**
   * Create a parser. The function creates a new `math.expression.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     var parser = new math.parser();
   *
   *     // evaluate expressions
   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5
   *     var b = parser.eval('sqrt(-4)');        // 2i
   *     var c = parser.eval('2 inch in cm');    // 5.08 cm
   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.eval('x = 7 / 2');               // 3.5
   *     parser.eval('x + 3');                   // 6.5
   *     parser.eval('function f(x, y) = x^y');  // f(x, y)
   *     parser.eval('f(2, 3)');                 // 8
   *
   *     // get and set variables and functions
   *     var x = parser.get('x');                // 7
   *     var f = parser.get('f');                // function
   *     var g = f(3, 2);                        // 9
   *     parser.set('h', 500);
   *     var i = parser.eval('h / 2');           // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!';
   *     });
   *     parser.eval('hello("user")');           // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear();
   *
   * See also:
   *
   *    eval, compile, parse
   *
   * @return {Parser} Parser
   */
		return typed('parser', {
			'': function () {
				return new Parser(math);
			}
		});
	}

	exports.name = 'parser';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument

},{"../Parser":129}],310:[function(require,module,exports){
	module.exports = [
		require('./docs'),
		require('./function'),
		require('./node'),
		require('./transform'),

		require('./Help'),
		require('./parse'),
		require('./Parser')
	];

},{"./Help":128,"./Parser":129,"./docs":303,"./function":307,"./node":328,"./parse":332,"./transform":337}],311:[function(require,module,exports){
	'use strict';

	// Reserved keywords not allowed to use in the parser
	module.exports = {
		end: true
	};

},{}],312:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));
		var access = load(require('./utils/access'));

		/**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */
		function AccessorNode(object, index) {
			if (!(this instanceof AccessorNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			if (!(object && object.isNode)) {
				throw new TypeError('Node expected for parameter "object"');
			}
			if (!(index && index.isIndexNode)) {
				throw new TypeError('IndexNode expected for parameter "index"');
			}

			this.object = object || null;
			this.index = index;

			// readonly property name
			Object.defineProperty(this, 'name', {
				get: function () {
					if (this.index) {
						return (this.index.isObjectProperty())
							? this.index.getObjectProperty()
							: '';
					}
					else {
						return this.object.name || '';
					}
				}.bind(this),
				set: function () {
					throw new Error('Cannot assign a new name, name is read-only');
				}
			});
		}

		AccessorNode.prototype = new Node();

		AccessorNode.prototype.type = 'AccessorNode';

		AccessorNode.prototype.isAccessorNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		AccessorNode.prototype._compile = function (defs, args) {
			defs.access = access;

			var object = this.object._compile(defs, args);
			var index = this.index._compile(defs, args);

			if (this.index.isObjectProperty()) {
				return object + '["' + this.index.getObjectProperty() + '"]';
			}
			else if (this.index.needsSize()) {
				// if some parameters use the 'end' parameter, we need to calculate the size
				return '(function () {' +
          '  var object = ' + object + ';' +
          '  var size = math.size(object).valueOf();' +
          '  return access(object, ' + index + ');' +
          '})()';
			}
			else {
				return 'access(' + object + ', ' + index + ')';
			}
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		AccessorNode.prototype.forEach = function (callback) {
			callback(this.object, 'object', this);
			callback(this.index, 'index', this);
		};

		/**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */
		AccessorNode.prototype.map = function (callback) {
			return new AccessorNode(
				this._ifNode(callback(this.object, 'object', this)),
				this._ifNode(callback(this.index, 'index', this))
			);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */
		AccessorNode.prototype.clone = function () {
			return new AccessorNode(this.object, this.index);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */
		AccessorNode.prototype._toString = function (options) {
			var object = this.object.toString(options);
			if (needParenthesis(this.object)) {
				object = '(' + object + ')';
			}

			return object + this.index.toString(options);
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */
		AccessorNode.prototype._toTex = function (options) {
			var object = this.object.toTex(options);
			if (needParenthesis(this.object)) {
				object = '\\left(' + object + '\\right)';
			}

			return object + this.index.toTex(options);
		};

		/**
   * Are parenthesis needed?
   * @private
   */
		function needParenthesis(node) {
			// TODO: maybe make a method on the nodes which tells whether they need parenthesis?
			return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode
        || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode
        || node.isSymbolNode);
		}

		return AccessorNode;
	}

	exports.name = 'AccessorNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"./Node":321,"./utils/access":329}],313:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
		function ArrayNode(items) {
			if (!(this instanceof ArrayNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			this.items = items || [];

			// validate input
			if (!Array.isArray(this.items)
        || !this.items.every(function (item) {return item && item.isNode;})) {
				throw new TypeError('Array containing Nodes expected');
			}

			// TODO: deprecated since v3, remove some day
			var deprecated = function () {
				throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
			};
			Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });
		}

		ArrayNode.prototype = new Node();

		ArrayNode.prototype.type = 'ArrayNode';

		ArrayNode.prototype.isArrayNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @private
   */
		ArrayNode.prototype._compile = function (defs, args) {
			var asMatrix = (defs.math.config().matrix !== 'Array');

			var items = this.items.map(function (node) {
				return node._compile(defs, args);
			});

			return (asMatrix ? 'math.matrix([' : '[') +
        items.join(',') +
        (asMatrix ? '])' : ']');
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		ArrayNode.prototype.forEach = function (callback) {
			for (var i = 0; i < this.items.length; i++) {
				var node = this.items[i];
				callback(node, 'items[' + i + ']', this);
			}
		};

		/**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */
		ArrayNode.prototype.map = function (callback) {
			var items = [];
			for (var i = 0; i < this.items.length; i++) {
				items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
			}
			return new ArrayNode(items);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */
		ArrayNode.prototype.clone = function() {
			return new ArrayNode(this.items.slice(0));
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		ArrayNode.prototype._toString = function(options) {
			var items = this.items.map(function (node) {
				return node.toString(options);
			});
			return '[' + items.join(', ') + ']';
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		ArrayNode.prototype._toTex = function(options) {
			var s = '\\begin{bmatrix}';

			this.items.forEach(function(node) {
				if (node.items) {
					s += node.items.map(function(childNode) {
						return childNode.toTex(options);
					}).join('&');
				}
				else {
					s += node.toTex(options);
				}

				// new line
				s += '\\\\';
			});
			s += '\\end{bmatrix}';
			return s;
		};

		return ArrayNode;
	}

	exports.name = 'ArrayNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"./Node":321}],314:[function(require,module,exports){
	'use strict';

	var latex = require('../../utils/latex');

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));
		var ArrayNode = load(require('./ArrayNode'));
		var matrix = load(require('../../type/matrix/function/matrix'));
		var assign = load(require('./utils/assign'));
		var access = load(require('./utils/access'));

		var keywords = require('../keywords');
		var operators = require('../operators');

		/**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */
		function AssignmentNode(object, index, value) {
			if (!(this instanceof AssignmentNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			this.object = object;
			this.index = value ? index : null;
			this.value = value ? value : index;

			// validate input
			if (!object || !(object.isSymbolNode || object.isAccessorNode)) {
				throw new TypeError('SymbolNode or AccessorNode expected as "object"');
			}
			if (object && object.isSymbolNode && object.name === 'end') {
				throw new Error('Cannot assign to symbol "end"');
			}
			if (this.index && !this.index.isIndexNode) {
				throw new TypeError('IndexNode expected as "index"');
			}
			if (!this.value || !this.value.isNode) {
				throw new TypeError('Node expected as "value"');
			}

			// readonly property name
			Object.defineProperty(this, 'name', {
				get: function () {
					if (this.index) {
						return (this.index.isObjectProperty())
							? this.index.getObjectProperty()
							: '';
					}
					else {
						return this.object.name || '';
					}
				}.bind(this),
				set: function () {
					throw new Error('Cannot assign a new name, name is read-only');
				}
			});
		}

		AssignmentNode.prototype = new Node();

		AssignmentNode.prototype.type = 'AssignmentNode';

		AssignmentNode.prototype.isAssignmentNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @private
   */
		AssignmentNode.prototype._compile = function (defs, args) {
			defs.assign = assign;
			defs.access = access;

			var size;
			var object = this.object._compile(defs, args);
			var index = this.index ? this.index._compile(defs, args) : null;
			var value = this.value._compile(defs, args);

			if (!this.index) {
				// apply a variable to the scope, for example `a=2`
				if (!this.object.isSymbolNode) {
					throw new TypeError('SymbolNode expected as object');
				}

				return 'scope["' + this.object.name + '"] = ' + value;
			}
			else if (this.index.isObjectProperty()) {
				// apply an object property for example `a.b=2`
				return object + '["' + this.index.getObjectProperty() + '"] = ' + value;
			}
			else if (this.object.isSymbolNode) {
				// update a matrix subset, for example `a[2]=3`
				size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';

				// apply updated object to scope
				return '(function () {' +
          '  var object = ' + object + ';' +
          '  var value = ' + value + ';' +
          '  ' + size +
          '  scope["' + this.object.name + '"] = assign(object, ' + index + ', value);' +
          '  return value;' +
          '})()';
			}
			else { // this.object.isAccessorNode === true
				// update a matrix subset, for example `a.b[2]=3`
				size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';

				// we will not use the _compile of the AccessorNode, but compile it
				// ourselves here as we need the parent object of the AccessorNode:
				// wee need to apply the updated object to parent object
				var parentObject = this.object.object._compile(defs, args);

				if (this.object.index.isObjectProperty()) {
					var parentProperty = '["' + this.object.index.getObjectProperty() + '"]';
					return '(function () {' +
            '  var parent = ' + parentObject + ';' +
            '  var object = parent' + parentProperty + ';' + // parentIndex is a property
            '  var value = ' + value + ';' +
            size +
            '  parent' + parentProperty + ' = assign(object, ' + index + ', value);' +
            '  return value;' +
            '})()';
				}
				else {
					// if some parameters use the 'end' parameter, we need to calculate the size
					var parentSize = this.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';
					var parentIndex = this.object.index._compile(defs, args);

					return '(function () {' +
            '  var parent = ' + parentObject + ';' +
            '  ' + parentSize +
            '  var parentIndex = ' + parentIndex + ';' +
            '  var object = access(parent, parentIndex);' +
            '  var value = ' + value + ';' +
            '  ' + size +
            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +
            '  return value;' +
            '})()';
				}
			}
		};


		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		AssignmentNode.prototype.forEach = function (callback) {
			callback(this.object, 'object', this);
			if (this.index) {
				callback(this.index, 'index', this);
			}
			callback(this.value, 'value', this);
		};

		/**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */
		AssignmentNode.prototype.map = function (callback) {
			var object = this._ifNode(callback(this.object, 'object', this));
			var index = this.index
				? this._ifNode(callback(this.index, 'index', this))
				: null;
			var value = this._ifNode(callback(this.value, 'value', this));

			return new AssignmentNode(object, index, value);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */
		AssignmentNode.prototype.clone = function() {
			return new AssignmentNode(this.object, this.index, this.value);
		};

		/*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */
		function needParenthesis(node, parenthesis) {
			if (!parenthesis) {
				parenthesis = 'keep';
			}

			var precedence = operators.getPrecedence(node, parenthesis);
			var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
			return (parenthesis === 'all')
      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
		}

		/**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */
		AssignmentNode.prototype._toString = function(options) {
			var object = this.object.toString(options);
			var index = this.index ? this.index.toString(options) : '';
			var value = this.value.toString(options);
			if (needParenthesis(this, options && options.parenthesis)) {
				value = '(' + value + ')';
			}

			return object + index + ' = ' + value;
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */
		AssignmentNode.prototype._toTex = function(options) {
			var object = this.object.toTex(options);
			var index = this.index ? this.index.toTex(options) : '';
			var value = this.value.toTex(options);
			if (needParenthesis(this, options && options.parenthesis)) {
				value = '\\left(' + value + '\\right)';
			}

			return object + index + ':=' + value;
		};

		return AssignmentNode;
	}

	exports.name = 'AssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/latex":602,"../keywords":311,"../operators":331,"./ArrayNode":313,"./Node":321,"./utils/access":329,"./utils/assign":330}],315:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));
		var ResultSet = load(require('../../type/resultset/ResultSet'));

		/**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
		function BlockNode(blocks) {
			if (!(this instanceof BlockNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			// validate input, copy blocks
			if (!Array.isArray(blocks)) throw new Error('Array expected');
			this.blocks = blocks.map(function (block) {
				var node = block && block.node;
				var visible = block && block.visible !== undefined ? block.visible : true;

				if (!(node && node.isNode))      throw new TypeError('Property "node" must be a Node');
				if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');

				return {
					node: node,
					visible: visible
				};
			});
		}

		BlockNode.prototype = new Node();

		BlockNode.prototype.type = 'BlockNode';

		BlockNode.prototype.isBlockNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		BlockNode.prototype._compile = function (defs, args) {
			defs.ResultSet = ResultSet;
			var blocks = this.blocks.map(function (param) {
				var js = param.node._compile(defs, args);
				if (param.visible) {
					return 'results.push(' + js + ');';
				}
				else {
					return js + ';';
				}
			});

			return '(function () {' +
        'var results = [];' +
        blocks.join('') +
        'return new ResultSet(results);' +
        '})()';
		};

		/**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		BlockNode.prototype.forEach = function (callback) {
			for (var i = 0; i < this.blocks.length; i++) {
				callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
			}
		};

		/**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */
		BlockNode.prototype.map = function (callback) {
			var blocks = [];
			for (var i = 0; i < this.blocks.length; i++) {
				var block = this.blocks[i];
				var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
				blocks[i] = {
					node: node,
					visible: block.visible
				};
			}
			return new BlockNode(blocks);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */
		BlockNode.prototype.clone = function () {
			var blocks = this.blocks.map(function (block) {
				return {
					node: block.node,
					visible: block.visible
				};
			});

			return new BlockNode(blocks);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		BlockNode.prototype._toString = function (options) {
			return this.blocks.map(function (param) {
				return param.node.toString(options) + (param.visible ? '' : ';');
			}).join('\n');
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		BlockNode.prototype._toTex = function (options) {
			return this.blocks.map(function (param) {
				return param.node.toTex(options) + (param.visible ? '' : ';');
			}).join('\\;\\;\n');
		};

		return BlockNode;
	}

	exports.name = 'BlockNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../type/resultset/ResultSet":571,"./Node":321}],316:[function(require,module,exports){
	'use strict';

	var latex = require('../../utils/latex');
	var operators = require('../operators');

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
		function ConditionalNode(condition, trueExpr, falseExpr) {
			if (!(this instanceof ConditionalNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}
			if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');
			if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');
			if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');

			this.condition = condition;
			this.trueExpr = trueExpr;
			this.falseExpr = falseExpr;
		}

		ConditionalNode.prototype = new Node();

		ConditionalNode.prototype.type = 'ConditionalNode';

		ConditionalNode.prototype.isConditionalNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		ConditionalNode.prototype._compile = function (defs, args) {
			/**
     * Test whether a condition is met
     * @param {*} condition
     * @returns {boolean} true if condition is true or non-zero, else false
     */
			defs.testCondition = function (condition) {
				if (typeof condition === 'number'
          || typeof condition === 'boolean'
          || typeof condition === 'string') {
					return condition ? true : false;
				}

				if (condition) {
					if (condition.isBigNumber === true) {
						return condition.isZero() ? false : true;
					}

					if (condition.isComplex === true) {
						return (condition.re || condition.im) ? true : false;
					}

					if (condition.isUnit === true) {
						return condition.value ? true : false;
					}
				}

				if (condition === null || condition === undefined) {
					return false;
				}

				throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
			};

			return (
				'testCondition(' + this.condition._compile(defs, args) + ') ? ' +
      '( ' + this.trueExpr._compile(defs, args) + ') : ' +
      '( ' + this.falseExpr._compile(defs, args) + ')'
			);
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		ConditionalNode.prototype.forEach = function (callback) {
			callback(this.condition, 'condition', this);
			callback(this.trueExpr, 'trueExpr', this);
			callback(this.falseExpr, 'falseExpr', this);
		};

		/**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */
		ConditionalNode.prototype.map = function (callback) {
			return new ConditionalNode(
				this._ifNode(callback(this.condition, 'condition', this)),
				this._ifNode(callback(this.trueExpr, 'trueExpr', this)),
				this._ifNode(callback(this.falseExpr, 'falseExpr', this))
			);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */
		ConditionalNode.prototype.clone = function () {
			return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
		ConditionalNode.prototype._toString = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var precedence = operators.getPrecedence(this, parenthesis);

			//Enclose Arguments in parentheses if they are an OperatorNode
			//or have lower or equal precedence
			//NOTE: enclosing all OperatorNodes in parentheses is a decision
			//purely based on aesthetics and readability
			var condition = this.condition.toString(options);
			var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
			if ((parenthesis === 'all')
        || (this.condition.type === 'OperatorNode')
        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
				condition = '(' + condition + ')';
			}

			var trueExpr = this.trueExpr.toString(options);
			var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
			if ((parenthesis === 'all')
        || (this.trueExpr.type === 'OperatorNode')
        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
				trueExpr = '(' + trueExpr + ')';
			}

			var falseExpr = this.falseExpr.toString(options);
			var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
			if ((parenthesis === 'all')
        || (this.falseExpr.type === 'OperatorNode')
        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
				falseExpr = '(' + falseExpr + ')';
			}
			return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		ConditionalNode.prototype._toTex = function (options) {
			return '\\begin{cases} {'
        + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;'
        + this.condition.toTex(options)
        + '}\\\\{' + this.falseExpr.toTex(options)
        + '}, &\\quad{\\text{otherwise}}\\end{cases}';
		};

		return ConditionalNode;
	}

	exports.name = 'ConditionalNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../utils/latex":602,"../operators":331,"./Node":321}],317:[function(require,module,exports){
	'use strict';

	var getType = require('../../utils/types').type;

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * A ConstantNode holds a constant value like a number or string. A ConstantNode
   * stores a stringified version of the value and uses this to compile to
   * JavaScript.
   *
   * In case of a stringified number as input, this may be compiled to a BigNumber
   * when the math instance is configured for BigNumbers.
   *
   * Usage:
   *
   *     // stringified values with type
   *     new ConstantNode('2.3', 'number');
   *     new ConstantNode('true', 'boolean');
   *     new ConstantNode('hello', 'string');
   *
   *     // non-stringified values, type will be automatically detected
   *     new ConstantNode(2.3);
   *     new ConstantNode('hello');
   *
   * @param {string | number | boolean | null | undefined} value
   *                            When valueType is provided, value must contain
   *                            an uninterpreted string representing the value.
   *                            When valueType is undefined, value can be a
   *                            number, string, boolean, null, or undefined, and
   *                            the type will be determined automatically.
   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',
   *                              'boolean', 'undefined', 'null'
   * @constructor ConstantNode
   * @extends {Node}
   */
		function ConstantNode(value, valueType) {
			if (!(this instanceof ConstantNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			if (valueType) {
				if (typeof valueType !== 'string') {
					throw new TypeError('String expected for parameter "valueType"');
				}
				if (typeof value !== 'string') {
					throw new TypeError('String expected for parameter "value"');
				}

				this.value = value;
				this.valueType = valueType;
			}
			else {
				// stringify the value and determine the type
				this.value = value + '';
				this.valueType = getType(value);
			}

			if (!SUPPORTED_TYPES[this.valueType]) {
				throw new TypeError('Unsupported type of value "' + this.valueType + '"');
			}
		}

		var SUPPORTED_TYPES = {
			'number': true,
			'string': true,
			'boolean': true,
			'undefined': true,
			'null': true
		};

		ConstantNode.prototype = new Node();

		ConstantNode.prototype.type = 'ConstantNode';

		ConstantNode.prototype.isConstantNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		ConstantNode.prototype._compile = function (defs, args) {
			switch (this.valueType) {
			case 'number':
				// TODO: replace this with using config.number
				var numConfig = defs.math.config().number;
				if (numConfig === 'BigNumber') {
					return 'math.bignumber("' + this.value + '")';
				}
				else if (numConfig === 'Fraction') {
					return 'math.fraction("' + this.value + '")';
				}
				else {
					// remove leading zeros like '003.2' which are not allowed by JavaScript
					return this.value.replace(/^(0*)[0-9]/, function (match, zeros) {
						return match.substring(zeros.length);
					});
				}

			case 'string':
				return '"' + this.value + '"';

			case 'boolean':
				return this.value;

			case 'undefined':
				return this.value;

			case 'null':
				return this.value;

			default:
				// TODO: move this error to the constructor?
				throw new TypeError('Unsupported type of constant "' + this.valueType + '"');
			}
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		ConstantNode.prototype.forEach = function (callback) {
			// nothing to do, we don't have childs
		};


		/**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */
		ConstantNode.prototype.map = function (callback) {
			return this.clone();
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */
		ConstantNode.prototype.clone = function () {
			return new ConstantNode(this.value, this.valueType);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
		ConstantNode.prototype._toString = function (options) {
			switch (this.valueType) {
			case 'string':
				return '"' + this.value + '"';

			default:
				return this.value;
			}
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		ConstantNode.prototype._toTex = function (options) {
			var value = this.value,
				index;
			switch (this.valueType) {
			case 'string':
				return '\\mathtt{"' + value + '"}';

			case 'number':
				index = value.toLowerCase().indexOf('e');
				if (index !== -1) {
					return value.substring(0, index) + '\\cdot10^{' +
              value.substring(index + 1) + '}';
				}
				return value;

			default:
				return value;
			}
		};

		return ConstantNode;
	}

	exports.name = 'ConstantNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../utils/types":606,"./Node":321}],318:[function(require,module,exports){
	'use strict';

	var keywords = require('../keywords');
	var latex = require('../../utils/latex');
	var operators = require('../operators');

	function isString (x) {
		return typeof x === 'string';
	}

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
		function FunctionAssignmentNode(name, params, expr) {
			if (!(this instanceof FunctionAssignmentNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			// validate input
			if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
			if (!Array.isArray(params))  throw new TypeError('Array containing strings or objects expected for parameter "params"');
			if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter "expr"');
			if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');

			this.name = name;
			this.params = params.map(function (param) {
				return param && param.name || param;
			});
			this.types = params.map(function (param) {
				return param && param.type || 'any';
			});
			this.expr = expr;
		}

		FunctionAssignmentNode.prototype = new Node();

		FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';

		FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		FunctionAssignmentNode.prototype._compile = function (defs, args) {
			defs.typed = typed;

			// we extend the original args and add the args to the child object
			var childArgs = Object.create(args);
			this.params.forEach(function (variable) {
				childArgs[variable] = true;
			});

			// compile the function expression with the child args
			var jsExpr = this.expr._compile(defs, childArgs);

			return 'scope["' + this.name + '"] = ' +
        '  (function () {' +
        '    var fn = typed("' + this.name + '", {' +
        '      "' + this.types.join(',') + '": function (' + this.params.join(',') + ') {' +
        '        return ' + jsExpr + '' +
        '      }' +
        '    });' +
        '    fn.syntax = "' + this.name + '(' + this.params.join(', ') + ')";' +
        '    return fn;' +
        '  })()';
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		FunctionAssignmentNode.prototype.forEach = function (callback) {
			callback(this.expr, 'expr', this);
		};

		/**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */
		FunctionAssignmentNode.prototype.map = function (callback) {
			var expr = this._ifNode(callback(this.expr, 'expr', this));

			return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */
		FunctionAssignmentNode.prototype.clone = function () {
			return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
		};

		/**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */
		function needParenthesis(node, parenthesis) {
			var precedence = operators.getPrecedence(node, parenthesis);
			var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);

			return (parenthesis === 'all')
      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
		}

		/**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */
		FunctionAssignmentNode.prototype._toString = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var expr = this.expr.toString(options);
			if (needParenthesis(this, parenthesis)) {
				expr = '(' + expr + ')';
			}
			return 'function ' + this.name +
        '(' + this.params.join(', ') + ') = ' + expr;
		};

		/**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		FunctionAssignmentNode.prototype._toTex = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var expr = this.expr.toTex(options);
			if (needParenthesis(this, parenthesis)) {
				expr = '\\left(' + expr + '\\right)';
			}

			return '\\mathrm{' + this.name
        + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
		};

		return FunctionAssignmentNode;
	}
	exports.name = 'FunctionAssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../utils/latex":602,"../keywords":311,"../operators":331,"./Node":321}],319:[function(require,module,exports){
	'use strict';

	var latex = require('../../utils/latex');

	function factory (type, config, load, typed, math) {
		var Node = load(require('./Node'));
		var SymbolNode = load(require('./SymbolNode'));

		/**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node} fn       Node resolving with a function on which to invoke
   *                          the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
		function FunctionNode(fn, args) {
			if (!(this instanceof FunctionNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			// TODO deprecated since v3.0, cleanup some day
			if (typeof fn === 'string') {
				console.warn('WARNING: passing a string to FunctionNode is deprecated, pass a SymbolNode instead.');
				fn = new SymbolNode(fn);
			}

			// validate input
			if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter "fn"');
			if (!Array.isArray(args)
        || !args.every(function (arg) {return arg && arg.isNode;})) {
				throw new TypeError('Array containing Nodes expected for parameter "args"');
			}

			this.fn = fn;
			this.args = args || [];

			// readonly property name
			Object.defineProperty(this, 'name', {
				get: function () {
					return this.fn.name || '';
				}.bind(this),
				set: function () {
					throw new Error('Cannot assign a new name, name is read-only');
				}
			});

			// TODO: deprecated since v3, remove some day
			var deprecated = function () {
				throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
			};
			Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
		}

		FunctionNode.prototype = new Node();

		FunctionNode.prototype.type = 'FunctionNode';

		FunctionNode.prototype.isFunctionNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		FunctionNode.prototype._compile = function (defs, args) {
			// compile fn and arguments
			var jsFn = this.fn._compile(defs, args);
			var jsArgs = this.args.map(function (arg) {
				return arg._compile(defs, args);
			});
			var argsName;

			if (this.fn.isSymbolNode) {
				// we can statically determine whether the function has an rawArgs property
				var name = this.fn.name;
				var fn = defs.math[name];
				var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);

				if (isRaw) {
					// pass unevaluated parameters (nodes) to the function
					argsName = this._getUniqueArgumentsName(defs);
					defs[argsName] = this.args;

					return jsFn + '(' + argsName + ', math, scope)';
				}
				else {
					// "regular" evaluation
					return jsFn + '(' + jsArgs.join(', ') + ')';
				}
			}
			else if (this.fn.isAccessorNode && this.fn.index.isObjectProperty()) {
				// execute the function with the right context: the object of the AccessorNode
				argsName = this._getUniqueArgumentsName(defs);
				defs[argsName] = this.args;

				var jsObject = this.fn.object._compile(defs, args);
				var prop = this.fn.index.getObjectProperty();

				return '(function () {' +
          'var object = ' + jsObject + ';' +
          'return (object["' + prop + '"] && object["' + prop + '"].rawArgs) ' +
          ' ? object["' + prop + '"](' + argsName + ', math, scope)' +
          ' : object["' + prop + '"](' + jsArgs.join(', ') + ')' +
          '})()';
			}
			else { // this.fn.isAccessorNode && !this.fn.index.isObjectProperty()
				// we have to dynamically determine whether the function has a rawArgs property
				argsName = this._getUniqueArgumentsName(defs);
				defs[argsName] = this.args;

				return '(function () {' +
          'var fn = ' + jsFn + ';' +
          'return (fn && fn.rawArgs) ' +
          ' ? fn(' + argsName + ', math, scope)' +
          ' : fn(' + jsArgs.join(', ') + ')' +
          '})()';
			}
		};

		/**
   * Get a unique name for a arguments to store in defs
   * @param {Object} defs
   * @return {string} A string like 'args1', 'args2', ...
   * @private
   */
		FunctionNode.prototype._getUniqueArgumentsName = function (defs) {
			var argsName;
			var i = 0;

			do {
				argsName = 'args' + i;
				i++;
			}
			while (argsName in defs);

			return argsName;
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		FunctionNode.prototype.forEach = function (callback) {
			for (var i = 0; i < this.args.length; i++) {
				callback(this.args[i], 'args[' + i + ']', this);
			}
		};

		/**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */
		FunctionNode.prototype.map = function (callback) {
			var fn = this.fn.map(callback);
			var args = [];
			for (var i = 0; i < this.args.length; i++) {
				args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
			}
			return new FunctionNode(fn, args);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */
		FunctionNode.prototype.clone = function () {
			return new FunctionNode(this.fn, this.args.slice(0));
		};

		//backup Node's toString function
		//@private
		var nodeToString = FunctionNode.prototype.toString;

		/**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */
		FunctionNode.prototype.toString = function (options) {
			var customString;
			var name = this.fn.toString(options);
			if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(name)) {
				//callback is a map of callback functions
				customString = options.handler[name](this, options);
			}

			if (typeof customString !== 'undefined') {
				return customString;
			}

			//fall back to Node's toString
			return nodeToString.call(this, options);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
		FunctionNode.prototype._toString = function (options) {
			var args = this.args.map(function (arg) {
				return arg.toString(options);
			});

			// format the arguments like "add(2, 4.2)"
			return this.fn.toString(options) + '(' + args.join(', ') + ')';
		};

		/*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/
		function expandTemplate(template, node, options) {
			var latex = '';

			// Match everything of the form ${identifier} or ${identifier[2]} or $$
			// while submatching identifier and 2 (in the second case)
			var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');

			var inputPos = 0;   //position in the input string
			var match;
			while ((match = regex.exec(template)) !== null) {   //go through all matches
				// add everything in front of the match to the LaTeX string
				latex += template.substring(inputPos, match.index);
				inputPos = match.index;

				if (match[0] === '$$') { // escaped dollar sign
					latex += '$';
					inputPos++;
				}
				else { // template parameter
					inputPos += match[0].length;
					var property = node[match[1]];
					if (!property) {
						throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
					}
					if (match[2] === undefined) { //no square brackets
						switch (typeof property) {
						case 'string':
							latex += property;
							break;
						case 'object':
							if (property.isNode) {
								latex += property.toTex(options);
							}
							else if (Array.isArray(property)) {
								//make array of Nodes into comma separated list
								latex += property.map(function (arg, index) {
									if (arg && arg.isNode) {
										return arg.toTex(options);
									}
									throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
								}).join(',');
							}
							else {
								throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
							}
							break;
						default:
							throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
						}
					}
					else { //with square brackets
						if (property[match[2]] && property[match[2]].isNode) {
							latex += property[match[2]].toTex(options);
						}
						else {
							throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
						}
					}
				}
			}
			latex += template.slice(inputPos);  //append rest of the template

			return latex;
		}

		//backup Node's toTex function
		//@private
		var nodeToTex = FunctionNode.prototype.toTex;

		/**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */
		FunctionNode.prototype.toTex = function (options) {
			var customTex;
			if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {
				//callback is a map of callback functions
				customTex = options.handler[this.name](this, options);
			}

			if (typeof customTex !== 'undefined') {
				return customTex;
			}

			//fall back to Node's toTex
			return nodeToTex.call(this, options);
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		FunctionNode.prototype._toTex = function (options) {
			var args = this.args.map(function (arg) { //get LaTeX of the arguments
				return arg.toTex(options);
			});

			var latexConverter;

			if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {
				//.toTex is a callback function
				latexConverter = math[this.name].toTex;
			}

			var customToTex;
			switch (typeof latexConverter) {
			case 'function': //a callback function
				customToTex = latexConverter(this, options);
				break;
			case 'string': //a template string
				customToTex = expandTemplate(latexConverter, this, options);
				break;
			case 'object': //an object with different "converters" for different numbers of arguments
				switch (typeof latexConverter[args.length]) {
				case 'function':
					customToTex = latexConverter[args.length](this, options);
					break;
				case 'string':
					customToTex = expandTemplate(latexConverter[args.length], this, options);
					break;
				}
			}

			if (typeof customToTex !== 'undefined') {
				return customToTex;
			}

			return expandTemplate(latex.defaultTemplate, this, options);
		};

		/**
   * Get identifier.
   * @return {string}
   */
		FunctionNode.prototype.getIdentifier = function () {
			return this.type + ':' + this.name;
		};

		return FunctionNode;
	}

	exports.name = 'FunctionNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

},{"../../utils/latex":602,"./Node":321,"./SymbolNode":326}],320:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));
		var RangeNode = load(require('./RangeNode'));
		var SymbolNode = load(require('./SymbolNode'));

		var Range = load(require('../../type/matrix/Range'));

		var isArray = Array.isArray;

		/**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */
		function IndexNode(dimensions, dotNotation) {
			if (!(this instanceof IndexNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			this.dimensions = dimensions;
			this.dotNotation = dotNotation || false;

			// validate input
			if (!isArray(dimensions)
        || !dimensions.every(function (range) {return range && range.isNode;})) {
				throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
			}
			if (this.dotNotation && !this.isObjectProperty()) {
				throw new Error('dotNotation only applicable for object properties');
			}

			// TODO: deprecated since v3, remove some day
			var deprecated = function () {
				throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
			};
			Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
		}

		IndexNode.prototype = new Node();

		IndexNode.prototype.type = 'IndexNode';

		IndexNode.prototype.isIndexNode = true;

		/**
   * Compile all range nodes
   *
   * When some of the dimensions has `end` defined, the IndexNode requires
   * a variable `size` to be defined in the current closure, and must contain
   * the size of the matrix that's being handled. To check whether the `size`
   * variable is needed, call IndexNode.needsSize().
   *
   * @param {Object} defs           Object which can be used to define functions
   *                                or constants globally available for the
   *                                compiled expression
   * @param {Object} args           Object with local function arguments, the key is
   *                                the name of the argument, and the value is `true`.
   *                                The object may not be mutated, but must be
   *                                extended instead.
   * @return {string} code
   */
		IndexNode.prototype._compile = function (defs, args) {
			// args can be mutated by IndexNode, when dimensions use `end`
			var childArgs = Object.create(args);

			// helper function to create a Range from start, step and end
			defs.range = function (start, end, step) {
				return new Range(
					(start && start.isBigNumber === true) ? start.toNumber() : start,
					(end   && end.isBigNumber === true)   ? end.toNumber()   : end,
					(step  && step.isBigNumber === true)  ? step.toNumber()  : step
				);
			};

			// TODO: implement support for bignumber (currently bignumbers are silently
			//       reduced to numbers when changing the value to zero-based)

			// TODO: Optimization: when the range values are ConstantNodes,
			//       we can beforehand resolve the zero-based value

			// optimization for a simple object property
			var dimensions = this.dimensions.map(function (range, i) {
				if (range && range.isRangeNode) {
					if (range.needsEnd()) {
						childArgs.end = true;

						// resolve end and create range
						return '(function () {' +
              'var end = size[' + i + ']; ' +
              'return range(' +
              range.start._compile(defs, childArgs) + ', ' +
              range.end._compile(defs, childArgs) + ', ' +
              (range.step ? range.step._compile(defs, childArgs) : '1') +
              '); ' +
              '})()';
					}
					else {
						// create range
						return 'range(' +
              range.start._compile(defs, childArgs) + ', ' +
              range.end._compile(defs, childArgs) + ', ' +
              (range.step ? range.step._compile(defs, childArgs) : '1') +
              ')';
					}
				}
				if (range.isSymbolNode && range.name === 'end') {
					childArgs.end = true;

					// resolve the parameter 'end'
					return '(function () {' +
            'var end = size[' + i + ']; ' +
            'return ' + range._compile(defs, childArgs) + '; ' +
            '})()';
				}
				else { // ConstantNode
					return range._compile(defs, childArgs);
				}
			});

			return 'math.index(' + dimensions.join(', ') + ')';
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		IndexNode.prototype.forEach = function (callback) {
			for (var i = 0; i < this.dimensions.length; i++) {
				callback(this.dimensions[i], 'dimensions[' + i + ']', this);
			}
		};

		/**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */
		IndexNode.prototype.map = function (callback) {
			var dimensions = [];
			for (var i = 0; i < this.dimensions.length; i++) {
				dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
			}

			return new IndexNode(dimensions);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */
		IndexNode.prototype.clone = function () {
			return new IndexNode(this.dimensions.slice(0));
		};

		/**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */
		IndexNode.prototype.isObjectProperty = function () {
			return this.dimensions.length === 1 &&
        this.dimensions[0].isConstantNode &&
        this.dimensions[0].valueType === 'string';
		};

		/**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */
		IndexNode.prototype.getObjectProperty = function () {
			return this.isObjectProperty() ? this.dimensions[0].value : null;
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
		IndexNode.prototype._toString = function (options) {
			// format the parameters like "[1, 0:5]"
			return this.dotNotation
				? ('.' + this.getObjectProperty())
				: ('[' + this.dimensions.join(', ') + ']');
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		IndexNode.prototype._toTex = function (options) {
			var dimensions = this.dimensions.map(function (range) {
				return range.toTex(options);
			});

			return this.dotNotation
				? ('.' + this.getObjectProperty() + '')
				: ('_{' + dimensions.join(',') + '}');
		};

		/**
   * Test whether this IndexNode needs the object size, size of the Matrix
   * @return {boolean}
   */
		IndexNode.prototype.needsSize = function () {
			return this.dimensions.some(function (range) {
				return (range.isRangeNode && range.needsEnd()) ||
          (range.isSymbolNode && range.name === 'end');
			});
		};

		return IndexNode;
	}

	exports.name = 'IndexNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../type/matrix/Range":549,"./Node":321,"./RangeNode":325,"./SymbolNode":326}],321:[function(require,module,exports){
	'use strict';

	var keywords = require('../keywords');
	var extend = require('../../utils/object').extend;

	function factory (type, config, load, typed, math) {
		/**
   * Node
   */
		function Node() {
			if (!(this instanceof Node)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}
		}

		/**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */
		Node.prototype.eval = function(scope) {
			return this.compile().eval(scope);
		};

		Node.prototype.type = 'Node';

		Node.prototype.isNode = true;

		/**
   * Compile the node to javascript code
   * @return {{eval: function}} expr  Returns an object with a function 'eval',
   *                                  which can be invoked as expr.eval([scope]),
   *                                  where scope is an optional object with
   *                                  variables.
   */
		Node.prototype.compile = function () {
			// TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day
			if (arguments.length > 0) {
				throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
			}

			// definitions globally available inside the closure of the compiled expressions
			var defs = {
				math: math.expression.transform,
				args: {}, // can be filled with names of FunctionAssignment arguments
				_validateScope: _validateScope
			};

			// will be used to put local function arguments
			var args = {};

			var code = this._compile(defs, args);

			var defsCode = Object.keys(defs).map(function (name) {
				return '    var ' + name + ' = defs["' + name + '"];';
			});

			var factoryCode =
        defsCode.join(' ') +
        'return {' +
        '  "eval": function (scope) {' +
        '    if (scope) _validateScope(scope);' +
        '    scope = scope || {};' +
        '    return ' + code + ';' +
        '  }' +
        '};';

			var factory = new Function('defs', factoryCode);
			return factory(defs);
		};

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          and constants globally available inside the closure
   *                          of the compiled expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		Node.prototype._compile = function (defs, args) {
			// must be implemented by each of the Node implementations
			throw new Error('Cannot compile a Node interface');
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		Node.prototype.forEach = function (callback) {
			// must be implemented by each of the Node implementations
			throw new Error('Cannot run forEach on a Node interface');
		};

		/**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */
		Node.prototype.map = function (callback) {
			// must be implemented by each of the Node implementations
			throw new Error('Cannot run map on a Node interface');
		};

		/**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */
		Node.prototype._ifNode = function (node) {
			if (!(node && node.isNode)) {
				throw new TypeError('Callback function must return a Node');
			}

			return node;
		};

		/**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */
		Node.prototype.traverse = function (callback) {
			// execute callback for itself
			callback(this, null, null);

			// recursively traverse over all childs of a node
			function _traverse(node, callback) {
				node.forEach(function (child, path, parent) {
					callback(child, path, parent);
					_traverse(child, callback);
				});
			}

			_traverse(this, callback);
		};

		/**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     var res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name == 'x')) {
   *         return new ConstantNode(2);
   *       }
   *       else {
   *         return node;
   *       }
   *     });
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */
		Node.prototype.transform = function (callback) {
			// traverse over all childs
			function _transform (node, callback) {
				return node.map(function(child, path, parent) {
					var replacement = callback(child, path, parent);
					return _transform(replacement, callback);
				});
			}

			var replacement = callback(this, null, null);
			return _transform(replacement, callback);
		};

		/**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     var results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name == 'x');
   *     });
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */
		Node.prototype.filter = function (callback) {
			var nodes = [];

			this.traverse(function (node, path, parent) {
				if (callback(node, path, parent)) {
					nodes.push(node);
				}
			});

			return nodes;
		};

		// TODO: deprecated since version 1.1.0, remove this some day
		Node.prototype.find = function () {
			throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
		};

		// TODO: deprecated since version 1.1.0, remove this some day
		Node.prototype.match = function () {
			throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {Node}
   */
		Node.prototype.clone = function () {
			// must be implemented by each of the Node implementations
			throw new Error('Cannot clone a Node interface');
		};

		/**
  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */
		Node.prototype.toString = function (options) {
			var customString;
			if (options && typeof options == "object") {
				switch (typeof options.handler) {
				case 'object':
				case 'undefined':
					break;
				case 'function':
					customString = options.handler(this, options);
					break;
				default:
					throw new TypeError('Object or function expected as callback');
				}
			}

			if (typeof customString !== 'undefined') {
				return customString;
			}

			return this._toString(options);
		};

		/**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */
		Node.prototype._toString = function () {
			//must be implemented by each of the Node implementations
			throw new Error('_toString not implemented for ' + this.type);
		};

		/**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */
		Node.prototype.toTex = function (options) {
			var customTex;
			if (options && typeof options == 'object') {
				switch (typeof options.handler) {
				case 'object':
				case 'undefined':
					break;
				case 'function':
					customTex = options.handler(this, options);
					break;
				default:
					throw new TypeError('Object or function expected as callback');
				}
			}

			if (typeof customTex !== 'undefined') {
				return customTex;
			}

			return this._toTex(options);
		};

		/**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */
		Node.prototype._toTex = function (options) {
			//must be implemented by each of the Node implementations
			throw new Error('_toTex not implemented for ' + this.type);
		};

		/**
   * Get identifier.
   * @return {string}
   */
		Node.prototype.getIdentifier = function () {
			return this.type;
		};

		/**
   * Get the content of the current Node.
   * @return {Node} node
   **/
		Node.prototype.getContent = function () {
			return this;
		};

		/**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */
		function _validateScope(scope) {
			for (var symbol in scope) {
				if (scope.hasOwnProperty(symbol)) {
					if (symbol in keywords) {
						throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
					}
				}
			}
		}

		return Node;
	}

	exports.name = 'Node';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

},{"../../utils/object":604,"../keywords":311}],322:[function(require,module,exports){
	'use strict';

	var string = require('../../utils/string');

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   array with key/value pairs
   */
		function ObjectNode(properties) {
			if (!(this instanceof ObjectNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			this.properties = properties || {};

			// validate input
			if (properties) {
				if (!(typeof properties === 'object') || Object.keys(properties).some(function (key) {
					return !properties[key] || !properties[key].isNode;
				})) {
					throw new TypeError('Object containing Nodes expected');
				}
			}
		}

		ObjectNode.prototype = new Node();

		ObjectNode.prototype.type = 'ObjectNode';

		ObjectNode.prototype.isObjectNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} code
   * @private
   */
		ObjectNode.prototype._compile = function (defs, args) {
			var entries = [];
			for (var key in this.properties) {
				if (this.properties.hasOwnProperty(key)) {
					entries.push('"' + key + '": ' + this.properties[key]._compile(defs, args));
				}
			}
			return '{' + entries.join(', ') + '}';
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		ObjectNode.prototype.forEach = function (callback) {
			for (var key in this.properties) {
				if (this.properties.hasOwnProperty(key)) {
					callback(this.properties[key], 'properties["' + key + '"]', this);
				}
			}
		};

		/**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */
		ObjectNode.prototype.map = function (callback) {
			var properties = {};
			for (var key in this.properties) {
				if (this.properties.hasOwnProperty(key)) {
					properties[key] = this._ifNode(callback(this.properties[key], 'properties["' + key + '"]', this));
				}
			}
			return new ObjectNode(properties);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */
		ObjectNode.prototype.clone = function() {
			var properties = {};
			for (var key in this.properties) {
				if (this.properties.hasOwnProperty(key)) {
					properties[key] = this.properties[key];
				}
			}
			return new ObjectNode(properties);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		ObjectNode.prototype._toString = function(options) {
			var entries = [];
			for (var key in this.properties) {
				if (this.properties.hasOwnProperty(key)) {
					entries.push('"' + key + '": ' + this.properties[key].toString(options));
				}
			}
			return '{' + entries.join(', ') + '}';
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		ObjectNode.prototype._toTex = function(options) {
			var entries = [];
			for (var key in this.properties) {
				if (this.properties.hasOwnProperty(key)) {
					entries.push("\\mathbf{" + key + ':} & ' + this.properties[key].toTex(options) + "\\\\");
				}
			}
			return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
		};

		return ObjectNode;
	}

	exports.name = 'ObjectNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../../utils/string":605,"./Node":321}],323:[function(require,module,exports){
	'use strict';

	var latex = require('../../utils/latex');
	var operators = require('../operators');

	function factory (type, config, load, typed, math) {
		var Node         = load(require('./Node'));
		var ConstantNode = load(require('./ConstantNode'));
		var SymbolNode   = load(require('./SymbolNode'));
		var FunctionNode = load(require('./FunctionNode'));

		/**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   */
		function OperatorNode(op, fn, args, implicit) {
			if (!(this instanceof OperatorNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			//validate input
			if (typeof op !== 'string') {
				throw new TypeError('string expected for parameter "op"');
			}
			if (typeof fn !== 'string') {
				throw new TypeError('string expected for parameter "fn"');
			}
			if (!Array.isArray(args)
        || !args.every(function (node) {return node && node.isNode;})) {
				throw new TypeError('Array containing Nodes expected for parameter "args"');
			}

			this.implicit = (implicit === true);
			this.op = op;
			this.fn = fn;
			this.args = args || [];
		}

		OperatorNode.prototype = new Node();

		OperatorNode.prototype.type = 'OperatorNode';

		OperatorNode.prototype.isOperatorNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		OperatorNode.prototype._compile = function (defs, args) {
			if (!defs.math[this.fn]) {
				throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
			}

			var jsArgs = this.args.map(function (arg) {
				return arg._compile(defs, args);
			});

			return 'math.' + this.fn + '(' + jsArgs.join(', ') + ')';
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		OperatorNode.prototype.forEach = function (callback) {
			for (var i = 0; i < this.args.length; i++) {
				callback(this.args[i], 'args[' + i + ']', this);
			}
		};

		/**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */
		OperatorNode.prototype.map = function (callback) {
			var args = [];
			for (var i = 0; i < this.args.length; i++) {
				args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
			}
			return new OperatorNode(this.op, this.fn, args);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */
		OperatorNode.prototype.clone = function () {
			return new OperatorNode(this.op, this.fn, this.args.slice(0));
		};

		/**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */
		function calculateNecessaryParentheses(root, parenthesis, args, latex) {
			//precedence of the root OperatorNode
			var precedence = operators.getPrecedence(root, parenthesis);
			var associativity = operators.getAssociativity(root, parenthesis);

			if ((parenthesis === 'all') || (args.length > 2)) {
				var parens = [];
				args.forEach(function (arg) {
					switch (arg.getContent().type) { //Nodes that don't need extra parentheses
					case 'ArrayNode':
					case 'ConstantNode':
					case 'SymbolNode':
					case 'ParenthesisNode':
						parens.push(false);
						break;
					default:
						parens.push(true);
					}
				});
				return parens;
			}

			switch (args.length) {
			case 0:
				return [];
			case 1: //unary operators
				//precedence of the operand
				var operandPrecedence = operators.getPrecedence(args[0], parenthesis);

				//handle special cases for LaTeX, where some of the parentheses aren't needed
				if (latex && (operandPrecedence !== null)) {
					var operandIdentifier;
					var rootIdentifier;
					if (parenthesis === 'keep') {
						operandIdentifier = args[0].getIdentifier();
						rootIdentifier = root.getIdentifier();
					}
					else {
						//Ignore Parenthesis Nodes when not in 'keep' mode
						operandIdentifier = args[0].getContent().getIdentifier();
						rootIdentifier = root.getContent().getIdentifier();
					}
					if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
						return [false];
					}

					if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
						return [false];
					}
				}

				if (operandPrecedence === null) {
					//if the operand has no defined precedence, no parens are needed
					return [false];
				}

				if (operandPrecedence <= precedence) {
					//if the operands precedence is lower, parens are needed
					return [true];
				}

				//otherwise, no parens needed
				return [false];

			case 2: //binary operators
				var lhsParens; //left hand side needs parenthesis?
				//precedence of the left hand side
				var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
				//is the root node associative with the left hand side
				var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);

				if (lhsPrecedence === null) {
					//if the left hand side has no defined precedence, no parens are needed
					//FunctionNode for example
					lhsParens = false;
				}
				else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {
					//In case of equal precedence, if the root node is left associative
					// parens are **never** necessary for the left hand side.
					//If it is right associative however, parens are necessary
					//if the root node isn't associative with the left hand side
					lhsParens = true;
				}
				else if (lhsPrecedence < precedence) {
					lhsParens = true;
				}
				else {
					lhsParens = false;
				}

				var rhsParens; //right hand side needs parenthesis?
				//precedence of the right hand side
				var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
				//is the root node associative with the right hand side?
				var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);

				if (rhsPrecedence === null) {
					//if the right hand side has no defined precedence, no parens are needed
					//FunctionNode for example
					rhsParens = false;
				}
				else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {
					//In case of equal precedence, if the root node is right associative
					// parens are **never** necessary for the right hand side.
					//If it is left associative however, parens are necessary
					//if the root node isn't associative with the right hand side
					rhsParens = true;
				}
				else if (rhsPrecedence < precedence) {
					rhsParens = true;
				}
				else {
					rhsParens = false;
				}

				//handle special cases for LaTeX, where some of the parentheses aren't needed
				if (latex) {
					var rootIdentifier;
					var lhsIdentifier;
					var rhsIdentifier;
					if (parenthesis === 'keep') {
						rootIdentifier = root.getIdentifier();
						lhsIdentifier = root.args[0].getIdentifier();
						rhsIdentifier = root.args[1].getIdentifier();
					}
					else {
						//Ignore ParenthesisNodes when not in 'keep' mode
						rootIdentifier = root.getContent().getIdentifier();
						lhsIdentifier = root.args[0].getContent().getIdentifier();
						rhsIdentifier = root.args[1].getContent().getIdentifier();
					}

					if (lhsPrecedence !== null) {
						if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
							lhsParens = false;
						}

						if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
							lhsParens = false;
						}
					}

					if (rhsPrecedence !== null) {
						if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
							rhsParens = false;
						}

						if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
							rhsParens = false;
						}
					}
				}

				return [lhsParens, rhsParens];
			}
		}

		/**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */
		OperatorNode.prototype._toString = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var implicit = (options && options.implicit) ? options.implicit : 'hide';
			var args = this.args;
			var parens = calculateNecessaryParentheses(this, parenthesis, args, false);

			switch (args.length) {
			case 1: //unary operators
				var assoc = operators.getAssociativity(this, parenthesis);

				var operand = args[0].toString(options);
				if (parens[0]) {
					operand = '(' + operand + ')';
				}

				if (assoc === 'right') { //prefix operator
					return this.op + operand;
				}
				else if (assoc === 'left') { //postfix
					return operand + this.op;
				}

				//fall back to postfix
				return operand + this.op;

			case 2:
				var lhs = args[0].toString(options); //left hand side
				var rhs = args[1].toString(options); //right hand side
				if (parens[0]) { //left hand side in parenthesis?
					lhs = '(' + lhs + ')';
				}
				if (parens[1]) { //right hand side in parenthesis?
					rhs = '(' + rhs + ')';
				}

				if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
					return lhs + ' ' + rhs;
				}

				return lhs + ' ' + this.op + ' ' + rhs;

			default:
				//fallback to formatting as a function call
				return this.fn + '(' + this.args.join(', ') + ')';
			}
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
		OperatorNode.prototype._toTex = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var implicit = (options && options.implicit) ? options.implicit : 'hide';
			var args = this.args;
			var parens = calculateNecessaryParentheses(this, parenthesis, args, true);
			var op = latex.operators[this.fn];
			op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op

			switch (args.length) {
			case 1: //unary operators
				var assoc = operators.getAssociativity(this, parenthesis);

				var operand = args[0].toTex(options);
				if (parens[0]) {
					operand = '\\left(' + operand + '\\right)';
				}

				if (assoc === 'right') { //prefix operator
					return op + operand;
				}
				else if (assoc === 'left') { //postfix operator
					return operand + op;
				}

				//fall back to postfix
				return operand + op;

			case 2: //binary operators
				var lhs = args[0]; //left hand side
				var lhsTex = lhs.toTex(options);
				if (parens[0]) {
					lhsTex = '\\left(' + lhsTex + '\\right)';
				}

				var rhs = args[1]; //right hand side
				var rhsTex = rhs.toTex(options);
				if (parens[1]) {
					rhsTex = '\\left(' + rhsTex + '\\right)';
				}

				//handle some exceptions (due to the way LaTeX works)
				var lhsIdentifier;
				if (parenthesis === 'keep') {
					lhsIdentifier = lhs.getIdentifier();
				}
				else {
					//Ignore ParenthesisNodes if in 'keep' mode
					lhsIdentifier = lhs.getContent().getIdentifier();
				}
				switch (this.getIdentifier()) {
				case 'OperatorNode:divide':
					//op contains '\\frac' at this point
					return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
				case 'OperatorNode:pow':
					lhsTex = '{' + lhsTex + '}';
					rhsTex = '{' + rhsTex + '}';
					switch (lhsIdentifier) {
					case 'ConditionalNode': //
					case 'OperatorNode:divide':
						lhsTex = '\\left(' + lhsTex + '\\right)';
					}
				case 'OperatorNode:multiply':
					if (this.implicit && (implicit === 'hide')) {
						return lhsTex + '~' + rhsTex;
					}
				}
				return lhsTex + op + rhsTex;

			default:
				//fall back to formatting as a function call
				//as this is a fallback, it doesn't use
				//fancy function names
				return '\\mathrm{' + this.fn + '}\\left('
            + args.map(function (arg) {
            	return arg.toTex(options);
            }).join(',') + '\\right)';
			}
		};

		/**
   * Get identifier.
   * @return {string}
   */
		OperatorNode.prototype.getIdentifier = function () {
			return this.type + ':' + this.fn;
		};

		return OperatorNode;
	}

	exports.name = 'OperatorNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

},{"../../utils/latex":602,"../operators":331,"./ConstantNode":317,"./FunctionNode":319,"./Node":321,"./SymbolNode":326}],324:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
		function ParenthesisNode(content) {
			if (!(this instanceof ParenthesisNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			// validate input
			if (!(content && content.isNode)) {
				throw new TypeError('Node expected for parameter "content"');
			}

			this.content = content;
		}

		ParenthesisNode.prototype = new Node();

		ParenthesisNode.prototype.type = 'ParenthesisNode';

		ParenthesisNode.prototype.isParenthesisNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		ParenthesisNode.prototype._compile = function (defs, args) {
			return this.content._compile(defs, args);
		};

		/**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/
		ParenthesisNode.prototype.getContent = function () {
			return this.content.getContent();
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		ParenthesisNode.prototype.forEach = function (callback) {
			callback(this.content, 'content', this);
		};

		/**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */
		ParenthesisNode.prototype.map = function (callback) {
			var content = callback(this.content, 'content', this);
			return new ParenthesisNode(content);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */
		ParenthesisNode.prototype.clone = function() {
			return new ParenthesisNode(this.content);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		ParenthesisNode.prototype._toString = function(options) {
			if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
				return '(' + this.content.toString(options) + ')';
			}
			return this.content.toString(options);
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		ParenthesisNode.prototype._toTex = function(options) {
			if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
				return '\\left(' + this.content.toTex(options) + '\\right)';
			}
			return this.content.toTex(options);
		};

		return ParenthesisNode;
	}

	exports.name = 'ParenthesisNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"./Node":321}],325:[function(require,module,exports){
	'use strict';

	var operators = require('../operators');

	function factory (type, config, load, typed) {
		var Node = load(require('./Node'));

		/**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
		function RangeNode(start, end, step) {
			if (!(this instanceof RangeNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			// validate inputs
			if (!(start && start.isNode)) throw new TypeError('Node expected');
			if (!(end && end.isNode)) throw new TypeError('Node expected');
			if (step && !(step && step.isNode)) throw new TypeError('Node expected');
			if (arguments.length > 3) throw new Error('Too many arguments');

			this.start = start;         // included lower-bound
			this.end = end;           // included upper-bound
			this.step = step || null;  // optional step
		}

		RangeNode.prototype = new Node();

		RangeNode.prototype.type = 'RangeNode';

		RangeNode.prototype.isRangeNode = true;

		/**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */
		RangeNode.prototype.needsEnd = function () {
			// find all `end` symbols in this RangeNode
			var endSymbols = this.filter(function (node) {
				return (node && node.isSymbolNode) && (node.name == 'end');
			});

			return endSymbols.length > 0;
		};

		/**
   * Compile the node to javascript code
   *
   * When the range has a symbol `end` defined, the RangeNode requires
   * a variable `end` to be defined in the current closure, which must contain
   * the length of the of the matrix that's being handled in the range's
   * dimension. To check whether the `end` variable is needed, call
   * RangeNode.needsEnd().
   *
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		RangeNode.prototype._compile = function (defs, args) {
			return 'math.range(' +
        this.start._compile(defs, args) + ', ' +
        this.end._compile(defs, args) +
        (this.step ? (', ' + this.step._compile(defs, args)) : '') +
        ')';
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		RangeNode.prototype.forEach = function (callback) {
			callback(this.start, 'start', this);
			callback(this.end, 'end', this);
			if (this.step) {
				callback(this.step, 'step', this);
			}
		};

		/**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */
		RangeNode.prototype.map = function (callback) {
			return new RangeNode(
				this._ifNode(callback(this.start, 'start', this)),
				this._ifNode(callback(this.end, 'end', this)),
				this.step && this._ifNode(callback(this.step, 'step', this))
			);
		};

		/**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */
		RangeNode.prototype.clone = function () {
			return new RangeNode(this.start, this.end, this.step && this.step);
		};

		/**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */
		function calculateNecessaryParentheses(node, parenthesis) {
			var precedence = operators.getPrecedence(node, parenthesis);
			var parens = {};

			var startPrecedence = operators.getPrecedence(node.start, parenthesis);
			parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))
      || (parenthesis === 'all');

			if (node.step) {
				var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
				parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))
        || (parenthesis === 'all');
			}

			var endPrecedence = operators.getPrecedence(node.end, parenthesis);
			parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))
      || (parenthesis === 'all');

			return parens;
		}

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
		RangeNode.prototype._toString = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var parens = calculateNecessaryParentheses(this, parenthesis);

			//format string as start:step:stop
			var str;

			var start = this.start.toString(options);
			if (parens.start) {
				start = '(' + start + ')';
			}
			str = start;

			if (this.step) {
				var step = this.step.toString(options);
				if (parens.step) {
					step = '(' + step + ')';
				}
				str += ':' + step;
			}

			var end = this.end.toString(options);
			if (parens.end) {
				end = '(' + end + ')';
			}
			str += ':' + end;

			return str;
		};

		/**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */
		RangeNode.prototype._toTex = function (options) {
			var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
			var parens = calculateNecessaryParentheses(this, parenthesis);

			var str = this.start.toTex(options);
			if (parens.start) {
				str = '\\left(' + str + '\\right)';
			}

			if (this.step) {
				var step = this.step.toTex(options);
				if (parens.step) {
					step = '\\left(' + step + '\\right)';
				}
				str += ':' + step;
			}

			var end = this.end.toTex(options);
			if (parens.end) {
				end = '\\left(' + end + '\\right)';
			}
			str += ':' + end;

			return str;
		};

		return RangeNode;
	}

	exports.name = 'RangeNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{"../operators":331,"./Node":321}],326:[function(require,module,exports){
	'use strict';

	var latex = require('../../utils/latex');

	function factory (type, config, load, typed, math) {
		var Node = load(require('./Node'));

		var Unit = load(require('../../type/unit/Unit'));

		/**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */
		function SymbolNode(name) {
			if (!(this instanceof SymbolNode)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			// validate input
			if (typeof name !== 'string')  throw new TypeError('String expected for parameter "name"');

			this.name = name;
		}

		SymbolNode.prototype = new Node();

		SymbolNode.prototype.type = 'SymbolNode';

		SymbolNode.prototype.isSymbolNode = true;

		/**
   * Compile the node to javascript code
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
		SymbolNode.prototype._compile = function (defs, args) {
			// add a function to the definitions
			defs['undef'] = undef;
			defs['Unit'] = Unit;

			if (args[this.name]) {
				// this is a FunctionAssignment argument
				// (like an x when inside the expression of a function assignment `f(x) = ...`)
				return this.name;
			}
			else if (this.name in defs.math) {
				return '("' + this.name + '" in scope ? scope["' + this.name + '"] : math["' + this.name + '"])';
			}
			else {
				return '(' +
          '"' + this.name + '" in scope ? scope["' + this.name + '"] : ' +
          (Unit.isValuelessUnit(this.name) ?
          	'new Unit(null, "' + this.name + '")' :
          	'undef("' + this.name + '")') +
          ')';
			}
		};

		/**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
		SymbolNode.prototype.forEach = function (callback) {
			// nothing to do, we don't have childs
		};

		/**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */
		SymbolNode.prototype.map = function (callback) {
			return this.clone();
		};

		/**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */
		function undef (name) {
			throw new Error('Undefined symbol ' + name);
		}

		/**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */
		SymbolNode.prototype.clone = function() {
			return new SymbolNode(this.name);
		};

		/**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		SymbolNode.prototype._toString = function(options) {
			return this.name;
		};

		/**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
		SymbolNode.prototype._toTex = function(options) {
			var isUnit = false;
			if ((typeof math[this.name] === 'undefined') && Unit.isValuelessUnit(this.name)) {
				isUnit = true;
			}
			var symbol = latex.toSymbol(this.name, isUnit);
			if (symbol[0] === '\\') {
				//no space needed if the symbol starts with '\'
				return symbol;
			}
			//the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
			return ' ' + symbol;
		};

		return SymbolNode;
	}

	exports.name = 'SymbolNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;

},{"../../type/unit/Unit":574,"../../utils/latex":602,"./Node":321}],327:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		/**
   * @constructor UpdateNode
   */
		function UpdateNode() {
			// TODO: deprecated since v3. Cleanup some day
			throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
		}

		return UpdateNode;
	}

	exports.name = 'UpdateNode';
	exports.path = 'expression.node';
	exports.factory = factory;

},{}],328:[function(require,module,exports){
	module.exports = [
		require('./AccessorNode'),
		require('./ArrayNode'),
		require('./AssignmentNode'),
		require('./BlockNode'),
		require('./ConditionalNode'),
		require('./ConstantNode'),
		require('./IndexNode'),
		require('./FunctionAssignmentNode'),
		require('./FunctionNode'),
		require('./Node'),
		require('./ObjectNode'),
		require('./OperatorNode'),
		require('./ParenthesisNode'),
		require('./RangeNode'),
		require('./SymbolNode'),
		require('./UpdateNode')
	];

},{"./AccessorNode":312,"./ArrayNode":313,"./AssignmentNode":314,"./BlockNode":315,"./ConditionalNode":316,"./ConstantNode":317,"./FunctionAssignmentNode":318,"./FunctionNode":319,"./IndexNode":320,"./Node":321,"./ObjectNode":322,"./OperatorNode":323,"./ParenthesisNode":324,"./RangeNode":325,"./SymbolNode":326,"./UpdateNode":327}],329:[function(require,module,exports){
	'use strict';

	var errorTransform = require('../../transform/error.transform').transform;

	function factory (type, config, load, typed) {
		var subset = load(require('../../../function/matrix/subset'));
		var matrix = load(require('../../../type/matrix/function/matrix'));

		/**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
		return function access(object, index) {
			try {
				if (Array.isArray(object)) {
					return matrix(object).subset(index).valueOf();
				}
				else if (object && typeof object.subset === 'function') { // Matrix
					return object.subset(index);
				}
				else if (typeof object === 'string') {
					// TODO: move getStringSubset into a separate util file, use that
					return subset(object, index);
				}
				else if (typeof object === 'object') {
					if (!index.isObjectProperty()) {
						throw TypeError('Cannot apply a numeric index as object property');
					}
					return object[index.getObjectProperty()];
				}
				else {
					throw new TypeError('Cannot apply index: unsupported type of object');
				}
			}
			catch (err) {
				throw errorTransform(err);
			}
		};
	}

	exports.factory = factory;

},{"../../../function/matrix/subset":450,"../../../type/matrix/function/matrix":553,"../../transform/error.transform":334}],330:[function(require,module,exports){
	'use strict';

	var errorTransform = require('../../transform/error.transform').transform;

	function factory (type, config, load, typed) {
		var subset = load(require('../../../function/matrix/subset'));
		var matrix = load(require('../../../type/matrix/function/matrix'));

		/**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
		return function assign(object, index, value) {
			try {
				if (Array.isArray(object)) {
					return matrix(object).subset(index, value).valueOf();
				}
				else if (object && typeof object.subset === 'function') { // Matrix
					return object.subset(index, value);
				}
				else if (typeof object === 'string') {
					// TODO: move setStringSubset into a separate util file, use that
					return subset(object, index, value);
				}
				else if (typeof object === 'object') {
					if (!index.isObjectProperty()) {
						throw TypeError('Cannot apply a numeric index as object property');
					}
					object[index.getObjectProperty()] = value;
					return object;
				}
				else {
					throw new TypeError('Cannot apply index: unsupported type of object');
				}
			}
			catch (err) {
				throw errorTransform(err);
			}
		};
	}

	exports.factory = factory;

},{"../../../function/matrix/subset":450,"../../../type/matrix/function/matrix":553,"../../transform/error.transform":334}],331:[function(require,module,exports){
	'use strict';

	//list of identifiers of nodes in order of their precedence
	//also contains information about left/right associativity
	//and which other operator the operator is associative with
	//Example:
	// addition is associative with addition and subtraction, because:
	// (a+b)+c=a+(b+c)
	// (a+b)-c=a+(b-c)
	//
	// postfix operators are left associative, prefix operators 
	// are right associative
	//
	//It's also possible to set the following properties:
	// latexParens: if set to false, this node doesn't need to be enclosed
	//              in parentheses when using LaTeX
	// latexLeftParens: if set to false, this !OperatorNode's! 
	//                  left argument doesn't need to be enclosed
	//                  in parentheses
	// latexRightParens: the same for the right argument
	var properties = [
		{ //assignment
			'AssignmentNode': {},
			'FunctionAssignmentNode': {}
		},
		{ //conditional expression
			'ConditionalNode': {
				latexLeftParens: false,
				latexRightParens: false,
				latexParens: false
				//conditionals don't need parentheses in LaTeX because
				//they are 2 dimensional
			}
		},
		{ //logical or
			'OperatorNode:or': {
				associativity: 'left',
				associativeWith: []
			}

		},
		{ //logical xor
			'OperatorNode:xor': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //logical and
			'OperatorNode:and': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //bitwise or
			'OperatorNode:bitOr': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //bitwise xor
			'OperatorNode:bitXor': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //bitwise and
			'OperatorNode:bitAnd': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //relational operators
			'OperatorNode:equal': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:unequal': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:smaller': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:larger': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:smallerEq': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:largerEq': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //bitshift operators
			'OperatorNode:leftShift': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:rightArithShift': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:rightLogShift': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //unit conversion
			'OperatorNode:to': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //range
			'RangeNode': {}
		},
		{ //addition, subtraction
			'OperatorNode:add': {
				associativity: 'left',
				associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
			},
			'OperatorNode:subtract': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //multiply, divide, modulus
			'OperatorNode:multiply': {
				associativity: 'left',
				associativeWith: [
					'OperatorNode:multiply',
					'OperatorNode:divide',
					'Operator:dotMultiply',
					'Operator:dotDivide'
				]
			},
			'OperatorNode:divide': {
				associativity: 'left',
				associativeWith: [],
				latexLeftParens: false,
				latexRightParens: false,
				latexParens: false
				//fractions don't require parentheses because
				//they're 2 dimensional, so parens aren't needed
				//in LaTeX
			},
			'OperatorNode:dotMultiply': {
				associativity: 'left',
				associativeWith: [
					'OperatorNode:multiply',
					'OperatorNode:divide',
					'OperatorNode:dotMultiply',
					'OperatorNode:doDivide'
				]
			},
			'OperatorNode:dotDivide': {
				associativity: 'left',
				associativeWith: []
			},
			'OperatorNode:mod': {
				associativity: 'left',
				associativeWith: []
			}
		},
		{ //unary prefix operators
			'OperatorNode:unaryPlus': {
				associativity: 'right'
			},
			'OperatorNode:unaryMinus': {
				associativity: 'right'
			},
			'OperatorNode:bitNot': {
				associativity: 'right'
			},
			'OperatorNode:not': {
				associativity: 'right'
			}
		},
		{ //exponentiation
			'OperatorNode:pow': {
				associativity: 'right',
				associativeWith: [],
				latexRightParens: false
				//the exponent doesn't need parentheses in
				//LaTeX because it's 2 dimensional
				//(it's on top)
			},
			'OperatorNode:dotPow': {
				associativity: 'right',
				associativeWith: []
			}
		},
		{ //factorial
			'OperatorNode:factorial': {
				associativity: 'left'
			}
		},
		{ //matrix transpose
			'OperatorNode:transpose': {
				associativity: 'left'
			}
		}
	];

	/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {number|null}
 */
	function getPrecedence (_node, parenthesis) {
		var node = _node;
		if (parenthesis !== 'keep') {
			//ParenthesisNodes are only ignored when not in 'keep' mode
			node = _node.getContent();
		}
		var identifier = node.getIdentifier();
		for (var i = 0; i < properties.length; i++) {
			if (identifier in properties[i]) {
				return i;
			}
		}
		return null;
	}

	/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */
	function getAssociativity (_node, parenthesis) {
		var node = _node;
		if (parenthesis !== 'keep') {
			//ParenthesisNodes are only ignored when not in 'keep' mode
			node = _node.getContent();
		}
		var identifier = node.getIdentifier();
		var index = getPrecedence(node, parenthesis);
		if (index === null) {
			//node isn't in the list
			return null;
		}
		var property = properties[index][identifier];

		if (property.hasOwnProperty('associativity')) {
			if (property.associativity === 'left') {
				return 'left';
			}
			if (property.associativity === 'right') {
				return 'right';
			}
			//associativity is invalid
			throw Error('\'' + identifier + '\' has the invalid associativity \''
                + property.associativity + '\'.');
		}

		//associativity is undefined
		return null;
	}

	/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {bool|null}
 */
	function isAssociativeWith (nodeA, nodeB, parenthesis) {
		var a = nodeA;
		var b = nodeB;
		if (parenthesis !== 'keep') {
			//ParenthesisNodes are only ignored when not in 'keep' mode
			var a = nodeA.getContent();
			var b = nodeB.getContent();
		}
		var identifierA = a.getIdentifier();
		var identifierB = b.getIdentifier();
		var index = getPrecedence(a, parenthesis);
		if (index === null) {
			//node isn't in the list
			return null;
		}
		var property = properties[index][identifierA];

		if (property.hasOwnProperty('associativeWith')
      && (property.associativeWith instanceof Array)) {
			for (var i = 0; i < property.associativeWith.length; i++) {
				if (property.associativeWith[i] === identifierB) {
					return true;
				}
			}
			return false;
		}

		//associativeWith is not defined
		return null;
	}

	module.exports.properties = properties;
	module.exports.getPrecedence = getPrecedence;
	module.exports.getAssociativity = getAssociativity;
	module.exports.isAssociativeWith = isAssociativeWith;

},{}],332:[function(require,module,exports){
	'use strict';

	var ArgumentsError = require('../error/ArgumentsError');
	var deepMap = require('../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var AccessorNode            = load(require('./node/AccessorNode'));
		var ArrayNode               = load(require('./node/ArrayNode'));
		var AssignmentNode          = load(require('./node/AssignmentNode'));
		var BlockNode               = load(require('./node/BlockNode'));
		var ConditionalNode         = load(require('./node/ConditionalNode'));
		var ConstantNode            = load(require('./node/ConstantNode'));
		var FunctionAssignmentNode  = load(require('./node/FunctionAssignmentNode'));
		var IndexNode               = load(require('./node/IndexNode'));
		var ObjectNode              = load(require('./node/ObjectNode'));
		var OperatorNode            = load(require('./node/OperatorNode'));
		var ParenthesisNode         = load(require('./node/ParenthesisNode'));
		var FunctionNode            = load(require('./node/FunctionNode'));
		var RangeNode               = load(require('./node/RangeNode'));
		var SymbolNode              = load(require('./node/SymbolNode'));


		/**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.eval();
   *
   * Syntax:
   *
   *     parse(expr)
   *     parse(expr, options)
   *     parse([expr1, expr2, expr3, ...])
   *     parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     var node = parse('sqrt(3^2 + 4^2)');
   *     node.compile(math).eval(); // 5
   *
   *     var scope = {a:3, b:4}
   *     var node = parse('a * b'); // 12
   *     var code = node.compile(math);
   *     code.eval(scope); // 12
   *     scope.a = 5;
   *     code.eval(scope); // 20
   *
   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
   *     nodes[2].compile(math).eval(); // 12
   *
   * @param {string | string[] | Matrix} expr
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
		function parse (expr, options) {
			if (arguments.length != 1 && arguments.length != 2) {
				throw new ArgumentsError('parse', arguments.length, 1, 2);
			}

			// pass extra nodes
			extra_nodes = (options && options.nodes) ? options.nodes : {};

			if (typeof expr === 'string') {
				// parse a single expression
				expression = expr;
				return parseStart();
			}
			else if (Array.isArray(expr) || expr instanceof type.Matrix) {
				// parse an array or matrix with expressions
				return deepMap(expr, function (elem) {
					if (typeof elem !== 'string') throw new TypeError('String expected');

					expression = elem;
					return parseStart();
				});
			}
			else {
				// oops
				throw new TypeError('String or matrix expected');
			}
		}

		// token types enumeration
		var TOKENTYPE = {
			NULL : 0,
			DELIMITER : 1,
			NUMBER : 2,
			SYMBOL : 3,
			UNKNOWN : 4
		};

		// map with all delimiters
		var DELIMITERS = {
			',': true,
			'(': true,
			')': true,
			'[': true,
			']': true,
			'{': true,
			'}': true,
			'\"': true,
			';': true,

			'+': true,
			'-': true,
			'*': true,
			'.*': true,
			'/': true,
			'./': true,
			'%': true,
			'^': true,
			'.^': true,
			'~': true,
			'!': true,
			'&': true,
			'|': true,
			'^|': true,
			'\'': true,
			'=': true,
			':': true,
			'?': true,

			'==': true,
			'!=': true,
			'<': true,
			'>': true,
			'<=': true,
			'>=': true,

			'<<': true,
			'>>': true,
			'>>>': true
		};

		// map with all named delimiters
		var NAMED_DELIMITERS = {
			'mod': true,
			'to': true,
			'in': true,
			'and': true,
			'xor': true,
			'or': true,
			'not': true
		};

		var extra_nodes = {};             // current extra nodes
		var expression = '';              // current expression
		var index = 0;                    // current index in expr
		var c = '';                       // current token character in expr
		var token = '';                   // current token
		var token_type = TOKENTYPE.NULL;  // type of the token
		var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters
		var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here

		/**
   * Get the first character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */
		function first() {
			index = 0;
			c = expression.charAt(0);
			nesting_level = 0;
			conditional_level = null;
		}

		/**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */
		function next() {
			index++;
			c = expression.charAt(index);
		}

		/**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */
		function nextPreview() {
			return expression.charAt(index + 1);
		}

		/**
   * Preview the second next character from the expression.
   * @return {string} cNext
   * @private
   */
		function nextNextPreview() {
			return expression.charAt(index + 2);
		}

		/**
   * Get next token in the current string expr.
   * The token and token type are available as token and token_type
   * @private
   */
		function getToken() {
			token_type = TOKENTYPE.NULL;
			token = '';

			// skip over whitespaces
			// space, tab, and newline when inside parameters
			while (c == ' ' || c == '\t' || (c == '\n' && nesting_level)) {
				// TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
				next();
			}

			// skip comment
			if (c == '#') {
				while (c != '\n' && c != '') {
					next();
				}
			}

			// check for end of expression
			if (c == '') {
				// token is still empty
				token_type = TOKENTYPE.DELIMITER;
				return;
			}

			// check for new line character
			if (c == '\n' && !nesting_level) {
				token_type = TOKENTYPE.DELIMITER;
				token = c;
				next();
				return;
			}

			// check for delimiters consisting of 3 characters
			var c2 = c + nextPreview();
			var c3 = c2 + nextNextPreview();
			if (c3.length == 3 && DELIMITERS[c3]) {
				token_type = TOKENTYPE.DELIMITER;
				token = c3;
				next();
				next();
				next();
				return;
			}

			// check for delimiters consisting of 2 characters
			if (c2.length == 2 && DELIMITERS[c2]) {
				token_type = TOKENTYPE.DELIMITER;
				token = c2;
				next();
				next();
				return;
			}

			// check for delimiters consisting of 1 character
			if (DELIMITERS[c]) {
				token_type = TOKENTYPE.DELIMITER;
				token = c;
				next();
				return;
			}

			// check for a number
			if (isDigitDot(c)) {
				token_type = TOKENTYPE.NUMBER;

				// get number, can have a single dot
				if (c == '.') {
					token += c;
					next();

					if (!isDigit(c)) {
						// this is no legal number, it is just a dot (can be dot notation)
						token_type = TOKENTYPE.UNKNOWN;
					}
				}
				else {
					while (isDigit(c)) {
						token += c;
						next();
					}
					if (c == '.') {
						token += c;
						next();
					}
				}
				while (isDigit(c)) {
					token += c;
					next();
				}

				// check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
				c2 = nextPreview();
				if (c == 'E' || c == 'e') {
					if (isDigit(c2) || c2 == '-' || c2 == '+') {
						token += c;
						next();

						if (c == '+' || c == '-') {
							token += c;
							next();
						}

						// Scientific notation MUST be followed by an exponent
						if (!isDigit(c)) {
							throw createSyntaxError('Digit expected, got "' + c + '"');
						}

						while (isDigit(c)) {
							token += c;
							next();
						}

						if (c == '.') {
							throw createSyntaxError('Digit expected, got "' + c + '"');
						}
					}
					else if (c2 == '.') {
						next();
						throw createSyntaxError('Digit expected, got "' + c + '"');
					}
				}

				return;
			}

			// check for variables, functions, named operators
			if (currentIsAlpha()) {
				while (currentIsAlpha() || isDigit(c)) {
					token += c;
					next();
				}

				if (NAMED_DELIMITERS.hasOwnProperty(token)) {
					token_type = TOKENTYPE.DELIMITER;
				}
				else {
					token_type = TOKENTYPE.SYMBOL;
				}

				return;
			}

			// something unknown is found, wrong characters -> a syntax error
			token_type = TOKENTYPE.UNKNOWN;
			while (c != '') {
				token += c;
				next();
			}
			throw createSyntaxError('Syntax error in part "' + token + '"');
		}

		/**
   * Get next token and skip newline tokens
   */
		function getTokenSkipNewline () {
			do {
				getToken();
			}
			while (token == '\n');
		}

		/**
   * Open parameters.
   * New line characters will be ignored until closeParams() is called
   */
		function openParams() {
			nesting_level++;
		}

		/**
   * Close parameters.
   * New line characters will no longer be ignored
   */
		function closeParams() {
			nesting_level--;
		}

		/**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - A underscore                         Ascii: _
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * @return {boolean}
   * @private
   */
		function currentIsAlpha () {
			// http://unicode-table.com/en/
			// http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
			//
			// Note: In ES6 will be unicode aware:
			//   http://stackoverflow.com/questions/280712/javascript-unicode-regexes
			//   https://mathiasbynens.be/notes/es6-unicode-regex
			var cPrev = expression.charAt(index - 1);
			var cNext = expression.charAt(index + 1);

			var isValidLatinOrGreek = function (p) {
				return /^[a-zA-Z_\u00C0-\u02AF\u0370-\u03FF]$/.test(p);
			};

			var isValidMathSymbol = function (high, low) {
				return /^[\uD835]$/.test(high) &&
          /^[\uDC00-\uDFFF]$/.test(low) &&
          /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
			};

			return isValidLatinOrGreek(c)
        || isValidMathSymbol(c, cNext)
        || isValidMathSymbol(cPrev, c);
		}

		/**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   * @private
   */
		function isDigitDot (c) {
			return ((c >= '0' && c <= '9') || c == '.');
		}

		/**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   * @private
   */
		function isDigit (c) {
			return (c >= '0' && c <= '9');
		}

		/**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */
		function parseStart () {
			// get the first character in expression
			first();

			getToken();

			var node = parseBlock();

			// check for garbage at the end of the expression
			// an expression ends with a empty character '' and token_type DELIMITER
			if (token != '') {
				if (token_type == TOKENTYPE.DELIMITER) {
					// user entered a not existing operator like "//"

					// TODO: give hints for aliases, for example with "<>" give as hint " did you mean != ?"
					throw createError('Unexpected operator ' + token);
				}
				else {
					throw createSyntaxError('Unexpected part "' + token + '"');
				}
			}

			return node;
		}

		/**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */
		function parseBlock () {
			var node;
			var blocks = [];
			var visible;

			if (token == '') {
				// empty expression
				return new ConstantNode('undefined', 'undefined');
			}

			if (token != '\n' && token != ';') {
				node = parseAssignment();
			}

			// TODO: simplify this loop
			while (token == '\n' || token == ';') {
				if (blocks.length == 0 && node) {
					visible = (token != ';');
					blocks.push({
						node: node,
						visible: visible
					});
				}

				getToken();
				if (token != '\n' && token != ';' && token != '') {
					node = parseAssignment();

					visible = (token != ';');
					blocks.push({
						node: node,
						visible: visible
					});
				}
			}

			if (blocks.length > 0) {
				return new BlockNode(blocks);
			}
			else {
				return node;
			}
		}

		/**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */
		function parseAssignment () {
			var name, args, value, valid;

			var node = parseConditional();

			if (token == '=') {
				if (node && node.isSymbolNode) {
					// parse a variable assignment like 'a = 2/3'
					name = node.name;
					getTokenSkipNewline();
					value = parseAssignment();
					return new AssignmentNode(new SymbolNode(name), value);
				}
				else if (node && node.isAccessorNode) {
					// parse a matrix subset assignment like 'A[1,2] = 4'
					getTokenSkipNewline();
					value = parseAssignment();
					return new AssignmentNode(node.object, node.index, value);
				}
				else if (node && node.isFunctionNode) {
					// parse function assignment like 'f(x) = x^2'
					valid = true;
					args = [];

					name = node.name;
					node.args.forEach(function (arg, index) {
						if (arg && arg.isSymbolNode) {
							args[index] = arg.name;
						}
						else {
							valid = false;
						}
					});

					if (valid) {
						getTokenSkipNewline();
						value = parseAssignment();
						return new FunctionAssignmentNode(name, args, value);
					}
				}

				throw createSyntaxError('Invalid left hand side of assignment operator =');
			}

			return node;
		}

		/**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */
		function parseConditional () {
			var node = parseLogicalOr();

			while (token == '?') {
				// set a conditional level, the range operator will be ignored as long
				// as conditional_level == nesting_level.
				var prev = conditional_level;
				conditional_level = nesting_level;
				getTokenSkipNewline();

				var condition = node;
				var trueExpr = parseAssignment();

				if (token != ':') throw createSyntaxError('False part of conditional expression expected');

				conditional_level = null;
				getTokenSkipNewline();

				var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity

				node = new ConditionalNode(condition, trueExpr, falseExpr);

				// restore the previous conditional level
				conditional_level = prev;
			}

			return node;
		}

		/**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */
		function parseLogicalOr() {
			var node = parseLogicalXor();

			while (token == 'or') {
				getTokenSkipNewline();
				node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
			}

			return node;
		}

		/**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */
		function parseLogicalXor() {
			var node = parseLogicalAnd();

			while (token == 'xor') {
				getTokenSkipNewline();
				node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
			}

			return node;
		}

		/**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */
		function parseLogicalAnd() {
			var node = parseBitwiseOr();

			while (token == 'and') {
				getTokenSkipNewline();
				node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
			}

			return node;
		}

		/**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */
		function parseBitwiseOr() {
			var node = parseBitwiseXor();

			while (token == '|') {
				getTokenSkipNewline();
				node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
			}

			return node;
		}

		/**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */
		function parseBitwiseXor() {
			var node = parseBitwiseAnd();

			while (token == '^|') {
				getTokenSkipNewline();
				node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
			}

			return node;
		}

		/**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */
		function parseBitwiseAnd () {
			var node = parseRelational();

			while (token == '&') {
				getTokenSkipNewline();
				node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
			}

			return node;
		}

		/**
   * relational operators
   * @return {Node} node
   * @private
   */
		function parseRelational () {
			var node, operators, name, fn, params;

			node = parseShift();

			operators = {
				'==': 'equal',
				'!=': 'unequal',
				'<': 'smaller',
				'>': 'larger',
				'<=': 'smallerEq',
				'>=': 'largerEq'
			};
			while (token in operators) {
				name = token;
				fn = operators[name];

				getTokenSkipNewline();
				params = [node, parseShift()];
				node = new OperatorNode(name, fn, params);
			}

			return node;
		}

		/**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */
		function parseShift () {
			var node, operators, name, fn, params;

			node = parseConversion();

			operators = {
				'<<' : 'leftShift',
				'>>' : 'rightArithShift',
				'>>>' : 'rightLogShift'
			};

			while (token in operators) {
				name = token;
				fn = operators[name];

				getTokenSkipNewline();
				params = [node, parseConversion()];
				node = new OperatorNode(name, fn, params);
			}

			return node;
		}

		/**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */
		function parseConversion () {
			var node, operators, name, fn, params;

			node = parseRange();

			operators = {
				'to' : 'to',
				'in' : 'to'   // alias of 'to'
			};

			while (token in operators) {
				name = token;
				fn = operators[name];

				getTokenSkipNewline();
      
				if (name === 'in' && token === '') {
					// end of expression -> this is the unit 'in' ('inch')
					node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
				}
				else {
					// operator 'a to b' or 'a in b'
					params = [node, parseRange()];
					node = new OperatorNode(name, fn, params);
				}
			}

			return node;
		}

		/**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */
		function parseRange () {
			var node, params = [];

			if (token == ':') {
				// implicit start=1 (one-based)
				node = new ConstantNode('1', 'number');
			}
			else {
				// explicit start
				node = parseAddSubtract();
			}

			if (token == ':' && (conditional_level !== nesting_level)) {
				// we ignore the range operator when a conditional operator is being processed on the same level
				params.push(node);

				// parse step and end
				while (token == ':' && params.length < 3) {
					getTokenSkipNewline();

					if (token == ')' || token == ']' || token == ',' || token == '') {
						// implicit end
						params.push(new SymbolNode('end'));
					}
					else {
						// explicit end
						params.push(parseAddSubtract());
					}
				}

				if (params.length == 3) {
					// params = [start, step, end]
					node = new RangeNode(params[0], params[2], params[1]); // start, end, step
				}
				else { // length == 2
					// params = [start, end]
					node = new RangeNode(params[0], params[1]); // start, end
				}
			}

			return node;
		}

		/**
   * add or subtract
   * @return {Node} node
   * @private
   */
		function parseAddSubtract ()  {
			var node, operators, name, fn, params;

			node = parseMultiplyDivide();

			operators = {
				'+': 'add',
				'-': 'subtract'
			};
			while (token in operators) {
				name = token;
				fn = operators[name];

				getTokenSkipNewline();
				params = [node, parseMultiplyDivide()];
				node = new OperatorNode(name, fn, params);
			}

			return node;
		}

		/**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */
		function parseMultiplyDivide () {
			var node, last, operators, name, fn;

			node = parseUnary();
			last = node;

			operators = {
				'*': 'multiply',
				'.*': 'dotMultiply',
				'/': 'divide',
				'./': 'dotDivide',
				'%': 'mod',
				'mod': 'mod'
			};

			while (true) {
				if (token in operators) {
					// explicit operators
					name = token;
					fn = operators[name];

					getTokenSkipNewline();

					last = parseUnary();
					node = new OperatorNode(name, fn, [node, last]);
				}
				else if ((token_type == TOKENTYPE.SYMBOL) ||
          (token == 'in' && (node && node.isConstantNode)) ||
          (token_type == TOKENTYPE.NUMBER && !last.isConstantNode) ||
          (token == '(')) {
					// parse implicit multiplication
					//
					// symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
					// number:      implicit multiplication like '(2+3)2'
					// parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
					last = parseUnary();
					node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);
				}
				else {
					break;
				}
			}

			return node;
		}

		/**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */
		function parseUnary () {
			var name, params;
			var fn = {
				'-': 'unaryMinus',
				'+': 'unaryPlus',
				'~': 'bitNot',
				'not': 'not'
			}[token];

			if (fn) {
				name = token;

				getTokenSkipNewline();
				params = [parseUnary()];

				return new OperatorNode(name, fn, params);
			}

			return parsePow();
		}

		/**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */
		function parsePow () {
			var node, name, fn, params;

			node = parseLeftHandOperators();

			if (token == '^' || token == '.^') {
				name = token;
				fn = (name == '^') ? 'pow' : 'dotPow';

				getTokenSkipNewline();
				params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'
				node = new OperatorNode(name, fn, params);
			}

			return node;
		}

		/**
   * Left hand operators: factorial x!, transpose x'
   * @return {Node} node
   * @private
   */
		function parseLeftHandOperators ()  {
			var node, operators, name, fn, params;

			node = parseCustomNodes();

			operators = {
				'!': 'factorial',
				'\'': 'transpose'
			};

			while (token in operators) {
				name = token;
				fn = operators[name];

				getToken();
				params = [node];

				node = new OperatorNode(name, fn, params);
				node = parseAccessors(node);
			}

			return node;
		}

		/**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.expression.node.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     };
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params);
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes);
   *
   * @return {Node} node
   * @private
   */
		function parseCustomNodes () {
			var params = [], handler;

			if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {
				handler = extra_nodes[token];

				getToken();

				// parse parameters
				if (token == '(') {
					params = [];

					openParams();
					getToken();

					if (token != ')') {
						params.push(parseAssignment());

						// parse a list with parameters
						while (token == ',') {
							getToken();
							params.push(parseAssignment());
						}
					}

					if (token != ')') {
						throw createSyntaxError('Parenthesis ) expected');
					}
					closeParams();
					getToken();
				}

				// create a new node handler
				//noinspection JSValidateTypes
				return new handler(params);
			}

			return parseSymbol();
		}

		/**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */
		function parseSymbol () {
			var node, name;

			if (token_type == TOKENTYPE.SYMBOL ||
        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {
				name = token;

				getToken();

				// parse function parameters and matrix index
				node = new SymbolNode(name);
				node = parseAccessors(node);
				return node;
			}

			return parseString();
		}

		/**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */
		function parseAccessors (node, types) {
			var params;

			while ((token == '(' || token == '[' || token == '.') &&
        (!types || types.indexOf(token) !== -1)) {
				params = [];

				if (token == '(') {
					if (node.isSymbolNode || node.isAccessorNode) {
						// function invocation like fn(2, 3)
						openParams();
						getToken();

						if (token != ')') {
							params.push(parseAssignment());

							// parse a list with parameters
							while (token == ',') {
								getToken();
								params.push(parseAssignment());
							}
						}

						if (token != ')') {
							throw createSyntaxError('Parenthesis ) expected');
						}
						closeParams();
						getToken();

						node = new FunctionNode(node, params);
					}
					else {
						// implicit multiplication like (2+3)(4+5)
						// don't parse it here but let it be handled by parseMultiplyDivide
						// with correct precedence
						return node;
					}
				}
				else if (token == '[') {
					// index notation like variable[2, 3]
					openParams();
					getToken();

					if (token != ']') {
						params.push(parseAssignment());

						// parse a list with parameters
						while (token == ',') {
							getToken();
							params.push(parseAssignment());
						}
					}

					if (token != ']') {
						throw createSyntaxError('Parenthesis ] expected');
					}
					closeParams();
					getToken();

					node = new AccessorNode(node, new IndexNode(params));
				}
				else {
					// dot notation like variable.prop
					getToken();

					if (token_type != TOKENTYPE.SYMBOL) {
						throw createSyntaxError('Property name expected after dot');
					}
					params.push(new ConstantNode(token));
					getToken();

					var dotNotation = true;
					node = new AccessorNode(node, new IndexNode(params, dotNotation));
				}
			}

			return node;
		}

		/**
   * parse a string.
   * A string is enclosed by double quotes
   * @return {Node} node
   * @private
   */
		function parseString () {
			var node, str;

			if (token == '"') {
				str = parseStringToken();

				// create constant
				node = new ConstantNode(str, 'string');

				// parse index parameters
				node = parseAccessors(node);

				return node;
			}

			return parseMatrix();
		}

		/**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */
		function parseStringToken () {
			var str = '';

			while (c != '' && c != '\"') {
				if (c == '\\') {
					// escape character
					str += c;
					next();
				}

				str += c;
				next();
			}

			getToken();
			if (token != '"') {
				throw createSyntaxError('End of string " expected');
			}
			getToken();

			return str;
		}

		/**
   * parse the matrix
   * @return {Node} node
   * @private
   */
		function parseMatrix () {
			var array, params, rows, cols;

			if (token == '[') {
				// matrix [...]
				openParams();
				getToken();

				if (token != ']') {
					// this is a non-empty matrix
					var row = parseRow();

					if (token == ';') {
						// 2 dimensional array
						rows = 1;
						params = [row];

						// the rows of the matrix are separated by dot-comma's
						while (token == ';') {
							getToken();

							params[rows] = parseRow();
							rows++;
						}

						if (token != ']') {
							throw createSyntaxError('End of matrix ] expected');
						}
						closeParams();
						getToken();

						// check if the number of columns matches in all rows
						cols = params[0].items.length;
						for (var r = 1; r < rows; r++) {
							if (params[r].items.length != cols) {
								throw createError('Column dimensions mismatch ' +
                  '(' + params[r].items.length + ' != ' + cols + ')');
							}
						}

						array = new ArrayNode(params);
					}
					else {
						// 1 dimensional vector
						if (token != ']') {
							throw createSyntaxError('End of matrix ] expected');
						}
						closeParams();
						getToken();

						array = row;
					}
				}
				else {
					// this is an empty matrix "[ ]"
					closeParams();
					getToken();
					array = new ArrayNode([]);
				}

				return parseAccessors(array);
			}

			return parseObject();
		}

		/**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */
		function parseRow () {
			var params = [parseAssignment()];
			var len = 1;

			while (token == ',') {
				getToken();

				// parse expression
				params[len] = parseAssignment();
				len++;
			}

			return new ArrayNode(params);
		}

		/**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */
		function parseObject () {
			if (token == '{') {
				var key;

				var properties = {};
				do {
					getToken();

					if (token != '}') {
						// parse key
						if (token == '"') {
							key = parseStringToken();
						}
						else if (token_type == TOKENTYPE.SYMBOL) {
							key = token;
							getToken();
						}
						else {
							throw createSyntaxError('Symbol or string expected as object key');
						}

						// parse key/value separator
						if (token != ':') {
							throw createSyntaxError('Colon : expected after object key');
						}
						getToken();

						// parse key
						properties[key] = parseAssignment();
					}
				}
				while (token == ',');

				if (token != '}') {
					throw createSyntaxError('Comma , or bracket } expected after object value');
				}
				getToken();

				var node = new ObjectNode(properties);

				// parse index parameters
				node = parseAccessors(node);

				return node;
			}

			return parseNumber();
		}

		/**
   * parse a number
   * @return {Node} node
   * @private
   */
		function parseNumber () {
			var number;

			if (token_type == TOKENTYPE.NUMBER) {
				// this is a number
				number = token;
				getToken();

				return new ConstantNode(number, 'number');
			}

			return parseParentheses();
		}

		/**
   * parentheses
   * @return {Node} node
   * @private
   */
		function parseParentheses () {
			var node;

			// check if it is a parenthesized expression
			if (token == '(') {
				// parentheses (...)
				openParams();
				getToken();

				node = parseAssignment(); // start again

				if (token != ')') {
					throw createSyntaxError('Parenthesis ) expected');
				}
				closeParams();
				getToken();

				node = new ParenthesisNode(node);
				node = parseAccessors(node);
				return node;
			}

			return parseEnd();
		}

		/**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */
		function parseEnd () {
			if (token == '') {
				// syntax error or unexpected end of expression
				throw createSyntaxError('Unexpected end of expression');
			} else {
				throw createSyntaxError('Value expected');
			}
		}

		/**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */
		/* TODO: implement keeping track on the row number
  function row () {
    return null;
  }
  */

		/**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last token starts
   * @private
   */
		function col () {
			return index - token.length + 1;
		}

		/**
   * Create an error
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */
		function createSyntaxError (message) {
			var c = col();
			var error = new SyntaxError(message + ' (char ' + c + ')');
			error['char'] = c;

			return error;
		}

		/**
   * Create an error
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */
		function createError (message) {
			var c = col();
			var error = new SyntaxError(message + ' (char ' + c + ')');
			error['char'] = c;

			return error;
		}

		return parse;
	}

	exports.name = 'parse';
	exports.path = 'expression';
	exports.factory = factory;

},{"../error/ArgumentsError":124,"../utils/collection/deepMap":595,"./node/AccessorNode":312,"./node/ArrayNode":313,"./node/AssignmentNode":314,"./node/BlockNode":315,"./node/ConditionalNode":316,"./node/ConstantNode":317,"./node/FunctionAssignmentNode":318,"./node/FunctionNode":319,"./node/IndexNode":320,"./node/ObjectNode":322,"./node/OperatorNode":323,"./node/ParenthesisNode":324,"./node/RangeNode":325,"./node/SymbolNode":326}],333:[function(require,module,exports){
	'use strict';

	var errorTransform = require('./error.transform').transform;

	/**
 * Attach a transform function to math.range
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function concat
 * from one-based to zero based
 */
	function factory (type, config, load, typed) {
		var concat = load(require('../../function/matrix/concat'));

		// @see: comment of concat itself
		return typed('concat', {
			'...any': function (args) {
				// change last argument from one-based to zero-based
				var lastIndex = args.length - 1;
				var last = args[lastIndex];
				if (typeof last === 'number') {
					args[lastIndex] = last - 1;
				}
				else if (last && last.isBigNumber === true) {
					args[lastIndex] = last.minus(1);
				}

				try {
					return concat.apply(null, args);
				}
				catch (err) {
					throw errorTransform(err);
				}
			}
		});
	}

	exports.name = 'concat';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/matrix/concat":431,"./error.transform":334}],334:[function(require,module,exports){
	var IndexError = require('../../error/IndexError');

	/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error} Returns the transformed error
 */
	exports.transform = function (err) {
		if (err && err.isIndexError) {
			return new IndexError(
				err.index + 1,
				err.min + 1,
				err.max !== undefined ? err.max + 1 : undefined);
		}

		return err;
	};

},{"../../error/IndexError":126}],335:[function(require,module,exports){
	'use strict';

	var maxArgumentCount = require('../../utils/function').maxArgumentCount;

	/**
 * Attach a transform function to math.filter
 * Adds a property transform containing the transform function.
 *
 * This transform adds support for equations as test function for math.filter,
 * so you can do something like 'filter([3, -2, 5], x > 0)'.
 */
	function factory (type, config, load, typed) {
		var filter = load(require('../../function/matrix/filter'));
		var SymbolNode = load(require('../node/SymbolNode'));

		function filterTransform(args, math, scope) {
			var x, test;

			if (args[0]) {
				x = args[0].compile().eval(scope);
			}

			if (args[1]) {
				if (args[1] && args[1].isSymbolNode) {
					// a function pointer, like filter([3, -2, 5], myTestFunction);
					test = args[1].compile().eval(scope);
				}
				else {
					// an equation like filter([3, -2, 5], x > 0)

					// find an undefined symbol
					var _scope = scope || {};
					var symbol = args[1]
						.filter(function (node) {
							return (node && node.isSymbolNode) &&
                  !(node.name in math) &&
                  !(node.name in _scope);
						})[0];

					// create a test function for this equation
					var sub = Object.create(_scope);
					var eq = args[1].compile();
					if (symbol) {
						var name = symbol.name;
						test = function (x) {
							sub[name] = x;
							return eq.eval(sub);
						};
					}
					else {
						throw new Error('No undefined variable found in filter equation');
					}
				}
			}

			return filter(x, test);
		}

		filterTransform.rawArgs = true;

		return filterTransform;
	}

	exports.name = 'filter';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/matrix/filter":437,"../../utils/function":600,"../node/SymbolNode":326}],336:[function(require,module,exports){
	'use strict';

	var maxArgumentCount = require('../../utils/function').maxArgumentCount;

	/**
 * Attach a transform function to math.forEach
 * Adds a property transform containing the transform function.
 *
 * This transform creates a one-based index instead of a zero-based index
 */
	function factory (type, config, load, typed) {
		var forEach = load(require('../../function/matrix/forEach'));

		return typed('forEach', {
			'Array | Matrix, function': function (array, callback) {
				// figure out what number of arguments the callback function expects
				var args = maxArgumentCount(callback);

				var recurse = function (value, index) {
					if (Array.isArray(value)) {
						value.forEach(function (child, i) {
							// we create a copy of the index array and append the new index value
							recurse(child, index.concat(i + 1)); // one based index, hence i+1
						});
					}
					else {
						// invoke the callback function with the right number of arguments
						if (args === 1) {
							callback(value);
						}
						else if (args === 2) {
							callback(value, index);
						}
						else { // 3 or -1
							callback(value, index, array);
						}
					}
				};
				recurse(array.valueOf(), []); // pass Array
			}
		});
	}

	exports.name = 'forEach';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/matrix/forEach":439,"../../utils/function":600}],337:[function(require,module,exports){
	module.exports = [
		require('./concat.transform'),
		require('./filter.transform'),
		require('./forEach.transform'),
		require('./index.transform'),
		require('./map.transform'),
		require('./max.transform'),
		require('./mean.transform'),
		require('./min.transform'),
		require('./range.transform'),
		require('./subset.transform')
	];

},{"./concat.transform":333,"./filter.transform":335,"./forEach.transform":336,"./index.transform":338,"./map.transform":339,"./max.transform":340,"./mean.transform":341,"./min.transform":342,"./range.transform":343,"./subset.transform":344}],338:[function(require,module,exports){
	'use strict';

	var isArray = Array.isArray;

	/**
 * Attach a transform function to math.index
 * Adds a property transform containing the transform function.
 *
 * This transform creates a one-based index instead of a zero-based index
 */
	function factory (type, config, load) {
		var indexFactory = load(require('../../type/matrix/function/index'));

		return function indexTransform() {
			var args = [];
			for (var i = 0, ii = arguments.length; i < ii; i++) {
				var arg = arguments[i];

				// change from one-based to zero based, and convert BigNumber to number
				if (arg && arg.isRange === true) {
					arg.start--;
					arg.end -= (arg.step > 0 ? 0 : 2);
				}
				else if (arg && arg.isSet === true) {
					arg = arg.map(function (v) { return v - 1; });
				}
				else if (arg && (arg.isArray === true || arg.isMatrix)) {
					arg = arg.map(function (v) { return v - 1; });
				}
				else if (typeof arg === 'number') {
					arg--;
				}
				else if (arg && arg.isBigNumber === true) {
					arg = arg.toNumber() - 1;
				}
				else if (typeof arg === 'string') {
					// leave as is
				}
				else {
					throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
				}

				args[i] = arg;
			}

			var res = new type.Index();
			type.Index.apply(res, args);
			return res;
		};
	}

	exports.name = 'index';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../type/matrix/function/index":552}],339:[function(require,module,exports){
	'use strict';

	var maxArgumentCount = require('../../utils/function').maxArgumentCount;

	/**
 * Attach a transform function to math.map
 * Adds a property transform containing the transform function.
 *
 * This transform creates a one-based index instead of a zero-based index
 */
	function factory (type, config, load, typed) {
		var map = load(require('../../function/matrix/map'));
		var matrix = load(require('../../type/matrix/function/matrix'));

		return typed('max', {
			'Array, function': function (x, callback) {
				return _map(x, callback, x);
			},

			'Matrix, function': function (x, callback) {
				return matrix(_map(x.valueOf(), callback, x));
			}
		});
	}

	/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */
	function _map (array, callback, orig) {
		// figure out what number of arguments the callback function expects
		var args = maxArgumentCount(callback);

		function recurse(value, index) {
			if (Array.isArray(value)) {
				return value.map(function (child, i) {
					// we create a copy of the index array and append the new index value
					return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
				});
			}
			else {
				// invoke the callback function with the right number of arguments
				if (args === 1) {
					return callback(value);
				}
				else if (args === 2) {
					return callback(value, index);
				}
				else { // 3 or -1
					return callback(value, index, orig);
				}
			}
		}

		return recurse(array, []);
	}

	exports.name = 'map';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/matrix/map":442,"../../type/matrix/function/matrix":553,"../../utils/function":600}],340:[function(require,module,exports){
	'use strict';

	var errorTransform = require('./error.transform').transform;
	var isCollection = require('../../utils/collection/isCollection');

	/**
 * Attach a transform function to math.max
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function max
 * from one-based to zero based
 */
	function factory (type, config, load, typed) {
		var max = load(require('../../function/statistics/max'));

		return typed('max', {
			'...any': function (args) {
				// change last argument dim from one-based to zero-based
				if (args.length == 2 && isCollection(args[0])) {
					var dim = args[1];
					if (typeof dim === 'number') {
						args[1] = dim - 1;
					}
					else if (dim && dim.isBigNumber === true) {
						args[1] = dim.minus(1);
					}
				}

				try {
					return max.apply(null, args);
				}
				catch (err) {
					throw errorTransform(err);
				}
			}
		});
	}

	exports.name = 'max';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/statistics/max":476,"../../utils/collection/isCollection":596,"./error.transform":334}],341:[function(require,module,exports){
	'use strict';

	var errorTransform = require('./error.transform').transform;
	var isCollection = require('../../utils/collection/isCollection');

	/**
 * Attach a transform function to math.mean
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */
	function factory (type, config, load, typed) {
		var mean = load(require('../../function/statistics/mean'));

		return typed('mean', {
			'...any': function (args) {
				// change last argument dim from one-based to zero-based
				if (args.length == 2 && isCollection(args[0])) {
					var dim = args[1];
					if (typeof dim === 'number') {
						args[1] = dim - 1;
					}
					else if (dim && dim.isBigNumber === true) {
						args[1] = dim.minus(1);
					}
				}

				try {
					return mean.apply(null, args);
				}
				catch (err) {
					throw errorTransform(err);
				}
			}
		});
	}

	exports.name = 'mean';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/statistics/mean":477,"../../utils/collection/isCollection":596,"./error.transform":334}],342:[function(require,module,exports){
	'use strict';

	var errorTransform = require('./error.transform').transform;
	var isCollection = require('../../utils/collection/isCollection');

	/**
 * Attach a transform function to math.min
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function min
 * from one-based to zero based
 */
	function factory (type, config, load, typed) {
		var min = load(require('../../function/statistics/min'));

		return typed('min', {
			'...any': function (args) {
				// change last argument dim from one-based to zero-based
				if (args.length == 2 && isCollection(args[0])) {
					var dim = args[1];
					if (typeof dim === 'number') {
						args[1] = dim - 1;
					}
					else if (dim && dim.isBigNumber === true) {
						args[1] = dim.minus(1);
					}
				}

				try {
					return min.apply(null, args);
				}
				catch (err) {
					throw errorTransform(err);
				}
			}
		});
	}

	exports.name = 'min';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/statistics/min":479,"../../utils/collection/isCollection":596,"./error.transform":334}],343:[function(require,module,exports){
	'use strict';

	/**
 * Attach a transform function to math.range
 * Adds a property transform containing the transform function.
 *
 * This transform creates a range which includes the end value
 */
	function factory (type, config, load, typed) {
		var range = load(require('../../function/matrix/range'));

		return typed('range', {
			'...any': function (args) {
				var lastIndex = args.length - 1;
				var last = args[lastIndex];
				if (typeof last !== 'boolean') {
					// append a parameter includeEnd=true
					args.push(true);
				}

				return range.apply(null, args);
			}
		});
	}

	exports.name = 'range';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/matrix/range":445}],344:[function(require,module,exports){
	'use strict';

	var errorTransform = require('./error.transform').transform;

	/**
 * Attach a transform function to math.subset
 * Adds a property transform containing the transform function.
 *
 * This transform creates a range which includes the end value
 */
	function factory (type, config, load, typed) {
		var subset = load(require('../../function/matrix/subset'));

		return typed('subset', {
			'...any': function (args) {
				try {
					return subset.apply(null, args);
				}
				catch (err) {
					throw errorTransform(err);
				}
			}
		});
	}

	exports.name = 'subset';
	exports.path = 'expression.transform';
	exports.factory = factory;

},{"../../function/matrix/subset":450,"./error.transform":334}],345:[function(require,module,exports){
	'use strict';

	var util = require('../../../utils/index');

	var object = util.object;

	function factory (type, config, load, typed) {

		var matrix = load(require('../../../type/matrix/function/matrix'));
		var abs = load(require('../../arithmetic/abs'));
		var addScalar = load(require('../../arithmetic/addScalar'));
		var divideScalar = load(require('../../arithmetic/divideScalar'));
		var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));
		var subtract = load(require('../../arithmetic/subtract'));
		var larger = load(require('../../relational/larger'));
		var equalScalar = load(require('../../relational/equalScalar'));
		var unaryMinus = load(require('../../arithmetic/unaryMinus'));
  
		var SparseMatrix = type.SparseMatrix;
		var DenseMatrix = type.DenseMatrix;
		var Spa = type.Spa;
  
		/**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A);
   *
   * Example:
   *
   *    var m = [[2, 1], [1, 4]];
   *    var r = math.lup();
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
		var lup = typed('lup', {

			'DenseMatrix': function (m) {
				return _denseLUP(m);
			},
    
			'SparseMatrix': function (m) {
				return _sparseLUP(m);
			},

			'Array': function (a) {
				// create dense matrix from array
				var m = matrix(a);
				// lup, use matrix implementation
				var r = _denseLUP(m);
				// result
				return {
					L: r.L.valueOf(),
					U: r.U.valueOf(),
					p: r.p
				};
			}
		});

		var _denseLUP = function (m) {
			// rows & columns
			var rows = m._size[0];
			var columns = m._size[1];
			// minimum rows and columns
			var n = Math.min(rows, columns);
			// matrix array, clone original data
			var data = object.clone(m._data);
			// l matrix arrays
			var ldata = [];
			var lsize = [rows, n];
			// u matrix arrays
			var udata = [];
			var usize = [n, columns];
			// vars
			var i, j, k;
			// permutation vector    
			var p = [];
			for (i = 0; i < rows; i++)
				p[i] = i;    
			// loop columns
			for (j = 0; j < columns; j++) {
				// skip first column in upper triangular matrix
				if (j > 0) {
					// loop rows
					for (i = 0; i < rows; i++) {
						// min i,j
						var min = Math.min(i, j);
						// v[i, j]
						var s = 0;
						// loop up to min
						for (k = 0; k < min; k++) {
							// s = l[i, k] - data[k, j]
							s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
						}
						data[i][j] = subtract(data[i][j], s);
					}
				}      
				// row with larger value in cvector, row >= j
				var pi = j;
				var pabsv = 0;
				var vjj = 0;
				// loop rows
				for (i = j; i < rows; i++) {
					// data @ i, j
					var v = data[i][j];
					// absolute value
					var absv = abs(v);
					// value is greater than pivote value
					if (larger(absv, pabsv)) {
						// store row
						pi = i;
						// update max value
						pabsv = absv;
						// value @ [j, j]
						vjj = v;
					}
				}
				// swap rows (j <-> pi)
				if (j !== pi) {
					// swap values j <-> pi in p
					p[j] = [p[pi], p[pi] = p[j]][0];
					// swap j <-> pi in data
					DenseMatrix._swapRows(j, pi, data);
				}
				// check column is in lower triangular matrix
				if (j < rows) {
					// loop rows (lower triangular matrix)
					for (i = j + 1; i < rows; i++) {
						// value @ i, j
						var vij = data[i][j];
						if (!equalScalar(vij, 0)) {
							// update data
							data[i][j] = divideScalar(data[i][j], vjj);
						}
					}
				}
			}
			// loop columns
			for (j = 0; j < columns; j++) {
				// loop rows
				for (i = 0; i < rows; i++) {
					// initialize row in arrays
					if (j === 0) {
						// check row exists in upper triangular matrix
						if (i < columns) {
							// U
							udata[i] = [];
						}
						// L
						ldata[i] = [];
					}
					// check we are in the upper triangular matrix
					if (i < j) {
						// check row exists in upper triangular matrix
						if (i < columns) {
							// U
							udata[i][j] = data[i][j];
						}
						// check column exists in lower triangular matrix
						if (j < rows) {
							// L
							ldata[i][j] = 0;
						}
						continue;
					}
					// diagonal value
					if (i === j) {
						// check row exists in upper triangular matrix
						if (i < columns) {
							// U
							udata[i][j] = data[i][j];
						}
						// check column exists in lower triangular matrix
						if (j < rows) {
							// L
							ldata[i][j] = 1;
						}
						continue;
					}
					// check row exists in upper triangular matrix
					if (i < columns) {
						// U
						udata[i][j] = 0;
					}
					// check column exists in lower triangular matrix
					if (j < rows) {
						// L
						ldata[i][j] = data[i][j];
					}
				}
			}
			// l matrix
			var l =  new DenseMatrix({
				data: ldata,
				size: lsize
			});
			// u matrix
			var u =  new DenseMatrix({
				data: udata,
				size: usize
			});
			// p vector
			var pv = [];
			for (i = 0, n = p.length; i < n; i++)
				pv[p[i]] = i;
			// return matrices
			return { 
				L: l, 
				U: u, 
				p: pv, 
				toString: function () {
					return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
				}
			};
		};
  
		var _sparseLUP = function (m) {
			// rows & columns
			var rows = m._size[0];
			var columns = m._size[1];
			// minimum rows and columns
			var n = Math.min(rows, columns);
			// matrix arrays (will not be modified, thanks to permutation vector)
			var values = m._values;
			var index = m._index;
			var ptr = m._ptr;
			// l matrix arrays
			var lvalues = [];
			var lindex = [];
			var lptr = [];
			var lsize = [rows, n];
			// u matrix arrays
			var uvalues = [];
			var uindex = [];
			var uptr = [];
			var usize = [n, columns];
			// vars
			var i, j, k;
			// permutation vectors, (current index -> original index) and (original index -> current index)
			var pv_co = [];
			var pv_oc = [];
			for (i = 0; i < rows; i++) {
				pv_co[i] = i;
				pv_oc[i] = i;
			}
			// swap indices in permutation vectors (condition x < y)!
			var swapIndeces = function (x, y) {      
				// find pv indeces getting data from x and y
				var kx = pv_oc[x];
				var ky = pv_oc[y];
				// update permutation vector current -> original
				pv_co[kx] = y;
				pv_co[ky] = x;
				// update permutation vector original -> current
				pv_oc[x] = ky;
				pv_oc[y] = kx;
			};
			// loop columns
			for (j = 0; j < columns; j++) {
				// sparse accumulator
				var spa = new Spa();            
				// check lower triangular matrix has a value @ column j
				if (j < rows) {
					// update ptr
					lptr.push(lvalues.length);
					// first value in j column for lower triangular matrix
					lvalues.push(1);
					lindex.push(j);
				}
				// update ptr
				uptr.push(uvalues.length);
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = ptr[j];
				var k1 = ptr[j + 1];
				// copy column j into sparse accumulator
				for (k = k0; k < k1; k++) {
					// row
					i = index[k];
					// copy column values into sparse accumulator (use permutation vector)
					spa.set(pv_co[i], values[k]);
				}
				// skip first column in upper triangular matrix
				if (j > 0) {
					// loop rows in column j (above diagonal)
					spa.forEach(0, j - 1, function (k, vkj) {
						// loop rows in column k (L)
						SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
							// check row is below k
							if (i > k) {
								// update spa value
								spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
							}
						});
					});        
				}
				// row with larger value in spa, row >= j
				var pi = j;
				var vjj = spa.get(j);
				var pabsv = abs(vjj);      
				// loop values in spa (order by row, below diagonal)
				spa.forEach(j + 1, rows - 1, function (x, v) {
					// absolute value
					var absv = abs(v);
					// value is greater than pivote value
					if (larger(absv, pabsv)) {
						// store row
						pi = x;
						// update max value
						pabsv = absv;
						// value @ [j, j]
						vjj = v;
					}
				});
				// swap rows (j <-> pi)
				if (j !== pi) {
					// swap values j <-> pi in L
					SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
					// swap values j <-> pi in U
					SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
					// swap values in spa
					spa.swap(j, pi);
					// update permutation vector (swap values @ j, pi)
					swapIndeces(j, pi);
				}
				// loop values in spa (order by row)
				spa.forEach(0, rows - 1, function (x, v) {
					// check we are above diagonal
					if (x <= j) {
						// update upper triangular matrix
						uvalues.push(v);
						uindex.push(x);
					}
					else {
						// update value
						v = divideScalar(v, vjj);
						// check value is non zero
						if (!equalScalar(v, 0)) {
							// update lower triangular matrix
							lvalues.push(v);
							lindex.push(x);
						}
					}
				});
			}
			// update ptrs
			uptr.push(uvalues.length);
			lptr.push(lvalues.length);

			// return matrices
			return {
				L: new SparseMatrix({
					values: lvalues,
					index: lindex,
					ptr: lptr,
					size: lsize
				}), 
				U: new SparseMatrix({
					values: uvalues,
					index: uindex,
					ptr: uptr,
					size: usize
				}),
				p: pv_co,
				toString: function () {
					return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
				}
			};
		};
  
		return lup;
	}

	exports.name = 'lup';
	exports.factory = factory;

},{"../../../type/matrix/function/matrix":553,"../../../utils/index":601,"../../arithmetic/abs":370,"../../arithmetic/addScalar":372,"../../arithmetic/divideScalar":377,"../../arithmetic/multiplyScalar":392,"../../arithmetic/subtract":400,"../../arithmetic/unaryMinus":401,"../../relational/equalScalar":468,"../../relational/larger":470}],346:[function(require,module,exports){
	'use strict';

	var util = require('../../../utils/index');

	var number = util.number,
    
		isInteger = number.isInteger;

	function factory (type, config, load, typed) {

		var cs_sqr = load(require('../../algebra/sparse/cs_sqr'));
		var cs_lu = load(require('../../algebra/sparse/cs_lu'));

		/**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold);
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. 
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */
		var slu = typed('slu', {

			'SparseMatrix, number, number': function (a, order, threshold) {
				// verify order
				if (!isInteger(order) || order < 0 || order > 3)
					throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
				// verify threshold
				if (threshold < 0 || threshold > 1)
					throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      
				// perform symbolic ordering and analysis
				var s = cs_sqr(order, a, false);
      
				// perform lu decomposition
				var f = cs_lu(a, s, threshold);
      
				// return decomposition
				return {
					L: f.L,
					U: f.U,
					p: f.pinv,
					q: s.q,
					toString: function () {
						return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
					}
				};
			}
		});

		return slu;
	}

	exports.name = 'slu';
	exports.factory = factory;

},{"../../../utils/index":601,"../../algebra/sparse/cs_lu":360,"../../algebra/sparse/cs_sqr":367}],347:[function(require,module,exports){
	module.exports = [
		// decomposition
		require('./decomposition/lup'),
		require('./decomposition/slu'),

		// solver
		require('./solver/lsolve'),
		require('./solver/lusolve'),
		require('./solver/usolve')
	];

},{"./decomposition/lup":345,"./decomposition/slu":346,"./solver/lsolve":348,"./solver/lusolve":349,"./solver/usolve":350}],348:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../../type/matrix/function/matrix'));
		var divideScalar = load(require('../../arithmetic/divideScalar'));
		var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));
		var subtract = load(require('../../arithmetic/subtract'));
		var equalScalar = load(require('../../relational/equalScalar'));

		var solveValidation = load(require('./utils/solveValidation'));

		var DenseMatrix = type.DenseMatrix;

		/** 
   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b);
   *
   * Examples:
   *
   *    var a = [[-2, 3], [2, 1]];
   *    var b = [11, 9];
   *    var x = lsolve(a, b);  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */
		var lsolve = typed('lsolve', {

			'SparseMatrix, Array | Matrix': function (m, b) {
				// process matrix
				return _sparseForwardSubstitution(m, b);
			},
    
			'DenseMatrix, Array | Matrix': function (m, b) {
				// process matrix
				return _denseForwardSubstitution(m, b);
			},
    
			'Array, Array | Matrix': function (a, b) {
				// create dense matrix from array
				var m = matrix(a);
				// use matrix implementation
				var r = _denseForwardSubstitution(m, b);
				// result
				return r.valueOf();
			}
		});

		var _denseForwardSubstitution = function (m, b) {
			// validate matrix and vector, return copy of column vector b
			b = solveValidation(m, b, true);
			// column vector data
			var bdata = b._data;
			// rows & columns
			var rows = m._size[0];
			var columns = m._size[1];
			// result
			var x = [];
			// data
			var data = m._data;
			// forward solve m * x = b, loop columns
			for (var j = 0; j < columns; j++) {
				// b[j]
				var bj = bdata[j][0] || 0;
				// x[j]
				var xj;
				// forward substitution (outer product) avoids inner looping when bj == 0
				if (!equalScalar(bj, 0)) {
					// value @ [j, j]
					var vjj = data[j][j];
					// check vjj
					if (equalScalar(vjj, 0)) {
						// system cannot be solved
						throw new Error('Linear system cannot be solved since matrix is singular');
					}
					// calculate xj
					xj = divideScalar(bj, vjj);
					// loop rows
					for (var i = j + 1; i < rows; i++) {
						// update copy of b
						bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
					}
				}
				else {
					// zero @ j
					xj = 0;
				}
				// update x
				x[j] = [xj];
			}
			// return vector
			return new DenseMatrix({
				data: x,
				size: [rows, 1]
			});
		};

		var _sparseForwardSubstitution = function (m, b) {
			// validate matrix and vector, return copy of column vector b
			b = solveValidation(m, b, true);
			// column vector data
			var bdata = b._data;
			// rows & columns
			var rows = m._size[0];
			var columns = m._size[1];
			// matrix arrays
			var values = m._values;
			var index = m._index;
			var ptr = m._ptr;
			// vars
			var i, k;
			// result
			var x = [];
			// forward solve m * x = b, loop columns
			for (var j = 0; j < columns; j++) {
				// b[j]
				var bj = bdata[j][0] || 0;
				// forward substitution (outer product) avoids inner looping when bj == 0
				if (!equalScalar(bj, 0)) {
					// value @ [j, j]
					var vjj = 0;
					// lower triangular matrix values & index (column j)
					var jvalues = [];
					var jindex = [];
					// last index in column
					var l = ptr[j + 1];
					// values in column, find value @ [j, j]
					for (k = ptr[j]; k < l; k++) {
						// row
						i = index[k];
						// check row (rows are not sorted!)
						if (i === j) {
							// update vjj
							vjj = values[k];
						}
						else if (i > j) {
							// store lower triangular
							jvalues.push(values[k]);
							jindex.push(i);
						}
					}
					// at this point we must have a value @ [j, j]
					if (equalScalar(vjj, 0)) {
						// system cannot be solved, there is no value @ [j, j]
						throw new Error('Linear system cannot be solved since matrix is singular');
					}
					// calculate xj
					var xj = divideScalar(bj, vjj);
					// loop lower triangular
					for (k = 0, l = jindex.length; k < l; k++) {
						// row
						i = jindex[k];
						// update copy of b
						bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
					}
					// update x
					x[j] = [xj];
				}
				else {
					// update x
					x[j] = [0];
				}
			}
			// return vector
			return new DenseMatrix({
				data: x,
				size: [rows, 1]
			});
		};

		return lsolve;
	}

	exports.name = 'lsolve';
	exports.factory = factory;

},{"../../../type/matrix/function/matrix":553,"../../arithmetic/divideScalar":377,"../../arithmetic/multiplyScalar":392,"../../arithmetic/subtract":400,"../../relational/equalScalar":468,"./utils/solveValidation":351}],349:[function(require,module,exports){
	'use strict';

	var isArray = Array.isArray;

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../../type/matrix/function/matrix'));
		var lup = load(require('../decomposition/lup'));
		var slu = load(require('../decomposition/slu'));
		var cs_ipvec = load(require('../sparse/cs_ipvec'));

		var solveValidation = load(require('./utils/solveValidation'));

		var usolve = load(require('./usolve'));
		var lsolve = load(require('./lsolve'));

		/**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];
   *
   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    var f = math.lup(m);
   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    var a = [[-2, 3], [2, 1]];
   *    var b = [11, 9];
   *    var x = lusolve(a, b);  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */
		var lusolve = typed('lusolve', {
    
			'Array, Array | Matrix': function (a, b) {
				// convert a to matrix
				a = matrix(a);
				// matrix lup decomposition
				var d = lup(a);
				// solve
				var x = _lusolve(d.L, d.U, d.p, null, b);
				// convert result to array
				return x.valueOf();
			},
    
			'DenseMatrix, Array | Matrix': function (a, b) {
				// matrix lup decomposition
				var d = lup(a);
				// solve
				return _lusolve(d.L, d.U, d.p, null, b);
			},
    
			'SparseMatrix, Array | Matrix': function (a, b) {
				// matrix lup decomposition
				var d = lup(a);
				// solve
				return _lusolve(d.L, d.U, d.p, null, b);
			},
    
			'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {
				// matrix lu decomposition
				var d = slu(a, order, threshold);
				// solve
				return _lusolve(d.L, d.U, d.p, d.q, b);
			},

			'Object, Array | Matrix': function (d, b) {
				// solve
				return _lusolve(d.L, d.U, d.p, d.q, b);
			}
		});
  
		var _toMatrix = function (a) {
			// check it is a matrix
			if (a && a.isMatrix === true)
				return a;
			// check array
			if (isArray(a))
				return matrix(a);
			// throw
			throw new TypeError('Invalid Matrix LU decomposition');
		};
  
		var _lusolve = function (l, u, p, q, b) {
			// verify L, U, P
			l = _toMatrix(l);
			u = _toMatrix(u);
			// validate matrix and vector
			b = solveValidation(l, b, false);
			// apply row permutations if needed (b is a DenseMatrix)
			if (p)
				b._data = cs_ipvec(p, b._data);
			// use forward substitution to resolve L * y = b
			var y = lsolve(l, b);
			// use backward substitution to resolve U * x = y
			var x = usolve(u, y);
			// apply column permutations if needed (x is a DenseMatrix)
			if (q)
				x._data = cs_ipvec(q, x._data);
			// return solution
			return x;
		};

		return lusolve;
	}

	exports.name = 'lusolve';
	exports.factory = factory;

},{"../../../type/matrix/function/matrix":553,"../decomposition/lup":345,"../decomposition/slu":346,"../sparse/cs_ipvec":358,"./lsolve":348,"./usolve":350,"./utils/solveValidation":351}],350:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../../type/matrix/function/matrix'));
		var divideScalar = load(require('../../arithmetic/divideScalar'));
		var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));
		var subtract = load(require('../../arithmetic/subtract'));
		var equalScalar = load(require('../../relational/equalScalar'));

		var solveValidation = load(require('./utils/solveValidation'));
  
		var DenseMatrix = type.DenseMatrix;

		/**
   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b);
   *
   * Examples:
   *
   *    var a = [[-2, 3], [2, 1]];
   *    var b = [11, 9];
   *    var x = usolve(a, b);  // [[8], [9]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */
		var usolve = typed('usolve', {
    
			'SparseMatrix, Array | Matrix': function (m, b) {
				// process matrix
				return _sparseBackwardSubstitution(m, b);
			},

			'DenseMatrix, Array | Matrix': function (m, b) {
				// process matrix
				return _denseBackwardSubstitution(m, b);
			},

			'Array, Array | Matrix': function (a, b) {
				// create dense matrix from array
				var m = matrix(a);
				// use matrix implementation
				var r = _denseBackwardSubstitution(m, b);
				// result
				return r.valueOf();
			}
		});

		var _denseBackwardSubstitution = function (m, b) {
			// validate matrix and vector, return copy of column vector b
			b = solveValidation(m, b, true);
			// column vector data
			var bdata = b._data;
			// rows & columns
			var rows = m._size[0];
			var columns = m._size[1];
			// result
			var x = [];
			// arrays
			var data = m._data;
			// backward solve m * x = b, loop columns (backwards)
			for (var j = columns - 1; j >= 0 ; j--) {
				// b[j]
				var bj = bdata[j][0] || 0;
				// x[j]
				var xj;
				// backward substitution (outer product) avoids inner looping when bj == 0
				if (!equalScalar(bj, 0)) {
					// value @ [j, j]
					var vjj = data[j][j];
					// check vjj
					if (equalScalar(vjj, 0)) {
						// system cannot be solved
						throw new Error('Linear system cannot be solved since matrix is singular');
					}
					// calculate xj
					xj = divideScalar(bj, vjj);        
					// loop rows
					for (var i = j - 1; i >= 0; i--) {
						// update copy of b
						bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
					}
				}
				else {
					// zero value @ j
					xj = 0;
				}
				// update x
				x[j] = [xj];
			}
			// return column vector
			return new DenseMatrix({
				data: x,
				size: [rows, 1]
			});
		};
  
		var _sparseBackwardSubstitution = function (m, b) {
			// validate matrix and vector, return copy of column vector b
			b = solveValidation(m, b, true);
			// column vector data
			var bdata = b._data;
			// rows & columns
			var rows = m._size[0];
			var columns = m._size[1];
			// matrix arrays
			var values = m._values;
			var index = m._index;
			var ptr = m._ptr;
			// vars
			var i, k;
			// result
			var x = [];
			// backward solve m * x = b, loop columns (backwards)
			for (var j = columns - 1; j >= 0 ; j--) {
				// b[j]
				var bj = bdata[j][0] || 0;
				// backward substitution (outer product) avoids inner looping when bj == 0
				if (!equalScalar(bj, 0)) {
					// value @ [j, j]
					var vjj = 0;
					// upper triangular matrix values & index (column j)
					var jvalues = [];
					var jindex = [];
					// first & last indeces in column
					var f = ptr[j];
					var l = ptr[j + 1];
					// values in column, find value @ [j, j], loop backwards
					for (k = l - 1; k >= f; k--) {
						// row
						i = index[k];
						// check row
						if (i === j) {
							// update vjj
							vjj = values[k];
						}
						else if (i < j) {
							// store upper triangular
							jvalues.push(values[k]);
							jindex.push(i);
						}
					}
					// at this point we must have a value @ [j, j]
					if (equalScalar(vjj, 0)) {
						// system cannot be solved, there is no value @ [j, j]
						throw new Error('Linear system cannot be solved since matrix is singular');
					}
					// calculate xj
					var xj = divideScalar(bj, vjj);
					// loop upper triangular
					for (k = 0, l = jindex.length; k < l; k++) {
						// row
						i = jindex[k];
						// update copy of b
						bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
					}
					// update x
					x[j] = [xj];
				}
				else {
					// update x
					x[j] = [0];
				}
			}
			// return vector
			return new DenseMatrix({
				data: x,
				size: [rows, 1]
			});
		};
  
		return usolve;
	}

	exports.name = 'usolve';
	exports.factory = factory;

},{"../../../type/matrix/function/matrix":553,"../../arithmetic/divideScalar":377,"../../arithmetic/multiplyScalar":392,"../../arithmetic/subtract":400,"../../relational/equalScalar":468,"./utils/solveValidation":351}],351:[function(require,module,exports){
	'use strict';

	var util = require('../../../../utils/index');

	var string = util.string;
	var array = util.array;

	var isArray = Array.isArray;

	function factory (type) {
  
		var DenseMatrix = type.DenseMatrix;

		/**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
		var solveValidation = function (m, b, copy) {
			// matrix size
			var size = m.size();
			// validate matrix dimensions
			if (size.length !== 2)
				throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
			// rows & columns
			var rows = size[0];
			var columns = size[1];    
			// validate rows & columns
			if (rows !== columns) 
				throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
			// vars
			var data, i, bdata;
			// check b is matrix
			if (b && b.isMatrix === true) {
				// matrix size
				var msize = b.size();
				// vector
				if (msize.length === 1) {
					// check vector length
					if (msize[0] !== rows)
						throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
					// create data array
					data = [];
					// matrix data (DenseMatrix)
					bdata = b._data;
					// loop b data
					for (i = 0; i < rows; i++) {
						// row array
						data[i] = [bdata[i]];
					}
					// return Dense Matrix
					return new DenseMatrix({
						data: data,
						size: [rows, 1],
						datatype: b._datatype
					});
				}
				// two dimensions
				if (msize.length === 2) {
					// array must be a column vector
					if (msize[0] !== rows || msize[1] !== 1)
						throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
					// check matrix type
					if (b.isDenseMatrix === true) {
						// check a copy is needed
						if (copy) {
							// create data array
							data = [];
							// matrix data (DenseMatrix)
							bdata = b._data;
							// loop b data
							for (i = 0; i < rows; i++) {
								// row array
								data[i] = [bdata[i][0]];
							}
							// return Dense Matrix
							return new DenseMatrix({
								data: data,
								size: [rows, 1],
								datatype: b._datatype
							});
						}
						// b is already a column vector
						return b;
					}
					// create data array
					data = [];
					for (i = 0; i < rows; i++)
						data[i] = [0];
					// sparse matrix arrays
					var values = b._values;
					var index = b._index;
					var ptr = b._ptr;
					// loop values in column 0
					for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
						// row
						i = index[k];
						// add to data
						data[i][0] = values[k]; 
					}
					// return Dense Matrix
					return new DenseMatrix({
						data: data,
						size: [rows, 1],
						datatype: b._datatype
					});
				}
				// throw error
				throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
			}
			// check b is array
			if (isArray(b)) {
				// size
				var asize = array.size(b);
				// check matrix dimensions, vector
				if (asize.length === 1) {
					// check vector length
					if (asize[0] !== rows)
						throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        
					// create data array
					data = [];
					// loop b
					for (i = 0; i < rows; i++) {
						// row array
						data[i] = [b[i]];
					}
					// return Dense Matrix
					return new DenseMatrix({
						data: data,
						size: [rows, 1]
					});
				}
				if (asize.length === 2) {
					// array must be a column vector
					if (asize[0] !== rows || asize[1] !== 1)
						throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
					// create data array
					data = [];
					// loop b data
					for (i = 0; i < rows; i++) {
						// row array
						data[i] = [b[i][0]];
					}
					// return Dense Matrix
					return new DenseMatrix({
						data: data,
						size: [rows, 1]
					});
				}
				// throw error
				throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      
			}
		};
  
		return solveValidation;
	}

	exports.factory = factory;
},{"../../../../utils/index":601}],352:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_flip = load(require('./cs_flip'));
		var cs_fkeep = load(require('./cs_fkeep'));
		var cs_tdfs = load(require('./cs_tdfs'));
  
		var add       = load(require('../../arithmetic/add'));
		var multiply  = load(require('../../arithmetic/multiply'));
		var transpose = load(require('../../matrix/transpose'));

		/**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used 
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_amd = function (order, a) {
			// check input parameters
			if (!a || order <= 0 || order > 3)
				return null;
			// a matrix arrays
			var asize = a._size;
			// rows and columns
			var m = asize[0];
			var n = asize[1];    
			// initialize vars
			var lemax = 0;
			// dense threshold
			var dense = Math.max(16, 10 * Math.sqrt(n));
			dense = Math.min(n - 2, dense);
			// create target matrix C
			var cm = _createTargetMatrix(order, a, m, n, dense);
			// drop diagonal entries
			cs_fkeep(cm, _diag, null);
			// C matrix arrays
			var cindex = cm._index;
			var cptr = cm._ptr;

			// number of nonzero elements in C
			var cnz = cptr[n];
    
			// allocate result (n+1)
			var P = [];
    
			// create workspace (8 * (n + 1))
			var W = [];
			var len = 0; // first n + 1 entries
			var nv = n + 1; // next n + 1 entries
			var next = 2 * (n + 1); // next n + 1 entries
			var head = 3 * (n + 1);  // next n + 1 entries
			var elen = 4 * (n + 1);  // next n + 1 entries
			var degree = 5 * (n + 1);  // next n + 1 entries
			var w = 6 * (n + 1);  // next n + 1 entries
			var hhead = 7 * (n + 1);  // last n + 1 entries    

			// use P as workspace for last
			var last = P;
    
			// initialize quotient graph
			var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
    
			// initialize degree lists
			var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
    
			// minimum degree node
			var mindeg = 0;
    
			// vars
			var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;
    
			// while (selecting pivots) do
			while (nel < n) {
				// select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
				// finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
				// many nodes have been eliminated.
				for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      
				if (W[next + k] != -1) 
					last[W[next + k]] = -1;
				// remove k from degree list
				W[head + mindeg] = W[next + k];
				// elenk = |Ek|
				var elenk = W[elen + k];
				// # of nodes k represents
				var nvk = W[nv + k];
				// W[nv + k] nodes of A eliminated
				nel += nvk;

				// Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is 
				// negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
				// degree lists. All elements e in Ek are absorved into element k.
				var dk = 0;
				// flag k as in Lk
				W[nv + k] = -nvk;
				var p = cptr[k];
				// do in place if W[elen + k] == 0
				var pk1 = (elenk === 0) ? p : cnz;
				var pk2 = pk1;
				for (k1 = 1; k1 <= elenk + 1; k1++) {
					if (k1 > elenk) {
						// search the nodes in k
						e = k;
						// list of nodes starts at cindex[pj]
						pj = p;
						// length of list of nodes in k
						ln = W[len + k] - elenk;
					}
					else {
						// search the nodes in e
						e = cindex[p++];
						pj = cptr[e];
						// length of list of nodes in e
						ln = W[len + e];
					}
					for (k2 = 1; k2 <= ln; k2++) {
						i = cindex[pj++];
						// check  node i dead, or seen
						if ((nvi = W[nv + i]) <= 0) 
							continue;
						// W[degree + Lk] += size of node i
						dk += nvi;
						// negate W[nv + i] to denote i in Lk
						W[nv + i] = -nvi;
						// place i in Lk
						cindex[pk2++] = i;
						if (W[next + i] != -1) 
							last[W[next + i]] = last[i];
						// check we need to remove i from degree list
						if (last[i] != -1) 
							W[next + last[i]] = W[next + i];
						else
							W[head + W[degree + i]] = W[next + i];
					}
					if (e != k) {
						// absorb e into k
						cptr[e] = cs_flip(k);
						// e is now a dead element
						W[w + e] = 0;
					}
				}
				// cindex[cnz...nzmax] is free
				if (elenk !== 0) 
					cnz = pk2;
				// external degree of k - |Lk\i|
				W[degree + k] = dk;
				// element k is in cindex[pk1..pk2-1]
				cptr[k] = pk1;
				W[len + k] = pk2 - pk1;
				// k is now an element
				W[elen + k] = -2;
            
				// Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
				// scan, no entry in the w array is greater than or equal to mark.
      
				// clear w if necessary
				mark = _wclear(mark, lemax, W, w, n);
				// scan 1: find |Le\Lk|
				for (pk = pk1; pk < pk2; pk++) {
					i = cindex[pk];
					// check if W[elen + i] empty, skip it
					if ((eln = W[elen + i]) <= 0) 
						continue;
					// W[nv + i] was negated
					nvi = -W[nv + i];
					var wnvi = mark - nvi;
					// scan Ei
					for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
						e = cindex[p];
						if (W[w + e] >= mark) {
							// decrement |Le\Lk|
							W[w + e] -= nvi;
						}
						else if (W[w + e] !== 0) {
							// ensure e is a live element, 1st time e seen in scan 1
							W[w + e] = W[degree + e] + wnvi;
						}
					}
				}
      
				// degree update
				// The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
				// function h(i) for all nodes in Lk.
      
				// scan2: degree update
				for (pk = pk1; pk < pk2; pk++) {
					// consider node i in Lk
					i = cindex[pk];
					p1 = cptr[i];
					p2 = p1 + W[elen + i] - 1;
					pn = p1;
					// scan Ei
					for (h = 0, d = 0, p = p1; p <= p2; p++) {
						e = cindex[p];
						// check e is an unabsorbed element
						if (W[w + e] !== 0) {
							// dext = |Le\Lk|
							var dext = W[w + e] - mark;
							if (dext > 0) {
								// sum up the set differences
								d += dext;
								// keep e in Ei
								cindex[pn++] = e;
								// compute the hash of node i
								h += e;
							}
							else {
								// aggressive absorb. e->k
								cptr[e] = cs_flip(k);
								// e is a dead element
								W[w + e] = 0;
							}
						}
					}
					// W[elen + i] = |Ei|
					W[elen + i] = pn - p1 + 1;
					var p3 = pn;
					var p4 = p1 + W[len + i];
					// prune edges in Ai
					for (p = p2 + 1; p < p4; p++) {
						j = cindex[p];
						// check node j dead or in Lk
						var nvj = W[nv + j];
						if (nvj <= 0) 
							continue;
						// degree(i) += |j|
						d += nvj;
						// place j in node list of i
						cindex[pn++] = j;
						// compute hash for node i
						h += j;
					}
					// check for mass elimination
					if (d === 0) {
						// absorb i into k
						cptr[i] = cs_flip(k);
						nvi = -W[nv + i];
						// |Lk| -= |i|
						dk -= nvi;
						// |k| += W[nv + i]
						nvk += nvi;
						nel += nvi;
						W[nv + i] = 0;
						// node i is dead
						W[elen + i] = -1;
					}
					else {
						// update degree(i)
						W[degree + i] = Math.min(W[degree + i], d);
						// move first node to end
						cindex[pn] = cindex[p3];
						// move 1st el. to end of Ei
						cindex[p3] = cindex[p1];
						// add k as 1st element in of Ei
						cindex[p1] = k;
						// new len of adj. list of node i
						W[len + i] = pn - p1 + 1;
						// finalize hash of i
						h = (h < 0 ? -h : h) % n;
						// place i in hash bucket
						W[next + i] = W[hhead + h];
						W[hhead + h] = i;
						// save hash of i in last[i]
						last[i] = h;
					}
				}
				// finalize |Lk|
				W[degree + k] = dk;
				lemax = Math.max(lemax, dk);
				// clear w
				mark = _wclear(mark + lemax, lemax, W, w, n);
      
				// Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
				// If two nodes have identical adjacency lists, their hash functions wil be identical.
				for (pk = pk1; pk < pk2; pk++) {
					i = cindex[pk];
					// check i is dead, skip it
					if (W[nv + i] >= 0) 
						continue;
					// scan hash bucket of node i
					h = last[i];
					i = W[hhead + h];
					// hash bucket will be empty
					W[hhead + h] = -1;
					for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
						ln = W[len + i];
						eln = W[elen + i];
						for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) 
							W[w + cindex[p]] = mark;
						var jlast = i;
						// compare i with all j
						for (j = W[next + i]; j != -1; ) {
							var ok = W[len + j] === ln && W[elen + j] === eln;
							for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
								// compare i and j
								if (W[w + cindex[p]] != mark) 
									ok = 0;
							}
							// check i and j are identical
							if (ok) {
								// absorb j into i
								cptr[j] = cs_flip(i);
								W[nv + i] += W[nv + j];
								W[nv + j] = 0;
								// node j is dead
								W[elen + j] = -1;
								// delete j from hash bucket
								j = W[next + j];
								W[next + jlast] = j;
							}
							else {
								// j and i are different
								jlast = j;
								j = W[next + j];
							}
						}
					}
				}
      
				// Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
				// Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
				for (p = pk1, pk = pk1; pk < pk2; pk++) {
					i = cindex[pk];
					// check  i is dead, skip it
					if ((nvi = -W[nv + i]) <= 0) 
						continue;
					// restore W[nv + i]
					W[nv + i] = nvi;
					// compute external degree(i)
					d = W[degree + i] + dk - nvi;
					d = Math.min(d, n - nel - nvi);
					if (W[head + d] != -1) 
						last[W[head + d]] = i;
					// put i back in degree list
					W[next + i] = W[head + d];
					last[i] = -1;
					W[head + d] = i;
					// find new minimum degree
					mindeg = Math.min(mindeg, d);
					W[degree + i] = d;
					// place i in Lk
					cindex[p++] = i;
				}
				// # nodes absorbed into k
				W[nv + k] = nvk;
				// length of adj list of element k
				if ((W[len + k] = p - pk1) === 0) {
					// k is a root of the tree
					cptr[k] = -1;
					// k is now a dead element
					W[w + k] = 0;
				}
				if (elenk !== 0) {
					// free unused space in Lk
					cnz = p;
				}
			}
    
			// Postordering. The elimination is complete, but no permutation has been computed. All that is left 
			// of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
			// nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
			// is computed. The tree is restored by unflipping all of ptr.
    
			// fix assembly tree
			for (i = 0; i < n; i++) 
				cptr[i] = cs_flip(cptr[i]);
			for (j = 0; j <= n; j++) 
				W[head + j] = -1;
			// place unordered nodes in lists
			for (j = n; j >= 0; j--) {
				// skip if j is an element
				if (W[nv + j] > 0)
					continue;
				// place j in list of its parent
				W[next + j] = W[head + cptr[j]];
				W[head + cptr[j]] = j;
			}
			// place elements in lists
			for (e = n; e >= 0; e--) {
				// skip unless e is an element
				if (W[nv + e] <= 0)
					continue;
				if (cptr[e] != -1) {
					// place e in list of its parent
					W[next + e] = W[head + cptr[e]];
					W[head + cptr[e]] = e;
				}
			}
			// postorder the assembly tree
			for (k = 0, i = 0; i <= n; i++) {
				if (cptr[i] == -1) 
					k = cs_tdfs(i, k, W, head, next, P, w);
			}
			// remove last item in array
			P.splice(P.length - 1, 1);
			// return P
			return P;
		};
  
		/**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   * 
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */
		var _createTargetMatrix = function (order, a, m, n, dense) {
			// compute A'
			var at = transpose(a);

			// check order = 1, matrix must be square
			if (order === 1 && n === m) {
				// C = A + A'
				return add(a, at);
			}
    
			// check order = 2, drop dense columns from M'
			if (order == 2) {
				// transpose arrays
				var tindex = at._index;
				var tptr = at._ptr;
				// new column index
				var p2 = 0;
				// loop A' columns (rows)
				for (var j = 0; j < m; j++) {
					// column j of AT starts here
					var p = tptr[j];
					// new column j starts here
					tptr[j] = p2;
					// skip dense col j
					if (tptr[j + 1] - p > dense) 
						continue;
					// map rows in column j of A
					for (var p1 = tptr[j + 1]; p < p1; p++) 
						tindex[p2++] = tindex[p];
				}
				// finalize AT
				tptr[m] = p2;
				// recreate A from new transpose matrix
				a = transpose(at);
				// use A' * A
				return multiply(at, a);
			}
    
			// use A' * A, square or rectangular matrix
			return multiply(at, a);
		};

		/**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */
		var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
			// Initialize quotient graph
			for (var k = 0; k < n; k++) 
				W[len + k] = cptr[k + 1] - cptr[k];
			W[len + n] = 0;
			// initialize workspace
			for (var i = 0; i <= n; i++) {
				// degree list i is empty
				W[head + i] = -1;
				last[i] = -1;
				W[next + i] = -1;
				// hash list i is empty
				W[hhead + i] = -1;
				// node i is just one node
				W[nv + i] = 1;
				// node i is alive
				W[w + i] = 1;
				// Ek of node i is empty
				W[elen + i] = 0;
				// degree of node i
				W[degree + i] = W[len + i];
			}
			// clear w
			var mark = _wclear(0, 0, W, w, n);
			// n is a dead element
			W[elen + n] = -2;
			// n is a root of assembly tree
			cptr[n] = -1;
			// n is a dead element
			W[w + n] = 0;
			// return mark
			return mark;
		};

		/**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with 
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */
		var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
			// result
			var nel = 0;
			// loop columns
			for (var i = 0; i < n; i++) {
				// degree @ i
				var d = W[degree + i];
				// check node i is empty
				if (d === 0) {
					// element i is dead
					W[elen + i] = -2;
					nel++;
					// i is a root of assembly tree
					cptr[i] = -1;
					W[w + i] = 0;
				}
				else if (d > dense) {
					// absorb i into element n
					W[nv + i] = 0;
					// node i is dead
					W[elen + i] = -1;
					nel++;
					cptr[i] = cs_flip(n);
					W[nv + n]++;
				}
				else {
					var h = W[head + d];
					if (h != -1)
						last[h] = i;
					// put node i in degree list d
					W[next + i] = W[head + d];
					W[head + d] = i;
				}
			}
			return nel;
		};

		var _wclear = function(mark, lemax, W, w, n) {
			if (mark < 2 || (mark + lemax < 0)) {
				for (var k = 0; k < n; k++) {
					if (W[w + k] !== 0)
						W[w + k] = 1;
				}
				mark = 2 ;
			}
			// at this point, W [0..n-1] < mark holds
			return mark;
		};
  
		var _diag = function (i, j) { 
			return i != j;
		};
  
		return cs_amd;
	}

	exports.name = 'cs_amd';
	exports.path = 'sparse';
	exports.factory = factory;

},{"../../arithmetic/add":371,"../../arithmetic/multiply":391,"../../matrix/transpose":452,"./cs_fkeep":356,"./cs_flip":357,"./cs_tdfs":368}],353:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var transpose = load(require('../../matrix/transpose'));
  
		var cs_leaf = load(require('./cs_leaf'));

		/**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_counts = function (a, parent, post, ata) {
			// check inputs
			if (!a || !parent || !post) 
				return null;
			// a matrix arrays
			var asize = a._size;
			// rows and columns
			var m = asize[0];
			var n = asize[1];   
			// variables
			var i, j, k,  J,  p, p0, p1;
    
			// workspace size
			var s = 4 * n + (ata ? (n + m + 1) : 0);
			// allocate workspace
			var w = []; // (s)
			var ancestor = 0; // first n entries
			var maxfirst = n; // next n entries
			var prevleaf = 2 * n; // next n entries
			var first = 3 * n; // next n entries
			var head = 4 * n; // next n + 1 entries (used when ata is true)
			var next = 5 * n + 1; // last entries in workspace
			// clear workspace w[0..s-1]
			for (k = 0; k < s; k++) 
				w[k] = -1;
    
			// allocate result
			var colcount = []; // (n);
    
			// AT = A'
			var at = transpose(a);
			// at arrays
			var tindex = at._index;
			var tptr = at._ptr;

			// find w[first + j]
			for (k = 0; k < n; k++) {
				j = post[k];
				// colcount[j]=1 if j is a leaf
				colcount[j] = (w[first + j] == -1) ? 1 : 0;
				for (; j != -1 && w[first + j] == -1; j = parent[j]) 
					w[first + j] = k;
			}

			// initialize ata if needed
			if (ata) {
				// invert post
				for (k = 0; k < n; k++) 
					w[post[k]] = k;
				// loop rows (columns in AT)
				for (i = 0; i < m; i++) {
					// values in column i of AT
					for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) 
						k = Math.min(k, w[tindex[p]]);
					// place row i in linked list k
					w[next + i] = w[head + k];
					w[head + k] = i;
				}
			}
    
			// each node in its own set
			for (i = 0; i < n; i++) 
				w[ancestor + i] = i;
    
			for (k = 0; k < n; k++) {
				// j is the kth node in postordered etree
				j = post[k];
				// check j is not a root
				if (parent[j] != -1) 
					colcount[parent[j]]--;
      
				// J=j for LL'=A case
				for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {
					for (p = tptr[J]; p < tptr[J+1]; p++) {
						i = tindex[p];
						var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
						// check A(i,j) is in skeleton
						if (r.jleaf >= 1) 
							colcount[j]++;
						// check account for overlap in q
						if (r.jleaf == 2) 
							colcount[r.q]--;
					}
				}
				if (parent[j] != -1) 
					w[ancestor + j] = parent[j];
			}
			// sum up colcount's of each child
			for (j = 0; j < n; j++) {
				if (parent[j] != -1) 
					colcount[parent[j]] += colcount[j];
			}
			return colcount;
		};

		return cs_counts;
	}

	exports.name = 'cs_counts';
	exports.path = 'sparse';
	exports.factory = factory;

},{"../../matrix/transpose":452,"./cs_leaf":359}],354:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_marked = load(require('./cs_marked'));
		var cs_mark   = load(require('./cs_mark'));
		var cs_unflip = load(require('./cs_unflip'));

		/**
   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
   * at nodes in B (see cs_reach()).
   *
   * @param {Number}  j               The starting node for the DFS algorithm
   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
   * @param {Number}  top             Start index in stack xi[top..n-1]
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   *
   * @return {Number}                 New value of top
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_dfs = function (j, g, top, xi, pinv) {
			// g arrays
			var index = g._index;
			var ptr = g._ptr;
			var size = g._size;
			// columns
			var n = size[1];
			// vars
			var i, p, p2;
			// initialize head
			var head = 0;
			// initialize the recursion stack
			xi[0] = j;
			// loop
			while (head >= 0) {
				// get j from the top of the recursion stack
				j = xi[head];
				// apply permutation vector
				var jnew = pinv ? pinv[j] : j;
				// check node j is marked
				if (!cs_marked(ptr, j)) {
					// mark node j as visited
					cs_mark(ptr, j);
					// update stack (last n entries in xi)
					xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
				}
				// node j done if no unvisited neighbors
				var done = 1;
				// examine all neighbors of j, stack (last n entries in xi)
				for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {
					// consider neighbor node i
					i = index[p];
					// check we have visited node i, skip it
					if (cs_marked(ptr, i)) 
						continue;
					// pause depth-first search of node j, update stack (last n entries in xi)
					xi[n + head] = p;
					// start dfs at node i
					xi[++head] = i;
					// node j is not done
					done = 0;
					// break, to start dfs(i)
					break;
				}
				// check depth-first search at node j is done
				if (done) {
					// remove j from the recursion stack
					head--;
					// and place in the output stack
					xi[--top] = j;
				}
			}
			return top;    
		};

		return cs_dfs;
	}

	exports.name = 'cs_dfs';
	exports.path = 'sparse';
	exports.factory = factory;

},{"./cs_mark":361,"./cs_marked":362,"./cs_unflip":369}],355:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * Computes the elimination tree of Matrix A (using triu(A)) or the 
   * elimination tree of A'A without forming A'A.
   *
   * @param {Matrix}  a               The A Matrix
   * @param {boolean} ata             A value of true the function computes the etree of A'A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_etree = function (a, ata) {
			// check inputs
			if (!a)
				return null;
			// a arrays
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			// rows & columns
			var m = asize[0];
			var n = asize[1];
    
			// allocate result
			var parent = []; // (n)
    
			// allocate workspace
			var w = []; // (n + (ata ? m : 0))
			var ancestor = 0; // first n entries in w
			var prev = n; // last m entries (ata = true)
    
			var i, inext;
    
			// check we are calculating A'A
			if (ata) {
				// initialize workspace
				for (i = 0; i < m; i++) 
					w[prev + i] = -1;
			}
			// loop columns
			for (var k = 0; k < n; k++) {
				// node k has no parent yet
				parent[k] = -1;
				// nor does k have an ancestor
				w[ancestor + k] = -1;
				// values in column k
				for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
					// row
					var r = aindex[p];
					// node
					i = ata ? (w[prev + r]) : r;
					// traverse from i to k 
					for (; i != -1 && i < k; i = inext) {
						// inext = ancestor of i
						inext = w[ancestor + i];
						// path compression
						w[ancestor + i] = k;
						// check no anc., parent is k
						if (inext == -1) 
							parent[i] = k;
					}
					if (ata) 
						w[prev + r] = k;
				}
			}
			return parent;
		};

		return cs_etree;
	}

	exports.name = 'cs_etree';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],356:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
   *
   * @param {Matrix}   a              The sparse matrix
   * @param {function} callback       The callback function, function will be invoked with the following args:
   *                                    - The entry row
   *                                    - The entry column
   *                                    - The entry value
   *                                    - The state parameter
   * @param {any}      other          The state
   *
   * @return                          The number of nonzero elements in the matrix
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_fkeep = function (a, callback, other) {
			// a arrays
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			// columns
			var n = asize[1];
			// nonzero items
			var nz = 0;
			// loop columns
			for (var j = 0; j < n; j++) {
				// get current location of col j
				var p = aptr[j];
				// record new location of col j
				aptr[j] = nz;
				for (; p < aptr[j+1]; p++) {
					// check we need to keep this item
					if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
						// keep A(i,j)
						aindex[nz] = aindex[p];
						// check we need to process values (pattern only)
						if (avalues) 
							avalues[nz] = avalues[p];
						// increment nonzero items
						nz++;
					}
				}
			}
			// finalize A
			aptr[n] = nz;
			// trim arrays
			aindex.splice(nz, aindex.length - nz);
			// check we need to process values (pattern only)
			if (avalues)
				avalues.splice(nz, avalues.length - nz);    
			// return number of nonzero items
			return (nz);
		};
  
		return cs_fkeep;
	}

	exports.name = 'cs_fkeep';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],357:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * This function "flips" its input about the integer -1.
   *
   * @param {Number}  i               The value to flip
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_flip = function (i) {
			// flip the value
			return -i - 2;
		};

		return cs_flip;
	}

	exports.name = 'cs_flip';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],358:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
   *
   * @param {Array} p           The permutation vector of length n. null value denotes identity
   * @param {Array} b           The input vector
   *
   * @return {Array}            The output vector x = P'b
   */
		var cs_ipvec = function (p, b, n) {
			// vars 
			var k;
			var n = b.length;
			var x = [];
			// check permutation vector was provided, p = null denotes identity
			if (p) {
				// loop vector
				for (k = 0; k < n; k++) {
					// apply permutation
					x[p[k]] = b[k];
				}
			}
			else {
				// loop vector
				for (k = 0; k < n; k++) {
					// x[i] = b[i]
					x[k] = b[k];
				}
			}
			return x;
		};

		return cs_ipvec;
	}

	exports.name = 'cs_ipvec';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],359:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * This function determines if j is a leaf of the ith row subtree.
   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
   *
   * @param {Number}  i               The ith row subtree
   * @param {Number}  j               The node to test
   * @param {Array}   w               The workspace array
   * @param {Number}  first           The index offset within the workspace for the first array
   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
   *
   * @return {Object}
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {
    
			var s, sparent, jprev;
    
			// our result
			var jleaf = 0;
			var q;
    
			// check j is a leaf
			if (i <= j || w[first + j] <= w[maxfirst + i]) 
				return (-1);
			// update max first[j] seen so far
			w[maxfirst + i] = w[first + j];
			// jprev = previous leaf of ith subtree
			jprev = w[prevleaf + i];
			w[prevleaf + i] = j;
    
			// check j is first or subsequent leaf
			if (jprev === -1) {
				// 1st leaf, q = root of ith subtree
				jleaf = 1;
				q = i;
			}
			else {
				// update jleaf
				jleaf = 2;
				// q = least common ancester (jprev,j)
				for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);
				for (s = jprev; s != q; s = sparent) {
					// path compression
					sparent = w[ancestor + s];
					w[ancestor + s] = q;
				}      
			}
			return {
				jleaf: jleaf,
				q: q
			};
		};

		return cs_leaf;
	}

	exports.name = 'cs_leaf';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],360:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var abs = load(require('../../arithmetic/abs'));
		var divideScalar = load(require('../../arithmetic/divideScalar'));
		var multiply = load(require('../../arithmetic/multiply'));
  
		var larger = load(require('../../relational/larger'));
		var largerEq = load(require('../../relational/largerEq'));
  
		var cs_spsolve = load(require('./cs_spsolve'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L 
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing 
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_lu = function (m, s, tol) {
			// validate input
			if (!m)
				return null;
			// m arrays
			var size = m._size;
			// columns
			var n = size[1];
			// symbolic analysis result
			var q;
			var lnz = 100;
			var unz = 100;
			// update symbolic analysis parameters
			if (s) {
				q = s.q;
				lnz = s.lnz || lnz;
				unz = s.unz || unz;
			}
			// L arrays
			var lvalues = []; // (lnz)
			var lindex = []; // (lnz);
			var lptr = []; // (n + 1);
			// L
			var L = new SparseMatrix({
				values: lvalues,
				index: lindex,
				ptr: lptr,
				size: [n, n]
			});
			// U arrays
			var uvalues = []; // (unz);
			var uindex = []; // (unz);
			var uptr = []; // (n + 1);
			// U
			var U = new SparseMatrix({
				values: uvalues,
				index: uindex,
				ptr: uptr,
				size: [n, n]
			});
			// inverse of permutation vector
			var pinv = []; // (n);
			// vars 
			var i, p;
			// allocate arrays
			var x = []; // (n);
			var xi = []; // (2 * n);
			// initialize variables
			for (i = 0; i < n; i++) {
				// clear workspace
				x[i] = 0;
				// no rows pivotal yet
				pinv[i] = -1;
				// no cols of L yet
				lptr[i + 1] = 0;
			}
			// reset number of nonzero elements in L and U
			lnz = 0;
			unz = 0;
			// compute L(:,k) and U(:,k)
			for (var k = 0; k < n; k++) {
				// update ptr
				lptr[k] = lnz;
				uptr[k] = unz;
				// apply column permutations if needed
				var col = q ? q[k] : k;
				// solve triangular system, x = L\A(:,col)
				var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
				// find pivot
				var ipiv = -1;
				var a = -1;
				// loop xi[] from top -> n
				for (p = top; p < n; p++) {
					// x[i] is nonzero
					i = xi[p];
					// check row i is not yet pivotal
					if (pinv[i] < 0) {
						// absolute value of x[i]          
						var xabs = abs(x[i]);
						// check absoulte value is greater than pivot value
						if (larger(xabs, a)) {
							// largest pivot candidate so far
							a = xabs;
							ipiv = i;
						}
					}
					else {
						// x(i) is the entry U(pinv[i],k)
						uindex[unz] = pinv[i];
						uvalues[unz++] = x[i];
					}
				}
				// validate we found a valid pivot
				if (ipiv == -1 || a <= 0) 
					return null;
				// update actual pivot column, give preference to diagonal value
				if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
					ipiv = col;
				// the chosen pivot
				var pivot = x[ipiv];
				// last entry in U(:,k) is U(k,k)
				uindex[unz] = k;
				uvalues[unz++] = pivot;
				// ipiv is the kth pivot row
				pinv[ipiv] = k;
				// first entry in L(:,k) is L(k,k) = 1
				lindex[lnz] = ipiv;
				lvalues[lnz++] = 1;
				// L(k+1:n,k) = x / pivot      
				for (p = top; p < n; p++) {
					// row
					i = xi[p];
					// check x(i) is an entry in L(:,k)
					if (pinv[i] < 0) {
						// save unpermuted row in L
						lindex[lnz] = i;
						// scale pivot column
						lvalues[lnz++] = divideScalar(x[i], pivot);
					}
					// x[0..n-1] = 0 for next k
					x[i] = 0;
				}
			}
			// update ptr
			lptr[n] = lnz;
			uptr[n] = unz;
			// fix row indices of L for final pinv
			for (p = 0; p < lnz; p++) 
				lindex[p] = pinv[lindex[p]];
			// trim arrays
			lvalues.splice(lnz, lvalues.length - lnz);
			lindex.splice(lnz, lindex.length - lnz);
			uvalues.splice(unz, uvalues.length - unz);
			uindex.splice(unz, uindex.length - unz);    
			// return LU factor
			return {
				L: L,
				U: U,
				pinv: pinv
			};
		};

		return cs_lu;
	}

	exports.name = 'cs_lu';
	exports.path = 'sparse';
	exports.factory = factory;

},{"../../arithmetic/abs":370,"../../arithmetic/divideScalar":377,"../../arithmetic/multiply":391,"../../relational/larger":470,"../../relational/largerEq":471,"./cs_spsolve":366}],361:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_flip = load(require('./cs_flip'));

		/**
   * Marks the node at w[j]
   *
   * @param {Array}   w               The array
   * @param {Number}  j               The array index
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_mark = function (w, j) {
			// mark w[j]
			w[j] = cs_flip(w [j]);
		};

		return cs_mark;
	}

	exports.name = 'cs_mark';
	exports.path = 'sparse';
	exports.factory = factory;

},{"./cs_flip":357}],362:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * Checks if the node at w[j] is marked
   *
   * @param {Array}   w               The array
   * @param {Number}  j               The array index
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_marked = function (w, j) {
			// check node is marked
			return w[j] < 0;
		};

		return cs_marked;
	}

	exports.name = 'cs_marked';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],363:[function(require,module,exports){
	'use strict';

	function factory (type) {

		var SparseMatrix = type.SparseMatrix;

		/**
   * Permutes a sparse matrix C = P * A * Q
   *
   * @param {Matrix}  a               The Matrix A
   * @param {Array}   pinv            The row permutation vector
   * @param {Array}   q               The column permutation vector
   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
   *
   * @return {Matrix}                 C = P * A * Q, null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_permute = function (a, pinv, q, values) {
			// a arrays
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			var adt = a._datatype;
			// rows & columns
			var m = asize[0];
			var n = asize[1];
			// c arrays
			var cvalues = values && a._values ? [] : null;
			var cindex = []; // (aptr[n]);
			var cptr = []; // (n + 1);
			// initialize vars
			var nz = 0;
			// loop columns    
			for (var k = 0; k < n; k++) {
				// column k of C is column q[k] of A
				cptr[k] = nz;
				// apply column permutation
				var j = q ? (q[k]) : k;
				// loop values in column j of A
				for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
					// row i of A is row pinv[i] of C
					var r = pinv ? pinv[aindex[t]] : aindex[t];
					// index
					cindex[nz] = r;
					// check we need to populate values
					if (cvalues) 
						cvalues[nz] = avalues[t];
					// increment number of nonzero elements
					nz++;
				}
			}
			// finalize the last column of C
			cptr[n] = nz;
			// return C matrix
			return new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [m, n],
				datatype: adt
			});
		};

		return cs_permute;
	}

	exports.name = 'cs_permute';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],364:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_tdfs = load(require('./cs_tdfs'));

		/**
   * Post order a tree of forest
   *
   * @param {Array}   parent          The tree or forest
   * @param {Number}  n               Number of columns
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_post = function (parent, n) {
			// check inputs
			if (!parent) 
				return null;
			// vars 
			var k = 0;
			var j;
			// allocate result
			var post = []; // (n);
			// workspace, head: first n entries, next: next n entries, stack: last n entries
			var w = []; // (3 * n);
			var head = 0; 
			var next = n; 
			var stack = 2 * n;
			// initialize workspace
			for (j = 0; j < n; j++) {
				// empty linked lists
				w[head + j] = -1;
			}
			// traverse nodes in reverse order
			for (j = n-1; j >= 0; j--) {
				// check j is a root
				if (parent[j] == -1) 
					continue;
				// add j to list of its parent
				w[next + j] = w[head + parent[j]];
				w[head + parent[j]] = j;
			}
			// loop nodes
			for (j = 0; j < n; j++) {
				// skip j if it is not a root
				if (parent[j] != -1) 
					continue;
				// depth-first search
				k = cs_tdfs(j, k, w, head, next, post, stack);
			}
			return post;
		};

		return cs_post;
	}

	exports.name = 'cs_post';
	exports.path = 'sparse';
	exports.factory = factory;

},{"./cs_tdfs":368}],365:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_dfs = load(require('./cs_dfs'));
		var cs_marked = load(require('./cs_marked'));
		var cs_mark = load(require('./cs_mark'));

		/**
   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 
   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   pinv            The inverse row permutation vector
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_reach = function (g, b, k, xi, pinv) {
			// g arrays
			var gptr = g._ptr;
			var gsize = g._size;
			// b arrays
			var bindex = b._index;
			var bptr = b._ptr;
			// columns
			var n = gsize[1];
			// vars
			var p, p0, p1;
			// initialize top
			var top = n;
			// loop column indeces in B
			for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
				// node i
				var i = bindex[p];
				// check node i is marked
				if (!cs_marked(gptr, i)) {
					// start a dfs at unmarked node i
					top = cs_dfs(i, g, top, xi, pinv);
				}
			}
			// loop columns from top -> n - 1
			for (p = top; p < n; p++) {
				// restore G
				cs_mark(gptr, xi[p]);
			}
			return top;
		};

		return cs_reach;
	}

	exports.name = 'cs_reach';
	exports.path = 'sparse';
	exports.factory = factory;

},{"./cs_dfs":354,"./cs_mark":361,"./cs_marked":362}],366:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var divideScalar = load(require('../../arithmetic/divideScalar'));
		var multiply = load(require('../../arithmetic/multiply'));
		var subtract = load(require('../../arithmetic/subtract'));

		var cs_reach = load(require('./cs_reach'));

		/**
   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U 
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {
			// g arrays
			var gvalues = g._values;
			var gindex = g._index;
			var gptr = g._ptr;
			var gsize = g._size;
			// columns
			var n = gsize[1];
			// b arrays
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			// vars
			var p, p0, p1, q;
			// xi[top..n-1] = cs_reach(B(:,k))
			var top = cs_reach(g, b, k, xi, pinv);
			// clear x
			for (p = top; p < n; p++) 
				x[xi[p]] = 0;
			// scatter b
			for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) 
				x[bindex[p]] = bvalues[p];
			// loop columns
			for (var px = top; px < n; px++) {
				// x array index for px
				var j = xi[px];
				// apply permutation vector (U x = b), j maps to column J of G
				var J = pinv ? pinv[j] : j;
				// check column J is empty
				if (J < 0)
					continue;
				// column value indeces in G, p0 <= p < p1
				p0 = gptr[J];
				p1 = gptr[J + 1];
				// x(j) /= G(j,j)
				x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);
				// first entry L(j,j)
				p = lo ? (p0 + 1) : p0;
				q = lo ? (p1) : (p1 - 1);
				// loop
				for ( ; p < q ; p++) {
					// row
					var i = gindex[p];
					// x(i) -= G(i,j) * x(j)
					x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
				}
			}
			// return top of stack
			return top;
		};
  
		return cs_spsolve;
	}

	exports.name = 'cs_spsolve';
	exports.path = 'sparse';
	exports.factory = factory;

},{"../../arithmetic/divideScalar":377,"../../arithmetic/multiply":391,"../../arithmetic/subtract":400,"./cs_reach":365}],367:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_amd = load(require('./cs_amd'));
		var cs_permute = load(require('./cs_permute'));
		var cs_etree = load(require('./cs_etree'));
		var cs_post = load(require('./cs_post'));
		var cs_counts = load(require('./cs_counts'));

		/**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see cs_amd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_sqr = function (order, a, qr) {
			// a arrays
			var aptr = a._ptr;
			var asize = a._size;
			// columns
			var n = asize[1];
			// vars
			var k;
			// symbolic analysis result
			var s = {};    
			// fill-reducing ordering
			s.q = cs_amd(order, a);
			// validate results
			if (order && !s.q) 
				return null;
			// QR symbolic analysis
			if (qr) {
				// apply permutations if needed
				var c = order ? cs_permute(a, null, s.q, 0) : a;
				// etree of C'*C, where C=A(:,q)
				s.parent = cs_etree(c, 1);
				// post order elimination tree
				var post = cs_post (s.parent, n);
				// col counts chol(C'*C)
				s.cp = cs_counts(c, s.parent, post, 1);
				// check we have everything needed to calculate number of nonzero elements
				if (c && s.parent && s.cp && _vcount(c, s)) {
					// calculate number of nonzero elements
					for (s.unz = 0, k = 0; k < n; k++) 
						s.unz += s.cp[k];
				}
			}
			else {
				// for LU factorization only, guess nnz(L) and nnz(U)
				s.unz = 4 * (aptr[n]) + n;
				s.lnz = s.unz;
			}
			// return result S
			return s;
		};
  
		/**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */
		var _vcount = function (a, s) {
			// a arrays
			var aptr = a._ptr;
			var aindex = a._index;
			var asize = a._size;
			// rows & columns
			var m = asize[0];
			var n = asize[1];
			// initialize s arrays
			s.pinv = []; // (m + n);
			s.leftmost = []; // (m);
			// vars
			var parent = s.parent;
			var pinv = s.pinv;
			var leftmost = s.leftmost;
			// workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
			var w = []; // (m + 3 * n);
			var next = 0;
			var head = m;
			var tail = m + n;
			var nque = m + 2 * n;
			// vars
			var i, k, p, p0, p1;
			// initialize w
			for (k = 0; k < n; k++) {
				// queue k is empty
				w[head + k] = -1;
				w[tail + k] = -1;
				w[nque + k] = 0;
			}
			// initialize row arrays
			for (i = 0; i < m; i++) 
				leftmost[i] = -1;
			// loop columns backwards    
			for (k = n - 1; k >= 0; k--) {
				// values & index for column k
				for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
					// leftmost[i] = min(find(A(i,:)))
					leftmost[aindex[p]] = k;
				}
			}
			// scan rows in reverse order
			for (i = m - 1; i >= 0; i--) {
				// row i is not yet ordered
				pinv[i] = -1;
				k = leftmost[i];
				// check row i is empty
				if (k == -1) 
					continue;
				// first row in queue k
				if (w[nque + k]++ === 0) 
					w[tail + k] = i;
				// put i at head of queue k
				w[next + i] = w[head + k];
				w[head + k] = i;
			}
			s.lnz = 0;
			s.m2 = m;
			// find row permutation and nnz(V)
			for (k = 0; k < n; k++) {
				// remove row i from queue k
				i = w[head + k];
				// count V(k,k) as nonzero
				s.lnz++;
				// add a fictitious row
				if (i < 0) 
					i = s.m2++;
				// associate row i with V(:,k)
				pinv[i] = k;
				// skip if V(k+1:m,k) is empty
				if (--nque[k] <= 0) 
					continue;
				// nque[k] is nnz (V(k+1:m,k))
				s.lnz += w[nque + k];
				// move all rows to parent of k
				var pa = parent[k];
				if (pa != -1) {
					if (w[nque + pa] === 0) 
						w[tail + pa] = w[tail + k];
					w[next + w[tail + k]] = w[head + pa];
					w[head + pa] = w[next + i];
					w[nque + pa] += w[nque + k];
				}
			}
			for (i = 0; i < m; i++) {
				if (pinv[i] < 0) 
					pinv[i] = k++;
			}
			return true;
		};

		return cs_sqr;
	}

	exports.name = 'cs_sqr';
	exports.path = 'sparse';
	exports.factory = factory;

},{"./cs_amd":352,"./cs_counts":353,"./cs_etree":355,"./cs_permute":363,"./cs_post":364}],368:[function(require,module,exports){
	'use strict';

	function factory () {

		/**
   * Depth-first search and postorder of a tree rooted at node j
   *
   * @param {Number}  j               The tree node
   * @param {Number}  k               
   * @param {Array}   w               The workspace array
   * @param {Number}  head            The index offset within the workspace for the head array
   * @param {Number}  next            The index offset within the workspace for the next array
   * @param {Array}   post            The post ordering array
   * @param {Number}  stack           The index offset within the workspace for the stack array
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_tdfs = function (j, k, w, head, next, post, stack) {
			// variables
			var top = 0;
			// place j on the stack
			w[stack] = j;
			// while (stack is not empty) 
			while (top >= 0) {
				// p = top of stack
				var p = w[stack + top];
				// i = youngest child of p
				var i = w[head + p];
				if (i == -1) {
					// p has no unordered children left
					top--;
					// node p is the kth postordered node
					post[k++] = p;
				}
				else {
					// remove i from children of p
					w[head + p] = w[next + i];
					// increment top
					++top;
					// start dfs on child node i
					w[stack + top] = i;
				}
			}
			return k;
		};

		return cs_tdfs;
	}

	exports.name = 'cs_tdfs';
	exports.path = 'sparse';
	exports.factory = factory;

},{}],369:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {

		var cs_flip = load(require('./cs_flip'));
  
		/**
   * Flips the value if it is negative of returns the same value otherwise.
   *
   * @param {Number}  i               The value to flip
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
		var cs_unflip = function (i) {
			// flip the value if it is negative
			return i < 0 ? cs_flip(i) : i;
		};

		return cs_unflip;
	}

	exports.name = 'cs_unflip';
	exports.path = 'sparse';
	exports.factory = factory;

},{"./cs_flip":357}],370:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5);                // returns number 3.5
   *    math.abs(-4.2);               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
		var abs = typed('abs', {
			'number': Math.abs,

			'Complex': function (x) {
				return x.abs();
			},

			'BigNumber': function (x) {
				return x.abs();
			},

			'Fraction': function (x) {
				return x.abs();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since abs(0) = 0
				return deepMap(x, abs, true);
			},

			'Unit': function(x) {
				return x.abs();
			}
		});

		abs.toTex = {1: '\\left|${args[0]}\\right|'};

		return abs;
	}

	exports.name = 'abs';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],371:[function(require,module,exports){
	'use strict';

	var extend = require('../../utils/object').extend;

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));
		var addScalar = load(require('./addScalar'));
		var latex = require('../../utils/latex.js');
  
		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Add two values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *
   * Examples:
   *
   *    math.add(2, 3);               // returns number 5
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(-4, 1);
   *    math.add(a, b);               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]
   *
   *    var c = math.unit('5 cm');
   *    var d = math.unit('2.1 mm');
   *    math.add(c, d);               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4");         // returns number 6.3
   *
   * See also:
   *
   *    subtract
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */
		var add = typed('add', extend({
			// we extend the signatures of addScalar with signatures dealing with matrices

			'Matrix, Matrix': function (x, y) {
				// result
				var c;
      
				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm04(x, y, addScalar);
						break;
					default:
						// sparse + dense
						c = algorithm01(y, x, addScalar, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm01(x, y, addScalar, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, addScalar);
						break;
					}
					break;
				}
				return c;
			},
    
			'Array, Array': function (x, y) {
				// use matrix implementation
				return add(matrix(x), matrix(y)).valueOf();
			},
    
			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return add(matrix(x), y);
			},
    
			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return add(x, matrix(y));
			},
    
			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm10(x, y, addScalar, false);
					break;
				default:
					c = algorithm14(x, y, addScalar, false);
					break;
				}
				return c;
			},
    
			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm10(y, x, addScalar, true);
					break;
				default:
					c = algorithm14(y, x, addScalar, true);
					break;
				}
				return c;
			},
    
			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, addScalar, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, addScalar, true).valueOf();
			}
		}, addScalar.signatures));

		add.toTex = {
			2: '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)'
		};
  
		return add;
	}

	exports.name = 'add';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm04":559,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex.js":602,"../../utils/object":604,"./addScalar":372}],372:[function(require,module,exports){
	'use strict';

	function factory(type, config, load, typed) {

		/**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
   * @private
   */
		var add = typed('add', {

			'number, number': function (x, y) {
				return x + y;
			},

			'Complex, Complex': function (x, y) {
				return x.add(y);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.plus(y);
			},

			'Fraction, Fraction': function (x, y) {
				return x.add(y);
			},

			'Unit, Unit': function (x, y) {
				if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');
				if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');
				if (!x.equalBase(y)) throw new Error('Units do not match');

				var res = x.clone();
				res.value = add(res.value, y.value);
				res.fixPrefix = false;
				return res;
			}
		});

		return add;
	}

	exports.factory = factory;

},{}],373:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var unaryMinus = load(require('./unaryMinus'));
		var isNegative = load(require('../utils/isNegative'));
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27);                  // returns 3
   *    math.cube(3);                   // returns 27
   *    math.cbrt(-64);                 // returns -4
   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m
   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]
   *
   *    var x = math.complex('8i');
   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true);             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
		var cbrt = typed('cbrt', {
			'number': _cbrtNumber,
			// note: signature 'number, boolean' is also supported,
			//       created by typed as it knows how to convert number to Complex

			'Complex': _cbrtComplex,

			'Complex, boolean': _cbrtComplex,

			'BigNumber': function (x) {
				return x.cbrt();
			},

			'Unit': _cbrtUnit,

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since cbrt(0) = 0
				return deepMap(x, cbrt, true);
			}
		});

		/**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */
		function _cbrtComplex(x, allRoots) {
			// https://www.wikiwand.com/en/Cube_root#/Complex_numbers

			var arg_3 = x.arg() / 3;
			var abs = x.abs();

			// principal root:
			var principal = new type.Complex(_cbrtNumber(abs), 0).mul(
				new type.Complex(0, arg_3).exp());

			if (allRoots) {
				var all = [
					principal,
					new type.Complex(_cbrtNumber(abs), 0).mul(
						new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),
					new type.Complex(_cbrtNumber(abs), 0).mul(
						new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())
				];

				return (config.matrix === 'Array') ? all : matrix(all);
			}
			else {
				return principal;
			}
		}

		/**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */
		function _cbrtUnit(x) {
			if(x.value && x.value.isComplex) {
				var result = x.clone();
				result.value = 1.0;
				result = result.pow(1.0/3);           // Compute the units
				result.value = _cbrtComplex(x.value); // Compute the value
				return result;
			}
			else {
				var negate = isNegative(x.value);
				if (negate) {
					x.value = unaryMinus(x.value);
				}

				// TODO: create a helper function for this
				var third;
				if (x.value && x.value.isBigNumber) {
					third = new type.BigNumber(1).div(3);
				}
				else if (x.value && x.value.isFraction) {
					third = new type.Fraction(1, 3);
				}
				else {
					third = 1/3;
				}

				var result = x.pow(third);

				if (negate) {
					result.value = unaryMinus(result.value);
				}

				return result;
			}
		}

		cbrt.toTex = {1: '\\sqrt[3]{${args[0]}}'};

		return cbrt;
	}

	/**
 * Calculate cbrt for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number | Complex} Returns the cubic root of x
 * @private
 */
	var _cbrtNumber = Math.cbrt || function (x) {
		if (x === 0) {
			return x;
		}

		var negate = x < 0;
		var result;
		if (negate) {
			x = -x;
		}

		if (isFinite(x)) {
			result = Math.exp(Math.log(x) / 3);
			// from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods
			result = (x / (result * result) + (2 * result)) / 3;
		} else {
			result = x;
		}

		return negate ? -result : result;
	};

	exports.name = 'cbrt';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/collection/deepMap":595,"../utils/isNegative":521,"./unaryMinus":401}],374:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *
   * Examples:
   *
   *    math.ceil(3.2);               // returns number 4
   *    math.ceil(3.8);               // returns number 4
   *    math.ceil(-4.2);              // returns number -4
   *    math.ceil(-4.7);              // returns number -4
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.ceil(c);                 // returns Complex 4 - 2i
   *
   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
		var ceil = typed('ceil', {
			'number': Math.ceil,

			'Complex': function (x) {
				return x.ceil();
			},

			'BigNumber': function (x) {
				return x.ceil();
			},

			'Fraction': function (x) {
				return x.ceil();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since ceil(0) = 0
				return deepMap(x, ceil, true);
			}
		});

		ceil.toTex = {1: '\\left\\lceil${args[0]}\\right\\rceil'};

		return ceil;
	}

	exports.name = 'ceil';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],375:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2);            // returns number 8
   *    math.pow(2, 3);          // returns number 8
   *    math.cube(4);            // returns number 64
   *    4 * 4 * 4;               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
		var cube = typed('cube', {
			'number': function (x) {
				return x * x * x;
			},

			'Complex': function (x) {
				return x.mul(x).mul(x); // Is faster than pow(x, 3)
			},

			'BigNumber': function (x) {
				return x.times(x).times(x);
			},

			'Fraction': function (x) {
				return x.pow(3); // Is faster than mul()mul()mul()
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since cube(0) = 0
				return deepMap(x, cube, true);
			},

			'Unit': function(x) {
				return x.pow(3);
			}
		});

		cube.toTex = {1: '\\left(${args[0]}\\right)^3'};

		return cube;
	}

	exports.name = 'cube';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],376:[function(require,module,exports){
	'use strict';

	var extend = require('../../utils/object').extend;

	function factory (type, config, load, typed) {

		var divideScalar = load(require('./divideScalar'));
		var multiply     = load(require('./multiply'));
		var inv          = load(require('../matrix/inv'));
		var matrix       = load(require('../../type/matrix/function/matrix'));

		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3);            // returns number 0.6666666666666666
   *
   *    var a = math.complex(5, 14);
   *    var b = math.complex(4, 1);
   *    math.divide(a, b);            // returns Complex 2 + 3i
   *
   *    var c = [[7, -6], [13, -4]];
   *    var d = [[1, 2], [4, 3]];
   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]
   *
   *    var e = math.unit('18 km');
   *    math.divide(e, 4.5);          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */
		var divide = typed('divide', extend({
			// we extend the signatures of divideScalar with signatures dealing with matrices

			'Array | Matrix, Array | Matrix': function (x, y) {
				// TODO: implement matrix right division using pseudo inverse
				// http://www.mathworks.nl/help/matlab/ref/mrdivide.html
				// http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
				// http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
				return multiply(x, inv(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;

				// process storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, divideScalar, false);
					break;
				case 'dense':
					c = algorithm14(x, y, divideScalar, false);
					break;
				}
				return c;
			},
    
			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, divideScalar, false).valueOf();
			},

			'any, Array | Matrix': function (x, y) {
				return multiply(x, inv(y));
			}
		}, divideScalar.signatures));

		divide.toTex = {2: '\\frac{${args[0]}}{${args[1]}}'};

		return divide;
	}

	exports.name = 'divide';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm14":569,"../../utils/object":604,"../matrix/inv":441,"./divideScalar":377,"./multiply":391}],377:[function(require,module,exports){
	'use strict';

	function factory(type, config, load, typed) {
		var multiplyScalar = load(require('./multiplyScalar'));

		/**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
   * @private
   */
		var divideScalar = typed('divide', {
			'number, number': function (x, y) {
				return x / y;
			},

			'Complex, Complex': function (x, y) {
				return x.div(y);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.div(y);
			},

			'Fraction, Fraction': function (x, y) {
				return x.div(y);
			},

			'Unit, number | Fraction | BigNumber': function (x, y) {
				var res = x.clone();
				// TODO: move the divide function to Unit.js, it uses internals of Unit
				res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);
				return res;
			},

			'number | Fraction | BigNumber, Unit': function (x, y) {
				var res = y.pow(-1);
				// TODO: move the divide function to Unit.js, it uses internals of Unit
				res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);
				return res;
			},

			'Unit, Unit': function (x, y) {
				return x.divide(y);
			}

		});

		return divideScalar;
	}

	exports.factory = factory;

},{"./multiplyScalar":392}],378:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));
		var divideScalar = load(require('./divideScalar'));
		var latex = require('../../utils/latex');
  
		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4);   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]];
   *    b = [[3, 2], [5, 2]];
   *
   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */
		var dotDivide = typed('dotDivide', {
    
			'any, any': divideScalar,
    
			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse ./ sparse
						c = algorithm07(x, y, divideScalar, false);
						break;
					default:
						// sparse ./ dense
						c = algorithm02(y, x, divideScalar, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense ./ sparse
						c = algorithm03(x, y, divideScalar, false);
						break;
					default:
						// dense ./ dense
						c = algorithm13(x, y, divideScalar);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return dotDivide(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return dotDivide(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return dotDivide(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, divideScalar, false);
					break;
				default:
					c = algorithm14(x, y, divideScalar, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, divideScalar, true);
					break;
				default:
					c = algorithm14(y, x, divideScalar, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, divideScalar, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, divideScalar, true).valueOf();
			}
		});

		dotDivide.toTex = {
			2: '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)'
		};
  
		return dotDivide;
	}

	exports.name = 'dotDivide';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"./divideScalar":377}],379:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));
		var multiplyScalar = load(require('./multiplyScalar'));
		var latex = require('../../utils/latex');

		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4); // returns 8
   *
   *    a = [[9, 5], [6, 1]];
   *    b = [[3, 2], [5, 2]];
   *
   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */
		var dotMultiply = typed('dotMultiply', {
    
			'any, any': multiplyScalar,
    
			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse .* sparse
						c = algorithm09(x, y, multiplyScalar, false);
						break;
					default:
						// sparse .* dense
						c = algorithm02(y, x, multiplyScalar, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense .* sparse
						c = algorithm02(x, y, multiplyScalar, false);
						break;
					default:
						// dense .* dense
						c = algorithm13(x, y, multiplyScalar);
						break;
					}
					break;
				}
				return c;
			},
    
			'Array, Array': function (x, y) {
				// use matrix implementation
				return dotMultiply(matrix(x), matrix(y)).valueOf();
			},
    
			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return dotMultiply(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return dotMultiply(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, multiplyScalar, false);
					break;
				default:
					c = algorithm14(x, y, multiplyScalar, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm11(y, x, multiplyScalar, true);
					break;
				default:
					c = algorithm14(y, x, multiplyScalar, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
			}
		});

		dotMultiply.toTex = {
			2: '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)'
		};
  
		return dotMultiply;
	}

	exports.name = 'dotMultiply';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm09":564,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"./multiplyScalar":392}],380:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));
		var pow = load(require('./pow'));
		var latex = require('../../utils/latex');

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3);            // returns number 8
   *
   *    var a = [[1, 2], [4, 3]];
   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */
		var dotPow = typed('dotPow', {
    
			'any, any': pow,
    
			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse .^ sparse
						c = algorithm07(x, y, pow, false);
						break;
					default:
						// sparse .^ dense
						c = algorithm03(y, x, pow, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense .^ sparse
						c = algorithm03(x, y, pow, false);
						break;
					default:
						// dense .^ dense
						c = algorithm13(x, y, pow);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return dotPow(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return dotPow(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return dotPow(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, dotPow, false);
					break;
				default:
					c = algorithm14(x, y, dotPow, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, dotPow, true);
					break;
				default:
					c = algorithm14(y, x, dotPow, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, dotPow, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, dotPow, true).valueOf();
			}
		});

		dotPow.toTex = {
			2: '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)'
		};
  
		return dotPow;
	}

	exports.name = 'dotPow';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"./pow":395}],381:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2);                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2);          // returns number 7.3890560989306495
   *    math.log(math.exp(2));        // returns number 2
   *
   *    math.exp([1, 2, 3]);
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
		var exp = typed('exp', {
			'number': Math.exp,

			'Complex': function (x) {
				return x.exp();
			},

			'BigNumber': function (x) {
				return x.exp();
			},

			'Array | Matrix': function (x) {
				// TODO: exp(sparse) should return a dense matrix since exp(0)==1
				return deepMap(x, exp);
			}
		});

		exp.toTex = {1: '\\exp\\left(${args[0]}\\right)'};

		return exp;
	}

	exports.name = 'exp';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],382:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2);                // returns number 3
   *    math.fix(3.8);                // returns number 3
   *    math.fix(-4.2);               // returns number -4
   *    math.fix(-4.7);               // returns number -4
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.fix(c);                  // returns Complex 3 - 2i
   *
   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
		var fix = typed('fix', {
			'number': function (x) {
				return (x > 0) ? Math.floor(x) : Math.ceil(x);
			},

			'Complex': function (x) {
				return new type.Complex(
					(x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),
					(x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)
				);
			},

			'BigNumber': function (x) {
				return x.isNegative() ? x.ceil() : x.floor();
			},

			'Fraction': function (x) {
				return x.s < 0 ? x.ceil() : x.floor();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since fix(0) = 0
				return deepMap(x, fix, true);
			}
		});

		fix.toTex = {1: '\\mathrm{${name}}\\left(${args[0]}\\right)'};

		return fix;
	}

	exports.name = 'fix';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],383:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *
   * Examples:
   *
   *    math.floor(3.2);              // returns number 3
   *    math.floor(3.8);              // returns number 3
   *    math.floor(-4.2);             // returns number -5
   *    math.floor(-4.7);             // returns number -5
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.floor(c);                // returns Complex 3 - 3i
   *
   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
		var floor = typed('floor', {
			'number': Math.floor,

			'Complex': function (x) {
				return x.floor();
			},

			'BigNumber': function (x) {
				return x.floor();
			},

			'Fraction': function (x) {
				return x.floor();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since floor(0) = 0
				return deepMap(x, floor, true);
			}
		});

		floor.toTex = {1: '\\left\\lfloor${args[0]}\\right\\rfloor'};

		return floor;
	}

	exports.name = 'floor';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],384:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12);              // returns 4
   *    math.gcd(-4, 6);              // returns 2
   *    math.gcd(25, 15, -10);        // returns 5
   *
   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */
		var gcd = typed('gcd', {

			'number, number': _gcd,

			'BigNumber, BigNumber': _gcdBigNumber,

			'Fraction, Fraction': function (x, y) {
				return x.gcd(y);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm04(x, y, gcd);
						break;
					default:
						// sparse + dense
						c = algorithm01(y, x, gcd, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm01(x, y, gcd, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, gcd);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return gcd(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return gcd(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return gcd(x, matrix(y));
			},
    
			'Matrix, number | BigNumber': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm10(x, y, gcd, false);
					break;
				default:
					c = algorithm14(x, y, gcd, false);
					break;
				}
				return c;
			},

			'number | BigNumber, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm10(y, x, gcd, true);
					break;
				default:
					c = algorithm14(y, x, gcd, true);
					break;
				}
				return c;
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, gcd, false).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, gcd, true).valueOf();
			},

			// TODO: need a smarter notation here
			'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
				var res = gcd(a, b);
				for (var i = 0; i < args.length; i++) {
					res = gcd(res, args[i]);
				}
				return res;
			}
		});

		gcd.toTex = '\\gcd\\left(${args}\\right)';

		return gcd;

		/**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */
		function _gcdBigNumber(a, b) {
			if (!a.isInt() || !b.isInt()) {
				throw new Error('Parameters in function gcd must be integer numbers');
			}

			// http://en.wikipedia.org/wiki/Euclidean_algorithm
			var zero = new type.BigNumber(0);
			while (!b.isZero()) {
				var r = a.mod(b);
				a = b;
				b = r;
			}
			return a.lt(zero) ? a.neg() : a;
		}
	}

	/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 * @private
 */
	function _gcd(a, b) {
		if (!isInteger(a) || !isInteger(b)) {
			throw new Error('Parameters in function gcd must be integer numbers');
		}

		// http://en.wikipedia.org/wiki/Euclidean_algorithm
		var r;
		while (b != 0) {
			r = a % b;
			a = b;
			b = r;
		}
		return (a < 0) ? -a : a;
	}

	exports.name = 'gcd';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm04":559,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/number":603}],385:[function(require,module,exports){
	'use strict';

	var flatten = require('../../utils/array').flatten;

	function factory (type, config, load, typed) {
		var abs = load(require('./abs'));
		var add = load(require('./addScalar'));
		var divide = load(require('./divideScalar'));
		var multiply = load(require('./multiplyScalar'));
		var sqrt = load(require('./sqrt'));
		var smaller = load(require('../relational/smaller'));
		var isPositive = load(require('../utils/isPositive'));

		/**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4);      // 5
   *     math.hypot(3, 4, 5);   // 7.0710678118654755
   *     math.hypot([3, 4, 5]); // 7.0710678118654755
   *     math.hypot(-2);        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber} args
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
		var hypot = typed('hypot', {
			'... number | BigNumber': _hypot,

			'Array': function (x) {
				return hypot.apply(hypot, flatten(x));
			},

			'Matrix': function (x) {
				return hypot.apply(hypot, flatten(x.toArray()));
			}
		});

		/**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */
		function _hypot (args) {
			// code based on `hypot` from es6-shim:
			// https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
			var result = 0;
			var largest = 0;

			for (var i = 0; i < args.length; i++) {
				var value = abs(args[i]);
				if (smaller(largest, value)) {
					result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
					result = add(result, 1);
					largest = value;
				} else {
					result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
				}
			}

			return multiply(largest, sqrt(result));
		}

		hypot.toTex = '\\hypot\\left(${args}\\right)';

		return hypot;
	}

	exports.name = 'hypot';
	exports.factory = factory;

},{"../../utils/array":581,"../relational/smaller":472,"../utils/isPositive":523,"./abs":370,"./addScalar":372,"./divideScalar":377,"./multiplyScalar":392,"./sqrt":398}],386:[function(require,module,exports){
	module.exports = [
		require('./abs'),
		require('./add'),
		require('./addScalar'),
		require('./cbrt'),
		require('./ceil'),
		require('./cube'),
		require('./divide'),
		require('./dotDivide'),
		require('./dotMultiply'),
		require('./dotPow'),
		require('./exp'),
		require('./fix'),
		require('./floor'),
		require('./gcd'),
		require('./hypot'),
		require('./lcm'),
		require('./log'),
		require('./log10'),
		require('./mod'),
		require('./multiply'),
		require('./norm'),
		require('./nthRoot'),
		require('./pow'),
		require('./round'),
		require('./sign'),
		require('./sqrt'),
		require('./square'),
		require('./subtract'),
		require('./unaryMinus'),
		require('./unaryPlus'),
		require('./xgcd')
	];

},{"./abs":370,"./add":371,"./addScalar":372,"./cbrt":373,"./ceil":374,"./cube":375,"./divide":376,"./dotDivide":378,"./dotMultiply":379,"./dotPow":380,"./exp":381,"./fix":382,"./floor":383,"./gcd":384,"./hypot":385,"./lcm":387,"./log":388,"./log10":389,"./mod":390,"./multiply":391,"./norm":393,"./nthRoot":394,"./pow":395,"./round":396,"./sign":397,"./sqrt":398,"./square":399,"./subtract":400,"./unaryMinus":401,"./unaryPlus":402,"./xgcd":403}],387:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6);               // returns 12
   *    math.lcm(6, 21);              // returns 42
   *    math.lcm(6, 21, 5);           // returns 210
   *
   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */
		var lcm = typed('lcm', {
			'number, number': _lcm,

			'BigNumber, BigNumber': _lcmBigNumber,

			'Fraction, Fraction': function (x, y) {

				return x.lcm(y);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm06(x, y, lcm);
						break;
					default:
						// sparse + dense
						c = algorithm02(y, x, lcm, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm02(x, y, lcm, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, lcm);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return lcm(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return lcm(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return lcm(x, matrix(y));
			},

			'Matrix, number | BigNumber': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, lcm, false);
					break;
				default:
					c = algorithm14(x, y, lcm, false);
					break;
				}
				return c;
			},

			'number | BigNumber, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm11(y, x, lcm, true);
					break;
				default:
					c = algorithm14(y, x, lcm, true);
					break;
				}
				return c;
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, lcm, false).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, lcm, true).valueOf();
			},

			// TODO: need a smarter notation here
			'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
				var res = lcm(a, b);
				for (var i = 0; i < args.length; i++) {
					res = lcm(res, args[i]);
				}
				return res;
			}
		});

		lcm.toTex = undefined;  // use default template

		return lcm;

		/**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */
		function _lcmBigNumber(a, b) {
			if (!a.isInt() || !b.isInt()) {
				throw new Error('Parameters in function lcm must be integer numbers');
			}

			if (a.isZero() || b.isZero()) {
				return new type.BigNumber(0);
			}

			// http://en.wikipedia.org/wiki/Euclidean_algorithm
			// evaluate lcm here inline to reduce overhead
			var prod = a.times(b);
			while (!b.isZero()) {
				var t = b;
				b = a.mod(t);
				a = t;
			}
			return prod.div(a).abs();
		}
	}

	/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 * @private
 */
	function _lcm (a, b) {
		if (!isInteger(a) || !isInteger(b)) {
			throw new Error('Parameters in function lcm must be integer numbers');
		}

		if (a == 0 || b == 0) {
			return 0;
		}

		// http://en.wikipedia.org/wiki/Euclidean_algorithm
		// evaluate lcm here inline to reduce overhead
		var t;
		var prod = a * b;
		while (b != 0) {
			t = b;
			b = a % t;
			a = t;
		}
		return Math.abs(prod / a);
	}

	exports.name = 'lcm';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm06":561,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/number":603}],388:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var divideScalar = load(require('./divideScalar'));

		/**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5);                  // returns 1.252762968495368
   *    math.exp(math.log(2.4));        // returns 2.4
   *
   *    math.pow(10, 4);                // returns 10000
   *    math.log(10000, 10);            // returns 4
   *    math.log(10000) / math.log(10); // returns 4
   *
   *    math.log(1024, 2);              // returns 10
   *    math.pow(2, 10);                // returns 1024
   *
   * See also:
   *
   *    exp, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
		var log = typed('log', {
			'number': function (x) {
				if (x >= 0 || config.predictable) {
					return Math.log(x);
				}
				else {
					// negative value -> complex value computation
					return new type.Complex(x, 0).log();
				}
			},

			'Complex': function (x) {
				return x.log();
			},

			'BigNumber': function (x) {
				if (!x.isNegative() || config.predictable) {
					return x.ln();
				}
				else {
					// downgrade to number, return Complex valued result
					return new type.Complex(x.toNumber(), 0).log();
				}
			},

			'Array | Matrix': function (x) {
				return deepMap(x, log);
			},

			'any, any': function (x, base) {
				// calculate logarithm for a specified base, log(x, base)
				return divideScalar(log(x), log(base));
			}
		});

		log.toTex = {
			1: '\\ln\\left(${args[0]}\\right)',
			2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
		};

		return log;
	}

	exports.name = 'log';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"./divideScalar":377}],389:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001);            // returns -5
   *    math.log10(10000);              // returns 4
   *    math.log(10000) / math.log(10); // returns 4
   *    math.pow(10, 4);                // returns 10000
   *
   * See also:
   *
   *    exp, log
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
		var log10 = typed('log10', {
			'number': function (x) {
				if (x >= 0 || config.predictable) {
					return _log10(x);
				}
				else {
					// negative value -> complex value computation
					return new type.Complex(x, 0).log().div(Math.LN10);
				}
			},

			'Complex': function (x) {
				return new type.Complex(x).log().div(Math.LN10);
			},

			'BigNumber': function (x) {
				if (!x.isNegative() || config.predictable) {
					return x.log();
				}
				else {
					// downgrade to number, return Complex valued result
					return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
				}
			},

			'Array | Matrix': function (x) {
				return deepMap(x, log10);
			}
		});

		log10.toTex = {1: '\\log_{10}\\left(${args[0]}\\right)'};

		return log10;
	}

	/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 * @private
 */
	var _log10 = Math.log10 || function (x) {
		return Math.log(x) / Math.LN10;
	};

	exports.name = 'log10';
	exports.factory = factory;


},{"../../utils/collection/deepMap":595}],390:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));
		var latex = require('../../utils/latex');

		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See http://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3);                // returns 2
   *    math.mod(11, 2);               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0;
   *    }
   *
   *    isOdd(2);                      // returns false
   *    isOdd(3);                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */
		var mod = typed('mod', {

			'number, number': _mod,

			'BigNumber, BigNumber': function (x, y) {
				return y.isZero() ? x : x.mod(y);
			},

			'Fraction, Fraction': function (x, y) {
				return x.mod(y);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// mod(sparse, sparse)
						c = algorithm05(x, y, mod, false);
						break;
					default:
						// mod(sparse, dense)
						c = algorithm02(y, x, mod, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// mod(dense, sparse)
						c = algorithm03(x, y, mod, false);
						break;
					default:
						// mod(dense, dense)
						c = algorithm13(x, y, mod);
						break;
					}
					break;
				}
				return c;
			},
    
			'Array, Array': function (x, y) {
				// use matrix implementation
				return mod(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return mod(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return mod(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, mod, false);
					break;
				default:
					c = algorithm14(x, y, mod, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, mod, true);
					break;
				default:
					c = algorithm14(y, x, mod, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, mod, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, mod, true).valueOf();
			}
		});

		mod.toTex = {
			2: '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)'
		};

		return mod;

		/**
   * Calculate the modulus of two numbers
   * @param {number} x
   * @param {number} y
   * @returns {number} res
   * @private
   */
		function _mod(x, y) {
			if (y > 0) {
				// We don't use JavaScript's % operator here as this doesn't work
				// correctly for x < 0 and x == 0
				// see http://en.wikipedia.org/wiki/Modulo_operation
				return x - y * Math.floor(x / y);
			}
			else if (y === 0) {
				return x;
			}
			else { // y < 0
				// TODO: implement mod for a negative divisor
				throw new Error('Cannot calculate mod for a negative divisor');
			}
		}
	}

	exports.name = 'mod';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm05":560,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602}],391:[function(require,module,exports){
	'use strict';

	var extend = require('../../utils/object').extend;
	var array = require('../../utils/array');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));
		var addScalar = load(require('./addScalar'));
		var multiplyScalar = load(require('./multiplyScalar'));
		var equalScalar = load(require('../relational/equalScalar'));

		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		var DenseMatrix = type.DenseMatrix;
		var SparseMatrix = type.SparseMatrix;

		/**
   * Multiply two values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2);        // returns number 20.8
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(4, 1);
   *    math.multiply(a, b);          // returns Complex 5 + 14i
   *
   *    var c = [[1, 2], [4, 3]];
   *    var d = [[1, 2, 3], [3, -4, 7]];
   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    var e = math.unit('2.1 km');
   *    math.multiply(3, e);          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */
		var multiply = typed('multiply', extend({
			// we extend the signatures of multiplyScalar with signatures dealing with matrices

			'Array, Array': function (x, y) {
				// check dimensions
				_validateMatrixDimensions(array.size(x), array.size(y));

				// use dense matrix implementation
				var m = multiply(matrix(x), matrix(y));
				// return array or scalar
				return (m && m.isMatrix === true) ? m.valueOf() : m;
			},

			'Matrix, Matrix': function (x, y) {
				// dimensions
				var xsize = x.size();
				var ysize = y.size();

				// check dimensions
				_validateMatrixDimensions(xsize, ysize);

				// process dimensions
				if (xsize.length === 1) {
					// process y dimensions
					if (ysize.length === 1) {
						// Vector * Vector
						return _multiplyVectorVector(x, y, xsize[0]);
					}
					// Vector * Matrix
					return _multiplyVectorMatrix(x, y);
				}
				// process y dimensions
				if (ysize.length === 1) {
					// Matrix * Vector
					return _multiplyMatrixVector(x, y);
				}
				// Matrix * Matrix
				return _multiplyMatrixMatrix(x, y);
			},

			'Matrix, Array': function (x, y) {
				// use Matrix * Matrix implementation
				return multiply(x, matrix(y));
			},

			'Array, Matrix': function (x, y) {
				// use Matrix * Matrix implementation
				return multiply(matrix(x, y.storage()), y);
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
      
				// process storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, multiplyScalar, false);
					break;
				case 'dense':
					c = algorithm14(x, y, multiplyScalar, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm11(y, x, multiplyScalar, true);
					break;
				case 'dense':
					c = algorithm14(y, x, multiplyScalar, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
			}
		}, multiplyScalar.signatures));

		var _validateMatrixDimensions = function (size1, size2) {
			// check left operand dimensions
			switch (size1.length) {
			case 1:
				// check size2
				switch (size2.length) {
				case 1:
					// Vector x Vector
					if (size1[0] !== size2[0]) {
						// throw error
						throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
					}
					break;
				case 2:
					// Vector x Matrix
					if (size1[0] !== size2[0]) {
						// throw error
						throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
					}
					break;
				default:
					throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
				}
				break;
			case 2:
				// check size2
				switch (size2.length) {
				case 1:
					// Matrix x Vector
					if (size1[1] !== size2[0]) {
						// throw error
						throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
					}
					break;
				case 2:
					// Matrix x Matrix
					if (size1[1] !== size2[0]) {
						// throw error
						throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
					}
					break;
				default:
					throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
				}
				break;
			default:
				throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
			}
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */
		var _multiplyVectorVector = function (a, b, n) {
			// check empty vector
			if (n === 0)
				throw new Error('Cannot multiply two empty vectors');

			// a dense
			var adata = a._data;
			var adt = a._datatype;
			// b dense
			var bdata = b._data;
			var bdt = b._datatype;

			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
			}
    
			// result (do not initialize it with zero)
			var c = mf(adata[0], bdata[0]);
			// loop data
			for (var i = 1; i < n; i++) {
				// multiply and accumulate
				c = af(c, mf(adata[i], bdata[i]));
			}
			return c;
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */
		var _multiplyVectorMatrix = function (a, b) {
			// process storage
			switch (b.storage()) {
			case 'dense':
				return _multiplyVectorDenseMatrix(a, b);
			}
			throw new Error('Not implemented');
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */
		var _multiplyVectorDenseMatrix = function (a, b) {
			// a dense
			var adata = a._data;
			var asize = a._size;
			var adt = a._datatype;
			// b dense
			var bdata = b._data;
			var bsize = b._size;
			var bdt = b._datatype;
			// rows & columns
			var alength = asize[0];
			var bcolumns = bsize[1];

			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
			}

			// result
			var c = [];

			// loop matrix columns
			for (var j = 0; j < bcolumns; j++) {
				// sum (do not initialize it with zero)
				var sum = mf(adata[0], bdata[0][j]);      
				// loop vector
				for (var i = 1; i < alength; i++) {
					// multiply & accumulate
					sum = af(sum, mf(adata[i], bdata[i][j]));
				}
				c[j] = sum;
			}

			// return matrix
			return new DenseMatrix({
				data: c,
				size: [bcolumns],
				datatype: dt
			});
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */
		var _multiplyMatrixVector = function (a, b) {
			// process storage
			switch (a.storage()) {
			case 'dense':
				return _multiplyDenseMatrixVector(a, b);
			case 'sparse':
				return _multiplySparseMatrixVector(a, b);
			}
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */
		var _multiplyMatrixMatrix = function (a, b) {
			// process storage
			switch (a.storage()) {
			case 'dense':
				// process storage
				switch (b.storage()) {
				case 'dense':
					return _multiplyDenseMatrixDenseMatrix(a, b);
				case 'sparse':
					return _multiplyDenseMatrixSparseMatrix(a, b);
				}
				break;
			case 'sparse':
				// process storage
				switch (b.storage()) {
				case 'dense':
					return _multiplySparseMatrixDenseMatrix(a, b);
				case 'sparse':
					return _multiplySparseMatrixSparseMatrix(a, b);
				}
				break;
			}
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M) 
   */ 
		var _multiplyDenseMatrixVector = function (a, b) {
			// a dense
			var adata = a._data;
			var asize = a._size;
			var adt = a._datatype;
			// b dense
			var bdata = b._data;
			var bdt = b._datatype;
			// rows & columns
			var arows = asize[0];
			var acolumns = asize[1];

			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
			}

			// result
			var c = [];

			// loop matrix a rows
			for (var i = 0; i < arows; i++) {
				// current row
				var row = adata[i];
				// sum (do not initialize it with zero)
				var sum = mf(row[0], bdata[0]);
				// loop matrix a columns
				for (var j = 1; j < acolumns; j++) {
					// multiply & accumulate
					sum = af(sum, mf(row[j], bdata[j]));
				}
				c[i] = sum;
			}

			// return matrix
			return new DenseMatrix({
				data: c,
				size: [arows],
				datatype: dt
			});
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */
		var _multiplyDenseMatrixDenseMatrix = function (a, b) {
			// a dense
			var adata = a._data;
			var asize = a._size;
			var adt = a._datatype;
			// b dense
			var bdata = b._data;
			var bsize = b._size;
			var bdt = b._datatype;
			// rows & columns
			var arows = asize[0];
			var acolumns = asize[1];
			var bcolumns = bsize[1];

			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
			}
    
			// result
			var c = [];

			// loop matrix a rows
			for (var i = 0; i < arows; i++) {
				// current row
				var row = adata[i];
				// initialize row array
				c[i] = [];
				// loop matrix b columns
				for (var j = 0; j < bcolumns; j++) {
					// sum (avoid initializing sum to zero)
					var sum = mf(row[0], bdata[0][j]);
					// loop matrix a columns
					for (var x = 1; x < acolumns; x++) {
						// multiply & accumulate
						sum = af(sum, mf(row[x], bdata[x][j]));
					}
					c[i][j] = sum;
				}
			}

			// return matrix
			return new DenseMatrix({
				data: c,
				size: [arows, bcolumns],
				datatype: dt
			});
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */
		var _multiplyDenseMatrixSparseMatrix = function (a, b) {
			// a dense
			var adata = a._data;
			var asize = a._size;
			var adt = a._datatype;
			// b sparse
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			var bsize = b._size;
			var bdt = b._datatype;
			// validate b matrix
			if (!bvalues)
				throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
			// rows & columns
			var arows = asize[0];
			var bcolumns = bsize[1];
    
			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;
			// equalScalar signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
			}

			// result
			var cvalues = [];
			var cindex = [];
			var cptr = [];
			// c matrix
			var c = new SparseMatrix({
				values : cvalues,
				index: cindex,
				ptr: cptr,
				size: [arows, bcolumns],
				datatype: dt
			});

			// loop b columns
			for (var jb = 0; jb < bcolumns; jb++) {
				// update ptr
				cptr[jb] = cindex.length;
				// indeces in column jb
				var kb0 = bptr[jb];
				var kb1 = bptr[jb + 1];
				// do not process column jb if no data exists
				if (kb1 > kb0) {
					// last row mark processed
					var last = 0;
					// loop a rows
					for (var i = 0; i < arows; i++) {
						// column mark
						var mark = i + 1;
						// C[i, jb]
						var cij;
						// values in b column j
						for (var kb = kb0; kb < kb1; kb++) {
							// row
							var ib = bindex[kb];
							// check value has been initialized
							if (last !== mark) {
								// first value in column jb
								cij = mf(adata[i][ib], bvalues[kb]);
								// update mark
								last = mark;
							}
							else {
								// accumulate value
								cij = af(cij, mf(adata[i][ib], bvalues[kb]));
							}
						}
						// check column has been processed and value != 0
						if (last === mark && !eq(cij, zero)) {
							// push row & value
							cindex.push(i);
							cvalues.push(cij);
						}
					}
				}
			}
			// update ptr
			cptr[bcolumns] = cindex.length;

			// return sparse matrix
			return c;
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1) 
   */
		var _multiplySparseMatrixVector = function (a, b) {
			// a sparse
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var adt = a._datatype;
			// validate a matrix
			if (!avalues)
				throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
			// b dense
			var bdata = b._data;
			var bdt = b._datatype;
			// rows & columns
			var arows = a._size[0];
			var brows = b._size[0];
			// result
			var cvalues = [];
			var cindex = [];
			var cptr = [];
    
			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;
			// equalScalar signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
			}

			// workspace
			var x = [];
			// vector with marks indicating a value x[i] exists in a given column
			var w = [];

			// update ptr
			cptr[0] = 0;
			// rows in b
			for (var ib = 0; ib < brows; ib++) {
				// b[ib]
				var vbi = bdata[ib];
				// check b[ib] != 0, avoid loops
				if (!eq(vbi, zero)) {
					// A values & index in ib column
					for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
						// a row
						var ia = aindex[ka];
						// check value exists in current j
						if (!w[ia]) {
							// ia is new entry in j
							w[ia] = true;
							// add i to pattern of C
							cindex.push(ia);
							// x(ia) = A
							x[ia] = mf(vbi, avalues[ka]);
						}
						else {
							// i exists in C already
							x[ia] = af(x[ia], mf(vbi, avalues[ka]));
						}
					}
				}
			}
			// copy values from x to column jb of c
			for (var p1 = cindex.length, p = 0; p < p1; p++) {
				// row
				var ic = cindex[p];
				// copy value
				cvalues[p] = x[ic];
			}
			// update ptr
			cptr[1] = cindex.length;

			// return sparse matrix
			return new SparseMatrix({
				values : cvalues,
				index: cindex,
				ptr: cptr,
				size: [arows, 1],
				datatype: dt
			});
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */
		var _multiplySparseMatrixDenseMatrix = function (a, b) {
			// a sparse
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var adt = a._datatype;
			// validate a matrix
			if (!avalues)
				throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
			// b dense
			var bdata = b._data;
			var bdt = b._datatype;
			// rows & columns
			var arows = a._size[0];
			var brows = b._size[0];
			var bcolumns = b._size[1];

			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;
			// equalScalar signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
			}

			// result
			var cvalues = [];
			var cindex = [];
			var cptr = [];
			// c matrix
			var c = new SparseMatrix({
				values : cvalues,
				index: cindex,
				ptr: cptr,
				size: [arows, bcolumns],
				datatype: dt
			});

			// workspace
			var x = [];
			// vector with marks indicating a value x[i] exists in a given column
			var w = [];

			// loop b columns
			for (var jb = 0; jb < bcolumns; jb++) {
				// update ptr
				cptr[jb] = cindex.length;
				// mark in workspace for current column
				var mark = jb + 1;
				// rows in jb
				for (var ib = 0; ib < brows; ib++) {
					// b[ib, jb]
					var vbij = bdata[ib][jb];
					// check b[ib, jb] != 0, avoid loops
					if (!eq(vbij, zero)) {
						// A values & index in ib column
						for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
							// a row
							var ia = aindex[ka];
							// check value exists in current j
							if (w[ia] !== mark) {
								// ia is new entry in j
								w[ia] = mark;
								// add i to pattern of C
								cindex.push(ia);
								// x(ia) = A
								x[ia] = mf(vbij, avalues[ka]);
							}
							else {
								// i exists in C already
								x[ia] = af(x[ia], mf(vbij, avalues[ka]));
							}
						}
					}
				}
				// copy values from x to column jb of c
				for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
					// row
					var ic = cindex[p];
					// copy value
					cvalues[p] = x[ic];
				}
			}
			// update ptr
			cptr[bcolumns] = cindex.length;

			// return sparse matrix
			return c;
		};

		/**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */
		var _multiplySparseMatrixSparseMatrix = function (a, b) {
			// a sparse
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var adt = a._datatype;
			// b sparse
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			var bdt = b._datatype;
    
			// rows & columns
			var arows = a._size[0];
			var bcolumns = b._size[1];
			// flag indicating both matrices (a & b) contain data
			var values = avalues && bvalues;

			// datatype
			var dt;
			// addScalar signature to use
			var af = addScalar;
			// multiplyScalar signature to use
			var mf = multiplyScalar;

			// process data types
			if (adt && bdt && adt === bdt && typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signatures that matches (dt, dt)
				af = typed.find(addScalar, [dt, dt]);
				mf = typed.find(multiplyScalar, [dt, dt]);
			}
    
			// result
			var cvalues = values ? [] : undefined;
			var cindex = [];
			var cptr = [];
			// c matrix
			var c = new SparseMatrix({
				values : cvalues,
				index: cindex,
				ptr: cptr,
				size: [arows, bcolumns],
				datatype: dt
			});

			// workspace
			var x = values ? [] : undefined;
			// vector with marks indicating a value x[i] exists in a given column
			var w = [];
			// variables
			var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
			// loop b columns
			for (var jb = 0; jb < bcolumns; jb++) {
				// update ptr
				cptr[jb] = cindex.length;
				// mark in workspace for current column
				var mark = jb + 1;
				// B values & index in j
				for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
					// b row
					ib = bindex[kb];
					// check we need to process values
					if (values) {
						// loop values in a[:,ib]
						for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
							// row
							ia = aindex[ka];
							// check value exists in current j
							if (w[ia] !== mark) {
								// ia is new entry in j
								w[ia] = mark;
								// add i to pattern of C
								cindex.push(ia);
								// x(ia) = A
								x[ia] = mf(bvalues[kb], avalues[ka]);
							}
							else {
								// i exists in C already
								x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
							}
						}
					}
					else {
						// loop values in a[:,ib]
						for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
							// row
							ia = aindex[ka];
							// check value exists in current j
							if (w[ia] !== mark) {
								// ia is new entry in j
								w[ia] = mark;
								// add i to pattern of C
								cindex.push(ia);
							}
						}
					}
				}
				// check we need to process matrix values (pattern matrix)
				if (values) {
					// copy values from x to column jb of c
					for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
						// row
						var ic = cindex[p];
						// copy value
						cvalues[p] = x[ic];
					}
				}
			}
			// update ptr
			cptr[bcolumns] = cindex.length;

			// return sparse matrix
			return c;
		};

		multiply.toTex = {
			2: '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)'
		};

		return multiply;
	}

	exports.name = 'multiply';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm14":569,"../../utils/array":581,"../../utils/latex":602,"../../utils/object":604,"../relational/equalScalar":468,"./addScalar":372,"./multiplyScalar":392}],392:[function(require,module,exports){
	'use strict';

	function factory(type, config, load, typed) {
  
		/**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
   * @private
   */
		var multiplyScalar = typed('multiplyScalar', {

			'number, number': function (x, y) {
				return x * y;
			},

			'Complex, Complex': function (x, y) {
				return x.mul(y);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.times(y);
			},

			'Fraction, Fraction': function (x, y) {
				return x.mul(y);
			},

			'number | Fraction | BigNumber | Complex, Unit': function (x, y) {
				var res = y.clone();
				res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);
				return res;
			},

			'Unit, number | Fraction | BigNumber | Complex': function (x, y) {
				var res = x.clone();
				res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);
				return res;
			},

			'Unit, Unit': function (x, y) {
				return x.multiply(y);
			}

		});

		return multiplyScalar;
	}

	exports.factory = factory;

},{}],393:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
  
		var abs         = load(require('../arithmetic/abs'));
		var add         = load(require('../arithmetic/add'));
		var pow         = load(require('../arithmetic/pow'));
		var sqrt        = load(require('../arithmetic/sqrt'));
		var multiply    = load(require('../arithmetic/multiply'));
		var equalScalar = load(require('../relational/equalScalar'));
		var larger      = load(require('../relational/larger'));
		var smaller     = load(require('../relational/smaller'));
		var matrix      = load(require('../../type/matrix/function/matrix'));
		var trace       = load(require('../matrix/trace'));
		var transpose   = load(require('../matrix/transpose'));


		/**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5);                         // returns 3.5
   *    math.norm(-3.5);                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4));         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity);        // returns 3
   *    math.norm([1, 2, -3], -Infinity);       // returns 1
   *
   *    math.norm([3, 4], 2);                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
		var norm = typed('norm', {
			'number': Math.abs,

			'Complex': function (x) {
				return x.abs();
			},

			'BigNumber': function (x) {
				// norm(x) = abs(x)
				return x.abs();
			},
    
			'boolean | null' : function (x) {
				// norm(x) = abs(x)
				return Math.abs(x);
			},

			'Array': function (x) {
				return _norm(matrix(x), 2);
			},
    
			'Matrix': function (x) {
				return _norm(x, 2);
			},

			'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {
				// ignore second parameter, TODO: remove the option of second parameter for these types
				return norm(x);
			},

			'Array, number | BigNumber | string': function (x, p) {
				return _norm(matrix(x), p);
			},
    
			'Matrix, number | BigNumber | string': function (x, p) {
				return _norm(x, p);
			}
		});

		/**
   * Calculate the norm for an array
   * @param {Array} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */
		function _norm (x, p) {
			// size
			var sizeX = x.size();
    
			// check if it is a vector
			if (sizeX.length == 1) {
				// check p
				if (p === Number.POSITIVE_INFINITY || p === 'inf') {
					// norm(x, Infinity) = max(abs(x))
					var pinf = 0;
					// skip zeros since abs(0) == 0
					x.forEach(
						function (value) {
							var v = abs(value);
							if (larger(v, pinf))
								pinf = v;
						},
						true);
					return pinf;
				}
				if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
					// norm(x, -Infinity) = min(abs(x))
					var ninf;
					// skip zeros since abs(0) == 0
					x.forEach(
						function (value) {
							var v = abs(value);
							if (!ninf || smaller(v, ninf))
								ninf = v;
						},
						true);
					return ninf || 0;
				}
				if (p === 'fro') {
					return _norm(x, 2);
				}
				if (typeof p === 'number' && !isNaN(p)) {
					// check p != 0
					if (!equalScalar(p, 0)) {
						// norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
						var n = 0;
						// skip zeros since abs(0) == 0
						x.forEach(
							function (value) {
								n = add(pow(abs(value), p), n);
							},
							true);
						return pow(n, 1 / p);
					}
					return Number.POSITIVE_INFINITY;
				}
				// invalid parameter value
				throw new Error('Unsupported parameter value');
			}
			// MxN matrix
			if (sizeX.length == 2) {
				// check p
				if (p === 1) {
					// norm(x) = the largest column sum
					var c = [];
					// result
					var maxc = 0;
					// skip zeros since abs(0) == 0
					x.forEach(
						function (value, index) {
							var j = index[1];
							var cj = add(c[j] || 0, abs(value));
							if (larger(cj, maxc))
								maxc = cj;
							c[j] = cj;
						},
						true);
					return maxc;
				}
				if (p === Number.POSITIVE_INFINITY || p === 'inf') {
					// norm(x) = the largest row sum
					var r = [];
					// result
					var maxr = 0;
					// skip zeros since abs(0) == 0
					x.forEach(
						function (value, index) {
							var i = index[0];
							var ri = add(r[i] || 0, abs(value));
							if (larger(ri, maxr))
								maxr = ri;
							r[i] = ri;
						},
						true);
					return maxr;
				}
				if (p === 'fro') {
					// norm(x) = sqrt(sum(diag(x'x)))
					return sqrt(trace(multiply(transpose(x), x)));
				}
				if (p === 2) {
					// not implemented
					throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
				}
				// invalid parameter value
				throw new Error('Unsupported parameter value');
			}
		}

		norm.toTex = {
			1: '\\left\\|${args[0]}\\right\\|',
			2: undefined  // use default template
		};

		return norm;
	}

	exports.name = 'norm';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../arithmetic/abs":370,"../arithmetic/add":371,"../arithmetic/multiply":391,"../arithmetic/pow":395,"../arithmetic/sqrt":398,"../matrix/trace":451,"../matrix/transpose":452,"../relational/equalScalar":468,"../relational/larger":470,"../relational/smaller":472}],394:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9
   *     math.sqrt(9);          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */
		var nthRoot = typed('nthRoot', {
    
			'number': function (x) {
				return _nthRoot(x, 2);
			},
			'number, number': _nthRoot,

			'BigNumber': function (x) {
				return _bigNthRoot(x, new type.BigNumber(2));
			},
			'Complex' : function(x) {
				return _nthComplexRoot(x, 2);
			}, 
			'Complex, number' : _nthComplexRoot,
			'BigNumber, BigNumber': _bigNthRoot,

			'Array | Matrix': function (x) {
				return nthRoot(x, 2);
			},
    
			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// density must be one (no zeros in matrix)
						if (y.density() === 1) {
							// sparse + sparse
							c = algorithm06(x, y, nthRoot);
						}
						else {
							// throw exception
							throw new Error('Root must be non-zero');
						}
						break;
					default:
						// sparse + dense
						c = algorithm02(y, x, nthRoot, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// density must be one (no zeros in matrix)
						if (y.density() === 1) {
							// dense + sparse
							c = algorithm01(x, y, nthRoot, false);
						}
						else {
							// throw exception
							throw new Error('Root must be non-zero');
						}
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, nthRoot);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return nthRoot(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return nthRoot(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return nthRoot(x, matrix(y));
			},
    
			'Matrix, number | BigNumber': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, nthRoot, false);
					break;
				default:
					c = algorithm14(x, y, nthRoot, false);
					break;
				}
				return c;
			},

			'number | BigNumber, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					// density must be one (no zeros in matrix)
					if (y.density() === 1) {
						// sparse - scalar
						c = algorithm11(y, x, nthRoot, true);
					}
					else {
						// throw exception
						throw new Error('Root must be non-zero');
					}
					break;
				default:
					c = algorithm14(y, x, nthRoot, true);
					break;
				}
				return c;
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return nthRoot(matrix(x), y).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return nthRoot(x, matrix(y)).valueOf();
			}
		});

		nthRoot.toTex = {2: '\\sqrt[${args[1]}]{${args[0]}}'};

		return nthRoot;

		/**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * http://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */
		function _bigNthRoot(a, root) {
			var precision = type.BigNumber.precision;
			var Big = type.BigNumber.clone({precision: precision + 2});
			var zero = new type.BigNumber(0);

			var one = new Big(1);
			var inv = root.isNegative();
			if (inv) {
				root = root.neg();
			}

			if (root.isZero()) {
				throw new Error('Root must be non-zero');
			}
			if (a.isNegative() && !root.abs().mod(2).equals(1)) {
				throw new Error('Root must be odd when a is negative.');
			}

			// edge cases zero and infinity
			if (a.isZero()) {
				return inv ? new Big(Infinity) : 0;
			}
			if (!a.isFinite()) {
				return inv ? zero : a;
			}

			var x = a.abs().pow(one.div(root));
			// If a < 0, we require that root is an odd integer,
			// so (-1) ^ (1/root) = -1
			x = a.isNeg() ? x.neg() : x;
			return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
		}
	}

	/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */
	function _nthRoot(a, root) {
		var inv = root < 0;
		if (inv) {
			root = -root;
		}

		if (root === 0) {
			throw new Error('Root must be non-zero');
		}
		if (a < 0 && (Math.abs(root) % 2 != 1)) {
			throw new Error('Root must be odd when a is negative.');
		}

		// edge cases zero and infinity
		if (a == 0) {
			return inv ? Infinity : 0;
		}
		if (!isFinite(a)) {
			return inv ? 0 : a;
		}

		var x = Math.pow(Math.abs(a), 1/root);
		// If a < 0, we require that root is an odd integer,
		// so (-1) ^ (1/root) = -1
		x = a < 0 ? -x : x;
		return inv ? 1 / x : x;

		// Very nice algorithm, but fails with nthRoot(-2, 3).
		// Newton's method has some well-known problems at times:
		// https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
		/*
  var x = 1; // Initial guess
  var xPrev = 1;
  var i = 0;
  var iMax = 10000;
  do {
    var delta = (a / Math.pow(x, root - 1) - x) / root;
    xPrev = x;
    x = x + delta;
    i++;
  }
  while (xPrev !== x && i < iMax);

  if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge');
  }

  return inv ? 1 / x : x;
  */
	}

	/**
 * Calculate the nth root of a Complex Number a using De Moviers Theorem.
 * @param  {Complex} a
 * @param  {number} root
 * @return {Array} array or n Complex Roots in Polar Form.
 */
	function _nthComplexRoot(a, root) {
		if (root < 0) throw new Error('Root must be greater than zero');
		if (root === 0) throw new Error('Root must be non-zero');
		if (root % 1 !== 0) throw new Error('Root must be an integer');  
		var arg = a.arg();
		var abs = a.abs();
		var roots = [];
		var r = Math.pow(abs, 1/root);
		for(var k = 0; k < root; k++) {
			roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});
		}
		return roots;
	}

	exports.name = 'nthRoot';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm06":561,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569}],395:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var size = require('../../utils/array').size;

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');
		var eye = load(require('../matrix/eye'));
		var multiply = load(require('./multiply'));
		var matrix = load(require('../../type/matrix/function/matrix'));
		var fraction = load(require('../../type/fraction/function/fraction'));
		var number = load(require('../../type/number'));

		/**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3);               // returns number 8
   *
   *    var a = math.complex(2, 3);
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    var b = [[1, 2], [4, 3]];
   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                   The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
		var pow = typed('pow', {
			'number, number': _pow,

			'Complex, Complex': function (x, y) {
				return x.pow(y);
			},

			'BigNumber, BigNumber': function (x, y) {
				if (y.isInteger() || x >= 0 || config.predictable) {
					return x.pow(y);
				}
				else {
					return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
				}
			},

			'Fraction, Fraction': function (x, y) {
				if (y.d !== 1) {
					if (config.predictable) {
						throw new Error('Function pow does not support non-integer exponents for fractions.');
					}
					else {
						return _pow(x.valueOf(), y.valueOf());
					}
				}
				else {
					return x.pow(y);
				}
			},

			'Array, number': _powArray,

			'Array, BigNumber': function (x, y) {
				return _powArray(x, y.toNumber());
			},

			'Matrix, number': _powMatrix,

			'Matrix, BigNumber': function (x, y) {
				return _powMatrix(x, y.toNumber());
			},

			'Unit, number': function (x, y) {
				return x.pow(y);
			}

		});

		/**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */
		function _pow(x, y) {

			// Alternatively could define a 'realmode' config option or something, but
			// 'predictable' will work for now
			if (config.predictable && !isInteger(y) && x < 0) {
				// Check to see if y can be represented as a fraction
				try {
					var yFrac = fraction(y);
					var yNum = number(yFrac);
					if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
						if(yFrac.d % 2 === 1) {
							return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
						}
					}
				}
				catch (ex) {
					// fraction() throws an error if y is Infinity, etc.
				}

				// Unable to express y as a fraction, so continue on
			}

			if (isInteger(y) || x >= 0 || config.predictable) {
				return Math.pow(x, y);
			}
			else {
				return new type.Complex(x, 0).pow(y, 0);
			}
		}

		/**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */
		function _powArray(x, y) {
			if (!isInteger(y) || y < 0) {
				throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
			}
			// verify that A is a 2 dimensional square matrix
			var s = size(x);
			if (s.length != 2) {
				throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
			}
			if (s[0] != s[1]) {
				throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
			}

			var res = eye(s[0]).valueOf();
			var px = x;
			while (y >= 1) {
				if ((y & 1) == 1) {
					res = multiply(px, res);
				}
				y >>= 1;
				px = multiply(px, px);
			}
			return res;
		}

		/**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */
		function _powMatrix (x, y) {
			return matrix(_powArray(x.valueOf(), y));
		}



		pow.toTex = {
			2: '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}'
		};

		return pow;
	}

	exports.name = 'pow';
	exports.factory = factory;

},{"../../type/fraction/function/fraction":541,"../../type/matrix/function/matrix":553,"../../type/number":570,"../../utils/array":581,"../../utils/latex":602,"../../utils/number":603,"../matrix/eye":436,"./multiply":391}],396:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var toFixed = require('../../utils/number').toFixed;
	var deepMap = require('../../utils/collection/deepMap');

	var NO_INT = 'Number of decimals in function round must be an integer';

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));
		var equalScalar = load(require('../relational/equalScalar'));
		var zeros = load(require('../matrix/zeros'));

		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.2);              // returns number 3
   *    math.round(3.8);              // returns number 4
   *    math.round(-4.2);             // returns number -4
   *    math.round(-4.7);             // returns number -5
   *    math.round(math.pi, 3);       // returns number 3.142
   *    math.round(123.45678, 2);     // returns number 123.46
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.round(c);                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
		var round = typed('round', {

			'number': Math.round,

			'number, number': function (x, n) {
				if (!isInteger(n))   {throw new TypeError(NO_INT);}
				if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}

				return _round(x, n);
			},

			'Complex': function (x) {
				return x.round();
			},

			'Complex, number': function (x, n) {
				if (n % 1) {throw new TypeError(NO_INT);}
      
				return x.round(n);
			},

			'Complex, BigNumber': function (x, n) {
				if (!n.isInteger()) {throw new TypeError(NO_INT);}

				var _n = n.toNumber();
				return x.round(_n);
			},

			'number, BigNumber': function (x, n) {
				if (!n.isInteger()) {throw new TypeError(NO_INT);}

				return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
			},

			'BigNumber': function (x) {
				return x.toDecimalPlaces(0);
			},

			'BigNumber, BigNumber': function (x, n) {
				if (!n.isInteger()) {throw new TypeError(NO_INT);}

				return x.toDecimalPlaces(n.toNumber());
			},

			'Fraction': function (x) {
				return x.round();
			},

			'Fraction, number': function (x, n) {
				if (n % 1) {throw new TypeError(NO_INT);}
				return x.round(n);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since round(0) = 0
				return deepMap(x, round, true);
			},

			'Matrix, number | BigNumber': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, round, false);
					break;
				default:
					c = algorithm14(x, y, round, false);
					break;
				}
				return c;
			},

			'number | Complex | BigNumber, Matrix': function (x, y) {
				// check scalar is zero
				if (!equalScalar(x, 0)) {
					// result
					var c;
					// check storage format
					switch (y.storage()) {
					case 'sparse':
						c = algorithm12(y, x, round, true);
						break;
					default:
						c = algorithm14(y, x, round, true);
						break;
					}
					return c;
				}
				// do not execute algorithm, result will be a zero matrix
				return zeros(y.size(), y.storage());
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, round, false).valueOf();
			},

			'number | Complex | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, round, true).valueOf();
			}
		});

		round.toTex = {
			1: '\\left\\lfloor${args[0]}\\right\\rceil',
			2: undefined  // use default template
		};

		return round;
	}

	/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 * @private
 */
	function _round (value, decimals) {
		return parseFloat(toFixed(value, decimals));
	}

	exports.name = 'round';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm14":569,"../../utils/collection/deepMap":595,"../../utils/number":603,"../matrix/zeros":453,"../relational/equalScalar":468}],397:[function(require,module,exports){
	'use strict';

	var number = require('../../utils/number');
	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 1
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5);               // returns 1
   *    math.sign(-4.2);              // returns -1
   *    math.sign(0);                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
		var sign = typed('sign', {
			'number': number.sign,

			'Complex': function (x) {
				return x.sign();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(x.cmp(0));
			},

			'Fraction': function (x) {
				return new type.Fraction(x.s, 1);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since sign(0) = 0
				return deepMap(x, sign, true);
			},

			'Unit': function(x) {
				return sign(x.value);
			}
		});

		sign.toTex = {1: '\\mathrm{${name}}\\left(${args[0]}\\right)'};

		return sign;
	}

	exports.name = 'sign';
	exports.factory = factory;


},{"../../utils/collection/deepMap":595,"../../utils/number":603}],398:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25);                // returns 5
   *    math.square(5);               // returns 25
   *    math.sqrt(-4);                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
		var sqrt = typed('sqrt', {
			'number': _sqrtNumber,

			'Complex': function (x) {
				return x.sqrt();
			},

			'BigNumber': function (x) {
				if (!x.isNegative() || config.predictable) {
					return x.sqrt();
				}
				else {
					// negative value -> downgrade to number to do complex value computation
					return _sqrtNumber(x.toNumber());
				}
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since sqrt(0) = 0
				return deepMap(x, sqrt, true);
			},

			'Unit': function (x) {
				// Someday will work for complex units when they are implemented
				return x.pow(0.5);
			}

		});

		/**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */
		function _sqrtNumber(x) {
			if (x >= 0 || config.predictable) {
				return Math.sqrt(x);
			}
			else {
				return new type.Complex(x, 0).sqrt();
			}
		}

		sqrt.toTex = {1: '\\sqrt{${args[0]}}'};

		return sqrt;
	}

	exports.name = 'sqrt';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],399:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2);           // returns number 4
   *    math.square(3);           // returns number 9
   *    math.pow(3, 2);           // returns number 9
   *    math.multiply(3, 3);      // returns number 9
   *
   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
		var square = typed('square', {
			'number': function (x) {
				return x * x;
			},

			'Complex': function (x) {
				return x.mul(x);
			},

			'BigNumber': function (x) {
				return x.times(x);
			},

			'Fraction': function (x) {
				return x.mul(x);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since square(0) = 0
				return deepMap(x, square, true);
			},

			'Unit': function(x) {
				return x.pow(2);
			}
		});

		square.toTex = {1: '\\left(${args[0]}\\right)^2'};

		return square;
	}

	exports.name = 'square';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],400:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../error/DimensionError');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));
		var addScalar = load(require('./addScalar'));
		var unaryMinus = load(require('./unaryMinus'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		// TODO: split function subtract in two: subtract and subtractScalar

		/**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2);        // returns number 3.3
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(4, 1);
   *    math.subtract(a, b);          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]
   *
   *    var c = math.unit('2.1 km');
   *    var d = math.unit('500m');
   *    math.subtract(c, d);          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */
		var subtract = typed('subtract', {

			'number, number': function (x, y) {
				return x - y;
			},

			'Complex, Complex': function (x, y) {
				return x.sub(y);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.minus(y);
			},

			'Fraction, Fraction': function (x, y) {
				return x.sub(y);
			},

			'Unit, Unit': function (x, y) {
				if (x.value == null) {
					throw new Error('Parameter x contains a unit with undefined value');
				}

				if (y.value == null) {
					throw new Error('Parameter y contains a unit with undefined value');
				}

				if (!x.equalBase(y)) {
					throw new Error('Units do not match');
				}

				var res = x.clone();
				res.value = subtract(res.value, y.value);
				res.fixPrefix = false;

				return res;
			},
    
			'Matrix, Matrix': function (x, y) {
				// matrix sizes
				var xsize = x.size();
				var ysize = y.size();

				// check dimensions
				if (xsize.length !== ysize.length)
					throw new DimensionError(xsize.length, ysize.length);

				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse - sparse
						c = algorithm05(x, y, subtract);
						break;
					default:
						// sparse - dense
						c = algorithm03(y, x, subtract, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense - sparse
						c = algorithm01(x, y, subtract, false);
						break;
					default:
						// dense - dense
						c = algorithm13(x, y, subtract);
						break;
					}
					break;
				}
				return c;
			},
    
			'Array, Array': function (x, y) {
				// use matrix implementation
				return subtract(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return subtract(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return subtract(x, matrix(y));
			},
    
			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					// algorithm 7 is faster than 9 since it calls f() for nonzero items only!
					c = algorithm10(x, unaryMinus(y), addScalar);
					break;
				default:
					c = algorithm14(x, y, subtract);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm10(y, x, subtract, true);
					break;
				default:
					c = algorithm14(y, x, subtract, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, subtract, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, subtract, true).valueOf();
			}
		});

		subtract.toTex = {
			2: '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)'
		};

		return subtract;
	}

	exports.name = 'subtract';
	exports.factory = factory;

},{"../../error/DimensionError":125,"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm05":560,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"./addScalar":372,"./unaryMinus":401}],401:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		/**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5);      // returns -3.5
   *    math.unaryMinus(-4.2);     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
		var unaryMinus = typed('unaryMinus', {
			'number': function (x) {
				return -x;
			},

			'Complex': function (x) {
				return x.neg();
			},

			'BigNumber': function (x) {
				return x.neg();
			},

			'Fraction': function (x) {
				return x.neg();
			},

			'Unit': function (x) {
				var res = x.clone();
				res.value = unaryMinus(x.value);
				return res;
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since unaryMinus(0) = 0
				return deepMap(x, unaryMinus, true);
			}

			// TODO: add support for string
		});

		unaryMinus.toTex = {
			1: latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
		};

		return unaryMinus;
	}

	exports.name = 'unaryMinus';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/latex":602}],402:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		/**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5);      // returns 3.5
   *    math.unaryPlus(1);     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
		var unaryPlus = typed('unaryPlus', {
			'number': function (x) {
				return x;
			},

			'Complex': function (x) {
				return x; // complex numbers are immutable
			},

			'BigNumber': function (x) {
				return x; // bignumbers are immutable
			},

			'Fraction': function (x) {
				return x; // fractions are immutable
			},

			'Unit': function (x) {
				return x.clone();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since unaryPlus(0) = 0
				return deepMap(x, unaryPlus, true);
			},

			'boolean | string | null': function (x) {
				// convert to a number or bignumber
				return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;
			}
		});

		unaryPlus.toTex = {
			1: latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
		};

		return unaryPlus;
	}

	exports.name = 'unaryPlus';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/latex":602}],403:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Calculate the extended greatest common divisor for two values.
   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12);             // returns [4, -1, 1]
   *    math.gcd(8, 12);              // returns 4
   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
		var xgcd = typed('xgcd', {
			'number, number': _xgcd,
			'BigNumber, BigNumber': _xgcdBigNumber
			// TODO: implement support for Fraction
		});

		xgcd.toTex = undefined; // use default template

		return xgcd;

		/**
   * Calculate xgcd for two numbers
   * @param {number} a
   * @param {number} b
   * @return {number} result
   * @private
   */
		function _xgcd (a, b) {
			// source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
			var t, // used to swap two variables
				q, // quotient
				r, // remainder
				x = 0, lastx = 1,
				y = 1, lasty = 0;

			if (!isInteger(a) || !isInteger(b)) {
				throw new Error('Parameters in function xgcd must be integer numbers');
			}

			while (b) {
				q = Math.floor(a / b);
				r = a % b;

				t = x;
				x = lastx - q * x;
				lastx = t;

				t = y;
				y = lasty - q * y;
				lasty = t;

				a = b;
				b = r;
			}

			var res;
			if (a < 0) {
				res = [-a, -lastx, -lasty];
			}
			else {
				res = [a, a ? lastx : 0, lasty];
			}
			return (config.matrix === 'Array') ? res : matrix(res);
		}

		/**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */
		function _xgcdBigNumber(a, b) {
			// source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
			var t, // used to swap two variables
				q, // quotient
				r, // remainder
				zero = new type.BigNumber(0),
				one = new type.BigNumber(1),
				x = zero,
				lastx = one,
				y = one,
				lasty = zero;

			if (!a.isInt() || !b.isInt()) {
				throw new Error('Parameters in function xgcd must be integer numbers');
			}

			//console.log('start', [a, b].toString())

			while (!b.isZero()) {
				//console.log('inner', [a, b, t, q, r, x, y, lastx, lasty].toString());
				q = a.div(b).floor();
				r = a.mod(b);
				//console.log('MOD', [a, b, a.mod(b), r].toString())

				t = x;
				x = lastx.minus(q.times(x));
				lastx = t;

				t = y;
				y = lasty.minus(q.times(y));
				lasty = t;

				a = b;
				b = r;

				//console.log('inner end', [a, b, t, q, r, x, y, lastx, lasty].toString());
			}

			//console.log('end', [a, lastx, lasty].toString())

			var res;
			if (a.lt(zero)) {
				res = [a.neg(), lastx.neg(), lasty.neg()];
			}
			else {
				res = [a, !a.isZero() ? lastx : 0, lasty];
			}
			return (config.matrix === 'Array') ? res : matrix(res);
		}
	}

	exports.name = 'xgcd';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/number":603}],404:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var bigBitAnd = require('../../utils/bignumber/bitAnd');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131);               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */
		var bitAnd = typed('bitAnd', {

			'number, number': function (x, y) {
				if (!isInteger(x) || !isInteger(y)) {
					throw new Error('Integers expected in function bitAnd');
				}

				return x & y;
			},

			'BigNumber, BigNumber': bigBitAnd,

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse & sparse
						c = algorithm06(x, y, bitAnd, false);
						break;
					default:
						// sparse & dense
						c = algorithm02(y, x, bitAnd, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense & sparse
						c = algorithm02(x, y, bitAnd, false);
						break;
					default:
						// dense & dense
						c = algorithm13(x, y, bitAnd);
						break;
					}
					break;
				}
				return c;
			},
    
			'Array, Array': function (x, y) {
				// use matrix implementation
				return bitAnd(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return bitAnd(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return bitAnd(x, matrix(y));
			},
    
			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, bitAnd, false);
					break;
				default:
					c = algorithm14(x, y, bitAnd, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm11(y, x, bitAnd, true);
					break;
				default:
					c = algorithm14(y, x, bitAnd, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, bitAnd, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, bitAnd, true).valueOf();
			}
		});

		bitAnd.toTex = {
			2: '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)'
		};

		return bitAnd;
	}

	exports.name = 'bitAnd';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm06":561,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/bitAnd":582,"../../utils/latex":602,"../../utils/number":603}],405:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var bigBitNot = require('../../utils/bignumber/bitNot');
	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		/**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1);               // returns number -2
   *
   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
		var bitNot = typed('bitNot', {
			'number': function (x) {
				if (!isInteger(x)) {
					throw new Error('Integer expected in function bitNot');
				}

				return ~x;
			},

			'BigNumber': bigBitNot,

			'Array | Matrix': function (x) {
				return deepMap(x, bitNot);
			}
		});

		bitNot.toTex = {
			1: latex.operators['bitNot'] + '\\left(${args[0]}\\right)'
		};

		return bitNot;
	}

	exports.name = 'bitNot';
	exports.factory = factory;

},{"../../utils/bignumber/bitNot":583,"../../utils/collection/deepMap":595,"../../utils/latex":602,"../../utils/number":603}],406:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var bigBitOr = require('../../utils/bignumber/bitOr');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2);               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */
		var bitOr = typed('bitOr', {

			'number, number': function (x, y) {
				if (!isInteger(x) || !isInteger(y)) {
					throw new Error('Integers expected in function bitOr');
				}

				return x | y;
			},

			'BigNumber, BigNumber': bigBitOr,

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm04(x, y, bitOr);
						break;
					default:
						// sparse + dense
						c = algorithm01(y, x, bitOr, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm01(x, y, bitOr, false);
						break;
					default:
						c = algorithm13(x, y, bitOr);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return bitOr(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return bitOr(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return bitOr(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm10(x, y, bitOr, false);
					break;
				default:
					c = algorithm14(x, y, bitOr, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm10(y, x, bitOr, true);
					break;
				default:
					c = algorithm14(y, x, bitOr, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, bitOr, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, bitOr, true).valueOf();
			}
		});

		bitOr.toTex = {
			2: '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)'
		};

		return bitOr;
	}

	exports.name = 'bitOr';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm04":559,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/bitOr":584,"../../utils/latex":602,"../../utils/number":603}],407:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var bigBitXor = require('../../utils/bignumber/bitXor');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2);               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */
		var bitXor = typed('bitXor', {

			'number, number': function (x, y) {
				if (!isInteger(x) || !isInteger(y)) {
					throw new Error('Integers expected in function bitXor');
				}

				return x ^ y;
			},

			'BigNumber, BigNumber': bigBitXor,

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, bitXor);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, bitXor, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, bitXor, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, bitXor);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return bitXor(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return bitXor(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return bitXor(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, bitXor, false);
					break;
				default:
					c = algorithm14(x, y, bitXor, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, bitXor, true);
					break;
				default:
					c = algorithm14(y, x, bitXor, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, bitXor, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, bitXor, true).valueOf();
			}
		});

		bitXor.toTex = {
			2: '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)'
		};

		return bitXor;
	}

	exports.name = 'bitXor';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/bitXor":585,"../../utils/latex":602,"../../utils/number":603}],408:[function(require,module,exports){
	module.exports = [
		require('./bitAnd'),
		require('./bitNot'),
		require('./bitOr'),
		require('./bitXor'),
		require('./leftShift'),
		require('./rightArithShift'),
		require('./rightLogShift')
	];

},{"./bitAnd":404,"./bitNot":405,"./bitOr":406,"./bitXor":407,"./leftShift":409,"./rightArithShift":410,"./rightLogShift":411}],409:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var bigLeftShift = require('../../utils/bignumber/leftShift');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));
		var equalScalar = load(require('../relational/equalScalar'));
		var zeros = load(require('../matrix/zeros'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2);               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */
		var leftShift = typed('leftShift', {
    
			'number, number': function (x, y) {
				if (!isInteger(x) || !isInteger(y)) {
					throw new Error('Integers expected in function leftShift');
				}

				return x << y;
			},

			'BigNumber, BigNumber': bigLeftShift,

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse & sparse
						c = algorithm08(x, y, leftShift, false);
						break;
					default:
						// sparse & dense
						c = algorithm02(y, x, leftShift, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense & sparse
						c = algorithm01(x, y, leftShift, false);
						break;
					default:
						// dense & dense
						c = algorithm13(x, y, leftShift);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return leftShift(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return leftShift(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return leftShift(x, matrix(y));
			},

			'Matrix, number | BigNumber': function (x, y) {
				// check scalar
				if (!equalScalar(y, 0)) {
					// result
					var c;
					// check storage format
					switch (x.storage()) {
					case 'sparse':
						c = algorithm11(x, y, leftShift, false);
						break;
					default:
						c = algorithm14(x, y, leftShift, false);
						break;
					}
					return c;
				}
				return x.clone();
			},

			'number | BigNumber, Matrix': function (x, y) {
				// check scalar
				if (!equalScalar(x, 0)) {
					// result
					var c;
					// check storage format
					switch (y.storage()) {
					case 'sparse':
						c = algorithm10(y, x, leftShift, true);
						break;
					default:
						c = algorithm14(y, x, leftShift, true);
						break;
					}
					return c;
				}
				return zeros(y.size(), y.storage());
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return leftShift(matrix(x), y).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return leftShift(x, matrix(y)).valueOf();
			}
		});

		leftShift.toTex = {
			2: '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)'
		};

		return leftShift;
	}

	exports.name = 'leftShift';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm08":563,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/leftShift":589,"../../utils/latex":602,"../../utils/number":603,"../matrix/zeros":453,"../relational/equalScalar":468}],410:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var bigRightArithShift = require('../../utils/bignumber/rightArithShift');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');
  
		var matrix = load(require('../../type/matrix/function/matrix'));
		var equalScalar = load(require('../relational/equalScalar'));
		var zeros = load(require('../matrix/zeros'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2);               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */
		var rightArithShift = typed('rightArithShift', {

			'number, number': function (x, y) {
				if (!isInteger(x) || !isInteger(y)) {
					throw new Error('Integers expected in function rightArithShift');
				}

				return x >> y;
			},

			'BigNumber, BigNumber': bigRightArithShift,

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse & sparse
						c = algorithm08(x, y, rightArithShift, false);
						break;
					default:
						// sparse & dense
						c = algorithm02(y, x, rightArithShift, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense & sparse
						c = algorithm01(x, y, rightArithShift, false);
						break;
					default:
						// dense & dense
						c = algorithm13(x, y, rightArithShift);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return rightArithShift(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return rightArithShift(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return rightArithShift(x, matrix(y));
			},

			'Matrix, number | BigNumber': function (x, y) {
				// check scalar
				if (!equalScalar(y, 0)) {
					// result
					var c;
					// check storage format
					switch (x.storage()) {
					case 'sparse':
						c = algorithm11(x, y, rightArithShift, false);
						break;
					default:
						c = algorithm14(x, y, rightArithShift, false);
						break;
					}
					return c;
				}
				return x.clone();
			},

			'number | BigNumber, Matrix': function (x, y) {
				// check scalar
				if (!equalScalar(x, 0)) {
					// result
					var c;
					// check storage format
					switch (y.storage()) {
					case 'sparse':
						c = algorithm10(y, x, rightArithShift, true);
						break;
					default:
						c = algorithm14(y, x, rightArithShift, true);
						break;
					}
					return c;
				}
				return zeros(y.size(), y.storage());
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return rightArithShift(matrix(x), y).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return rightArithShift(x, matrix(y)).valueOf();
			}
		});

		rightArithShift.toTex = {
			2: '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)'
		};

		return rightArithShift;
	}

	exports.name = 'rightArithShift';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm08":563,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/rightArithShift":591,"../../utils/latex":602,"../../utils/number":603,"../matrix/zeros":453,"../relational/equalScalar":468}],411:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));
		var equalScalar = load(require('../relational/equalScalar'));
		var zeros = load(require('../matrix/zeros'));

		var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));
		var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2);               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

		var rightLogShift = typed('rightLogShift', {

			'number, number': function (x, y) {
				if (!isInteger(x) || !isInteger(y)) {
					throw new Error('Integers expected in function rightLogShift');
				}

				return x >>> y;
			},

			// 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse & sparse
						c = algorithm08(x, y, rightLogShift, false);
						break;
					default:
						// sparse & dense
						c = algorithm02(y, x, rightLogShift, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense & sparse
						c = algorithm01(x, y, rightLogShift, false);
						break;
					default:
						// dense & dense
						c = algorithm13(x, y, rightLogShift);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return rightLogShift(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return rightLogShift(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return rightLogShift(x, matrix(y));
			},

			'Matrix, number | BigNumber': function (x, y) {
				// check scalar
				if (!equalScalar(y, 0)) {
					// result
					var c;
					// check storage format
					switch (x.storage()) {
					case 'sparse':
						c = algorithm11(x, y, rightLogShift, false);
						break;
					default:
						c = algorithm14(x, y, rightLogShift, false);
						break;
					}
					return c;
				}
				return x.clone();
			},

			'number | BigNumber, Matrix': function (x, y) {
				// check scalar
				if (!equalScalar(x, 0)) {
					// result
					var c;
					// check storage format
					switch (y.storage()) {
					case 'sparse':
						c = algorithm10(y, x, rightLogShift, true);
						break;
					default:
						c = algorithm14(y, x, rightLogShift, true);
						break;
					}
					return c;
				}
				return zeros(y.size(), y.storage());
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return rightLogShift(matrix(x), y).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return rightLogShift(x, matrix(y)).valueOf();
			}
		});

		rightLogShift.toTex = {
			2: '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)'
		};

		return rightLogShift;
	}

	exports.name = 'rightLogShift';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm01":556,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm08":563,"../../type/matrix/utils/algorithm10":565,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"../../utils/number":603,"../matrix/zeros":453,"../relational/equalScalar":468}],412:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/add'));
		var stirlingS2 = load(require('./stirlingS2'));
		var isNegative = load(require('../utils/isNegative'));
		var isInteger = load(require('../utils/isInteger'));

		/**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3); // returns 5;
   *    math.bellNumbers(8); // returns 4140;
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
		var bellNumbers = typed('bellNumbers', {
			'number | BigNumber': function (n) {

				if (!isInteger(n) || isNegative(n)) {
					throw new TypeError('Non-negative integer value expected in function bellNumbers');
				}

				// Sum (k=0, n) S(n,k).
				var result = 0;
				for(var i = 0; i <= n; i++) {
					result = add(result, stirlingS2(n, i));
				}

				return result;
			}
		});

		bellNumbers.toTex = {1: '\\mathrm{B}_{${args[0]}}'};

		return bellNumbers;
	}

	exports.name = 'bellNumbers';
	exports.factory = factory;

},{"../arithmetic/add":371,"../utils/isInteger":519,"../utils/isNegative":521,"./stirlingS2":416}],413:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/add'));
		var divide = load(require('../arithmetic/divide'));
		var multiply = load(require('../arithmetic/multiply'));
		var combinations = load(require('../probability/combinations'));
		var isNegative = load(require('../utils/isNegative'));
		var isInteger = load(require('../utils/isInteger'));


		/**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3); // returns 5;
   *    math.catalan(8); // returns 1430;
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
		var catalan = typed('catalan', {
			'number | BigNumber': function (n) {

				if (!isInteger(n) || isNegative(n)) {
					throw new TypeError('Non-negative integer value expected in function catalan');
				}
       
				return divide(combinations(multiply(n,2), n), add(n,1));

			}
		});

		catalan.toTex = {1: '\\mathrm{C}_{${args[0]}}'};

		return catalan;
	}

	exports.name = 'catalan';
	exports.factory = factory;

},{"../arithmetic/add":371,"../arithmetic/divide":376,"../arithmetic/multiply":391,"../probability/combinations":454,"../utils/isInteger":519,"../utils/isNegative":521}],414:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var combinations = load(require('../probability/combinations'));
		var add = load(require('../arithmetic/addScalar'));
		var isPositive = load(require('../utils/isPositive'));
		var isInteger = load(require('../utils/isInteger'));
		var larger = load(require('../relational/larger'));

		/**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3); // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
		var composition =  typed('composition', {
			'number | BigNumber, number | BigNumber': function (n, k) {
				if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
					throw new TypeError('Positive integer value expected in function composition');
				}
				else if (larger(k, n)) {
					throw new TypeError('k must be less than or equal to n in function composition');
				}

				return combinations(add(n, -1), add(k, -1));
			}
		});

		composition.toTex = undefined; // use default template

		return composition;
	}

	exports.name = 'composition';
	exports.factory = factory;

},{"../arithmetic/addScalar":372,"../probability/combinations":454,"../relational/larger":470,"../utils/isInteger":519,"../utils/isPositive":523}],415:[function(require,module,exports){
	module.exports = [
		require('./bellNumbers'),
		require('./composition'),
		require('./stirlingS2'),
		require('./catalan')
	];

},{"./bellNumbers":412,"./catalan":413,"./composition":414,"./stirlingS2":416}],416:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/add'));
		var subtract = load(require('../arithmetic/subtract'));
		var multiply = load(require('../arithmetic/multiply'));
		var divide = load(require('../arithmetic/divide'));
		var pow = load(require('../arithmetic/pow'));
		var factorial = load(require('../probability/factorial'));
		var combinations = load(require('../probability/combinations'));
		var isNegative = load(require('../utils/isNegative'));
		var isInteger = load(require('../utils/isInteger'));
		var larger = load(require('../relational/larger'));

		/**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3); //returns 25
   *
   * See also:
   *
   *    Bell numbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
		var stirlingS2 = typed('stirlingS2', {
			'number | BigNumber, number | BigNumber': function (n, k) {
				if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
					throw new TypeError('Non-negative integer value expected in function stirlingS2');
				}
				else if (larger(k, n)) {
					throw new TypeError('k must be less than or equal to n in function stirlingS2');
				}

				// 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
				var kFactorial = factorial(k);
				var result = 0;
				for(var i = 0; i <= k; i++) {
					var negativeOne = pow(-1, subtract(k,i));
					var kChooseI = combinations(k,i);
					var iPower = pow(i,n);

					result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
				}

				return divide(result, kFactorial);
			}
		});

		stirlingS2.toTex = {2: '\\mathrm{S}\\left(${args}\\right)'};

		return stirlingS2;
	}

	exports.name = 'stirlingS2';
	exports.factory = factory;

},{"../arithmetic/add":371,"../arithmetic/divide":376,"../arithmetic/multiply":391,"../arithmetic/pow":395,"../arithmetic/subtract":400,"../probability/combinations":454,"../probability/factorial":456,"../relational/larger":470,"../utils/isInteger":519,"../utils/isNegative":521}],417:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    var a = math.complex(2, 2);
   *    math.arg(a) / math.pi;          // returns number 0.25
   *
   *    var b = math.complex('2 + 3i');
   *    math.arg(b);                    // returns number 0.982793723247329
   *    math.atan2(3, 2);               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | Array | Matrix} The argument of x
   */
		var arg = typed('arg', {
			'number': function (x) {
				return Math.atan2(0, x);
			},

			'Complex': function (x) {
				return x.arg();
			},

			// TODO: implement BigNumber support for function arg

			'Array | Matrix': function (x) {
				return deepMap(x, arg);
			}
		});

		arg.toTex = {1: '\\arg\\left(${args[0]}\\right)'};

		return arg;
	}

	exports.name = 'arg';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],418:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
		var conj = typed('conj', {
			'number': function (x) {
				return x;
			},

			'BigNumber': function (x) {
				return x;
			},

			'Complex': function (x) {
				return x.conjugate();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, conj);
			}
		});

		conj.toTex = {1: '\\left(${args[0]}\\right)^*'};

		return conj;
	}

	exports.name = 'conj';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],419:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    var a = math.complex(2, 3);
   *    math.re(a);                     // returns number 2
   *    math.im(a);                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')); // returns number -5.2
   *    math.re(math.complex(2.4));     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
		var im = typed('im', {
			'number': function (x) {
				return 0;
			},

			'BigNumber': function (x) {
				return new type.BigNumber(0);
			},

			'Complex': function (x) {
				return x.im;
			},

			'Array | Matrix': function (x) {
				return deepMap(x, im);
			}
		});

		im.toTex = {1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'};

		return im;
	}

	exports.name = 'im';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],420:[function(require,module,exports){
	module.exports = [
		require('./arg'),
		require('./conj'),
		require('./im'),
		require('./re')
	];

},{"./arg":417,"./conj":418,"./im":419,"./re":421}],421:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    var a = math.complex(2, 3);
   *    math.re(a);                     // returns number 2
   *    math.im(a);                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')); // returns number 0
   *    math.re(math.complex(2.4));     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
		var re = typed('re', {
			'number': function (x) {
				return x;
			},

			'BigNumber': function (x) {
				return x;
			},

			'Complex': function (x) {
				return x.re;
			},

			'Array | Matrix': function (x) {
				return deepMap(x, re);
			}
		});

		re.toTex = {1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'};

		return re;
	}

	exports.name = 're';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],422:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
    * Calculates:
    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */

		var distance = typed('distance', {
			'Array, Array, Array': function(x, y, z){
				// Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)
				if (x.length == 2 && y.length == 2 && z.length == 2){
					if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
					if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
					if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
					var m = (z[1]-z[0])/(y[1]-y[0]);
					var xCoeff = m*m*y[0];
					var yCoeff = -1*(m*y[0]);
					var constant = x[1];

					return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
				}
				else{
					throw new TypeError('Invalid Arguments: Try again');
				}
			},
			'Object, Object, Object': function(x, y, z){
				if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){
					if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }
					if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }
					if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }
					if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&
          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){
						var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);
						var xCoeff = m*m*y.lineOnePtX;
						var yCoeff = -1*(m*y.lineOnePtX);
						var constant = x.pointX;

						return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
					}
					else{
						throw new TypeError('Key names do not match');
					}
				}
				else{
					throw new TypeError('Invalid Arguments: Try again');
				}
			},
			'Array, Array': function(x, y){
				// Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
				if (x.length == 2 && y.length == 3){
					if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
					if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }

					return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
				}
				// Point to Line 3D
				else if (x.length == 3 && y.length == 6){
					if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
					if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }

					return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
				}
				// Point to Point 2D
				else if (x.length == 2 && y.length == 2){
					if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
					if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }

					return _distance2d(x[0], x[1], y[0], y[1]);
				}
				// Point to Point 3D
				else if(x.length == 3 && y.length == 3){
					if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
					if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }

					return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
				}
				else{
					throw new TypeError('Invalid Arguments: Try again');
				}
			},
			'Object, Object': function(x, y){
				if (Object.keys(x).length == 2 && Object.keys(y).length == 3){
					if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }
					if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }
					if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&
          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){

						return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
					}
					else{
						throw new TypeError('Key names do not match');
					}
				}
				// Point to Line 3D
				else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){
					if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }
					if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }
					if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&
          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&
          y.hasOwnProperty('b') && y.hasOwnProperty('c')){

						return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
					}
					else{
						throw new TypeError('Key names do not match');
					}
				}
				// Point to Point 2D
				else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){
					if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }
					if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }
					if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&
          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){

						return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
					}
					else{
						throw new TypeError('Key names do not match');
					}
				}
				// Point to Point 3D
				else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){
					if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }
					if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }
					if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&
          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){

						return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
					}
					else {
						throw new TypeError('Key names do not match');
					}
				}
				else{
					throw new TypeError('Invalid Arguments: Try again');
				}
			},
			'Array': function(arr){
				if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }

				return _distancePairwise(arr);
			}
		});
		return distance;
	}

	function _2d(a){
		// checks if the number of arguments are correct in count and are valid (should be numbers)
		if (a.constructor !== Array){
			a = _objectToArray(a);
		}
		return typeof a[0] === 'number' && typeof a[1] === 'number';
	}

	function _3d(a){
		// checks if the number of arguments are correct in count and are valid (should be numbers)
		if (a.constructor !== Array){
			a = _objectToArray(a);
		}
		return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';
	}

	function _parametricLine(a){
		if (a.constructor !== Array){
			a = _objectToArray(a);
		}
		return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&
    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';

	}

	function _objectToArray(o){
		var keys = Object.keys(o);
		var a = [];
		for (var i = 0; i < keys.length; i++) {
			a.push(o[keys[i]]);
		}
		return a;
	}

	function _pairwise(a){
		//checks for valid arguments passed to _distancePairwise(Array)
		if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){
			for(var i in a){
				if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){
					return false;
				}
			}
		}
		else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){
			for(var i in a){
				if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){
					return false;
				}
			}
		}
		else{
			return false;
		}
		return true;
	}

	function _distancePointLine2D(x, y, a, b, c){
		var num =  Math.abs(a*x + b*y + c);
		var den = Math.pow((a*a + b*b), 0.5);
		var result = (num/den);
		return result;
	}

	function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){
		var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))];
		num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);
		var den = Math.pow(a*a + b*b + c*c, 0.5);
		var result = num/den;
		return result;
	}

	function _distance2d(x1, y1, x2, y2){
		var yDiff = y2 - y1;
		var xDiff = x2 - x1;
		var radicant = yDiff * yDiff + xDiff * xDiff;
		var result = Math.pow(radicant, 0.5);
		return result;
	}

	function _distance3d(x1, y1, z1, x2, y2, z2){
		var zDiff = z2 - z1;
		var yDiff = y2 - y1;
		var xDiff = x2 - x1;
		var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
		var result = Math.pow(radicant, 0.5);
		return result;
	}

	function _distancePairwise(a){
		var result = [];
		for(var i = 0; i < a.length-1; i++){
			for(var j = i+1; j < a.length; j++){
				if (a[0].length == 2){
					result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
				}
				else if (a[0].length == 3){
					result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
				}
			}
		}
		return result;
	}

	exports.name = 'distance';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553}],423:[function(require,module,exports){
	module.exports = [
		require('./intersect'),
		require('./distance')
	];

},{"./distance":422,"./intersect":424}],424:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var abs = load(require('../arithmetic/abs'));
		var add = load(require('../arithmetic/add'));
		var matrix = load(require('../../type/matrix/function/matrix'));
		var multiply = load(require('../arithmetic/multiply'));
		var subtract = load(require('../arithmetic/subtract'));

		/**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR null if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
		var intersect = typed('intersect', {
			'Array, Array, Array': function (x, y, plane) {
				if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
				if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
				if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }

				return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
			},

			'Array, Array, Array, Array': function (w, x, y, z) {
				if (w.length === 2) {
					if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
					if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
					if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
					if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }

					return _intersect2d(w, x, y, z);
				}
				else if (w.length === 3) {
					if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
					if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
					if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }
					if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }

					return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
				}
				else {
					throw new TypeError('Arrays with two or thee dimensional points expected');
				}
			},

			'Matrix, Matrix, Matrix': function (x, y, plane) {
				return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
			},

			'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {
				// TODO: output matrix type should match input matrix type
				return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
			}
		});

		function _2d(x) {
			return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
		}

		function _3d(x) {
			return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
		}

		function _4d(x) {
			return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
		}

		function _intersect2d(p1a, p1b, p2a, p2b){
			var o1 = p1a;
			var o2 = p2a;
			var d1 = subtract(o1, p1b);
			var d2 = subtract(o2, p2b);
			var det = d1[0]*d2[1] - d2[0]*d1[1];
			if (abs(det) < config.epsilon) {
				return null;
			}
			var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;
			return add(multiply(d1, t), o1); 
		}

		function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){
			var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);
			var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);
			var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);
			var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);
			var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);
			var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );
			var tb = ( d1343 + ta * d4321 ) / (d4343);

			var pax = x1 + ta * (x2 - x1);
			var pay = y1 + ta * (y2 - y1);
			var paz = z1 + ta * (z2 - z1);
			var pbx = x3 + tb * (x4 - x3);
			var pby = y3 + tb * (y4 - y3);
			var pbz = z3 + tb * (z4 - z3);
			if (pax === pbx && pay === pby && paz === pbz){
				return [pax, pay, paz];
			}
			else{
				return null;
			}
		}

		function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){
			var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1 - y1 - z1);
			var px = x1 + t * (x2 - x1);
			var py = y1 + t * (y2 - y1);
			var pz = z1 + t * (z2 - z1);
			return [px, py, pz];
			// TODO: Add cases when line is parallel to the plane:
			//       (a) no intersection,
			//       (b) line contained in plane
		}

		return intersect;
	}

	exports.name = 'intersect';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../arithmetic/abs":370,"../arithmetic/add":371,"../arithmetic/multiply":391,"../arithmetic/subtract":400}],425:[function(require,module,exports){
	module.exports = [
		require('./algebra'),
		require('./arithmetic'),
		require('./bitwise'),
		require('./combinatorics'),
		require('./complex'),
		require('./geometry'),
		require('./logical'),
		require('./matrix'),
		require('./probability'),
		require('./relational'),
		require('./statistics'),
		require('./string'),
		require('./trigonometry'),
		require('./unit'),
		require('./utils')
	];

},{"./algebra":347,"./arithmetic":386,"./bitwise":408,"./combinatorics":415,"./complex":420,"./geometry":423,"./logical":427,"./matrix":440,"./probability":458,"./relational":469,"./statistics":475,"./string":487,"./trigonometry":508,"./unit":515,"./utils":518}],426:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));
		var zeros = load(require('../matrix/zeros'));
		var not = load(require('./not'));
		var isZero = load(require('../utils/isZero'));

		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4);   // returns true
   *
   *    a = [2, 0, 0];
   *    b = [3, 7, 0];
   *    c = 0;
   *
   *    math.and(a, b);   // returns [true, false, false]
   *    math.and(a, c);   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */
		var and = typed('and', {

			'number, number': function (x, y) {
				return !!(x && y);
			},

			'Complex, Complex': function (x, y) {
				return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
			},

			'BigNumber, BigNumber': function (x, y) {
				return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
			},

			'Unit, Unit': function (x, y) {
				return and(x.value, y.value);
			},
    
			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse & sparse
						c = algorithm06(x, y, and, false);
						break;
					default:
						// sparse & dense
						c = algorithm02(y, x, and, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense & sparse
						c = algorithm02(x, y, and, false);
						break;
					default:
						// dense & dense
						c = algorithm13(x, y, and);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return and(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return and(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return and(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// check scalar
				if (not(y)) {
					// return zero matrix
					return zeros(x.size(), x.storage());
				}
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, and, false);
					break;
				default:
					c = algorithm14(x, y, and, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// check scalar
				if (not(x)) {
					// return zero matrix
					return zeros(x.size(), x.storage());
				}
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm11(y, x, and, true);
					break;
				default:
					c = algorithm14(y, x, and, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return and(matrix(x), y).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return and(x, matrix(y)).valueOf();
			}
		});

		and.toTex = {
			2: '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)'
		};

		return and;
	}

	exports.name = 'and';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm06":561,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"../matrix/zeros":453,"../utils/isZero":525,"./not":428}],427:[function(require,module,exports){
	module.exports = [
		require('./and'),
		require('./not'),
		require('./or'),
		require('./xor')
	];

},{"./and":426,"./not":428,"./or":429,"./xor":430}],428:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		/**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2);      // returns false
   *    math.not(0);      // returns true
   *    math.not(true);   // returns false
   *
   *    a = [2, -7, 0];
   *    math.not(a);      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
		var not = typed('not', {
			'number': function (x) {
				return !x;
			},

			'Complex': function (x) {
				return x.re === 0 && x.im === 0;
			},

			'BigNumber': function (x) {
				return x.isZero() || x.isNaN();
			},

			'Unit': function (x) {
				return not(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, not);
			}
		});

		not.toTex = {
			1: latex.operators['not'] + '\\left(${args[0]}\\right)'
		};

		return not;
	}

	exports.name = 'not';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/latex":602}],429:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4);   // returns true
   *
   *    a = [2, 5, 0];
   *    b = [0, 22, 0];
   *    c = 0;
   *
   *    math.or(a, b);   // returns [true, true, false]
   *    math.or(b, c);   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */
		var or = typed('or', {

			'number, number': function (x, y) {
				return !!(x || y);
			},

			'Complex, Complex': function (x, y) {
				return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);
			},

			'BigNumber, BigNumber': function (x, y) {
				return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());
			},

			'Unit, Unit': function (x, y) {
				return or(x.value, y.value);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm05(x, y, or);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, or, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, or, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, or);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return or(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return or(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return or(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, or, false);
					break;
				default:
					c = algorithm14(x, y, or, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, or, true);
					break;
				default:
					c = algorithm14(y, x, or, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, or, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, or, true).valueOf();
			}
		});

		or.toTex = {
			2: '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)'
		};

		return or;
	}

	exports.name = 'or';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm05":560,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602}],430:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4);   // returns false
   *
   *    a = [2, 0, 0];
   *    b = [2, 7, 0];
   *    c = 0;
   *
   *    math.xor(a, b);   // returns [false, true, false]
   *    math.xor(a, c);   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */
		var xor = typed('xor', {
 
			'number, number': function (x, y) {
				return !!(!!x ^ !!y);
			},

			'Complex, Complex': function (x, y) {
				return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));
			},

			'BigNumber, BigNumber': function (x, y) {
				return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));
			},

			'Unit, Unit': function (x, y) {
				return xor(x.value, y.value);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, xor);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, xor, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, xor, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, xor);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return xor(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return xor(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return xor(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, xor, false);
					break;
				default:
					c = algorithm14(x, y, xor, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, xor, true);
					break;
				default:
					c = algorithm14(y, x, xor, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, xor, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, xor, true).valueOf();
			}
		});

		xor.toTex = {
			2: '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)'
		};

		return xor;
	}

	exports.name = 'xor';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602}],431:[function(require,module,exports){
	'use strict';

	var clone = require('../../utils/object').clone;
	var isInteger = require('../../utils/number').isInteger;
	var array = require('../../utils/array');
	var IndexError = require('../../error/IndexError');
	var DimensionError = require('../../error/DimensionError');

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    var A = [[1, 2], [5, 6]];
   *    var B = [[3, 4], [7, 8]];
   *
   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world'); // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
		var concat = typed('concat', {
			// TODO: change signature to '...Array | Matrix, dim?' when supported
			'...Array | Matrix | number | BigNumber': function (args) {
				var i;
				var len = args.length;
				var dim = -1;  // zero-based dimension
				var prevDim;
				var asMatrix = false;
				var matrices = [];  // contains multi dimensional arrays

				for (i = 0; i < len; i++) {
					var arg = args[i];

					// test whether we need to return a Matrix (if not we return an Array)
					if (arg && arg.isMatrix === true) {
						asMatrix = true;
					}

					if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {
						if (i !== len - 1) {
							throw new Error('Dimension must be specified as last argument');
						}

						// last argument contains the dimension on which to concatenate
						prevDim = dim;
						dim = arg.valueOf(); // change BigNumber to number

						if (!isInteger(dim)) {
							throw new TypeError('Integer number expected for dimension');
						}

						if (dim < 0 || (i > 0 && dim > prevDim)) {
							// TODO: would be more clear when throwing a DimensionError here
							throw new IndexError(dim, prevDim + 1);
						}
					}
					else {
						// this is a matrix or array
						var m = clone(arg).valueOf();
						var size = array.size(m);
						matrices[i] = m;
						prevDim = dim;
						dim = size.length - 1;

						// verify whether each of the matrices has the same number of dimensions
						if (i > 0 && dim != prevDim) {
							throw new DimensionError(prevDim + 1, dim + 1);
						}
					}
				}

				if (matrices.length == 0) {
					throw new SyntaxError('At least one matrix expected');
				}

				var res = matrices.shift();
				while (matrices.length) {
					res = _concat(res, matrices.shift(), dim, 0);
				}

				return asMatrix ? matrix(res) : res;
			},

			'...string': function (args) {
				return args.join('');
			}
		});

		concat.toTex = undefined; // use default template

		return concat;
	}

	/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */
	function _concat(a, b, concatDim, dim) {
		if (dim < concatDim) {
			// recurse into next dimension
			if (a.length != b.length) {
				throw new DimensionError(a.length, b.length);
			}

			var c = [];
			for (var i = 0; i < a.length; i++) {
				c[i] = _concat(a[i], b[i], concatDim, dim + 1);
			}
			return c;
		}
		else {
			// concatenate this dimension
			return a.concat(b);
		}
	}

	exports.name = 'concat';
	exports.factory = factory;

},{"../../error/DimensionError":125,"../../error/IndexError":126,"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/number":603,"../../utils/object":604}],432:[function(require,module,exports){
	'use strict';

	var size = require('../../utils/array').size;

	function factory (type, config, load, typed) {
		var matrix   = load(require('../../type/matrix/function/matrix'));
		var subtract = load(require('../arithmetic/subtract'));
		var multiply = load(require('../arithmetic/multiply'));

		/**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B =[b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],  [0, 1, 1]);  // Returns [1, -1, 1]
   *    math.cross([3, -3, 1], [4, 9, 2]);  // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],  [5, 6, 7]);  // Returns [-3, 6, -3]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
		var cross = typed('cross', {
			'Matrix, Matrix': function (x, y) {
				return matrix(_cross(x.toArray(), y.toArray()));
			},

			'Matrix, Array': function (x, y) {
				return matrix(_cross(x.toArray(), y));
			},

			'Array, Matrix': function (x, y) {
				return matrix(_cross(x, y.toArray()));
			},

			'Array, Array': _cross
		});

		cross.toTex = {
			2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
		};

		return cross;

		/**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */
		function _cross(x, y) {
			var xSize= size(x);
			var ySize = size(y);

			if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
				throw new RangeError('Vectors with length 3 expected ' +
      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
			}

			return [
				subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
				subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
				subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
			];
		}
	}

	exports.name = 'cross';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../arithmetic/multiply":391,"../arithmetic/subtract":400}],433:[function(require,module,exports){
	'use strict';

	var util = require('../../utils/index');
	var object = util.object;
	var string = util.string;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));
		var add = load(require('../arithmetic/add'));
		var subtract = load(require('../arithmetic/subtract'));
		var multiply = load(require('../arithmetic/multiply'));
		var unaryMinus = load(require('../arithmetic/unaryMinus'));

		/**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]); // returns -2
   *
   *    var A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A); // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
		var det = typed('det', {
			'any': function (x) {
				return object.clone(x);
			},

			'Array | Matrix': function det (x) {
				var size;
				if (x && x.isMatrix === true) {
					size = x.size();
				}
				else if (Array.isArray(x)) {
					x = matrix(x);
					size = x.size();
				}
				else {
					// a scalar
					size = [];
				}

				switch (size.length) {
				case 0:
					// scalar
					return object.clone(x);

				case 1:
					// vector
					if (size[0] == 1) {
						return object.clone(x.valueOf()[0]);
					}
					else {
						throw new RangeError('Matrix must be square ' +
            '(size: ' + string.format(size) + ')');
					}

				case 2:
					// two dimensional array
					var rows = size[0];
					var cols = size[1];
					if (rows == cols) {
						return _det(x.clone().valueOf(), rows, cols);
					}
					else {
						throw new RangeError('Matrix must be square ' +
            '(size: ' + string.format(size) + ')');
					}

				default:
					// multi dimensional array
					throw new RangeError('Matrix must be two dimensional ' +
          '(size: ' + string.format(size) + ')');
				}
			}
		});

		det.toTex = {1: '\\det\\left(${args[0]}\\right)'};

		return det;

		/**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */
		function _det (matrix, rows, cols) {
			if (rows == 1) {
				// this is a 1 x 1 matrix
				return object.clone(matrix[0][0]);
			}
			else if (rows == 2) {
				// this is a 2 x 2 matrix
				// the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
				return subtract(
					multiply(matrix[0][0], matrix[1][1]),
					multiply(matrix[1][0], matrix[0][1])
				);
			}
			else {
				// this is an n x n matrix
				var compute_mu = function (matrix) {
					var i, j;

					// Compute the matrix with zero lower triangle, same upper triangle,
					// and diagonals given by the negated sum of the below diagonal
					// elements.
					var mu = new Array(matrix.length);
					var sum = 0;
					for (i = 1; i < matrix.length; i++) {
						sum = add(sum, matrix[i][i]);
					}

					for (i = 0; i < matrix.length; i++) {
						mu[i] = new Array(matrix.length);
						mu[i][i] = unaryMinus(sum);

						for (j = 0; j < i; j++) {
							mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation
						}

						for (j = i + 1; j < matrix.length; j++) {
							mu[i][j] = matrix[i][j];
						}

						if (i+1 < matrix.length) {
							sum = subtract(sum, matrix[i + 1][i + 1]);
						}
					}

					return mu;
				};

				var fa = matrix;
				for (var i = 0; i < rows - 1; i++) {
					fa = multiply(compute_mu(fa), matrix);
				}

				if (rows % 2 == 0) {
					return unaryMinus(fa[0][0]);
				} else {
					return fa[0][0];
				}
			}
		}
	}

	exports.name = 'det';
	exports.factory = factory;


},{"../../type/matrix/function/matrix":553,"../../utils/index":601,"../arithmetic/add":371,"../arithmetic/multiply":391,"../arithmetic/subtract":400,"../arithmetic/unaryMinus":401}],434:[function(require,module,exports){
	'use strict';

	var array     = require('../../utils/array');
	var clone     = require('../../utils/object').clone;
	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));
  
		/**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
   *    math.diag(a);   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, eye
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
		var diag = typed('diag', {
			// FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments

			'Array': function (x) {
				return _diag(x, 0, array.size(x), null);
			},

			'Array, number': function (x, k) {
				return _diag(x, k, array.size(x), null);
			},
    
			'Array, BigNumber': function (x, k) {
				return _diag(x, k.toNumber(), array.size(x), null);
			},

			'Array, string': function (x, format) {
				return _diag(x, 0, array.size(x), format);
			},

			'Array, number, string': function (x, k, format) {
				return _diag(x, k, array.size(x), format);
			},

			'Array, BigNumber, string': function (x, k, format) {
				return _diag(x, k.toNumber(), array.size(x), format);
			},

			'Matrix': function (x) {
				return _diag(x, 0, x.size(), x.storage());
			},

			'Matrix, number': function (x, k) {
				return _diag(x, k, x.size(), x.storage());
			},

			'Matrix, BigNumber': function (x, k) {
				return _diag(x, k.toNumber(), x.size(), x.storage());
			},

			'Matrix, string': function (x, format) {
				return _diag(x, 0, x.size(), format);
			},

			'Matrix, number, string': function (x, k, format) {
				return _diag(x, k, x.size(), format);
			},

			'Matrix, BigNumber, string': function (x, k, format) {
				return _diag(x, k.toNumber(), x.size(), format);
			}
		});

		diag.toTex = undefined; // use default template

		return diag;

		/**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */
		function _diag (x, k, size, format) {
			if (!isInteger(k)) {
				throw new TypeError ('Second parameter in function diag must be an integer');
			}
    
			var kSuper = k > 0 ? k : 0;
			var kSub = k < 0 ? -k : 0;

			// check dimensions
			switch (size.length) {
			case 1:
				return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
			case 2:
				return _getDiagonal(x, k, format, size, kSub, kSuper);
			}
			throw new RangeError('Matrix for function diag must be 2 dimensional');
		}
  
		function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
			// matrix size
			var ms = [l + kSub, l + kSuper];
			// get matrix constructor
			var F = type.Matrix.storage(format || 'dense');
			// create diagonal matrix
			var m = F.diagonal(ms, x, k);
			// check we need to return a matrix
			return format !== null ? m : m.valueOf();
		}
  
		function _getDiagonal(x, k, format, s, kSub, kSuper) {
			// check x is a Matrix
			if (x && x.isMatrix === true) {
				// get diagonal matrix
				var dm = x.diagonal(k);
				// check we need to return a matrix
				if (format !== null) {
					// check we need to change matrix format
					if (format !== dm.storage())
						return matrix(dm, format);
					return dm;
				}
				return dm.valueOf();
			}
			// vector size
			var n = Math.min(s[0] - kSub, s[1] - kSuper);
			// diagonal values
			var vector = [];
			// loop diagonal
			for (var i = 0; i < n; i++) {
				vector[i] = x[i + kSub][i + kSuper];
			}
			// check we need to return a matrix
			return format !== null ? matrix(vector) : vector;
		}
	}

	exports.name = 'diag';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/number":603,"../../utils/object":604}],435:[function(require,module,exports){
	'use strict';

	var size = require('../../utils/array').size;

	function factory (type, config, load, typed) {
		var add      = load(require('../arithmetic/add'));
		var multiply = load(require('../arithmetic/multiply'));

		/**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
   *
   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
		var dot = typed('dot', {
			'Matrix, Matrix': function (x, y) {
				return _dot(x.toArray(), y.toArray());
			},

			'Matrix, Array': function (x, y) {
				return _dot(x.toArray(), y);
			},

			'Array, Matrix': function (x, y) {
				return _dot(x, y.toArray());
			},

			'Array, Array': _dot
		});
  
		dot.toTex = {2: '\\left(${args[0]}\\cdot${args[1]}\\right)'};

		return dot;

		/**
   * Calculate the dot product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {number} Returns the dot product of x and y
   * @private
   */
		// TODO: double code with math.multiply
		function _dot(x, y) {
			var xSize= size(x);
			var ySize = size(y);
			var len = xSize[0];

			if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message
			if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
			if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');

			var prod = 0;
			for (var i = 0; i < len; i++) {
				prod = add(prod, multiply(x[i], y[i]));
			}

			return prod;
		}
	}

	exports.name = 'dot';
	exports.factory = factory;

},{"../../utils/array":581,"../arithmetic/add":371,"../arithmetic/multiply":391}],436:[function(require,module,exports){
	'use strict';

	var array = require('../../utils/array');
	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../type/matrix/function/matrix'));
  
		/**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.eye(n)
   *    math.eye(n, format)
   *    math.eye(m, n)
   *    math.eye(m, n, format)
   *    math.eye([m, n])
   *    math.eye([m, n], format)
   *
   * Examples:
   *
   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
		var eye = typed('eye', {
			'': function () {
				return (config.matrix === 'Matrix') ? matrix([]) : [];
			},

			'string': function (format) {
				return matrix(format);
			},

			'number | BigNumber': function (rows) {
				return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
			},
    
			'number | BigNumber, string': function (rows, format) {
				return _eye(rows, rows, format);
			},

			'number | BigNumber, number | BigNumber': function (rows, cols) {
				return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
			},
    
			'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {
				return _eye(rows, cols, format);
			},

			'Array':  function (size) {
				return _eyeVector(size);
			},
    
			'Array, string':  function (size, format) {
				return _eyeVector(size, format);
			},

			'Matrix': function (size) {
				return _eyeVector(size.valueOf(), size.storage());
			},
    
			'Matrix, string': function (size, format) {
				return _eyeVector(size.valueOf(), format);
			}
		});

		eye.toTex = undefined; // use default template

		return eye;

		function _eyeVector (size, format) {
			switch (size.length) {
			case 0: return format ? matrix(format) : [];
			case 1: return _eye(size[0], size[0], format);
			case 2: return _eye(size[0], size[1], format);
			default: throw new Error('Vector containing two values expected');
			}
		}

		/**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */
		function _eye (rows, cols, format) {
			// BigNumber constructor with the right precision
			var Big = (rows && rows.isBigNumber === true)
				? type.BigNumber
				: (cols && cols.isBigNumber === true)
					? type.BigNumber
					: null;

			if (rows && rows.isBigNumber === true) rows = rows.toNumber();
			if (cols && cols.isBigNumber === true) cols = cols.toNumber();

			if (!isInteger(rows) || rows < 1) {
				throw new Error('Parameters in function eye must be positive integers');
			}
			if (!isInteger(cols) || cols < 1) {
				throw new Error('Parameters in function eye must be positive integers');
			}
    
			var one = Big ? new type.BigNumber(1) : 1;
			var defaultValue = Big ? new Big(0) : 0;
			var size = [rows, cols];
    
			// check we need to return a matrix
			if (format) {
				// get matrix storage constructor
				var F = type.Matrix.storage(format);
				// create diagonal matrix (use optimized implementation for storage format)
				return F.diagonal(size, one, 0, defaultValue);
			}
    
			// create and resize array
			var res = array.resize([], size, defaultValue);
			// fill in ones on the diagonal
			var minimum = rows < cols ? rows : cols;
			// fill diagonal
			for (var d = 0; d < minimum; d++) {
				res[d][d] = one;
			}
			return res;
		}
	}

	exports.name = 'eye';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/number":603}],437:[function(require,module,exports){
	'use strict';

	var size = require('../../utils/array').size;
	var maxArgumentCount = require('../../utils/function').maxArgumentCount;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));
  
		/**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0;
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/); // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
		var filter = typed('filter', {
			'Array, function': _filterCallback,

			'Array, RegExp': _filterRegExp,

			'Matrix, function': function (x, test) {
				return matrix(_filterCallback(x.toArray(), test));
			},

			'Matrix, RegExp': function (x, test) {
				return matrix(_filterRegExp(x.toArray(), test));
			}
		});

		filter.toTex = undefined; // use default template

		return filter;
	}

	/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */
	function _filterCallback (x, callback) {
		if (size(x).length !== 1) {
			throw new Error('Only one dimensional matrices supported');
		}

		// figure out what number of arguments the callback function expects
		var args = maxArgumentCount(callback);

		return x.filter(function (value, index, array) {
			// invoke the callback function with the right number of arguments
			if (args === 1) {
				return callback(value);
			}
			else if (args === 2) {
				return callback(value, [index]);
			}
			else { // 3 or -1
				return callback(value, [index], array);
			}
		});
	}

	/**
 * Filter values in a callback given a regular expression
 * @param {Array} x
 * @param {Function} regexp
 * @return {Array} Returns the filtered array
 * @private
 */
	function _filterRegExp (x, regexp) {
		if (size(x).length !== 1) {
			throw new Error('Only one dimensional matrices supported');
		}

		return x.filter(function (entry) {
			return regexp.test(entry);
		});
	}

	exports.name = 'filter';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/function":600}],438:[function(require,module,exports){
	'use strict';

	var clone = require('../../utils/object').clone;
	var _flatten = require('../../utils/array').flatten;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
		var flatten = typed('flatten', {
			'Array': function (x) {
				return _flatten(clone(x));
			},

			'Matrix': function (x) {
				var flat = _flatten(clone(x.toArray()));
				// TODO: return the same matrix type as x
				return matrix(flat);
			}
		});

		flatten.toTex = undefined; // use default template

		return flatten;
	}

	exports.name = 'flatten';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/object":604}],439:[function(require,module,exports){
	'use strict';

	var maxArgumentCount = require('../../utils/function').maxArgumentCount;

	function factory (type, config, load, typed) {
		/**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value);
   *    });
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
		var forEach = typed('forEach', {
			'Array, function': _forEach,

			'Matrix, function': function (x, callback) {
				return x.forEach(callback);
			}
		});

		forEach.toTex = undefined; // use default template

		return forEach;
	}

	/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */
	function _forEach (array, callback) {
		// figure out what number of arguments the callback function expects
		var args = maxArgumentCount(callback);

		var recurse = function (value, index) {
			if (Array.isArray(value)) {
				value.forEach(function (child, i) {
					// we create a copy of the index array and append the new index value
					recurse(child, index.concat(i));
				});
			}
			else {
				// invoke the callback function with the right number of arguments
				if (args === 1) {
					callback(value);
				}
				else if (args === 2) {
					callback(value, index);
				}
				else { // 3 or -1
					callback(value, index, array);
				}
			}
		};
		recurse(array, []);
	}

	exports.name = 'forEach';
	exports.factory = factory;

},{"../../utils/function":600}],440:[function(require,module,exports){
	module.exports = [
		require('./concat'),
		require('./cross'),
		require('./det'),
		require('./diag'),
		require('./dot'),
		require('./eye'),
		require('./filter'),
		require('./flatten'),
		require('./forEach'),
		require('./inv'),
		require('./map'),
		require('./ones'),
		require('./partitionSelect'),
		require('./range'),
		require('./resize'),
		require('./size'),
		require('./sort'),
		require('./squeeze'),
		require('./subset'),
		require('./trace'),
		require('./transpose'),
		require('./zeros')
	];

},{"./concat":431,"./cross":432,"./det":433,"./diag":434,"./dot":435,"./eye":436,"./filter":437,"./flatten":438,"./forEach":439,"./inv":441,"./map":442,"./ones":443,"./partitionSelect":444,"./range":445,"./resize":446,"./size":447,"./sort":448,"./squeeze":449,"./subset":450,"./trace":451,"./transpose":452,"./zeros":453}],441:[function(require,module,exports){
	'use strict';

	var util = require('../../utils/index');

	function factory (type, config, load, typed) {
		var matrix       = load(require('../../type/matrix/function/matrix'));
		var divideScalar = load(require('../arithmetic/divideScalar'));
		var addScalar    = load(require('../arithmetic/addScalar'));
		var multiply     = load(require('../arithmetic/multiply'));
		var unaryMinus   = load(require('../arithmetic/unaryMinus'));
		var det          = load(require('../matrix/det'));
		var eye          = load(require('./eye'));

		/**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4);                 // returns 0.25
   *     1 / 4;                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
		var inv = typed('inv', {
			'Array | Matrix': function (x) {
				var size = (x.isMatrix === true) ? x.size() : util.array.size(x);
				switch (size.length) {
				case 1:
					// vector
					if (size[0] == 1) {
						if (x.isMatrix === true) {
							return matrix([
								divideScalar(1, x.valueOf()[0])
							]);
						}
						else {
							return [
								divideScalar(1, x[0])
							];
						}
					}
					else {
						throw new RangeError('Matrix must be square ' +
            '(size: ' + util.string.format(size) + ')');
					}

				case 2:
					// two dimensional array
					var rows = size[0];
					var cols = size[1];
					if (rows == cols) {
						if (x.isMatrix === true) {
							return matrix(
								_inv(x.valueOf(), rows, cols),
								x.storage()
							);
						}
						else {
							// return an Array
							return _inv(x, rows, cols);
						}
					}
					else {
						throw new RangeError('Matrix must be square ' +
            '(size: ' + util.string.format(size) + ')');
					}

				default:
					// multi dimensional array
					throw new RangeError('Matrix must be two dimensional ' +
          '(size: ' + util.string.format(size) + ')');
				}
			},

			'any': function (x) {
				// scalar
				return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
			}
		});

		/**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */
		function _inv (mat, rows, cols){
			var r, s, f, value, temp;

			if (rows == 1) {
				// this is a 1 x 1 matrix
				value = mat[0][0];
				if (value == 0) {
					throw Error('Cannot calculate inverse, determinant is zero');
				}
				return [[
					divideScalar(1, value)
				]];
			}
			else if (rows == 2) {
				// this is a 2 x 2 matrix
				var d = det(mat);
				if (d == 0) {
					throw Error('Cannot calculate inverse, determinant is zero');
				}
				return [
					[
						divideScalar(mat[1][1], d),
						divideScalar(unaryMinus(mat[0][1]), d)
					],
					[
						divideScalar(unaryMinus(mat[1][0]), d),
						divideScalar(mat[0][0], d)
					]
				];
			}
			else {
				// this is a matrix of 3 x 3 or larger
				// calculate inverse using gauss-jordan elimination
				//      http://en.wikipedia.org/wiki/Gaussian_elimination
				//      http://mathworld.wolfram.com/MatrixInverse.html
				//      http://math.uww.edu/~mcfarlat/inverse.htm

				// make a copy of the matrix (only the arrays, not of the elements)
				var A = mat.concat();
				for (r = 0; r < rows; r++) {
					A[r] = A[r].concat();
				}

				// create an identity matrix which in the end will contain the
				// matrix inverse
				var B = eye(rows).valueOf();

				// loop over all columns, and perform row reductions
				for (var c = 0; c < cols; c++) {
					// element Acc should be non zero. if not, swap content
					// with one of the lower rows
					r = c;
					while (r < rows && A[r][c] == 0) {
						r++;
					}
					if (r == rows || A[r][c] == 0) {
						// TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)
						throw Error('Cannot calculate inverse, determinant is zero');
					}
					if (r != c) {
						temp = A[c]; A[c] = A[r]; A[r] = temp;
						temp = B[c]; B[c] = B[r]; B[r] = temp;
					}

					// eliminate non-zero values on the other rows at column c
					var Ac = A[c],
						Bc = B[c];
					for (r = 0; r < rows; r++) {
						var Ar = A[r],
							Br = B[r];
						if(r != c) {
							// eliminate value at column c and row r
							if (Ar[c] != 0) {
								f = divideScalar(unaryMinus(Ar[c]), Ac[c]);

								// add (f * row c) to row r to eliminate the value
								// at column c
								for (s = c; s < cols; s++) {
									Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
								}
								for (s = 0; s < cols; s++) {
									Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));
								}
							}
						}
						else {
							// normalize value at Acc to 1,
							// divide each value on row r with the value at Acc
							f = Ac[c];
							for (s = c; s < cols; s++) {
								Ar[s] = divideScalar(Ar[s], f);
							}
							for (s = 0; s < cols; s++) {
								Br[s] = divideScalar(Br[s], f);
							}
						}
					}
				}
				return B;
			}
		}

		inv.toTex = {1: '\\left(${args[0]}\\right)^{-1}'};

		return inv;
	}

	exports.name = 'inv';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/index":601,"../arithmetic/addScalar":372,"../arithmetic/divideScalar":377,"../arithmetic/multiply":391,"../arithmetic/unaryMinus":401,"../matrix/det":433,"./eye":436}],442:[function(require,module,exports){
	'use strict';

	var maxArgumentCount = require('../../utils/function').maxArgumentCount;

	function factory (type, config, load, typed) {
		/**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value;
   *    });  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
		var map = typed('map', {
			'Array, function': _map,

			'Matrix, function': function (x, callback) {
				return x.map(callback);
			}
		});

		map.toTex = undefined; // use default template

		return map;
	}

	/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */
	function _map (array, callback) {
		// figure out what number of arguments the callback function expects
		var args = maxArgumentCount(callback);

		var recurse = function (value, index) {
			if (Array.isArray(value)) {
				return value.map(function (child, i) {
					// we create a copy of the index array and append the new index value
					return recurse(child, index.concat(i));
				});
			}
			else {
				// invoke the callback function with the right number of arguments
				if (args === 1) {
					return callback(value);
				}
				else if (args === 2) {
					return callback(value, index);
				}
				else { // 3 or -1
					return callback(value, index, array);
				}
			}
		};

		return recurse(array, []);
	}

	exports.name = 'map';
	exports.factory = factory;

},{"../../utils/function":600}],443:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var resize = require('../../utils/array').resize;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3);                   // returns [1, 1, 1]
   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, eye, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
		var ones = typed('ones', {
			'': function () {
				return (config.matrix === 'Array')
					? _ones([])
					: _ones([], 'default');
			},

			// math.ones(m, n, p, ..., format)
			// TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
			'...number | BigNumber | string': function (size) {
				var last = size[size.length - 1];
				if (typeof last === 'string') {
					var format = size.pop();
					return _ones(size, format);
				}
				else if (config.matrix === 'Array') {
					return _ones(size);
				}
				else {
					return _ones(size, 'default');
				}
			},

			'Array': _ones,

			'Matrix': function (size) {
				var format = size.storage();
				return _ones(size.valueOf(), format);
			},

			'Array | Matrix, string': function (size, format) {
				return _ones (size.valueOf(), format);
			}
		});

		ones.toTex = undefined; // use default template

		return ones;

		/**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */
		function _ones(size, format) {
			var hasBigNumbers = _normalize(size);
			var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
			_validate(size);

			if (format) {
				// return a matrix
				var m = matrix(format);
				if (size.length > 0) {
					return m.resize(size, defaultValue);
				}
				return m;
			}
			else {
				// return an Array
				var arr = [];
				if (size.length > 0) {
					return resize(arr, size, defaultValue);
				}
				return arr;
			}
		}

		// replace BigNumbers with numbers, returns true if size contained BigNumbers
		function _normalize(size) {
			var hasBigNumbers = false;
			size.forEach(function (value, index, arr) {
				if (value && value.isBigNumber === true) {
					hasBigNumbers = true;
					arr[index] = value.toNumber();
				}
			});
			return hasBigNumbers;
		}

		// validate arguments
		function _validate (size) {
			size.forEach(function (value) {
				if (typeof value !== 'number' || !isInteger(value) || value < 0) {
					throw new Error('Parameters in function ones must be positive integers');
				}
			});
		}
	}

	exports.name = 'ones';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/number":603}],444:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		var asc = load(require('../relational/compare'));
		function desc(a, b) {
			return -asc(a, b);
		}

		/**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2);           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length;
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved; zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */
		return typed('partitionSelect', {
			'Array | Matrix, number': function (x, k) {
				return _partitionSelect(x, k, asc);
			},

			'Array | Matrix, number, string': function (x, k, compare) {
				if (compare === 'asc') {
					return _partitionSelect(x, k, asc);
				}
				else if (compare === 'desc') {
					return _partitionSelect(x, k, desc);
				}
				else {
					throw new Error('Compare string must be "asc" or "desc"');
				}
			},

			'Array | Matrix, number, function': _partitionSelect
		});

		function _partitionSelect(x, k, compare) {
			if (!isInteger(k) || k < 0) {
				throw new Error('k must be a non-negative integer');
			}

			if (x && x.isMatrix) {
				var size = x.size();
				if (size.length > 1) {
					throw new Error('Only one dimensional matrices supported');
				}
				return quickSelect(x.valueOf(), k, compare);
			}

			if (Array.isArray(x)) {
				return quickSelect(x, k, compare);
			}
		}

		/**
   * Quickselect algorithm.
   * Code adapted from:
   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */
		function quickSelect(arr, k, compare) {
			if (k >= arr.length) {
				throw new Error('k out of bounds');
			}

			var from = 0;
			var to = arr.length - 1;

			// if from == to we reached the kth element
			while (from < to) {
				var r = from;
				var w = to;
				var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];

				// stop if the reader and writer meets
				while (r < w) {
					// arr[r] >= pivot
					if (compare(arr[r], pivot) >= 0) { // put the large values at the end
						var tmp = arr[w];
						arr[w] = arr[r];
						arr[r] = tmp;
						--w;
					} else { // the value is smaller than the pivot, skip
						++r;
					}
				}

				// if we stepped up (r++) we need to step one down (arr[r] > pivot)
				if (compare(arr[r], pivot) > 0) {
					--r;
				}

				// the r pointer is on the end of the first k elements
				if (k <= r) {
					to = r;
				} else {
					from = r + 1;
				}
			}

			return arr[k];
		}
	}

	exports.name = 'partitionSelect';
	exports.factory = factory;

},{"../../utils/number":603,"../relational/compare":465}],445:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		var ZERO = new type.BigNumber(0);
		var ONE = new type.BigNumber(1);

		/**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6);        // [2, 3, 4, 5]
   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6');     // [2, 3, 4, 5]
   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
		var range = typed('range', {
			// TODO: simplify signatures when typed-function supports default values and optional arguments

			// TODO: a number or boolean should not be converted to string here
			'string': _strRange,
			'string, boolean': _strRange,

			'number, number':  function (start, end) {
				return _out(_rangeEx(start, end, 1));
			},
			'number, number, number': function (start, end, step) {
				return _out(_rangeEx(start, end, step));
			},
			'number, number, boolean': function (start, end, includeEnd) {
				return includeEnd
					? _out(_rangeInc(start, end, 1))
					: _out(_rangeEx(start, end, 1));
			},
			'number, number, number, boolean': function (start, end, step, includeEnd) {
				return includeEnd
					? _out(_rangeInc(start, end, step))
					: _out(_rangeEx(start, end, step));
			},

			'BigNumber, BigNumber':  function (start, end) {
				return _out(_bigRangeEx(start, end, ONE));
			},
			'BigNumber, BigNumber, BigNumber': function (start, end, step) {
				return _out(_bigRangeEx(start, end, step));
			},
			'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {
				return includeEnd
					? _out(_bigRangeInc(start, end, ONE))
					: _out(_bigRangeEx(start, end, ONE));
			},
			'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {
				return includeEnd
					? _out(_bigRangeInc(start, end, step))
					: _out(_bigRangeEx(start, end, step));
			}

		});

		range.toTex = undefined; // use default template

		return range;

		function _out(arr) {
			return config.matrix === 'Array' ? arr : matrix(arr);
		}

		function _strRange (str, includeEnd) {
			var r = _parse(str);
			if (!r){
				throw new SyntaxError('String "' + str + '" is no valid range');
			}

			var fn;
			if (config.number === 'BigNumber') {
				fn = includeEnd ? _bigRangeInc : _bigRangeEx;
				return _out(fn(
					new type.BigNumber(r.start),
					new type.BigNumber(r.end),
					new type.BigNumber(r.step)));
			}
			else {
				fn = includeEnd ? _rangeInc : _rangeEx;
				return _out(fn(r.start, r.end, r.step));
			}
		}

		/**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */
		function _rangeEx (start, end, step) {
			var array = [],
				x = start;
			if (step > 0) {
				while (x < end) {
					array.push(x);
					x += step;
				}
			}
			else if (step < 0) {
				while (x > end) {
					array.push(x);
					x += step;
				}
			}

			return array;
		}

		/**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */
		function _rangeInc (start, end, step) {
			var array = [],
				x = start;
			if (step > 0) {
				while (x <= end) {
					array.push(x);
					x += step;
				}
			}
			else if (step < 0) {
				while (x >= end) {
					array.push(x);
					x += step;
				}
			}

			return array;
		}

		/**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */
		function _bigRangeEx (start, end, step) {
			var array = [],
				x = start;
			if (step.gt(ZERO)) {
				while (x.lt(end)) {
					array.push(x);
					x = x.plus(step);
				}
			}
			else if (step.lt(ZERO)) {
				while (x.gt(end)) {
					array.push(x);
					x = x.plus(step);
				}
			}

			return array;
		}

		/**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */
		function _bigRangeInc (start, end, step) {
			var array = [],
				x = start;
			if (step.gt(ZERO)) {
				while (x.lte(end)) {
					array.push(x);
					x = x.plus(step);
				}
			}
			else if (step.lt(ZERO)) {
				while (x.gte(end)) {
					array.push(x);
					x = x.plus(step);
				}
			}

			return array;
		}

		/**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */
		function _parse (str) {
			var args = str.split(':');

			// number
			var nums = args.map(function (arg) {
				// use Number and not parseFloat as Number returns NaN on invalid garbage in the string
				return Number(arg);
			});

			var invalid = nums.some(function (num) {
				return isNaN(num);
			});
			if(invalid) {
				return null;
			}

			switch (nums.length) {
			case 2:
				return {
					start: nums[0],
					end: nums[1],
					step: 1
				};

			case 3:
				return {
					start: nums[0],
					end: nums[2],
					step: nums[1]
				};

			default:
				return null;
			}
		}

	}

	exports.name = 'range';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553}],446:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../error/DimensionError');
	var ArgumentsError = require('../../error/ArgumentsError');

	var isInteger = require('../../utils/number').isInteger;
	var format = require('../../utils/string').format;
	var clone = require('../../utils/object').clone;
	var array = require('../../utils/array');

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!");    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
		// TODO: rework resize to a typed-function
		var resize = function resize (x, size, defaultValue) {
			if (arguments.length != 2 && arguments.length != 3) {
				throw new ArgumentsError('resize', arguments.length, 2, 3);
			}

			if (size && size.isMatrix === true) {
				size = size.valueOf(); // get Array
			}

			if (size.length && size[0] && size[0].isBigNumber === true) {
				// convert bignumbers to numbers
				size = size.map(function (value) {
					return (value && value.isBigNumber === true) ? value.toNumber() : value;
				});
			}
    
			// check x is a Matrix
			if (x && x.isMatrix === true) {
				// use optimized matrix implementation, return copy
				return x.resize(size, defaultValue, true);
			}
    
			if (typeof x === 'string') {
				// resize string
				return _resizeString(x, size, defaultValue);
			}
    
			// check result should be a matrix
			var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');

			if (size.length == 0) {
				// output a scalar
				while (Array.isArray(x)) {
					x = x[0];
				}

				return clone(x);
			}
			else {
				// output an array/matrix
				if (!Array.isArray(x)) {
					x = [x];
				}
				x = clone(x);

				var res = array.resize(x, size, defaultValue);
				return asMatrix ? matrix(res) : res;
			}
		};

		resize.toTex = undefined; // use default template

		return resize;

		/**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */
		function _resizeString(str, size, defaultChar) {
			if (defaultChar !== undefined) {
				if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
					throw new TypeError('Single character expected as defaultValue');
				}
			}
			else {
				defaultChar = ' ';
			}

			if (size.length !== 1) {
				throw new DimensionError(size.length, 1);
			}
			var len = size[0];
			if (typeof len !== 'number' || !isInteger(len)) {
				throw new TypeError('Invalid size, must contain positive integers ' +
          '(size: ' + format(size) + ')');
			}

			if (str.length > len) {
				return str.substring(0, len);
			}
			else if (str.length < len) {
				var res = str;
				for (var i = 0, ii = len - str.length; i < ii; i++) {
					res += defaultChar;
				}
				return res;
			}
			else {
				return str;
			}
		}
	}

	exports.name = 'resize';
	exports.factory = factory;

},{"../../error/ArgumentsError":124,"../../error/DimensionError":125,"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/number":603,"../../utils/object":604,"../../utils/string":605}],447:[function(require,module,exports){
	'use strict';

	var array = require('../../utils/array');

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3);                  // returns []
   *     math.size('hello world');        // returns [11]
   *
   *     var A = [[1, 2, 3], [4, 5, 6]];
   *     math.size(A);                    // returns [2, 3]
   *     math.size(math.range(1,6));      // returns [5]
   *
   * See also:
   *
   *     resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
		var size = typed('size', {
			'Matrix': function (x) {
				// TODO: return the same matrix type as the input
				return matrix(x.size());
			},

			'Array': array.size,

			'string': function (x) {
				return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);
			},

			'number | Complex | BigNumber | Unit | boolean | null': function (x) {
				// scalar
				return (config.matrix === 'Array') ? [] : matrix([]);
			}
		});

		size.toTex = undefined; // use default template

		return size;
	}

	exports.name = 'size';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581}],448:[function(require,module,exports){
	'use strict';

	var size = require('../../utils/array').size;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));
		var asc = load(require('../relational/compare'));
		var desc = function (a, b) {
			return -asc(a, b);
		};

		/**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]); // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length;
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional _comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */
		var sort = typed('sort', {
			'Array': function (x) {
				_arrayIsVector(x);
				return x.sort(asc);
			},

			'Matrix': function (x) {
				_matrixIsVector(x);
				return matrix(x.toArray().sort(asc), x.storage());
			},

			'Array, function': function (x, _comparator) {
				_arrayIsVector(x);
				return x.sort(_comparator);
			},

			'Matrix, function': function (x, _comparator) {
				_matrixIsVector(x);
				return matrix(x.toArray().sort(_comparator), x.storage());
			},

			'Array, string': function (x, order) {
				_arrayIsVector(x);
				return x.sort(_comparator(order));
			},

			'Matrix, string': function (x, order) {
				_matrixIsVector(x);
				return matrix(x.toArray().sort(_comparator(order)), x.storage());
			}
		});

		sort.toTex = undefined; // use default template

		/**
   * Get the comparator for given order ('asc' or 'desc')
   * @param {'asc' | 'desc'} order
   * @return {Function} Returns a _comparator function
   */
		function _comparator (order) {
			if (order === 'asc') {
				return asc;
			}
			else if (order === 'desc') {
				return desc;
			}
			else {
				throw new Error('String "asc" or "desc" expected');
			}
		}

		/**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */
		function _arrayIsVector (array) {
			if (size(array).length !== 1) {
				throw new Error('One dimensional array expected');
			}
		}

		/**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */
		function _matrixIsVector (matrix) {
			if (matrix.size().length !== 1) {
				throw new Error('One dimensional matrix expected');
			}
		}

		return sort;
	}

	exports.name = 'sort';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../relational/compare":465}],449:[function(require,module,exports){
	'use strict';

	var object = require('../../utils/object');
	var array = require('../../utils/array');

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3]);           // returns 3
   *     math.squeeze([[3]]);         // returns 3
   *
   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)
   *
   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
		var squeeze = typed('squeeze', {
			'Array': function (x) {
				return array.squeeze(object.clone(x));
			},

			'Matrix': function (x) {
				var res = array.squeeze(x.toArray());
				// FIXME: return the same type of matrix as the input
				return Array.isArray(res) ? matrix(res) : res;
			},

			'any': function (x) {
				// scalar
				return object.clone(x);
			}
		});

		squeeze.toTex = undefined; // use default template

		return squeeze;
	}

	exports.name = 'squeeze';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/object":604}],450:[function(require,module,exports){
	'use strict';

	var clone = require('../../utils/object').clone;
	var validateIndex = require('../../utils/array').validateIndex;
	var DimensionError = require('../../error/DimensionError');

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     var d = [[1, 2], [3, 4]];
   *     math.subset(d, math.index(1, 0));        // returns 3
   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]
   *
   *     // replace a subset
   *     var e = [];
   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]
   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
		var subset = typed('subset', {
			// get subset
			'Array, Index': function (value, index) {
				var m = matrix(value);
				var subset = m.subset(index);       // returns a Matrix
				return subset && subset.valueOf();  // return an Array (like the input)
			},

			'Matrix, Index': function (value, index) {
				return value.subset(index);
			},

			'Object, Index': _getObjectProperty,

			'string, Index': _getSubstring,

			// set subset
			'Array, Index, any': function (value, index, replacement) {
				return matrix(clone(value))
					.subset(index, replacement, undefined)
					.valueOf();
			},

			'Array, Index, any, any': function (value, index, replacement, defaultValue) {
				return matrix(clone(value))
					.subset(index, replacement, defaultValue)
					.valueOf();
			},

			'Matrix, Index, any': function (value, index, replacement) {
				return value.clone().subset(index, replacement);
			},

			'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {
				return value.clone().subset(index, replacement, defaultValue);
			},

			'string, Index, string': _setSubstring,
			'string, Index, string, string': _setSubstring,
			'Object, Index, any': _setObjectProperty
		});

		subset.toTex = undefined; // use default template

		return subset;

		/**
   * Retrieve a subset of a string
   * @param {string} str            string from which to get a substring
   * @param {Index} index           An index containing ranges for each dimension
   * @returns {string} substring
   * @private
   */
		function _getSubstring(str, index) {
			if (!index || index.isIndex !== true) {
				// TODO: better error message
				throw new TypeError('Index expected');
			}
			if (index.size().length != 1) {
				throw new DimensionError(index.size().length, 1);
			}

			// validate whether the range is out of range
			var strLen = str.length;
			validateIndex(index.min()[0], strLen);
			validateIndex(index.max()[0], strLen);

			var range = index.dimension(0);

			var substr = '';
			range.forEach(function (v) {
				substr += str.charAt(v);
			});

			return substr;
		}

		/**
   * Replace a substring in a string
   * @param {string} str            string to be replaced
   * @param {Index} index           An index containing ranges for each dimension
   * @param {string} replacement    Replacement string
   * @param {string} [defaultValue] Default value to be uses when resizing
   *                                the string. is ' ' by default
   * @returns {string} result
   * @private
   */
		function _setSubstring(str, index, replacement, defaultValue) {
			if (!index || index.isIndex !== true) {
				// TODO: better error message
				throw new TypeError('Index expected');
			}
			if (index.size().length != 1) {
				throw new DimensionError(index.size().length, 1);
			}
			if (defaultValue !== undefined) {
				if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
					throw new TypeError('Single character expected as defaultValue');
				}
			}
			else {
				defaultValue = ' ';
			}

			var range = index.dimension(0);
			var len = range.size()[0];

			if (len != replacement.length) {
				throw new DimensionError(range.size()[0], replacement.length);
			}

			// validate whether the range is out of range
			var strLen = str.length;
			validateIndex(index.min()[0]);
			validateIndex(index.max()[0]);

			// copy the string into an array with characters
			var chars = [];
			for (var i = 0; i < strLen; i++) {
				chars[i] = str.charAt(i);
			}

			range.forEach(function (v, i) {
				chars[v] = replacement.charAt(i[0]);
			});

			// initialize undefined characters with a space
			if (chars.length > strLen) {
				for (i = strLen - 1, len = chars.length; i < len; i++) {
					if (!chars[i]) {
						chars[i] = defaultValue;
					}
				}
			}

			return chars.join('');
		}
	}

	/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */
	function _getObjectProperty (object, index) {
		if (index.size().length !== 1) {
			throw new DimensionError(index.size(), 1);
		}

		var key = index.dimension(0);
		if (typeof key !== 'string') {
			throw new TypeError('String expected as index to retrieve an object property');
		}

		return object[key];
	}

	/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */
	function _setObjectProperty (object, index, replacement) {
		if (index.size().length !== 1) {
			throw new DimensionError(index.size(), 1);
		}

		var key = index.dimension(0);
		if (typeof key !== 'string') {
			throw new TypeError('String expected as index to retrieve an object property');
		}

		// clone the object, and apply the property to the clone
		var updated = clone(object);
		updated[key] = replacement;

		return updated;
	}

	exports.name = 'subset';
	exports.factory = factory;

},{"../../error/DimensionError":125,"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/object":604}],451:[function(require,module,exports){
	'use strict';

	var clone = require('../../utils/object').clone;
	var format = require('../../utils/string').format;

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../type/matrix/function/matrix'));
		var add = load(require('../arithmetic/add'));

		/**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]); // returns 5
   *
   *    var A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A); // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
		var trace = typed('trace', {
    
			'Array': function (x) {
				// use dense matrix implementation
				return trace(matrix(x));
			},

			'Matrix': function (x) {
				// result
				var c;
				// process storage format
				switch (x.storage()) {
				case 'dense':
					c = _denseTrace(x);
					break;
				case 'sparse':
					c = _sparseTrace(x);
					break;
				}
				return c;
			},
    
			'any': clone
		});
  
		var _denseTrace = function (m) {
			// matrix size & data
			var size = m._size;
			var data = m._data;
    
			// process dimensions
			switch (size.length) {
			case 1:
				// vector
				if (size[0] == 1) {
					// return data[0]
					return clone(data[0]);
				}
				throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
			case 2:
				// two dimensional
				var rows = size[0];
				var cols = size[1];
				if (rows === cols) {
					// calulate sum
					var sum = 0;
					// loop diagonal
					for (var i = 0; i < rows; i++)
						sum = add(sum, data[i][i]);
					// return trace
					return sum;
				}
				throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        
			default:
				// multi dimensional
				throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
			}
		};
  
		var _sparseTrace = function (m) {
			// matrix arrays
			var values = m._values;
			var index = m._index;
			var ptr = m._ptr;
			var size = m._size;
			// check dimensions
			var rows = size[0];
			var columns = size[1];
			// matrix must be square
			if (rows === columns) {
				// calulate sum
				var sum = 0;
				// check we have data (avoid looping columns)
				if (values.length > 0) {
					// loop columns
					for (var j = 0; j < columns; j++) {
						// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
						var k0 = ptr[j];
						var k1 = ptr[j + 1];
						// loop k within [k0, k1[
						for (var k = k0; k < k1; k++) {
							// row index
							var i = index[k];
							// check row
							if (i === j) {
								// accumulate value
								sum = add(sum, values[k]);
								// exit loop
								break;
							}
							if (i > j) {
								// exit loop, no value on the diagonal for column j
								break;
							}
						}
					}
				}
				// return trace
				return sum;
			}
			throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   
		};

		trace.toTex = {1: '\\mathrm{tr}\\left(${args[0]}\\right)'};
  
		return trace;
	}

	exports.name = 'trace';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/object":604,"../../utils/string":605,"../arithmetic/add":371}],452:[function(require,module,exports){
	'use strict';

	var clone = require('../../utils/object').clone;
	var format = require('../../utils/string').format;

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var DenseMatrix = type.DenseMatrix,
			SparseMatrix = type.SparseMatrix;

		/**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only two dimensional matrices are supported.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     var A = [[1, 2, 3], [4, 5, 6]];
   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
		var transpose = typed('transpose', {

			'Array': function (x) {
				// use dense matrix implementation
				return transpose(matrix(x)).valueOf();
			},

			'Matrix': function (x) {
				// matrix size
				var size = x.size();

				// result
				var c;
      
				// process dimensions
				switch (size.length) {
				case 1:
					// vector
					c = x.clone();
					break;

				case 2:
					// rows and columns
					var rows = size[0];
					var columns = size[1];

					// check columns
					if (columns === 0) {
						// throw exception
						throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
					}

					// process storage format
					switch (x.storage()) {
					case 'dense':
						c = _denseTranspose(x, rows, columns);
						break;
					case 'sparse':
						c = _sparseTranspose(x, rows, columns);
						break;
					}
					break;
          
				default:
					// multi dimensional
					throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
				}
				return c;
			},

			// scalars
			'any': function (x) {
				return clone(x);
			}
		});

		var _denseTranspose = function (m, rows, columns) {
			// matrix array
			var data = m._data;
			// transposed matrix data
			var transposed = [];
			var transposedRow;
			// loop columns
			for (var j = 0; j < columns; j++) {
				// initialize row
				transposedRow = transposed[j] = [];
				// loop rows
				for (var i = 0; i < rows; i++) {
					// set data
					transposedRow[i] = clone(data[i][j]);
				}
			}
			// return matrix
			return new DenseMatrix({
				data: transposed,
				size: [columns, rows],
				datatype: m._datatype
			});
		};

		var _sparseTranspose = function (m, rows, columns) {
			// matrix arrays
			var values = m._values;
			var index = m._index;
			var ptr = m._ptr;
			// result matrices
			var cvalues = values ? [] : undefined;
			var cindex = [];
			var cptr = [];
			// row counts
			var w = [];
			for (var x = 0; x < rows; x++)
				w[x] = 0;
			// vars
			var p, l, j;
			// loop values in matrix
			for (p = 0, l = index.length; p < l; p++) {
				// number of values in row
				w[index[p]]++;
			}
			// cumulative sum
			var sum = 0;
			// initialize cptr with the cummulative sum of row counts
			for (var i = 0; i < rows; i++) {
				// update cptr
				cptr.push(sum);
				// update sum
				sum += w[i];
				// update w
				w[i] = cptr[i];
			}
			// update cptr
			cptr.push(sum);
			// loop columns
			for (j = 0; j < columns; j++) {
				// values & index in column
				for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
					// C values & index
					var q = w[index[k]]++;
					// C[j, i] = A[i, j]
					cindex[q] = j;
					// check we need to process values (pattern matrix)
					if (values)
						cvalues[q] = clone(values[k]);
				}
			}
			// return matrix
			return new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [columns, rows],
				datatype: m._datatype
			});
		};

		transpose.toTex = {1: '\\left(${args[0]}\\right)' + latex.operators['transpose']};

		return transpose;
	}

	exports.name = 'transpose';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/latex":602,"../../utils/object":604,"../../utils/string":605}],453:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var resize = require('../../utils/array').resize;

	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));

		/**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3);                  // returns [0, 0, 0]
   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense');         // returns [0, 0, 0]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, eye, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
		var zeros = typed('zeros', {
			'': function () {
				return (config.matrix === 'Array')
					? _zeros([])
					: _zeros([], 'default');
			},

			// math.zeros(m, n, p, ..., format)
			// TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
			'...number | BigNumber | string': function (size) {
				var last = size[size.length - 1];
				if (typeof last === 'string') {
					var format = size.pop();
					return _zeros(size, format);
				}
				else if (config.matrix === 'Array') {
					return _zeros(size);
				}
				else {
					return _zeros(size, 'default');
				}
			},

			'Array': _zeros,

			'Matrix': function (size) {
				var format = size.storage();
				return _zeros(size.valueOf(), format);
			},

			'Array | Matrix, string': function (size, format) {
				return _zeros (size.valueOf(), format);
			}
		});

		zeros.toTex = undefined; // use default template

		return zeros;

		/**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */
		function _zeros(size, format) {
			var hasBigNumbers = _normalize(size);
			var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
			_validate(size);

			if (format) {
				// return a matrix
				var m = matrix(format);
				if (size.length > 0) {
					return m.resize(size, defaultValue);
				}
				return m;
			}
			else {
				// return an Array
				var arr = [];
				if (size.length > 0) {
					return resize(arr, size, defaultValue);
				}
				return arr;
			}
		}

		// replace BigNumbers with numbers, returns true if size contained BigNumbers
		function _normalize(size) {
			var hasBigNumbers = false;
			size.forEach(function (value, index, arr) {
				if (value && value.isBigNumber === true) {
					hasBigNumbers = true;
					arr[index] = value.toNumber();
				}
			});
			return hasBigNumbers;
		}

		// validate arguments
		function _validate (size) {
			size.forEach(function (value) {
				if (typeof value !== 'number' || !isInteger(value) || value < 0) {
					throw new Error('Parameters in function zeros must be positive integers');
				}
			});
		}
	}

	// TODO: zeros contains almost the same code as ones. Reuse this?

	exports.name = 'zeros';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/number":603}],454:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		/**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5); // returns 21
   *
   * See also:
   *
   *    permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
		var combinations = typed('combinations', {
			'number, number': function (n, k) {
				var max, result, i;

				if (!isInteger(n) || n < 0) {
					throw new TypeError('Positive integer value expected in function combinations');
				}
				if (!isInteger(k) || k < 0) {
					throw new TypeError('Positive integer value expected in function combinations');
				}
				if (k > n) {
					throw new TypeError('k must be less than or equal to n');
				}

				max = Math.max(k, n - k);
				result = 1;
				for (i = 1; i <= n - max; i++) {
					result = result * (max + i) / i;
				}

				return result;
			},

			'BigNumber, BigNumber': function (n, k) {
				var max, result, i, ii;
				var one = new type.BigNumber(1);

				if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
					throw new TypeError('Positive integer value expected in function combinations');
				}
				if (k.gt(n)) {
					throw new TypeError('k must be less than n in function combinations');
				}

				max = n.minus(k);
				if (k.lt(max)) max = k;
				result = one;
				for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
					result = result.times(max.plus(i)).dividedBy(i);
				}

				return result;
			}

			// TODO: implement support for collection in combinations
		});

		combinations.toTex = {2: '\\binom{${args[0]}}{${args[1]}}'};

		return combinations;
	}

	/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */
	function isPositiveInteger(n) {
		return n.isInteger() && n.gte(0);
	}

	exports.name = 'combinations';
	exports.factory = factory;

},{"../../utils/number":603}],455:[function(require,module,exports){
	'use strict';

	var ArgumentsError = require('../../error/ArgumentsError');
	var isCollection = require('../../utils/collection/isCollection');

	// TODO: rethink math.distribution
	// TODO: rework to a typed function
	function factory (type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));
		var array = require('../../utils/array');

		/**
   * Create a distribution object with a set of random functions for given
   * random distribution.
   *
   * Syntax:
   *
   *     math.distribution(name)
   *
   * Examples:
   *
   *     var normalDist = math.distribution('normal'); // create a normal distribution
   *     normalDist.random(0, 10);                     // get a random value between 0 and 10
   *
   * See also:
   *
   *     random, randomInt, pickRandom
   *
   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
   * @return {Object}       Returns a distribution object containing functions:
   *                        `random([size] [, min] [, max])`,
   *                        `randomInt([min] [, max])`,
   *                        `pickRandom(array)`
   */
		function distribution(name) {
			if (!distributions.hasOwnProperty(name))
				throw new Error('Unknown distribution ' + name);

			var args = Array.prototype.slice.call(arguments, 1),
				distribution = distributions[name].apply(this, args);

			return (function(distribution) {

				// This is the public API for all distributions
				var randFunctions = {

					random: function(arg1, arg2, arg3) {
						var size, min, max;
						if (arguments.length > 3) {
							throw new ArgumentsError('random', arguments.length, 0, 3);

							// `random(max)` or `random(size)`
						} else if (arguments.length === 1) {
							if (isCollection(arg1)) {
								size = arg1;
							}
							else {
								max = arg1;
							}
							// `random(min, max)` or `random(size, max)`
						} else if (arguments.length === 2) {
							if (isCollection(arg1)) {
								size = arg1;
								max = arg2;
							}
							else {
								min = arg1;
								max = arg2;
							}
							// `random(size, min, max)`
						} else {
							size = arg1;
							min = arg2;
							max = arg3;
						}

						// TODO: validate type of min, max, and size

						if (max === undefined) max = 1;
						if (min === undefined) min = 0;
						if (size !== undefined) {
							var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
							return (size && size.isMatrix === true) ? matrix(res) : res;
						}
						else return _random(min, max);
					},

					randomInt: function(arg1, arg2, arg3) {
						var size, min, max;
						if (arguments.length > 3 || arguments.length < 1)
							throw new ArgumentsError('randomInt', arguments.length, 1, 3);

						// `random(max)` or `random(size)`
						else if (arguments.length === 1)
							if (isCollection(arg1)) {
								size = arg1;
							}
							else {
								max = arg1;
							}
						// `randomInt(min, max)` or `randomInt(size, max)`
						else if (arguments.length === 2) {
							if (isCollection(arg1)) {
								size = arg1;
								max = arg2;
							}
							else {
								min = arg1;
								max = arg2;
							}
							// `randomInt(size, min, max)`
						} else {
							size = arg1;
							min = arg2;
							max = arg3;
						}

						// TODO: validate type of min, max, and size

						if (min === undefined) min = 0;
						if (size !== undefined) {
							var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
							return (size && size.isMatrix === true) ? matrix(res) : res;
						}
						else return _randomInt(min, max);
					},

					pickRandom: function(possibles) {
						if (arguments.length !== 1) {
							throw new ArgumentsError('pickRandom', arguments.length, 1);
						}
						if (possibles && possibles.isMatrix === true) {
							possibles = possibles.valueOf(); // get Array
						}
						else if (!Array.isArray(possibles)) {
							throw new TypeError('Unsupported type of value in function pickRandom');
						}

						if (array.size(possibles).length > 1) {
							throw new Error('Only one dimensional vectors supported');
						}

						// TODO: add support for multi dimensional matrices
						return possibles[Math.floor(Math.random() * possibles.length)];
					}

				};

				var _random = function(min, max) {
					return min + distribution() * (max - min);
				};

				var _randomInt = function(min, max) {
					return Math.floor(min + distribution() * (max - min));
				};

				// This is a function for generating a random matrix recursively.
				var _randomDataForMatrix = function(size, min, max, randFunc) {
					var data = [], length, i;
					size = size.slice(0);

					if (size.length > 1) {
						for (i = 0, length = size.shift(); i < length; i++)
							data.push(_randomDataForMatrix(size, min, max, randFunc));
					} else {
						for (i = 0, length = size.shift(); i < length; i++)
							data.push(randFunc(min, max));
					}

					return data;
				};

				return randFunctions;

			})(distribution);
		}

		// Each distribution is a function that takes no argument and when called returns
		// a number between 0 and 1.
		var distributions = {

			uniform: function() {
				return Math.random;
			},

			// Implementation of normal distribution using Box-Muller transform
			// ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
			// We take : mean = 0.5, standard deviation = 1/6
			// so that 99.7% values are in [0, 1].
			normal: function() {
				return function() {
					var u1, u2,
						picked = -1;
					// We reject values outside of the interval [0, 1]
					// TODO: check if it is ok to do that?
					while (picked < 0 || picked > 1) {
						u1 = Math.random();
						u2 = Math.random();
						picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
					}
					return picked;
				};
			}
		};

		distribution.toTex = undefined; // use default template

		return distribution;
	}

	exports.name = 'distribution';
	exports.factory = factory;

},{"../../error/ArgumentsError":124,"../../type/matrix/function/matrix":553,"../../utils/array":581,"../../utils/collection/isCollection":596}],456:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var gamma = load(require('./gamma'));
		var latex = require('../../utils/latex');

		/**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5);    // returns 120
   *    math.factorial(3);    // returns 6
   *
   * See also:
   *
   *    combinations, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
		var factorial = typed('factorial', {
			'number': function (n) {
				if (n < 0) {
					throw new Error('Value must be non-negative');
				}

				return gamma(n + 1);
			},

			'BigNumber': function (n) {
				if (n.isNegative()) {
					throw new Error('Value must be non-negative');
				}

				return gamma(n.plus(1));
			},

			'Array | Matrix': function (n) {
				return deepMap(n, factorial);
			}
		});

		factorial.toTex = {
			1: '\\left(${args[0]}\\right)' + latex.operators['factorial']
		};

		return factorial;
	}

	exports.name = 'factorial';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/latex":602,"./gamma":457}],457:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		var multiply = load(require('../arithmetic/multiply'));
		var pow = load(require('../arithmetic/pow'));

		/**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5);       // returns 24
   *    math.gamma(-0.5);    // returns -3.5449077018110335
   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
		var gamma = typed('gamma', {
			'number': function (n) {
				var t, x;

				if (isInteger(n)) {
					if (n <= 0) {
						return isFinite(n) ? Infinity : NaN;
					}

					if (n > 171) {
						return Infinity;                  // Will overflow
					}

					var value = n - 2;
					var res = n - 1;
					while (value > 1) {
						res *= value;
						value--;
					}

					if (res == 0) {
						res = 1;                          // 0! is per definition 1
					}

					return res;
				}

				if (n < 0.5) {
					return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));
				}

				if (n >= 171.35) {
					return Infinity;                    // will overflow
				}

				if (n > 85.0) {                       // Extended Stirling Approx
					var twoN = n*n;
					var threeN = twoN*n;
					var fourN = threeN*n;
					var fiveN = fourN*n;
					return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *
            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -
            571/(2488320*fourN) + 163879/(209018880*fiveN) +
            5246819/(75246796800*fiveN*n));
				}

				--n;
				x = p[0];
				for (var i = 1; i < p.length; ++i) {
					x += p[i] / (n+i);
				}

				t = n + g + 0.5;
				return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;
			},

			'Complex': function (n) {
				var t, x;

				if (n.im == 0) {
					return gamma(n.re);
				}

				n = new type.Complex(n.re - 1, n.im);
				x = new type.Complex(p[0], 0);
				for (var i = 1; i < p.length; ++i) {
					var real = n.re + i;                // x += p[i]/(n+i)
					var den = real*real + n.im*n.im;
					if (den != 0) {
						x.re += p[i] * real / den;
						x.im += -(p[i] * n.im) / den;
					} else {
						x.re = p[i] < 0
							? -Infinity
							:  Infinity;
					}
				}

				t = new type.Complex(n.re + g + 0.5, n.im);
				var twoPiSqrt = Math.sqrt(2*Math.PI);

				n.re += 0.5;
				var result = pow(t, n);
				if (result.im == 0) {                 // sqrt(2*PI)*result
					result.re *= twoPiSqrt;
				} else if (result.re == 0) {
					result.im *= twoPiSqrt;
				} else {
					result.re *= twoPiSqrt;
					result.im *= twoPiSqrt;
				}

				var r = Math.exp(-t.re);              // exp(-t)
				t.re = r * Math.cos(-t.im);
				t.im = r * Math.sin(-t.im);

				return multiply(multiply(result, t), x);
			},

			'BigNumber': function (n) {
				if (n.isInteger()) {
					return (n.isNegative() || n.isZero())
						? new type.BigNumber(Infinity)
						: bigFactorial(n.minus(1));
				}

				if (!n.isFinite()) {
					return new type.BigNumber(n.isNegative() ? NaN : Infinity);
				}

				throw new Error('Integer BigNumber expected');
			},

			'Array | Matrix': function (n) {
				return deepMap(n, gamma);
			}
		});

		/**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */
		function bigFactorial(n) {
			if (n.isZero()) {
				return new type.BigNumber(1); // 0! is per definition 1
			}

			var precision = config.precision + (Math.log(n.toNumber()) | 0);
			var Big = type.BigNumber.clone({precision: precision});

			var res = new Big(n);
			var value = n.toNumber() - 1; // number
			while (value > 1) {
				res = res.times(value);
				value--;
			}

			return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
		}

		gamma.toTex = {1: '\\Gamma\\left(${args[0]}\\right)'};

		return gamma;
	}

	// TODO: comment on the variables g and p

	var g = 4.7421875;

	var p = [
		0.99999999999999709182,
		57.156235665862923517,
		-59.597960355475491248,
		14.136097974741747174,
		-0.49191381609762019978,
		0.33994649984811888699e-4,
		0.46523628927048575665e-4,
		-0.98374475304879564677e-4,
		0.15808870322491248884e-3,
		-0.21026444172410488319e-3,
		0.21743961811521264320e-3,
		-0.16431810653676389022e-3,
		0.84418223983852743293e-4,
		-0.26190838401581408670e-4,
		0.36899182659531622704e-5
	];

	exports.name = 'gamma';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603,"../arithmetic/multiply":391,"../arithmetic/pow":395}],458:[function(require,module,exports){
	module.exports = [
		//require('./distribution'), // TODO: rethink math.distribution
		require('./combinations'),
		require('./factorial'),
		require('./gamma'),
		require('./kldivergence'),
		require('./multinomial'),
		require('./permutations'),
		require('./pickRandom'),
		require('./random'),
		require('./randomInt')
	];

},{"./combinations":454,"./factorial":456,"./gamma":457,"./kldivergence":459,"./multinomial":460,"./permutations":461,"./pickRandom":462,"./random":463,"./randomInt":464}],459:[function(require,module,exports){
	'use strict';


	function factory(type, config, load, typed) {
		var matrix = load(require('../../type/matrix/function/matrix'));
		var divide = load(require('../arithmetic/divide'));
		var sum = load(require('../statistics/sum'));
		var multiply = load(require('../arithmetic/multiply'));
		var dotDivide = load(require('../arithmetic/dotDivide'));
		var log = load(require('../arithmetic/log'));
		var isNumeric = load(require('../utils/isNumeric'));

		/**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
		var kldivergence = typed('kldivergence', {
			'Array, Array': function(q, p) {
				return _kldiv(matrix(q), matrix(p));
			},

			'Matrix, Array': function(q, p) {
				return _kldiv(q, matrix(p));
			},

			'Array, Matrix': function(q, p){
				return _kldiv(matrix(q), p);
			},

			'Matrix, Matrix': function(q, p){
				return _kldiv(q, p);
			}

		});

		function _kldiv(q, p) {
			var plength = p.size().length;
			var qlength = q.size().length;
			if (plength > 1) {
				throw new Error('first object must be one dimensional');
			}
        
			if (qlength > 1) {
				throw new Error('second object must be one dimensional');
			}
        
			if(plength !== qlength){
				throw new Error("Length of two vectors must be equal");
			}
        
			//Before calculation, apply normalization
			var sumq = sum(q);
			if (sumq === 0) {
				throw new Error("Sum of elements in first object must be non zero");
			}

			var sump = sum(p);
			if (sump === 0) {
				throw new Error("Sum of elements in second object must be non zero");
			}
			var qnorm = divide(q, sum(q));
			var pnorm = divide(p, sum(p));

			var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
			if (isNumeric(result)) {
				return result;
			}
			else {
				return Number.NaN;
			}
		}

		return kldivergence;
	}


	exports.name = 'kldivergence';
	exports.factory = factory;
 

},{"../../type/matrix/function/matrix":553,"../arithmetic/divide":376,"../arithmetic/dotDivide":378,"../arithmetic/log":388,"../arithmetic/multiply":391,"../statistics/sum":484,"../utils/isNumeric":522}],460:[function(require,module,exports){
	'use strict';

	var deepForEach = require('../../utils/collection/deepForEach');

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/add'));
		var multiply = load(require('../arithmetic/multiply'));
		var divide = load(require('../arithmetic/divide'));
		var factorial = load(require('../probability/factorial'));
		var isInteger = load(require('../utils/isInteger'));
		var isPositive = load(require('../utils/isPositive'));

		/**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]); // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
		return typed('multinomial', {
			'Array | Matrix': function (a) {
				var sum = 0;
				var denom = 1;

				deepForEach(a, function(ai) {
					if(!isInteger(ai) || !isPositive(ai)) {
						throw new TypeError('Positive integer value expected in function multinomial');
					}
					sum = add(sum, ai);
					denom = multiply(denom, factorial(ai));
				});

				return divide(factorial(sum), denom);
			}
		});
	}

	exports.name = 'multinomial';
	exports.factory = factory;

},{"../../utils/collection/deepForEach":594,"../arithmetic/add":371,"../arithmetic/divide":376,"../arithmetic/multiply":391,"../probability/factorial":456,"../utils/isInteger":519,"../utils/isPositive":523}],461:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;

	function factory (type, config, load, typed) {
		var factorial = load(require('./factorial'));

		/**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5);     // 120
   *    math.permutations(5, 3);  // 60
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
		var permutations = typed('permutations', {
			'number | BigNumber': factorial,

			'number, number': function (n, k) {
				var result, i;

				if (!isInteger(n) || n < 0) {
					throw new TypeError('Positive integer value expected in function permutations');
				}
				if (!isInteger(k) || k < 0) {
					throw new TypeError('Positive integer value expected in function permutations');
				}
				if (k > n) {
					throw new TypeError('second argument k must be less than or equal to first argument n');
				}

				// Permute n objects, k at a time
				result = 1;
				for (i = n - k + 1; i <= n; i++) {
					result = result * i;
				}

				return result;
			},

			'BigNumber, BigNumber': function (n, k) {
				var result, i;

				if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
					throw new TypeError('Positive integer value expected in function permutations');
				}
				if (k.gt(n)) {
					throw new TypeError('second argument k must be less than or equal to first argument n');
				}

				result = new type.BigNumber(1);
				for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
					result = result.times(i);
				}

				return result;
			}

			// TODO: implement support for collection in permutations
		});

		permutations.toTex = undefined; // use default template

		return permutations;
	}

	/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */
	function isPositiveInteger(n) {
		return n.isInteger() && n.gte(0);
	}

	exports.name = 'permutations';
	exports.factory = factory;

},{"../../utils/number":603,"./factorial":456}],462:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var distribution = load(require('./distribution'));

		/**
   * Random pick a value from a one dimensional array.
   * Array element is picked using a random function with uniform distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2]);       // returns one of the values in the array
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array} array     A one dimensional array
   * @return {number} One of the elements of the provided input array
   */
		// TODO: rework pickRandom to a typed-function
		var pickRandom =  distribution('uniform').pickRandom;

		pickRandom.toTex = undefined; // use default template

		return pickRandom;
	}

	exports.name = 'pickRandom';
	exports.factory = factory;

},{"./distribution":455}],463:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var distribution = load(require('./distribution'));

		/**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random();       // returns a random number between 0 and 1
   *     math.random(100);    // returns a random number between 0 and 100
   *     math.random(30, 40); // returns a random number between 30 and 40
   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */
		// TODO: rework random to a typed-function
		var random = distribution('uniform').random;

		random.toTex = undefined; // use default template

		return random;
	}

	exports.name = 'random';
	exports.factory = factory;

},{"./distribution":455}],464:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var distribution = load(require('./distribution'));

		/**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100);    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40); // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */
		// TODO: rework randomInt to a typed-function
		var randomInt = distribution('uniform').randomInt;

		randomInt.toTex = undefined; // use default template

		return randomInt;
	}

	exports.name = 'randomInt';
	exports.factory = factory;

},{"./distribution":455}],465:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
		/**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1);           // returns 1
   *    math.compare(2, 3);           // returns -1
   *    math.compare(7, 7);           // returns 0
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('40 mm');
   *    math.compare(a, b);           // returns 1
   *
   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.
   */
		var compare = typed('compare', {

			'boolean, boolean': function (x, y) {
				return x === y ? 0 : (x > y ? 1 : -1);
			},

			'number, number': function (x, y) {
				return (x === y || nearlyEqual(x, y, config.epsilon))
					? 0
					: (x > y ? 1 : -1);
			},

			'BigNumber, BigNumber': function (x, y) {
				return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))
					? new type.BigNumber(0)
					: new type.BigNumber(x.cmp(y));
			},

			'Fraction, Fraction': function (x, y) {
				return new type.Fraction(x.compare(y));
			},

			'Complex, Complex': function () {
				throw new TypeError('No ordering relation is defined for complex numbers');
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return compare(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x === y ? 0 : (x > y ? 1 : -1);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm05(x, y, compare);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, compare, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, compare, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, compare);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return compare(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return compare(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return compare(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, compare, false);
					break;
				default:
					c = algorithm14(x, y, compare, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, compare, true);
					break;
				default:
					c = algorithm14(y, x, compare, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, compare, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, compare, true).valueOf();
			}
		});

		compare.toTex = undefined; // use default template

		return compare;
	}

	exports.name = 'compare';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm05":560,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/nearlyEqual":590,"../../utils/number":603}],466:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var equal = load(require('./equal'));

		/**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4);   // returns false
   *
   *    a = [2, 5, 1];
   *    b = [2, 7, 1];
   *
   *    math.deepEqual(a, b);   // returns false
   *    math.equal(a, b);       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
		var deepEqual = typed('deepEqual', {
			'any, any': function (x, y) {
				return _deepEqual(x.valueOf(), y.valueOf());
			}
		});

		deepEqual.toTex = undefined; // use default template

		return deepEqual;

		/**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */
		function _deepEqual(x, y) {
			if (Array.isArray(x)) {
				if (Array.isArray(y)) {
					var len = x.length;
					if (len !== y.length) {
						return false;
					}

					for (var i = 0; i < len; i++) {
						if (!_deepEqual(x[i], y[i])) {
							return false;
						}
					}

					return true;
				}
				else {
					return false;
				}
			}
			else {
				if (Array.isArray(y)) {
					return false;
				}
				else {
					return equal(x, y);
				}
			}
		}
	}

	exports.name = 'deepEqual';
	exports.factory = factory;

},{"./equal":467}],467:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../type/matrix/function/matrix'));
		var equalScalar = load(require('./equalScalar'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		var latex = require('../../utils/latex');

		/**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3);         // returns false
   *    math.equal(2 + 2, 4);         // returns true
   *
   *    var a = math.unit('50 cm');
   *    var b = math.unit('5 m');
   *    math.equal(a, b);             // returns true
   *
   *    var c = [2, 5, 1];
   *    var d = [2, 7, 1];
   *
   *    math.equal(c, d);             // returns [true, false, true]
   *    math.deepEqual(c, d);         // returns false
   *
   *    math.equal(0, null);          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */
		var equal = typed('equal', {
    
			'any, any': function (x, y) {
				// strict equality for null and undefined?
				if (x === null) { return y === null; }
				if (y === null) { return x === null; }
				if (x === undefined) { return y === undefined; }
				if (y === undefined) { return x === undefined; }

				return equalScalar(x, y);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, equalScalar);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, equalScalar, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, equalScalar, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, equalScalar);
						break;
					}
					break;
				}
				return c;
			},
    
			'Array, Array': function (x, y) {
				// use matrix implementation
				return equal(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return equal(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return equal(x, matrix(y));
			},
    
			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, equalScalar, false);
					break;
				default:
					c = algorithm14(x, y, equalScalar, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, equalScalar, true);
					break;
				default:
					c = algorithm14(y, x, equalScalar, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, equalScalar, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, equalScalar, true).valueOf();
			}
		});

		equal.toTex = {
			2: '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)'
		};

		return equal;
	}

	exports.name = 'equal';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602,"./equalScalar":468}],468:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {
  
		/**
   * Test whether two values are equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
		var equalScalar = typed('equalScalar', {

			'boolean, boolean': function (x, y) {
				return x === y;
			},

			'number, number': function (x, y) {
				return x === y || nearlyEqual(x, y, config.epsilon);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
			},

			'Fraction, Fraction': function (x, y) {
				return x.equals(y);
			},

			'Complex, Complex': function (x, y) {
				return x.equals(y);
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return equalScalar(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x === y;
			}
		});
  
		return equalScalar;
	}

	exports.factory = factory;

},{"../../utils/bignumber/nearlyEqual":590,"../../utils/number":603}],469:[function(require,module,exports){
	module.exports = [
		require('./compare'),
		require('./deepEqual'),
		require('./equal'),
		require('./larger'),
		require('./largerEq'),
		require('./smaller'),
		require('./smallerEq'),
		require('./unequal')
	];

},{"./compare":465,"./deepEqual":466,"./equal":467,"./larger":470,"./largerEq":471,"./smaller":472,"./smallerEq":473,"./unequal":474}],470:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		var latex = require('../../utils/latex');

		/**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3);             // returns false
   *    math.larger(5, 2 + 2);         // returns true
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('2 inch');
   *    math.larger(a, b);             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */
		var larger = typed('larger', {

			'boolean, boolean': function (x, y) {
				return x > y;
			},

			'number, number': function (x, y) {
				return x > y && !nearlyEqual(x, y, config.epsilon);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
			},

			'Fraction, Fraction': function (x, y) {
				return x.compare(y) === 1;
			},

			'Complex, Complex': function () {
				throw new TypeError('No ordering relation is defined for complex numbers');
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return larger(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x > y;
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, larger);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, larger, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, larger, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, larger);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return larger(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return larger(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return larger(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, larger, false);
					break;
				default:
					c = algorithm14(x, y, larger, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, larger, true);
					break;
				default:
					c = algorithm14(y, x, larger, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, larger, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, larger, true).valueOf();
			}
		});

		larger.toTex = {
			2: '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)'
		};

		return larger;
	}

	exports.name = 'larger';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/nearlyEqual":590,"../../utils/latex":602,"../../utils/number":603}],471:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {
  
		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		var latex = require('../../utils/latex');

		/**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1);         // returns false
   *    math.largerEq(2, 1 + 1);       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */
		var largerEq = typed('largerEq', {

			'boolean, boolean': function (x, y) {
				return x >= y;
			},

			'number, number': function (x, y) {
				return x >= y || nearlyEqual(x, y, config.epsilon);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
			},

			'Fraction, Fraction': function (x, y) {
				return x.compare(y) !== -1;
			},

			'Complex, Complex': function () {
				throw new TypeError('No ordering relation is defined for complex numbers');
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return largerEq(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x >= y;
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, largerEq);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, largerEq, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, largerEq, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, largerEq);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return largerEq(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return largerEq(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return largerEq(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, largerEq, false);
					break;
				default:
					c = algorithm14(x, y, largerEq, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, largerEq, true);
					break;
				default:
					c = algorithm14(y, x, largerEq, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, largerEq, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, largerEq, true).valueOf();
			}
		});

		largerEq.toTex = {
			2: '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)'
		};

		return largerEq;
	}

	exports.name = 'largerEq';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/nearlyEqual":590,"../../utils/latex":602,"../../utils/number":603}],472:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		var latex = require('../../utils/latex');

		/**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3);            // returns true
   *    math.smaller(5, 2 * 2);        // returns false
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('2 inch');
   *    math.smaller(a, b);            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */
		var smaller = typed('smaller', {

			'boolean, boolean': function (x, y) {
				return x < y;
			},

			'number, number': function (x, y) {
				return x < y && !nearlyEqual(x, y, config.epsilon);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
			},

			'Fraction, Fraction': function (x, y) {
				return x.compare(y) === -1;
			},

			'Complex, Complex': function (x, y) {
				throw new TypeError('No ordering relation is defined for complex numbers');
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return smaller(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x < y;
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, smaller);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, smaller, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, smaller, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, smaller);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return smaller(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return smaller(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return smaller(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, smaller, false);
					break;
				default:
					c = algorithm14(x, y, smaller, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, smaller, true);
					break;
				default:
					c = algorithm14(y, x, smaller, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, smaller, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, smaller, true).valueOf();
			}
		});

		smaller.toTex = {
			2: '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)'
		};

		return smaller;
	}

	exports.name = 'smaller';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/nearlyEqual":590,"../../utils/latex":602,"../../utils/number":603}],473:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		var latex = require('../../utils/latex');

		/**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3);        // returns false
   *    math.smallerEq(1 + 2, 3);      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */
		var smallerEq = typed('smallerEq', {

			'boolean, boolean': function (x, y) {
				return x <= y;
			},

			'number, number': function (x, y) {
				return x <= y || nearlyEqual(x, y, config.epsilon);
			},

			'BigNumber, BigNumber': function (x, y) {
				return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
			},

			'Fraction, Fraction': function (x, y) {
				return x.compare(y) !== 1;
			},

			'Complex, Complex': function () {
				throw new TypeError('No ordering relation is defined for complex numbers');
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return smallerEq(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x <= y;
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, smallerEq);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, smallerEq, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, smallerEq, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, smallerEq);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return smallerEq(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return smallerEq(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return smallerEq(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, smallerEq, false);
					break;
				default:
					c = algorithm14(x, y, smallerEq, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, smallerEq, true);
					break;
				default:
					c = algorithm14(y, x, smallerEq, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, smallerEq, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, smallerEq, true).valueOf();
			}
		});

		smallerEq.toTex = {
			2: '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)'
		};

		return smallerEq;
	}

	exports.name = 'smallerEq';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/nearlyEqual":590,"../../utils/latex":602,"../../utils/number":603}],474:[function(require,module,exports){
	'use strict';

	var nearlyEqual = require('../../utils/number').nearlyEqual;
	var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		var latex = require('../../utils/latex');

		/**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everying
   * except. `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3);       // returns true
   *    math.unequal(2 + 2, 4);       // returns false
   *
   *    var a = math.unit('50 cm');
   *    var b = math.unit('5 m');
   *    math.unequal(a, b);           // returns false
   *
   *    var c = [2, 5, 1];
   *    var d = [2, 7, 1];
   *
   *    math.unequal(c, d);           // returns [false, true, false]
   *    math.deepEqual(c, d);         // returns false
   *
   *    math.unequal(0, null);        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */
		var unequal = typed('unequal', {
    
			'any, any': function (x, y) {
				// strict equality for null and undefined?
				if (x === null) { return y !== null; }
				if (y === null) { return x !== null; }
				if (x === undefined) { return y !== undefined; }
				if (y === undefined) { return x !== undefined; }

				return _unequal(x, y);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse + sparse
						c = algorithm07(x, y, _unequal);
						break;
					default:
						// sparse + dense
						c = algorithm03(y, x, _unequal, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense + sparse
						c = algorithm03(x, y, _unequal, false);
						break;
					default:
						// dense + dense
						c = algorithm13(x, y, _unequal);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return unequal(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return unequal(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return unequal(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm12(x, y, _unequal, false);
					break;
				default:
					c = algorithm14(x, y, _unequal, false);
					break;
				}
				return c;
			},

			'any, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, _unequal, true);
					break;
				default:
					c = algorithm14(y, x, _unequal, true);
					break;
				}
				return c;
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, _unequal, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, _unequal, true).valueOf();
			}
		});

		var _unequal = typed('_unequal', {

			'boolean, boolean': function (x, y) {
				return x !== y;
			},

			'number, number': function (x, y) {
				return !nearlyEqual(x, y, config.epsilon);
			},

			'BigNumber, BigNumber': function (x, y) {
				return !bigNearlyEqual(x, y, config.epsilon);
			},

			'Fraction, Fraction': function (x, y) {
				return !x.equals(y);
			},

			'Complex, Complex': function (x, y) {
				return !x.equals(y);
			},

			'Unit, Unit': function (x, y) {
				if (!x.equalBase(y)) {
					throw new Error('Cannot compare units with different base');
				}
				return unequal(x.value, y.value);
			},

			'string, string': function (x, y) {
				return x !== y;
			}
		});

		unequal.toTex = {
			2: '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)'
		};

		return unequal;
	}

	exports.name = 'unequal';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm07":562,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/bignumber/nearlyEqual":590,"../../utils/latex":602,"../../utils/number":603}],475:[function(require,module,exports){
	module.exports = [
		require('./max'),
		require('./mean'),
		require('./median'),
		require('./min'),
		require('./mode'),
		require('./prod'),
		require('./quantileSeq'),
		require('./std'),
		require('./sum'),
		require('./var')
	];
},{"./max":476,"./mean":477,"./median":478,"./min":479,"./mode":480,"./prod":481,"./quantileSeq":482,"./std":483,"./sum":484,"./var":485}],476:[function(require,module,exports){
	'use strict';

	var deepForEach = require('../../utils/collection/deepForEach');
	var reduce = require('../../utils/collection/reduce');
	var containsCollections = require('../../utils/collection/containsCollections');

	function factory (type, config, load, typed) {
		var larger = load(require('../relational/larger'));

		/**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3);                  // returns 4
   *     math.max([2, 1, 4, 3]);                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
		var max = typed('max', {
			// max([a, b, c, d, ...])
			'Array | Matrix': _max,

			// max([a, b, c, d, ...], dim)
			'Array | Matrix, number | BigNumber': function (array, dim) {
				return reduce(array, dim.valueOf(), _largest);
			},

			// max(a, b, c, d, ...)
			'...': function (args) {
				if (containsCollections(args)) {
					throw new TypeError('Scalar values expected in function max');
				}

				return _max(args);
			}
		});

		max.toTex = '\\max\\left(${args}\\right)';

		return max;

		/**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */
		function _largest(x, y){
			return larger(x, y) ? x : y;
		}

		/**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */
		function _max(array) {
			var max = undefined;

			deepForEach(array, function (value) {
				if (max === undefined || larger(value, max)) {
					max = value;
				}
			});

			if (max === undefined) {
				throw new Error('Cannot calculate max of an empty array');
			}

			return max;
		}
	}

	exports.name = 'max';
	exports.factory = factory;

},{"../../utils/collection/containsCollections":593,"../../utils/collection/deepForEach":594,"../../utils/collection/reduce":597,"../relational/larger":470}],477:[function(require,module,exports){
	'use strict';

	var size = require('../../utils/array').size;
	var deepForEach = require('../../utils/collection/deepForEach');
	var reduce = require('../../utils/collection/reduce');
	var containsCollections = require('../../utils/collection/containsCollections');

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/add'));
		var divide = load(require('../arithmetic/divide'));

		/**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3);                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
		var mean = typed('mean', {
			// mean([a, b, c, d, ...])
			'Array | Matrix': _mean,

			// mean([a, b, c, d, ...], dim)
			'Array | Matrix, number | BigNumber': _nmean,

			// mean(a, b, c, d, ...)
			'...': function (args) {
				if (containsCollections(args)) {
					throw new TypeError('Scalar values expected in function mean');
				}

				return _mean(args);
			}
		});

		mean.toTex = undefined; // use default template

		return mean;

		/**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */
		function _nmean(array, dim){
			var sum = reduce(array, dim, add);
			var s = Array.isArray(array) ? size(array) : array.size();
			return divide(sum, s[dim]);
		}

		/**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */
		function _mean(array) {
			var sum = 0;
			var num = 0;

			deepForEach(array, function (value) {
				sum = add(sum, value);
				num++;
			});

			if (num === 0) {
				throw new Error('Cannot calculate mean of an empty array');
			}

			return divide(sum, num);
		}
	}

	exports.name = 'mean';
	exports.factory = factory;

},{"../../utils/array":581,"../../utils/collection/containsCollections":593,"../../utils/collection/deepForEach":594,"../../utils/collection/reduce":597,"../arithmetic/add":371,"../arithmetic/divide":376}],478:[function(require,module,exports){
	'use strict';

	var flatten = require('../../utils/array').flatten;
	var reduce = require('../../utils/collection/reduce');
	var containsCollections = require('../../utils/collection/containsCollections');

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/addScalar'));
		var divide = load(require('../arithmetic/divideScalar'));
		var compare = load(require('../relational/compare'));
		var partitionSelect = load(require('../matrix/partitionSelect'));

		/**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7);        // returns 5
   *     math.median([3, -1, 5, 7]);  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */
		var median = typed('median', {
			// median([a, b, c, d, ...])
			'Array | Matrix': _median,

			// median([a, b, c, d, ...], dim)
			'Array | Matrix, number | BigNumber': function (array, dim) {
				// TODO: implement median(A, dim)
				throw new Error('median(A, dim) is not yet supported');
				//return reduce(arguments[0], arguments[1], ...);
			},

			// median(a, b, c, d, ...)
			'...': function (args) {
				if (containsCollections(args)) {
					throw new TypeError('Scalar values expected in function median');
				}

				return _median(args);
			}
		});


		/**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */
		function _median(array) {
			array = flatten(array.valueOf());

			var num = array.length;
			if (num == 0) {
				throw new Error('Cannot calculate median of an empty array');
			}

			if (num % 2 == 0) {
				// even: return the average of the two middle values
				var mid = num / 2 - 1;
				var right = partitionSelect(array, mid + 1);

				// array now partitioned at mid + 1, take max of left part
				var left = array[mid];
				for (var i = 0; i < mid; ++i) {
					if (compare(array[i], left) > 0) {
						left = array[i];
					}
				}

				return middle2(left, right);
			}
			else {
				// odd: return the middle value
				var m = partitionSelect(array, (num - 1) / 2);

				return middle(m);
			}
		}

		// helper function to type check the middle value of the array
		var middle = typed({
			'number | BigNumber | Unit': function (value) {
				return value;
			}
		});

		// helper function to type check the two middle value of the array
		var middle2 = typed({
			'number | BigNumber | Unit, number | BigNumber | Unit': function (left, right) {
				return divide(add(left, right), 2);
			}
		});

		median.toTex = undefined; // use default template

		return median;
	}

	exports.name = 'median';
	exports.factory = factory;

},{"../../utils/array":581,"../../utils/collection/containsCollections":593,"../../utils/collection/reduce":597,"../arithmetic/addScalar":372,"../arithmetic/divideScalar":377,"../matrix/partitionSelect":444,"../relational/compare":465}],479:[function(require,module,exports){
	'use strict';

	var deepForEach = require('../../utils/collection/deepForEach');
	var reduce = require('../../utils/collection/reduce');
	var containsCollections = require('../../utils/collection/containsCollections');

	function factory (type, config, load, typed) {
		var smaller = load(require('../relational/smaller'));
  
		/**
   * Compute the maximum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3);                  // returns 1
   *     math.min([2, 1, 4, 3]);                // returns 1
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
		var min = typed('min', {
			// min([a, b, c, d, ...])
			'Array | Matrix': _min,

			// min([a, b, c, d, ...], dim)
			'Array | Matrix, number | BigNumber': function (array, dim) {
				return reduce(array, dim.valueOf(), _smallest);
			},

			// min(a, b, c, d, ...)
			'...': function (args) {
				if (containsCollections(args)) {
					throw new TypeError('Scalar values expected in function min');
				}

				return _min(args);
			}
		});

		min.toTex = '\\min\\left(${args}\\right)';

		return min;

		/**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */
		function _smallest(x, y) {
			return smaller(x, y) ? x : y;
		}

		/**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */
		function _min(array) {
			var min = undefined;

			deepForEach(array, function (value) {
				if (min === undefined || smaller(value, min)) {
					min = value;
				}
			});

			if (min === undefined) {
				throw new Error('Cannot calculate min of an empty array');
			}

			return min;
		}
	}

	exports.name = 'min';
	exports.factory = factory;

},{"../../utils/collection/containsCollections":593,"../../utils/collection/deepForEach":594,"../../utils/collection/reduce":597,"../relational/smaller":472}],480:[function(require,module,exports){
	'use strict';

	var flatten = require('../../utils/array').flatten;

	function factory (type, config, load, typed) {

		/**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */

		var mode = typed('mode', {
			'Array | Matrix' : _mode,
    
			'...': function (args) {
				return _mode(args);
			}
		});
  
		return mode;

		/**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {number} mode
   * @private
   */
		function _mode(values) {
			values = flatten(values.valueOf());
			var num = values.length;
			if (num == 0) {
				throw new Error('Cannot calculate mode of an empty array');
			}
    
			var count = {},
				mode = [],
				max = 0;
			for (var i in values) {
				if (!(values[i] in count)){
					count[values[i]] = 0;
				}
				count[values[i]]++;
				if (count[values[i]] == max){
					mode.push(values[i]);
				}
				else if (count[values[i]] > max) {
					max = count[values[i]];
					mode = [values[i]];
				}
			}
			return mode; 
		}
	}

	exports.name = 'mode';
	exports.factory = factory;
},{"../../utils/array":581}],481:[function(require,module,exports){
	'use strict';

	var deepForEach = require('../../utils/collection/deepForEach');

	function factory (type, config, load, typed) {
		var multiply = load(require('../arithmetic/multiplyScalar'));

		/**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3);           // returns 6
   *     math.prod(2, 3);               // returns 6
   *     math.prod(2, 3, 4);            // returns 24
   *     math.prod([2, 3, 4]);          // returns 24
   *     math.prod([[2, 5], [4, 3]]);   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
		var prod = typed('prod', {
			// prod([a, b, c, d, ...])
			'Array | Matrix': _prod,

			// prod([a, b, c, d, ...], dim)
			'Array | Matrix, number | BigNumber': function (array, dim) {
				// TODO: implement prod(A, dim)
				throw new Error('prod(A, dim) is not yet supported');
				//return reduce(arguments[0], arguments[1], math.prod);
			},

			// prod(a, b, c, d, ...)
			'...': function (args) {
				return _prod(args);
			}
		});

		prod.toTex = undefined; // use default template

		return prod;

		/**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */
		function _prod(array) {
			var prod = undefined;

			deepForEach(array, function (value) {
				prod = (prod === undefined) ? value : multiply(prod, value);
			});

			if (prod === undefined) {
				throw new Error('Cannot calculate prod of an empty array');
			}

			return prod;
		}
	}

	exports.name = 'prod';
	exports.factory = factory;

},{"../../utils/collection/deepForEach":594,"../arithmetic/multiplyScalar":392}],482:[function(require,module,exports){
	'use strict';

	var isInteger = require('../../utils/number').isInteger;
	var isNumber = require('../../utils/number').isNumber;
	var flatten = require('../../utils/array').flatten;
	var isCollection = require('../../utils/collection/isCollection');

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/add'));
		var multiply = load(require('../arithmetic/multiply'));
		var partitionSelect = load(require('../matrix/partitionSelect'));
		var compare = load(require('../relational/compare'));

		/**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, var
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
		function quantileSeq(data, probOrN, sorted) {
			var probArr, dataArr, one;

			if (arguments.length < 2 || arguments.length > 3) {
				throw new SyntaxError('Function quantileSeq requires two or three parameters');
			}

			if (isCollection(data)) {
				sorted = sorted || false;
				if (typeof sorted === 'boolean') {
					dataArr = data.valueOf();
					if (isNumber(probOrN)) {
						if (probOrN < 0) {
							throw new Error('N/prob must be non-negative');
						}

						if (probOrN <= 1) {
							// quantileSeq([a, b, c, d, ...], prob[,sorted])
							return _quantileSeq(dataArr, probOrN, sorted);
						}

						if (probOrN > 1) {
							// quantileSeq([a, b, c, d, ...], N[,sorted])
							if (!isInteger(probOrN)) {
								throw new Error('N must be a positive integer');
							}

							var nPlusOne = probOrN + 1;
							probArr = new Array(probOrN);
							for (var i = 0; i < probOrN;) {
								probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);
							}
							return probArr;
						}
					}

					if (probOrN && probOrN.isBigNumber) {
						if (probOrN.isNegative()) {
							throw new Error('N/prob must be non-negative');
						}

						one = new probOrN.constructor(1);

						if (probOrN.lte(one)) {
							// quantileSeq([a, b, c, d, ...], prob[,sorted])
							return _quantileSeq(dataArr, probOrN, sorted);
						}

						if (probOrN.gt(one)) {
							// quantileSeq([a, b, c, d, ...], N[,sorted])
							if (!probOrN.isInteger()) {
								throw new Error('N must be a positive integer');
							}

							// largest possible Array length is 2^32-1;
							// 2^32 < 10^15, thus safe conversion guaranteed
							var intN = probOrN.toNumber();
							if (intN > 4294967295) {
								throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
							}

							var nPlusOne = new type.BigNumber(intN + 1);
							probArr = new Array(intN);
							for (var i = 0; i < intN;) {
								probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
							}
							return probArr;
						}
					}

					if (Array.isArray(probOrN)) {
						// quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
						probArr = new Array(probOrN.length);
						for (var i = 0; i < probArr.length; ++i) {
							var currProb = probOrN[i];
							if (isNumber(currProb)) {
								if (currProb < 0 || currProb > 1) {
									throw new Error('Probability must be between 0 and 1, inclusive');
								}
							} else if (currProb && currProb.isBigNumber) {
								one = new currProb.constructor(1);
								if (currProb.isNegative() || currProb.gt(one)) {
									throw new Error('Probability must be between 0 and 1, inclusive');
								}
							} else {
								throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
							}

							probArr[i] = _quantileSeq(dataArr, currProb, sorted);
						}
						return probArr;
					}

					throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
				}

				throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
			}

			throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
		}

		/**
   * Calculate the prob order quantile of an n-dimensional array.
   * 
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */
		function _quantileSeq(array, prob, sorted) {
			var flat = flatten(array);
			var len = flat.length;
			if (len === 0) {
				throw new Error('Cannot calculate quantile of an empty sequence');
			}

			if (isNumber(prob)) {
				var index = prob * (len-1);
				var fracPart = index % 1;
				if (fracPart === 0) {
					var value = sorted ? flat[index] : partitionSelect(flat, index);

					validate(value);

					return value;
				}

				var integerPart = Math.floor(index);

				var left, right;
				if (sorted) {
					left = flat[integerPart];
					right = flat[integerPart+1];
				} else {
					right = partitionSelect(flat, integerPart+1);

					// max of partition is kth largest
					left = flat[integerPart];
					for (var i = 0; i < integerPart; ++i) {
						if (compare(flat[i], left) > 0) {
							left = flat[i];
						}
					}
				}

				validate(left);
				validate(right);

				// Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
				return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
			}

			// If prob is a BigNumber
			var index = prob.times(len-1);
			if (index.isInteger()) {
				index = index.toNumber();
				var value = sorted ? flat[index] : partitionSelect(flat, index);

				validate(value);

				return value;
			}

			var integerPart = index.floor();
			var fracPart = index.minus(integerPart);
			var integerPartNumber = integerPart.toNumber();

			var left, right;
			if (sorted) {
				left = flat[integerPartNumber];
				right = flat[integerPartNumber+1];
			} else {
				right = partitionSelect(flat, integerPartNumber+1);

				// max of partition is kth largest
				left = flat[integerPartNumber];
				for (var i = 0; i < integerPartNumber; ++i) {
					if (compare(flat[i], left) > 0) {
						left = flat[i];
					}
				}
			}

			validate(left);
			validate(right);

			// Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
			var one = new fracPart.constructor(1);
			return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
		}

		/**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */
		var validate = typed({
			'number | BigNumber | Unit': function (x) {
				return x;
			}
		});

		return quantileSeq;
	}

	exports.name = 'quantileSeq';
	exports.factory = factory;

},{"../../utils/array":581,"../../utils/collection/isCollection":596,"../../utils/number":603,"../arithmetic/add":371,"../arithmetic/multiply":391,"../matrix/partitionSelect":444,"../relational/compare":465}],483:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var sqrt       = load(require('../arithmetic/sqrt'));
		var variance   = load(require('../statistics/var'));

		/**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(var(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated.
   *
   * Optionally, the type of normalization can be specified as second
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6);                     // returns 2
   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased');      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, var
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @return {*} The standard deviation
   */
		var std = typed('std', {
			// std([a, b, c, d, ...])
			'Array | Matrix': _std,

			// std([a, b, c, d, ...], normalization)
			'Array | Matrix, string': _std,

			// std(a, b, c, d, ...)
			'...': function (args) {
				return _std(args);
			}
		});
  
		std.toTex = undefined; // use default template

		return std;

		function _std(array, normalization) {
			if (array.length == 0) {
				throw new SyntaxError('Function std requires one or more parameters (0 provided)');
			}

			return sqrt(variance.apply(null, arguments));
		}
	}

	exports.name = 'std';
	exports.factory = factory;

},{"../arithmetic/sqrt":398,"../statistics/var":485}],484:[function(require,module,exports){
	'use strict';

	var deepForEach = require('../../utils/collection/deepForEach');

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/addScalar'));

		/**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3);               // returns 10
   *     math.sum([2, 1, 4, 3]);             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
		var sum = typed('sum', {
			'Array | Matrix': function (args) {
				// sum([a, b, c, d, ...])
				return _sum(args);
			},

			'Array | Matrix, number | BigNumber': function () {
				// sum([a, b, c, d, ...], dim)
				// TODO: implement sum(A, dim)
				throw new Error('sum(A, dim) is not yet supported');
			},

			'...': function (args) {
				// sum(a, b, c, d, ...)
				return _sum(args);
			}
		});

		sum.toTex = undefined; // use default template

		return sum;

		/**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array} array
   * @return {number} sum
   * @private
   */
		function _sum(array) {
			var sum = undefined;

			deepForEach(array, function (value) {
				sum = (sum === undefined) ? value : add(sum, value);
			});

			if (sum === undefined) {
				switch (config.number) {
				case 'number':
					return 0;
				case 'BigNumber':
					return new type.BigNumber(0);
				case 'Fraction':
					return new type.Fraction(0);
				default:
					return 0;
				}
			}

			return sum;
		}
	}

	exports.name = 'sum';
	exports.factory = factory;

},{"../../utils/collection/deepForEach":594,"../arithmetic/addScalar":372}],485:[function(require,module,exports){
	'use strict';

	var DEFAULT_NORMALIZATION = 'unbiased';

	var deepForEach = require('../../utils/collection/deepForEach');

	function factory (type, config, load, typed) {
		var add = load(require('../arithmetic/addScalar'));
		var subtract = load(require('../arithmetic/subtract'));
		var multiply = load(require('../arithmetic/multiplyScalar'));
		var divide = load(require('../arithmetic/divideScalar'));

		/**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Optionally, the type of normalization can be specified as second
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.var(a, b, c, ...)
   *     math.var(A)
   *     math.var(A, normalization)
   *
   * Examples:
   *
   *     math.var(2, 4, 6);                     // returns 4
   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667
   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5
   *     math.var([2, 4, 6, 8], 'biased');      // returns 4
   *
   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @return {*} The variance
   */
		var variance = typed('variance', {
			// var([a, b, c, d, ...])
			'Array | Matrix': function (array) {
				return _var(array, DEFAULT_NORMALIZATION);
			},

			// var([a, b, c, d, ...], normalization)
			'Array | Matrix, string': _var,

			// var(a, b, c, d, ...)
			'...': function (args) {
				return _var(args, DEFAULT_NORMALIZATION);
			}
		});

		variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';

		return variance;

		/**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */
		function _var(array, normalization) {
			var sum = 0;
			var num = 0;

			if (array.length == 0) {
				throw new SyntaxError('Function var requires one or more parameters (0 provided)');
			}

			// calculate the mean and number of elements
			deepForEach(array, function (value) {
				sum = add(sum, value);
				num++;
			});
			if (num === 0) throw new Error('Cannot calculate var of an empty array');

			var mean = divide(sum, num);

			// calculate the variance
			sum = 0;
			deepForEach(array, function (value) {
				var diff = subtract(value, mean);
				sum = add(sum, multiply(diff, diff));
			});

			switch (normalization) {
			case 'uncorrected':
				return divide(sum, num);

			case 'biased':
				return divide(sum, num + 1);

			case 'unbiased':
				var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;
				return (num == 1) ? zero : divide(sum, num - 1);

			default:
				throw new Error('Unknown normalization "' + normalization + '". ' +
        'Choose "unbiased" (default), "uncorrected", or "biased".');
			}
		}
	}

	exports.name = 'var';
	exports.factory = factory;

},{"../../utils/collection/deepForEach":594,"../arithmetic/addScalar":372,"../arithmetic/divideScalar":377,"../arithmetic/multiplyScalar":392,"../arithmetic/subtract":400}],486:[function(require,module,exports){
	'use strict';

	var string = require('../../utils/string');

	function factory (type, config, load, typed) {
		/**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *    - `precision: number`
   *      A number between 0 and 16 to round the digits of the number. In case
   *      of notations 'exponential' and 'auto', `precision` defines the total
   *      number of significant digits returned and is undefined by default.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point, and is 0 by default.
   *    - `exponential: Object`
   *      An object containing two parameters, {number} lower and {number} upper,
   *      used by notation 'auto' to determine when to return exponential
   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only
   *      applicable for notation `auto`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4);                                        // returns '6.4'
   *    math.format(1240000);                                    // returns '1.24e6'
   *    math.format(1/3);                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3);                                     // returns '0.333'
   *    math.format(21385, 2);                                   // returns '21000'
   *    math.format(12.071, {notation: 'fixed'});                // returns '12'
   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'
   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'
   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2);
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
		var format = typed('format', {
			'any': string.format,
			'any, Object | function | number': string.format
		});

		format.toTex = undefined; // use default template

		return format;
	}

	exports.name = 'format';
	exports.factory = factory;

},{"../../utils/string":605}],487:[function(require,module,exports){
	module.exports = [
		require('./format'),
		require('./print')
	];

},{"./format":486,"./print":488}],488:[function(require,module,exports){
	'use strict';

	var isString = require('../../utils/string').isString;
	var format = require('../../utils/string').format;

	function factory (type, config, load, typed) {
		/**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5});
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     });
   *
   * See also:
   *
   *     format
   *
   * @param {string} template     A string containing variable placeholders.
   * @param {Object} values       An object containing variables which will
   *                              be filled in in the template.
   * @param {number | Object} [options]  Formatting options,
   *                              or the number of digits to format numbers.
   *                              See function math.format for a description
   *                              of all options.
   * @return {string} Interpolated string
   */
		var print = typed ('print', {
			'string, Object': _print,
			'string, Object, number': _print
		});

		print.toTex = undefined; // use default template

		return print;
	}

	/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */
	function _print(template, values, options) {
		return template.replace(/\$([\w\.]+)/g, function (original, key) {
			var keys = key.split('.');
			var value = values[keys.shift()];
			while (keys.length && value !== undefined) {
				var k = keys.shift();
				value = k ? value[k] : value + '.';
			}

			if (value !== undefined) {
				if (!isString(value)) {
					return format(value, options);
				}
				else {
					return value;
				}
			}

			return original;
		}
		);
	}

	exports.name = 'print';
	exports.factory = factory;

},{"../../utils/string":605}],489:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5);           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)); // returns number 1.5
   *
   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
		var acos = typed('acos', {
			'number': function (x) {
				if ((x >= -1 && x <= 1) || config.predictable) {
					return Math.acos(x);
				}
				else {
					return new type.Complex(x, 0).acos();
				}
			},

			'Complex': function (x) {
				return x.acos();
			},

			'BigNumber': function (x) {
				return x.acos();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, acos);
			}
		});

		acos.toTex = {1: '\\cos^{-1}\\left(${args[0]}\\right)'};

		return acos;
	}

	exports.name = 'acos';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],490:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5);       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
		var acosh = typed('acosh', {
			'number': function (x) {
				if (x >= 1 || config.predictable) {
					return _acosh(x);
				}
				if (x <= -1) {
					return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);
				}
				return new type.Complex(x, 0).acosh();
			},

			'Complex': function (x) {
				return x.acosh();
			},

			'BigNumber': function (x) {
				return x.acosh();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, acosh);
			}
		});

		acosh.toTex = {1: '\\cosh^{-1}\\left(${args[0]}\\right)'};

		return acosh;
	}

	/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 * @private
 */
	var _acosh = Math.acosh || function (x) {
		return Math.log(Math.sqrt(x*x - 1) + x);
	};

	exports.name = 'acosh';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],491:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5);           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)); // returns number 1.5
   *
   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
		var acot = typed('acot', {
			'number': function (x) {
				return Math.atan(1 / x);
			},

			'Complex': function (x) {
				return x.acot();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x).atan();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, acot);
			}
		});

		acot.toTex = {1: '\\cot^{-1}\\left(${args[0]}\\right)'};

		return acot;
	}

	exports.name = 'acot';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],492:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5);       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
		var acoth = typed('acoth', {
			'number': function (x) {
				if (x >= 1 || x <= -1 || config.predictable) {
					return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;
				}
				return new type.Complex(x, 0).acoth();
			},

			'Complex': function (x) {
				return x.acoth();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x).atanh();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, acoth);
			}
		});

		acoth.toTex = {1: '\\coth^{-1}\\left(${args[0]}\\right)'};

		return acoth;
	}

	exports.name = 'acoth';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],493:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');


	function factory (type, config, load, typed) {

		/**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5);           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)); // returns number ~1.5
   *
   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
		var acsc = typed('acsc', {
			'number': function (x) {
				if (x <= -1 || x >= 1 || config.predictable) {
					return Math.asin(1 / x);
				}
				return new type.Complex(x, 0).acsc();
			},

			'Complex': function (x) {
				return x.acsc();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x).asin();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, acsc);
			}
		});

		acsc.toTex = {1: '\\csc^{-1}\\left(${args[0]}\\right)'};

		return acsc;
	}

	exports.name = 'acsc';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],494:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5);       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
		var acsch = typed('acsch', {
			'number': function (x) {
				x = 1 / x;
				return Math.log(x + Math.sqrt(x*x + 1));
			},

			'Complex': function (x) {
				return x.acsch();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x).asinh();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, acsch);
			}
		});

		acsch.toTex = {1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'};

		return acsch;
	}

	exports.name = 'acsch';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],495:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5);           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)); // returns 1.5
   *
   *    math.asec(2);             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
		var asec = typed('asec', {
			'number': function (x) {
				if (x <= -1 || x >= 1 || config.predictable) {
					return Math.acos(1 / x);
				}
				return new type.Complex(x, 0).asec();
			},

			'Complex': function (x) {
				return x.asec();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x).acos();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, asec);
			}
		});

		asec.toTex = {1: '\\sec^{-1}\\left(${args[0]}\\right)'};

		return asec;
	}

	exports.name = 'asec';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],496:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var acosh = typed.find(load(require('./acosh')), ['Complex']);

		/**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5);       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
		var asech = typed('asech', {
			'number': function (x) {
				if ((x <= 1 && x >= -1) || config.predictable) {
					x = 1 / x;

					var ret = Math.sqrt(x*x - 1);
					if (x > 0 || config.predictable) {
						return Math.log(ret + x);
					}

					return new type.Complex(Math.log(ret - x), Math.PI);
				}

				return new type.Complex(x, 0).asech();
			},

			'Complex': function (x) {
				return x.asech();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x).acosh();
			},

			'Array | Matrix': function (x) {
				return deepMap(x, asech);
			}
		});

		asech.toTex = {1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'};

		return asech;
	}

	exports.name = 'asech';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"./acosh":490}],497:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5);           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)); // returns number ~1.5
   *
   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
		var asin = typed('asin', {
			'number': function (x) {
				if ((x >= -1 && x <= 1) || config.predictable) {
					return Math.asin(x);
				}
				else {
					return new type.Complex(x, 0).asin();
				}
			},

			'Complex': function (x) {
				return x.asin();
			},

			'BigNumber': function (x) {
				return x.asin();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since asin(0) = 0
				return deepMap(x, asin, true);
			}
		});

		asin.toTex = {1: '\\sin^{-1}\\left(${args[0]}\\right)'};

		return asin;
	}

	exports.name = 'asin';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],498:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5);       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
		var asinh = typed('asinh', {
			'number': Math.asinh || function (x) {
				return Math.log(Math.sqrt(x*x + 1) + x);
			},

			'Complex': function (x) {
				return x.asinh();
			},

			'BigNumber': function (x) {
				return x.asinh();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since asinh(0) = 0
				return deepMap(x, asinh, true);
			}
		});

		asinh.toTex = {1: '\\sinh^{-1}\\left(${args[0]}\\right)'};

		return asinh;
	}

	exports.name = 'asinh';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],499:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5);           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)); // returns number 1.5
   *
   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
		var atan = typed('atan', {
			'number': function (x) {
				return Math.atan(x);
			},

			'Complex': function (x) {
				return x.atan();
			},

			'BigNumber': function (x) {
				return x.atan();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since atan(0) = 0
				return deepMap(x, atan, true);
			}
		});

		atan.toTex = {1: '\\tan^{-1}\\left(${args[0]}\\right)'};

		return atan;
	}

	exports.name = 'atan';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],500:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
		var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
		var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));
		var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
		var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi;       // returns number 0.25
   *
   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg
   *    var x = math.cos(angle);
   *    var y = math.sin(angle);
   *
   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */
		var atan2 = typed('atan2', {

			'number, number': Math.atan2,

			// Complex numbers doesn't seem to have a reasonable implementation of
			// atan2(). Even Matlab removed the support, after they only calculated
			// the atan only on base of the real part of the numbers and ignored the imaginary.

			'BigNumber, BigNumber': function (y, x) {
				return type.BigNumber.atan2(y, x);
			},

			'Matrix, Matrix': function (x, y) {
				// result
				var c;

				// process matrix storage
				switch (x.storage()) {
				case 'sparse':
					switch (y.storage()) {
					case 'sparse':
						// sparse .* sparse
						c = algorithm09(x, y, atan2, false);
						break;
					default:
						// sparse .* dense
						c = algorithm02(y, x, atan2, true);
						break;
					}
					break;
				default:
					switch (y.storage()) {
					case 'sparse':
						// dense .* sparse
						c = algorithm03(x, y, atan2, false);
						break;
					default:
						// dense .* dense
						c = algorithm13(x, y, atan2);
						break;
					}
					break;
				}
				return c;
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return atan2(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return atan2(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return atan2(x, matrix(y));
			},

			'Matrix, number | BigNumber': function (x, y) {
				// result
				var c;
				// check storage format
				switch (x.storage()) {
				case 'sparse':
					c = algorithm11(x, y, atan2, false);
					break;
				default:
					c = algorithm14(x, y, atan2, false);
					break;
				}
				return c;
			},

			'number | BigNumber, Matrix': function (x, y) {
				// result
				var c;
				// check storage format
				switch (y.storage()) {
				case 'sparse':
					c = algorithm12(y, x, atan2, true);
					break;
				default:
					c = algorithm14(y, x, atan2, true);
					break;
				}
				return c;
			},

			'Array, number | BigNumber': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, atan2, false).valueOf();
			},

			'number | BigNumber, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, atan2, true).valueOf();
			}
		});

		atan2.toTex = {2: '\\mathrm{atan2}\\left(${args}\\right)'};

		return atan2;
	}

	exports.name = 'atan2';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm02":557,"../../type/matrix/utils/algorithm03":558,"../../type/matrix/utils/algorithm09":564,"../../type/matrix/utils/algorithm11":566,"../../type/matrix/utils/algorithm12":567,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569}],501:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5);       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
		var atanh = typed('atanh', {
			'number': function (x) {
				if ((x <= 1 && x >= -1) || config.predictable) {
					return _atanh(x);
				}
				return new type.Complex(x, 0).atanh();
			},

			'Complex': function (x) {
				return x.atanh();
			},

			'BigNumber': function (x) {
				return x.atanh();
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since atanh(0) = 0
				return deepMap(x, atanh, true);
			}
		});

		atanh.toTex = {1: '\\tanh^{-1}\\left(${args[0]}\\right)'};

		return atanh;
	}

	/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 * @private
 */
	var _atanh = Math.atanh || function (x) {
		return Math.log((1 + x)/(1 - x)) / 2;
	};

	exports.name = 'atanh';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],502:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2);                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'));  // returns number -1
   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5
   *
   *    var angle = 0.2;
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
		var cos = typed('cos', {
			'number': Math.cos,

			'Complex': function (x) {
				return x.cos();
			},

			'BigNumber': function (x) {
				return x.cos();
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function cos is no angle');
				}
				return cos(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, cos);
			}
		});

		cos.toTex = {1: '\\cos\\left(${args[0]}\\right)'};

		return cos;
	}

	exports.name = 'cos';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],503:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5);       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
		var cosh = typed('cosh', {
			'number': _cosh,

			'Complex': function (x) {
				return x.cosh();
			},

			'BigNumber': function (x) {
				return x.cosh();
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function cosh is no angle');
				}
				return cosh(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, cosh);
			}
		});

		cosh.toTex = {1: '\\cosh\\left(${args[0]}\\right)'};

		return cosh;
	}

	/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
	var _cosh = Math.cosh || function (x) {
		return (Math.exp(x) + Math.exp(-x)) / 2;
	};

	exports.name = 'cosh';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],504:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2);      // returns number -0.45765755436028577
   *    1 / math.tan(2);  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
		var cot = typed('cot', {
			'number': function (x) {
				return 1 / Math.tan(x);
			},

			'Complex': function (x) {
				return x.cot();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x.tan());
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function cot is no angle');
				}
				return cot(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, cot);
			}
		});

		cot.toTex = {1: '\\cot\\left(${args[0]}\\right)'};

		return cot;
	}

	exports.name = 'cot';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],505:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2);         // returns 1.0373147207275482
   *    1 / math.tanh(2);     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
		var coth = typed('coth', {
			'number': _coth,

			'Complex': function (x) {
				return x.coth();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x.tanh());
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function coth is no angle');
				}
				return coth(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, coth);
			}
		});

		coth.toTex = {1: '\\coth\\left(${args[0]}\\right)'};

		return coth;
	}

	/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
	function _coth(x) {
		var e = Math.exp(2 * x);
		return (e + 1) / (e - 1);
	}

	exports.name = 'coth';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],506:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2);      // returns number 1.099750170294617
   *    1 / math.sin(2);  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
		var csc = typed('csc', {
			'number': function (x) {
				return 1 / Math.sin(x);
			},

			'Complex': function (x) {
				return x.csc();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x.sin());
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function csc is no angle');
				}
				return csc(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, csc);
			}
		});

		csc.toTex = {1: '\\csc\\left(${args[0]}\\right)'};

		return csc;
	}

	exports.name = 'csc';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],507:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var sign = require('../../utils/number').sign;

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5);       // returns 1.9190347513349437
   *    1 / math.sinh(0.5);   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
		var csch = typed('csch', {
			'number': _csch,

			'Complex': function (x) {
				return x.csch();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x.sinh());
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function csch is no angle');
				}
				return csch(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, csch);
			}
		});

		csch.toTex = {1: '\\mathrm{csch}\\left(${args[0]}\\right)'};

		return csch;
	}

	/**
 * Calculate the hyperbolic cosecant of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
	function _csch(x) {
		// consider values close to zero (+/-)
		if (x == 0) {
			return Number.POSITIVE_INFINITY;
		}
		else {
			return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
		}
	}

	exports.name = 'csch';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],508:[function(require,module,exports){
	module.exports = [
		require('./acos'),
		require('./acosh'),
		require('./acot'),
		require('./acoth'),
		require('./acsc'),
		require('./acsch'),
		require('./asec'),
		require('./asech'),
		require('./asin'),
		require('./asinh'),
		require('./atan'),
		require('./atan2'),
		require('./atanh'),
		require('./cos'),
		require('./cosh'),
		require('./cot'),
		require('./coth'),
		require('./csc'),
		require('./csch'),
		require('./sec'),
		require('./sech'),
		require('./sin'),
		require('./sinh'),
		require('./tan'),
		require('./tanh')
	];

},{"./acos":489,"./acosh":490,"./acot":491,"./acoth":492,"./acsc":493,"./acsch":494,"./asec":495,"./asech":496,"./asin":497,"./asinh":498,"./atan":499,"./atan2":500,"./atanh":501,"./cos":502,"./cosh":503,"./cot":504,"./coth":505,"./csc":506,"./csch":507,"./sec":509,"./sech":510,"./sin":511,"./sinh":512,"./tan":513,"./tanh":514}],509:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2);      // returns number -2.4029979617223822
   *    1 / math.cos(2);  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
		var sec = typed('sec', {
			'number': function (x) {
				return 1 / Math.cos(x);
			},

			'Complex': function (x) {
				return x.sec();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x.cos());
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function sec is no angle');
				}
				return sec(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, sec);
			}
		});

		sec.toTex = {1: '\\sec\\left(${args[0]}\\right)'};

		return sec;
	}

	exports.name = 'sec';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],510:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5);       // returns 0.886818883970074
   *    1 / math.cosh(0.5);   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
		var sech = typed('sech', {
			'number': _sech,

			'Complex': function (x) {
				return x.sech();
			},

			'BigNumber': function (x) {
				return new type.BigNumber(1).div(x.cosh());
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function sech is no angle');
				}
				return sech(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, sech);
			}
		});

		sech.toTex = {1: '\\mathrm{sech}\\left(${args[0]}\\right)'};

		return sech;
	}

	/**
 * Calculate the hyperbolic secant of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
	function _sech(x) {
		return 2 / (Math.exp(x) + Math.exp(-x));
	}

	exports.name = 'sech';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],511:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2);                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'));   // returns number 1
   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5
   *
   *    var angle = 0.2;
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
		var sin = typed('sin', {
			'number': Math.sin,

			'Complex': function (x) {
				return x.sin();
			},

			'BigNumber': function (x) {
				return x.sin();
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function sin is no angle');
				}
				return sin(x.value);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since sin(0) = 0
				return deepMap(x, sin, true);
			}
		});

		sin.toTex = {1: '\\sin\\left(${args[0]}\\right)'};

		return sin;
	}

	exports.name = 'sin';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],512:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5);       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
		var sinh = typed('sinh', {
			'number': _sinh,

			'Complex': function (x) {
				return x.sinh();
			},

			'BigNumber': function (x) {
				return x.sinh();
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function sinh is no angle');
				}
				return sinh(x.value);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since sinh(0) = 0
				return deepMap(x, sinh, true);
			}
		});

		sinh.toTex = {1: '\\sinh\\left(${args[0]}\\right)'};

		return sinh;
	}

	/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
	var _sinh = Math.sinh || function (x) {
		return (Math.exp(x) - Math.exp(-x)) / 2;
	};

	exports.name = 'sinh';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],513:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5);                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4);            // returns number 1
   *    math.tan(math.unit(45, 'deg'));   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
		var tan = typed('tan', {
			'number': Math.tan,

			'Complex': function (x) {
				return x.tan();
			},

			'BigNumber': function (x) {
				return x.tan();
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function tan is no angle');
				}
				return tan(x.value);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since tan(0) = 0
				return deepMap(x, tan, true);
			}
		});

		tan.toTex = {1: '\\tan\\left(${args[0]}\\right)'};

		return tan;
	}

	exports.name = 'tan';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],514:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5);                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974
   *    1 / math.coth(0.5);               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
		var tanh = typed('tanh', {
			'number': _tanh,

			'Complex': function (x) {
				return x.tanh();
			},

			'BigNumber': function (x) {
				return x.tanh();
			},

			'Unit': function (x) {
				if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
					throw new TypeError ('Unit in function tanh is no angle');
				}
				return tanh(x.value);
			},

			'Array | Matrix': function (x) {
				// deep map collection, skip zeros since tanh(0) = 0
				return deepMap(x, tanh, true);
			}
		});

		tanh.toTex = {1: '\\tanh\\left(${args[0]}\\right)'};

		return tanh;
	}

	/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
	var _tanh = Math.tanh || function (x) {
		var e = Math.exp(2 * x);
		return (e - 1) / (e + 1);
	};

	exports.name = 'tanh';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],515:[function(require,module,exports){
	module.exports = [
		require('./to')
	];
},{"./to":516}],516:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		var latex = require('../../utils/latex');

		var matrix = load(require('../../type/matrix/function/matrix'));

		var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
		var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

		/**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */
		var to = typed('to', {

			'Unit, Unit | string': function (x, unit) {
				return x.to(unit);
			},

			'Matrix, Matrix': function (x, y) {
				// SparseMatrix does not support Units
				return algorithm13(x, y, to);
			},

			'Array, Array': function (x, y) {
				// use matrix implementation
				return to(matrix(x), matrix(y)).valueOf();
			},

			'Array, Matrix': function (x, y) {
				// use matrix implementation
				return to(matrix(x), y);
			},

			'Matrix, Array': function (x, y) {
				// use matrix implementation
				return to(x, matrix(y));
			},

			'Matrix, any': function (x, y) {
				// SparseMatrix does not support Units
				return algorithm14(x, y, to, false);
			},

			'any, Matrix': function (x, y) {
				// SparseMatrix does not support Units
				return algorithm14(y, x, to, true);
			},

			'Array, any': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(x), y, to, false).valueOf();
			},

			'any, Array': function (x, y) {
				// use matrix implementation
				return algorithm14(matrix(y), x, to, true).valueOf();
			}
		});

		to.toTex = {
			2: '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)'
		};

		return to;
	}

	exports.name = 'to';
	exports.factory = factory;

},{"../../type/matrix/function/matrix":553,"../../type/matrix/utils/algorithm13":568,"../../type/matrix/utils/algorithm14":569,"../../utils/latex":602}],517:[function(require,module,exports){
	'use strict';

	var object= require('../../utils/object');

	function factory (type, config, load, typed) {
		/**
   * Clone an object.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5);                   // returns number 3.5
   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world");         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
		var clone = typed('clone', {
			'any': object.clone
		});

		clone.toTex = undefined; // use default template

		return clone;
	}

	exports.name = 'clone';
	exports.factory = factory;

},{"../../utils/object":604}],518:[function(require,module,exports){
	module.exports = [
		require('./clone'),
		require('./isInteger'),
		require('./isNegative'),
		require('./isNumeric'),
		require('./isPositive'),
		require('./isPrime'),
		require('./isZero'),
		require('./isNaN'),
		require('./typeof')
	];

},{"./clone":517,"./isInteger":519,"./isNaN":520,"./isNegative":521,"./isNumeric":522,"./isPositive":523,"./isPrime":524,"./isZero":525,"./typeof":526}],519:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2);                     // returns true
   *    math.isInteger(0);                     // returns true
   *    math.isInteger(0.5);                   // returns false
   *    math.isInteger(math.bignumber(500));   // returns true
   *    math.isInteger(math.fraction(4));      // returns true
   *    math.isInteger('3');                   // returns true
   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i');   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
		var isInteger = typed('isInteger', {
			'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?

			'BigNumber': function (x) {
				return x.isInt();
			},

			'Fraction': function (x) {
				return x.d === 1 && isFinite(x.n);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, isInteger);
			}
		});

		return isInteger;
	}

	exports.name = 'isInteger';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],520:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3);                     // returns false
   *    math.isNaN(NaN);                   // returns true
   *    math.isNaN(0);                     // returns false
   *    math.isNaN(math.bignumber(NaN));   // returns true
   *    math.isNaN(math.bignumber(0));     // returns false
   *    math.isNaN(math.fraction(-2, 5));  // returns false
   *    math.isNaN('-2');                  // returns false
   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
		var isNaN = typed('isNaN', {
			'number': function (x) {
				return Number.isNaN(x);
			},

			'BigNumber': function (x) {
				return x.isNaN();
			},

			'Fraction': function (x) {
				return false;
			},

			'Complex': function (x) {
				return Number.isNaN(x.re) && Number.isNaN(x.im);
			},

			'Unit': function (x) {
				return Number.isNaN(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, Number.isNaN);
			}
		});

		return isNaN;
	}

	exports.name = 'isNaN';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],521:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3);                     // returns false
   *    math.isNegative(-2);                    // returns true
   *    math.isNegative(0);                     // returns false
   *    math.isNegative(-0);                    // returns false
   *    math.isNegative(math.bignumber(2));     // returns false
   *    math.isNegative(math.fraction(-2, 5));  // returns true
   *    math.isNegative('-2');                  // returns true
   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
		var isNegative = typed('isNegative', {
			'number': function (x) {
				return x < 0;
			},

			'BigNumber': function (x) {
				return x.isNeg() && !x.isZero() && !x.isNaN();
			},

			'Fraction': function (x) {
				return x.s < 0; // It's enough to decide on the sign
			},

			'Unit': function (x) {
				return isNegative(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, isNegative);
			}
		});

		return isNegative;
	}

	exports.name = 'isNegative';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],522:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2);                     // returns true
   *    math.isNumeric(0);                     // returns true
   *    math.isNumeric(math.bignumber(500));   // returns true
   *    math.isNumeric(math.fraction(4));      // returns true
   *    math.isNumeric(math.complex('2-4i');   // returns false
   *    math.isNumeric('3');                   // returns false
   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
		var isNumeric = typed('isNumeric', {
			'number | BigNumber | Fraction | boolean': function () {
				return true;
			},

			'Complex | Unit | string': function () {
				return false;
			},

			'Array | Matrix': function (x) {
				return deepMap(x, isNumeric);
			}
		});

		return isNumeric;
	}

	exports.name = 'isNumeric';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],523:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3);                     // returns true
   *    math.isPositive(-2);                    // returns false
   *    math.isPositive(0);                     // returns false
   *    math.isPositive(-0);                    // returns false
   *    math.isPositive(0.5);                   // returns true
   *    math.isPositive(math.bignumber(2));     // returns true
   *    math.isPositive(math.fraction(-2, 5));  // returns false
   *    math.isPositive(math.fraction(1,3));    // returns false
   *    math.isPositive('2');                   // returns true
   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
		var isPositive = typed('isPositive', {
			'number': function (x) {
				return x > 0;
			},

			'BigNumber': function (x) {
				return !x.isNeg() && !x.isZero() && !x.isNaN();
			},

			'Fraction': function (x) {
				return x.s > 0 && x.n > 0;
			},

			'Unit': function (x) {
				return isPositive(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, isPositive);
			}
		});

		return isPositive;
	}

	exports.name = 'isPositive';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],524:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');


	function factory (type, config, load, typed) {
		/**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3);                     // returns true
   *    math.isPrime(-2);                    // returns false
   *    math.isPrime(0);                     // returns false
   *    math.isPrime(-0);                    // returns false
   *    math.isPrime(0.5);                   // returns false
   *    math.isPrime('2');                   // returns true
   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
		var isPrime = typed('isPrime', {
			'number': function (x) {
				if (x < 2){
					return false;
				}
				if (x == 2){
					return true;
				}
				if (x % 2 == 0){ 
					return false;
				}
				for (var i = 3; i * i <= x; i += 2){
					if (x % i == 0){
						return false;
					}
				}
				return true;
			},

			'BigNumber': function (x) {
				if (x.lt(2)){
					return false;
				}
				if (x.equals(2)){
					return true;
				}
				if (x.mod(2).isZero()){
					return false;
				}
				for(var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)){
					if (x.mod(i).isZero()){
						return false;
					}
				}
				return true;
			},

			'Array | Matrix': function (x) {
				return deepMap(x, isPrime);
			}
		});

		return isPrime;
	}

	exports.name = 'isPrime';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595}],525:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../utils/collection/deepMap');
	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0);                     // returns true
   *    math.isZero(2);                     // returns false
   *    math.isZero(0.5);                   // returns false
   *    math.isZero(math.bignumber(0));     // returns true
   *    math.isZero(math.fraction(0));      // returns true
   *    math.isZero(math.fraction(1,3));    // returns false
   *    math.isZero(math.complex('2 - 4i'); // returns false
   *    math.isZero(math.complex('0i');     // returns true
   *    math.isZero('0');                   // returns true
   *    math.isZero('2');                   // returns false
   *    math.isZero([2, 0, -3]');           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
		var isZero = typed('isZero', {
			'number': function (x) {
				return x === 0;
			},

			'BigNumber': function (x) {
				return x.isZero();
			},

			'Complex': function (x) {
				return x.re === 0 && x.im === 0;
			},

			'Fraction': function (x) {
				return x.d === 1 && x.n === 0;
			},

			'Unit': function (x) {
				return isZero(x.value);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, isZero);
			}
		});

		return isZero;
	}

	exports.name = 'isZero';
	exports.factory = factory;

},{"../../utils/collection/deepMap":595,"../../utils/number":603}],526:[function(require,module,exports){
	'use strict';

	var types = require('../../utils/types');

	function factory (type, config, load, typed) {
		/**
   * Determine the type of a variable.
   *
   * Function `typeof` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeof(null)`
   * number                 | `'number'`    | `math.typeof(3.5)`
   * boolean                | `'boolean'`   | `math.typeof (true)`
   * string                 | `'string'`    | `math.typeof ('hello world')`
   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeof (new Date())`
   * Function               | `'Function'`  | `math.typeof (function () {})`
   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`
   * undefined              | `'undefined'` | `math.typeof(undefined)`
   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`
   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`
   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`
   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`
   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`
   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`
   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`
   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`
   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`
   *
   * Syntax:
   *
   *    math.typeof(x)
   *
   * Examples:
   *
   *    math.typeof(3.5);                     // returns 'number'
   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'
   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'
   *    math.typeof('hello world');           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
		var _typeof = typed('_typeof', {
			'any': function (x) {
				// JavaScript types
				var t = types.type(x);

				// math.js types
				if (t === 'Object') {
					if (x.isBigNumber === true) return 'BigNumber';
					if (x.isComplex === true)   return 'Complex';
					if (x.isFraction === true)  return 'Fraction';
					if (x.isMatrix === true)    return 'Matrix';
					if (x.isUnit === true)      return 'Unit';
					if (x.isIndex === true)     return 'Index';
					if (x.isRange === true)     return 'Range';
					if (x.isChain === true)     return 'Chain';
					if (x.isHelp === true)      return 'Help';
				}

				return t;
			}
		});

		_typeof.toTex = undefined; // use default template

		return _typeof;
	}

	exports.name = 'typeof';
	exports.factory = factory;

},{"../../utils/types":606}],527:[function(require,module,exports){
	module.exports = [
		require('./type'),        // data types (Matrix, Complex, Unit, ...)
		require('./constants'),   // constants
		require('./expression'),  // expression parsing
		require('./function'),    // functions
		require('./json'),        // serialization utility (math.json.reviver)
		require('./error')        // errors
	];

},{"./constants":119,"./error":127,"./expression":310,"./function":425,"./json":528,"./type":543}],528:[function(require,module,exports){
	module.exports = [
		require('./reviver')
	];

},{"./reviver":529}],529:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		/**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
		return function reviver(key, value) {
			var constructor = type[value && value.mathjs];
			if (constructor && typeof constructor.fromJSON === 'function') {
				return constructor.fromJSON(value);
			}

			return value;
		};
	}

	exports.name = 'reviver';
	exports.path = 'json';
	exports.factory = factory;

},{}],530:[function(require,module,exports){
	var Decimal = require('decimal.js');

	function factory (type, config, load, typed, math) {
		var BigNumber = Decimal.clone({precision: config.precision});

		/**
   * Attach type information
   */
		BigNumber.prototype.type = 'BigNumber';
		BigNumber.prototype.isBigNumber = true;

		/**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */
		BigNumber.prototype.toJSON = function () {
			return {
				mathjs: 'BigNumber',
				value: this.toString()
			};
		};

		/**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */
		BigNumber.fromJSON = function (json) {
			return new BigNumber(json.value);
		};

		// listen for changed in the configuration, automatically apply changed precision
		math.on('config', function (curr, prev) {
			if (curr.precision !== prev.precision) {
				BigNumber.config({ precision: curr.precision });
			}
		});

		return BigNumber;
	}

	exports.name = 'BigNumber';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace
},{"decimal.js":8}],531:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2;                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3
   *
   *
   *    7.2e500;                                    // returns number Infinity
   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
		var bignumber = typed('bignumber', {
			'': function () {
				return new type.BigNumber(0);
			},

			'number': function (x) {
				// convert to string to prevent errors in case of >15 digits
				return new type.BigNumber(x + '');
			},

			'string': function (x) {
				return new type.BigNumber(x);
			},

			'BigNumber': function (x) {
				// we assume a BigNumber is immutable
				return x;
			},

			'Fraction': function (x) {
				return new type.BigNumber(x.n).div(x.d);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, bignumber);
			}
		});

		bignumber.toTex = {
			0: '0',
			1: '\\left(${args[0]}\\right)'
		};

		return bignumber;
	}

	exports.name = 'bignumber';
	exports.factory = factory;

},{"../../../utils/collection/deepMap":595}],532:[function(require,module,exports){
	module.exports = [
		// type
		require('./BigNumber'),

		// construction function
		require('./function/bignumber')
	];

},{"./BigNumber":530,"./function/bignumber":531}],533:[function(require,module,exports){
	'use strict';

	var deepMap = require('./../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0);     // returns false
   *    math.boolean(1);     // returns true
   *    math.boolean(-3);     // returns true
   *    math.boolean('true');     // returns true
   *    math.boolean('false');     // returns false
   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
		var bool = typed('bool', {
			'': function () {
				return false;
			},

			'boolean': function (x) {
				return x;
			},

			'number': function (x) {
				return !!x;
			},

			'BigNumber': function (x) {
				return !x.isZero();
			},

			'string': function (x) {
				// try case insensitive
				var lcase = x.toLowerCase();
				if (lcase === 'true') {
					return true;
				}
				else if (lcase === 'false') {
					return false;
				}

				// test whether value is a valid number
				var num = Number(x);
				if (x != '' && !isNaN(num)) {
					return !!num;
				}

				throw new Error('Cannot convert "' + x + '" to a boolean');
			},

			'Array | Matrix': function (x) {
				return deepMap(x, bool);
			}
		});

		return bool;
	}

	exports.name = 'boolean';
	exports.factory = factory;

},{"./../utils/collection/deepMap":595}],534:[function(require,module,exports){
	'use strict';

	var format = require('../../utils/string').format;
	var lazy = require('../../utils/object').lazy;

	function factory (type, config, load, typed, math) {
		/**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
		function Chain (value) {
			if (!(this instanceof Chain)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			if (value && value.isChain) {
				this.value = value.value;
			}
			else {
				this.value = value;
			}
		}

		/**
   * Attach type information
   */
		Chain.prototype.type = 'Chain';
		Chain.prototype.isChain = true;

		/**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */
		Chain.prototype.done = function () {
			return this.value;
		};

		/**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */
		Chain.prototype.valueOf = function () {
			return this.value;
		};

		/**
   * Get a string representation of the value in the chain
   * @returns {string}
   */
		Chain.prototype.toString = function () {
			return format(this.value);
		};

		/**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */
		function createProxy(name, fn) {
			if (typeof fn === 'function') {
				Chain.prototype[name] = chainify(fn);
			}
		}

		/**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */
		function createLazyProxy(name, resolver) {
			lazy(Chain.prototype, name, function outerResolver() {
				var fn = resolver();
				if (typeof fn === 'function') {
					return chainify(fn);
				}

				return undefined; // if not a function, ignore
			});
		}

		/**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */
		function chainify (fn) {
			return function () {
				var args = [this.value];  // `this` will be the context of a Chain instance
				for (var i = 0; i < arguments.length; i++) {
					args[i + 1] = arguments[i];
				}

				return new Chain(fn.apply(fn, args));
			};
		}

		/**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...});
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */
		Chain.createProxy = function (arg0, arg1) {
			if (typeof arg0 === 'string') {
				// createProxy(name, value)
				createProxy(arg0, arg1);
			}
			else {
				// createProxy(values)
				for (var prop in arg0) {
					if (arg0.hasOwnProperty(prop)) {
						createProxy(prop, arg0[prop]);
					}
				}
			}
		};

		// create proxy for everything that is in math.js
		Chain.createProxy(math);

		// register on the import event, automatically add a proxy for every imported function.
		math.on('import', function (name, resolver, path) {
			if (path === undefined) {
				// an imported function (not a data type or something special)
				createLazyProxy(name, resolver);
			}
		});

		return Chain;
	}

	exports.name = 'Chain';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true;  // require providing the math namespace as 5th argument
	exports.lazy = false; // we need to register a listener on the import events, so no lazy loading

},{"../../utils/object":604,"../../utils/string":605}],535:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		/**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done();     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done();     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.type.Chain} The created chain
   */
		return typed('chain', {
			'': function() {
				return new type.Chain();
			},

			'any': function(value) {
				return new type.Chain(value);
			}
		});
	}

	exports.name = 'chain';
	exports.factory = factory;

},{}],536:[function(require,module,exports){
	module.exports = [
		// type
		require('./Chain'),

		// construction function
		require('./function/chain')
	];

},{"./Chain":534,"./function/chain":535}],537:[function(require,module,exports){
	var Complex = require('complex.js');
	var format = require('../../utils/number').format;
	var isNumber = require('../../utils/number').isNumber;

	function factory (type, config, load, typed, math) {

		/**
   * Attach type information
   */
		Complex.prototype.type = 'Complex';
		Complex.prototype.isComplex = true;


		/**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */
		Complex.prototype.toJSON = function () {
			return {
				mathjs: 'Complex',
				re: this.re,
				im: this.im
			};
		};

		/*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */
		Complex.prototype.toPolar = function () {
			return {
				r: this.abs(),
				phi: this.arg()
			};
		};

		/**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */
		Complex.prototype.format = function (options) {
			var str = '';
			var im = this.im;
			var re = this.re;
			var strRe = format(this.re, options);
			var strIm = format(this.im, options);

			// round either re or im when smaller than the configured precision
			var precision = isNumber(options) ? options : options ? options.precision : null;
			if (precision !== null) {
				var epsilon = Math.pow(10, -precision);
				if (Math.abs(re / im) < epsilon) {
					re = 0;
				}
				if (Math.abs(im / re) < epsilon) {
					im = 0;
				}
			}

			if (im == 0) {
				// real value
				str = strRe;
			} else if (re == 0) {
				// purely complex value
				if (im == 1) {
					str = 'i';
				} else if (im == -1) {
					str = '-i';
				} else {
					str = strIm + 'i';
				}
			} else {
				// complex value
				if (im > 0) {
					if (im == 1) {
						str = strRe + ' + i';
					} else {
						str = strRe + ' + ' + strIm + 'i';
					}
				} else {
					if (im == -1) {
						str = strRe + ' - i';
					} else {
						str = strRe + ' - ' + strIm.substring(1) + 'i';
					}
				}
			}
			return str;
		};

		/**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */
		Complex.fromPolar = function (args) {
			switch (arguments.length) {
			case 1:
				var arg = arguments[0];
				if (typeof arg === 'object') {
					return Complex(arg);
				}
				throw new TypeError('Input has to be an object with r and phi keys.');

			case 2:
				var r = arguments[0],
					phi = arguments[1];
				if (isNumber(r)) {
					if (phi && phi.isUnit && phi.hasBase('ANGLE')) {
						// convert unit to a number in radians
						phi = phi.toNumber('rad');
					}

					if (isNumber(phi)) {
						return new Complex({r: r, phi: phi});
					}

					throw new TypeError('Phi is not a number nor an angle unit.');
				} else {
					throw new TypeError('Radius r is not a number.');
				}

			default:
				throw new SyntaxError('Wrong number of arguments in function fromPolar');
			}
		};


		Complex.prototype.valueOf = Complex.prototype.toString;

		/**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */
		Complex.fromJSON = function (json) {
			return new Complex(json);
		};

		// apply the current epsilon
		Complex.EPSILON = config.epsilon;

		// listen for changed in the configuration, automatically apply changed epsilon
		math.on('config', function (curr, prev) {
			if (curr.epsilon !== prev.epsilon) {
				Complex.EPSILON = curr.epsilon;
			}
		});

		return Complex;
	}

	exports.name = 'Complex';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

},{"../../utils/number":603,"complex.js":7}],538:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		var latex = require('../../../utils/latex');

		/**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i
   *    a.re = 5;                        // a = Complex 5 - 4i
   *    var i = a.im;                    // Number -4;
   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i
   *    var c = math.complex();          // Complex 0 + 0i
   *    var d = math.add(a, b);          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
		var complex = typed('complex', {
			'': function () {
				return type.Complex.ZERO;
			},

			'number': function (x) {
				return new type.Complex(x, 0);
			},

			'number, number': function (re, im) {
				return new type.Complex(re, im);
			},

			// TODO: this signature should be redundant
			'BigNumber, BigNumber': function (re, im) {
				return new type.Complex(re.toNumber(), im.toNumber());
			},

			'Complex': function (x) {
				return x.clone();
			},

			'string': function (x) {
				return type.Complex(x); // for example '2 + 3i'
			},

			'Object': function (x) {
				if('re' in x && 'im' in x) {
					return new type.Complex(x.re, x.im);
				}

				if ('r' in x && 'phi' in x) {
					return new type.Complex(x);
				}

				throw new Error('Expected object with either properties re and im, or properties r and phi.');
			},

			'Array | Matrix': function (x) {
				return deepMap(x, complex);
			}
		});

		complex.toTex = {
			0: '0',
			1: '\\left(${args[0]}\\right)',
			2: '\\left(\\left(${args[0]}\\right)+'
      + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
		};

		return complex;
	}

	exports.name = 'complex';
	exports.factory = factory;

},{"../../../utils/collection/deepMap":595,"../../../utils/latex":602}],539:[function(require,module,exports){
	module.exports = [
		// type
		require('./Complex'),

		// construction function
		require('./function/complex')
	];

},{"./Complex":537,"./function/complex":538}],540:[function(require,module,exports){
	var Fraction = require('fraction.js');

	/**
 * Attach type information
 */
	Fraction.prototype.type = 'Fraction';
	Fraction.prototype.isFraction = true;

	/**
 * Get a JSON representation of a Fraction containing type information
 * @returns {Object} Returns a JSON object structured as:
 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
 */
	Fraction.prototype.toJSON = function () {
		return {
			mathjs: 'Fraction',
			n: this.s * this.n,
			d: this.d
		};
	};

	/**
 * Instantiate a Fraction from a JSON object
 * @param {Object} json  a JSON object structured as:
 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
 * @return {BigNumber}
 */
	Fraction.fromJSON = function (json) {
		return new Fraction(json);
	};


	function factory (type, config, load, typed) {
		return Fraction;
	}

	exports.name = 'Fraction';
	exports.path = 'type';
	exports.factory = factory;

},{"fraction.js":63}],541:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3);
   *     math.fraction('2/3');
   *     math.fraction({n: 2, d: 3});
   *     math.fraction([0.2, 0.25, 1.25]);
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
		var fraction = typed('fraction', {
			'number': function (x) {
				if (!isFinite(x) || isNaN(x)) {
					throw new Error(x + ' cannot be represented as a fraction');
				}

				return new type.Fraction(x);
			},

			'string': function (x) {
				return new type.Fraction(x);
			},

			'number, number': function (numerator, denominator) {
				return new type.Fraction(numerator, denominator);
			},

			'BigNumber': function (x) {
				return new type.Fraction(x.toString());
			},

			'Fraction': function (x) {
				return x; // fractions are immutable
			},

			'Object': function (x) {
				return new type.Fraction(x);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, fraction);
			}
		});

		return fraction;
	}

	exports.name = 'fraction';
	exports.factory = factory;

},{"../../../utils/collection/deepMap":595}],542:[function(require,module,exports){
	module.exports = [
		// type
		require('./Fraction'),

		// construction function
		require('./function/fraction')
	];

},{"./Fraction":540,"./function/fraction":541}],543:[function(require,module,exports){
	module.exports = [
		require('./bignumber'),
		require('./boolean'),
		require('./chain'),
		require('./complex'),
		require('./fraction'),
		require('./matrix'),
		require('./number'),
		require('./resultset'),
		require('./string'),
		require('./unit')
	];

},{"./bignumber":532,"./boolean":533,"./chain":536,"./complex":539,"./fraction":542,"./matrix":555,"./number":570,"./resultset":572,"./string":573,"./unit":578}],544:[function(require,module,exports){
	'use strict';

	var util = require('../../utils/index');
	var DimensionError = require('../../error/DimensionError');

	var string = util.string;
	var array = util.array;
	var object = util.object;
	var number = util.number;

	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;

	var validateIndex = array.validateIndex;

	function factory (type, config, load, typed) {
		var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)

		/**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */
		function DenseMatrix(data, datatype) {
			if (!(this instanceof DenseMatrix))
				throw new SyntaxError('Constructor must be called with the new operator');
			if (datatype && !isString(datatype))
				throw new Error('Invalid datatype: ' + datatype);

			if (data && data.isMatrix === true) {
				// check data is a DenseMatrix
				if (data.type === 'DenseMatrix') {
					// clone data & size
					this._data = object.clone(data._data);
					this._size = object.clone(data._size);
					this._datatype = datatype || data._datatype;
				}
				else {
					// build data from existing matrix
					this._data = data.toArray();
					this._size = data.size();
					this._datatype = datatype || data._datatype;
				}
			}
			else if (data && isArray(data.data) && isArray(data.size)) {
				// initialize fields from JSON representation
				this._data = data.data;
				this._size = data.size;
				this._datatype = datatype || data.datatype;
			}
			else if (isArray(data)) {
				// replace nested Matrices with Arrays
				this._data = preprocess(data);
				// get the dimensions of the array
				this._size = array.size(this._data);
				// verify the dimensions of the array, TODO: compute size while processing array
				array.validate(this._data, this._size);
				// data type unknown
				this._datatype = datatype;
			}
			else if (data) {
				// unsupported type
				throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
			}
			else {
				// nothing provided
				this._data = [];
				this._size = [0];
				this._datatype = datatype;
			}
		}
  
		DenseMatrix.prototype = new Matrix();

		/**
   * Attach type information
   */
		DenseMatrix.prototype.type = 'DenseMatrix';
		DenseMatrix.prototype.isDenseMatrix = true;

		/**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */
		DenseMatrix.prototype.storage = function () {
			return 'dense';
		};

		/**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */
		DenseMatrix.prototype.datatype = function () {
			return this._datatype;
		};

		/**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */
		DenseMatrix.prototype.create = function (data, datatype) {
			return new DenseMatrix(data, datatype);
		};

		/**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | DenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
		DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
			switch (arguments.length) {
			case 1:
				return _get(this, index);

				// intentional fall through
			case 2:
			case 3:
				return _set(this, index, replacement, defaultValue);

			default:
				throw new SyntaxError('Wrong number of arguments');
			}
		};
  
		/**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */
		DenseMatrix.prototype.get = function (index) {
			if (!isArray(index))
				throw new TypeError('Array expected');
			if (index.length != this._size.length)
				throw new DimensionError(index.length, this._size.length);

			// check index
			for (var x = 0; x < index.length; x++)
				validateIndex(index[x], this._size[x]);

			var data = this._data;
			for (var i = 0, ii = index.length; i < ii; i++) {
				var index_i = index[i];
				validateIndex(index_i, data.length);
				data = data[index_i];
			}

			return data;
		};
  
		/**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */
		DenseMatrix.prototype.set = function (index, value, defaultValue) {
			if (!isArray(index))
				throw new TypeError('Array expected');
			if (index.length < this._size.length)
				throw new DimensionError(index.length, this._size.length, '<');

			var i, ii, index_i;

			// enlarge matrix when needed
			var size = index.map(function (i) {
				return i + 1;
			});
			_fit(this, size, defaultValue);

			// traverse over the dimensions
			var data = this._data;
			for (i = 0, ii = index.length - 1; i < ii; i++) {
				index_i = index[i];
				validateIndex(index_i, data.length);
				data = data[index_i];
			}

			// set new value
			index_i = index[index.length - 1];
			validateIndex(index_i, data.length);
			data[index_i] = value;

			return this;
		};
  
		/**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */
		function _get (matrix, index) {
			if (!index || index.isIndex !== true) {
				throw new TypeError('Invalid index');
			}

			var isScalar = index.isScalar();
			if (isScalar) {
				// return a scalar
				return matrix.get(index.min());
			}
			else {
				// validate dimensions
				var size = index.size();
				if (size.length != matrix._size.length) {
					throw new DimensionError(size.length, matrix._size.length);
				}

				// validate if any of the ranges in the index is out of range
				var min = index.min();
				var max = index.max();
				for (var i = 0, ii = matrix._size.length; i < ii; i++) {
					validateIndex(min[i], matrix._size[i]);
					validateIndex(max[i], matrix._size[i]);
				}

				// retrieve submatrix
				// TODO: more efficient when creating an empty matrix and setting _data and _size manually
				return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
			}
		}
  
		/**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */
		function _getSubmatrix (data, index, dims, dim) {
			var last = (dim == dims - 1);
			var range = index.dimension(dim);

			if (last) {
				return range.map(function (i) {
					return data[i];
				}).valueOf();
			}
			else {
				return range.map(function (i) {
					var child = data[i];
					return _getSubmatrix(child, index, dims, dim + 1);
				}).valueOf();
			}
		}
  
		/**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */
		function _set (matrix, index, submatrix, defaultValue) {
			if (!index || index.isIndex !== true) {
				throw new TypeError('Invalid index');
			}

			// get index size and check whether the index contains a single value
			var iSize = index.size(),
				isScalar = index.isScalar();

			// calculate the size of the submatrix, and convert it into an Array if needed
			var sSize;
			if (submatrix && submatrix.isMatrix === true) {
				sSize = submatrix.size();
				submatrix = submatrix.valueOf();
			}
			else {
				sSize = array.size(submatrix);
			}

			if (isScalar) {
				// set a scalar

				// check whether submatrix is a scalar
				if (sSize.length !== 0) {
					throw new TypeError('Scalar expected');
				}

				matrix.set(index.min(), submatrix, defaultValue);
			}
			else {
				// set a submatrix

				// validate dimensions
				if (iSize.length < matrix._size.length) {
					throw new DimensionError(iSize.length, matrix._size.length, '<');
				}

				if (sSize.length < iSize.length) {
					// calculate number of missing outer dimensions
					var i = 0;
					var outer = 0;
					while (iSize[i] === 1 && sSize[i] === 1) {
						i++;
					}
					while (iSize[i] === 1) {
						outer++;
						i++;
					}

					// unsqueeze both outer and inner dimensions
					submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
				}

				// check whether the size of the submatrix matches the index size
				if (!object.deepEqual(iSize, sSize)) {
					throw new DimensionError(iSize, sSize, '>');
				}

				// enlarge matrix when needed
				var size = index.max().map(function (i) {
					return i + 1;
				});
				_fit(matrix, size, defaultValue);

				// insert the sub matrix
				var dims = iSize.length,
					dim = 0;
				_setSubmatrix (matrix._data, index, submatrix, dims, dim);
			}

			return matrix;
		}
  
		/**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */
		function _setSubmatrix (data, index, submatrix, dims, dim) {
			var last = (dim == dims - 1),
				range = index.dimension(dim);

			if (last) {
				range.forEach(function (dataIndex, subIndex) {
					validateIndex(dataIndex);
					data[dataIndex] = submatrix[subIndex[0]];
				});
			}
			else {
				range.forEach(function (dataIndex, subIndex) {
					validateIndex(dataIndex);
					_setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
				});
			}
		}
  
		/**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
		DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
			// validate arguments
			if (!isArray(size))
				throw new TypeError('Array expected');

			// matrix to resize
			var m = copy ? this.clone() : this;
			// resize matrix
			return _resize(m, size, defaultValue);
		};
  
		var _resize = function (matrix, size, defaultValue) {
			// check size
			if (size.length === 0) {
				// first value in matrix
				var v = matrix._data;
				// go deep
				while (isArray(v)) {
					v = v[0];
				}
				return v;
			}
			// resize matrix
			matrix._size = size.slice(0); // copy the array
			matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
			// return matrix
			return matrix;
		};
  
		/**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */
		function _fit(matrix, size, defaultValue) {
			var newSize = matrix._size.slice(0), // copy the array
				changed = false;

			// add dimensions when needed
			while (newSize.length < size.length) {
				newSize.push(0);
				changed = true;
			}

			// enlarge size when needed
			for (var i = 0, ii = size.length; i < ii; i++) {
				if (size[i] > newSize[i]) {
					newSize[i] = size[i];
					changed = true;
				}
			}

			if (changed) {
				// resize only when size is changed
				_resize(matrix, newSize, defaultValue);
			}
		}
  
		/**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */
		DenseMatrix.prototype.clone = function () {
			var m = new DenseMatrix({
				data: object.clone(this._data),
				size: object.clone(this._size),
				datatype: this._datatype
			});
			return m;
		};
  
		/**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */
		DenseMatrix.prototype.size = function() {
			return this._size.slice(0); // return a clone of _size
		};
  
		/**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */
		DenseMatrix.prototype.map = function (callback) {
			// matrix instance
			var me = this;
			var recurse = function (value, index) {
				if (isArray(value)) {
					return value.map(function (child, i) {
						return recurse(child, index.concat(i));
					});
				}
				else {
					return callback(value, index, me);
				}
			};
			// return dense format
			return new DenseMatrix({
				data: recurse(this._data, []),
				size: object.clone(this._size),
				datatype: this._datatype
			});
		};
  
		/**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */
		DenseMatrix.prototype.forEach = function (callback) {
			// matrix instance
			var me = this;
			var recurse = function (value, index) {
				if (isArray(value)) {
					value.forEach(function (child, i) {
						recurse(child, index.concat(i));
					});
				}
				else {
					callback(value, index, me);
				}
			};
			recurse(this._data, []);
		};
  
		/**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */
		DenseMatrix.prototype.toArray = function () {
			return object.clone(this._data);
		};
  
		/**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */
		DenseMatrix.prototype.valueOf = function () {
			return this._data;
		};
  
		/**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
		DenseMatrix.prototype.format = function (options) {
			return string.format(this._data, options);
		};
  
		/**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */
		DenseMatrix.prototype.toString = function () {
			return string.format(this._data);
		};
  
		/**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */
		DenseMatrix.prototype.toJSON = function () {
			return {
				mathjs: 'DenseMatrix',
				data: this._data,
				size: this._size,
				datatype: this._datatype
			};
		};
  
		/**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Array}                      The array vector with the diagonal values.
   */
		DenseMatrix.prototype.diagonal = function(k) {
			// validate k if any
			if (k) {
				// convert BigNumber to a number
				if (k.isBigNumber === true)
					k = k.toNumber();
				// is must be an integer
				if (!isNumber(k) || !isInteger(k)) {
					throw new TypeError ('The parameter k must be an integer number');
				}
			}
			else {
				// default value
				k = 0;
			}

			var kSuper = k > 0 ? k : 0;
			var kSub = k < 0 ? -k : 0;

			// rows & columns
			var rows = this._size[0];
			var columns = this._size[1];

			// number diagonal values
			var n = Math.min(rows - kSub, columns -  kSuper);
    
			// x is a matrix get diagonal from matrix
			var data = [];
    
			// loop rows
			for (var i = 0; i < n; i++) {
				data[i] = this._data[i + kSub][i + kSuper];
			}

			// create DenseMatrix
			return new DenseMatrix({
				data: data,
				size: [n],
				datatype: this._datatype
			});
		};
  
		/**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                   The matrix size.
   * @param {number | Array} value          The values for the diagonal.
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]        The default value for non-diagonal
   *
   * @returns {DenseMatrix}
   */
		DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
			if (!isArray(size))
				throw new TypeError('Array expected, size parameter');
			if (size.length !== 2)
				throw new Error('Only two dimensions matrix are supported');

			// map size & validate
			size = size.map(function (s) {
				// check it is a big number
				if (s && s.isBigNumber === true) {
					// convert it
					s = s.toNumber();
				}
				// validate arguments
				if (!isNumber(s) || !isInteger(s) || s < 1) {
					throw new Error('Size values must be positive integers');
				} 
				return s;
			});

			// validate k if any
			if (k) {
				// convert BigNumber to a number
				if (k && k.isBigNumber === true)
					k = k.toNumber();
				// is must be an integer
				if (!isNumber(k) || !isInteger(k)) {
					throw new TypeError ('The parameter k must be an integer number');
				}
			}
			else {
				// default value
				k = 0;
			}
    
			if (defaultValue && isString(datatype)) {
				// convert defaultValue to the same datatype
				defaultValue = typed.convert(defaultValue, datatype);
			}

			var kSuper = k > 0 ? k : 0;
			var kSub = k < 0 ? -k : 0;
    
			// rows and columns
			var rows = size[0];
			var columns = size[1];

			// number of non-zero items
			var n = Math.min(rows - kSub, columns -  kSuper);

			// value extraction function
			var _value;

			// check value
			if (isArray(value)) {
				// validate array
				if (value.length !== n) {
					// number of values in array must be n
					throw new Error('Invalid value array length');
				}
				// define function
				_value = function (i) {
					// return value @ i
					return value[i];
				};      
			}
			else if (value && value.isMatrix === true) {
				// matrix size
				var ms = value.size();
				// validate matrix
				if (ms.length !== 1 || ms[0] !== n) {
					// number of values in array must be n
					throw new Error('Invalid matrix length');
				}
				// define function
				_value = function (i) {
					// return value @ i
					return value.get([i]);
				};
			}
			else {
				// define function
				_value = function () {
					// return value
					return value;
				};
			}
    
			// discover default value if needed
			if (!defaultValue) {
				// check first value in array
				defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;
			}

			// empty array
			var data = [];

			// check we need to resize array
			if (size.length > 0) {
				// resize array
				data = array.resize(data, size, defaultValue);
				// fill diagonal
				for (var d = 0; d < n; d++) {
					data[d + kSub][d + kSuper] = _value(d);
				}
			}
    
			// create DenseMatrix
			return new DenseMatrix({
				data: data,
				size: [rows, columns]
			});
		};

		/**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */
		DenseMatrix.fromJSON = function (json) {
			return new DenseMatrix(json);
		};
  
		/**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */
		DenseMatrix.prototype.swapRows = function (i, j) {
			// check index
			if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
				throw new Error('Row index must be positive integers');
			}
			// check dimensions
			if (this._size.length !== 2) {
				throw new Error('Only two dimensional matrix is supported');
			}
			// validate index
			validateIndex(i, this._size[0]);
			validateIndex(j, this._size[0]);

			// swap rows
			DenseMatrix._swapRows(i, j, this._data);
			// return current instance
			return this;
		};

		/**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   */
		DenseMatrix._swapRows = function (i, j, data) {
			// swap values i <-> j
			var vi = data[i];
			data[i] = data[j];
			data[j] = vi;
		};
   
		/**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */
		function preprocess(data) {
			for (var i = 0, ii = data.length; i < ii; i++) {
				var elem = data[i];
				if (isArray(elem)) {
					data[i] = preprocess(elem);
				}
				else if (elem && elem.isMatrix === true) {
					data[i] = preprocess(elem.valueOf());
				}
			}

			return data;
		}

		// register this type in the base class Matrix
		type.Matrix._storage.dense = DenseMatrix;
		type.Matrix._storage['default'] = DenseMatrix;

		// exports
		return DenseMatrix;
	}

	exports.name = 'DenseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage
},{"../../error/DimensionError":125,"../../utils/index":601,"./Matrix":547}],545:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
  
		var smaller = load(require('../../function/relational/smaller'));
		var larger = load(require('../../function/relational/larger'));
  
		var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  
		/**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */
		function FibonacciHeap() {
			if (!(this instanceof FibonacciHeap))
				throw new SyntaxError('Constructor must be called with the new operator');

			// initialize fields
			this._minimum = null;
			this._size = 0;
		}

		/**
   * Attach type information
   */
		FibonacciHeap.prototype.type = 'FibonacciHeap';
		FibonacciHeap.prototype.isFibonacciHeap = true;

		/**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */
		FibonacciHeap.prototype.insert = function (key, value) {
			// create node
			var node = {
				key: key,
				value: value,
				degree: 0
			};
			// check we have a node in the minimum
			if (this._minimum) {
				// minimum node
				var minimum = this._minimum;
				// update left & right of node
				node.left = minimum;
				node.right = minimum.right;
				minimum.right = node;
				node.right.left = node;
				// update minimum node in heap if needed
				if (smaller(key, minimum.key)) {
					// node has a smaller key, use it as minimum
					this._minimum = node;
				}
			}
			else {
				// set left & right
				node.left = node;
				node.right = node;
				// this is the first node
				this._minimum = node;
			}
			// increment number of nodes in heap
			this._size++;
			// return node
			return node;
		};

		/**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */
		FibonacciHeap.prototype.size = function () {
			return this._size;
		};

		/**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */
		FibonacciHeap.prototype.clear = function () {
			this._minimum = null;
			this._size = 0;
		};

		/**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */
		FibonacciHeap.prototype.isEmpty = function () {
			return !!this._minimum;
		};
  
		/**
   * Extracts the node with minimum key from heap. Amortized running 
   * time: O(log n).
   * @memberof FibonacciHeap
   */
		FibonacciHeap.prototype.extractMinimum = function () {
			// node to remove
			var node = this._minimum;
			// check we have a minimum
			if (node === null)
				return node;
			// current minimum
			var minimum = this._minimum;
			// get number of children
			var numberOfChildren = node.degree;
			// pointer to the first child
			var x = node.child;
			// for each child of node do...
			while (numberOfChildren > 0) {
				// store node in right side
				var tempRight = x.right;
				// remove x from child list
				x.left.right = x.right;
				x.right.left = x.left;
				// add x to root list of heap
				x.left = minimum;
				x.right = minimum.right;
				minimum.right = x;
				x.right.left = x;
				// set Parent[x] to null
				x.parent = null;
				x = tempRight;
				numberOfChildren--;
			}
			// remove node from root list of heap
			node.left.right = node.right;
			node.right.left = node.left;
			// update minimum
			if (node == node.right) {
				// empty
				minimum = null;
			}
			else {
				// update minimum
				minimum = node.right;
				// we need to update the pointer to the root with minimum key
				minimum = _findMinimumNode(minimum, this._size);
			}
			// decrement size of heap
			this._size--;
			// update minimum
			this._minimum = minimum;
			// return node
			return node;
		};
  
		/**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */
		FibonacciHeap.prototype.remove = function (node) {
			// decrease key value
			this._minimum = _decreaseKey(this._minimum, node, -1);
			// remove the smallest
			this.extractMinimum();
		};
  
		/**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated. 
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */
		var _decreaseKey = function (minimum, node, key) {
			// set node key
			node.key = key;
			// get parent node
			var parent = node.parent;
			if (parent && smaller(node.key, parent.key)) {
				// remove node from parent
				_cut(minimum, node, parent);
				// remove all nodes from parent to the root parent
				_cascadingCut(minimum, parent);
			}
			// update minimum node if needed
			if (smaller(node.key, minimum.key))
				minimum = node;
			// return minimum
			return minimum;
		};
  
		/**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */
		var _cut = function (minimum, node, parent) {
			// remove node from parent children and decrement Degree[parent]
			node.left.right = node.right;
			node.right.left = node.left;
			parent.degree--;
			// reset y.child if necessary
			if (parent.child == node)
				parent.child = node.right;
			// remove child if degree is 0
			if (parent.degree === 0)
				parent.child = null;
			// add node to root list of heap
			node.left = minimum;
			node.right = minimum.right;
			minimum.right = node;
			node.right.left = node;
			// set parent[node] to null
			node.parent = null;
			// set mark[node] to false
			node.mark = false;
		};
  
		/**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */
		var _cascadingCut= function (minimum, node) {
			// store parent node
			var parent = node.parent;
			// if there's a parent...
			if (!parent)
				return;
			// if node is unmarked, set it marked
			if (!node.mark) {
				node.mark = true;
			}
			else {
				// it's marked, cut it from parent
				_cut(minimum, node, parent);
				// cut its parent as well
				_cascadingCut(parent);
			}
		};
  
		/**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */
		var _linkNodes = function (node, parent) {
			// remove node from root list of heap
			node.left.right = node.right;
			node.right.left = node.left;
			// make node a Child of parent
			node.parent = parent;
			if (!parent.child) {
				parent.child = node;
				node.right = node;
				node.left = node;
			}
			else {
				node.left = parent.child;
				node.right = parent.child.right;
				parent.child.right = node;
				node.right.left = node;
			}
			// increase degree[parent]
			parent.degree++;
			// set mark[node] false
			node.mark = false;
		};
  
		var _findMinimumNode = function (minimum, size) {
			// to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
			var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
			// create list with initial capacity
			var array = new Array(arraySize);
			// find the number of root nodes.
			var numRoots = 0;
			var x = minimum;
			if (x) {
				numRoots++;
				x = x.right;
				while (x !== minimum) {
					numRoots++;
					x = x.right;
				}
			}
			// vars
			var y;
			// For each node in root list do...
			while (numRoots > 0) {
				// access this node's degree..
				var d = x.degree;
				// get next node
				var next = x.right;
				// check if there is a node already in array with the same degree
				while (true) {
					// get node with the same degree is any
					y = array[d];
					if (!y)
						break;
					// make one node with the same degree a child of the other, do this based on the key value.
					if (larger(x.key, y.key)) {
						var temp = y;
						y = x;
						x = temp;
					}
					// make y a child of x
					_linkNodes(y, x);
					// we have handled this degree, go to next one.
					array[d] = null;
					d++;
				}
				// save this node for later when we might encounter another of the same degree.
				array[d] = x;
				// move forward through list.
				x = next;
				numRoots--;
			}
			// Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
			minimum = null;
			// loop nodes in array
			for (var i = 0; i < arraySize; i++) {
				// get current node
				y = array[i];
				if (!y)
					continue;
				// check if we have a linked list
				if (minimum) {
					// First remove node from root list.
					y.left.right = y.right;
					y.right.left = y.left;
					// now add to root list, again.
					y.left = minimum;
					y.right = minimum.right;
					minimum.right = y;
					y.right.left = y;
					// check if this is a new min.
					if (smaller(y.key, minimum.key))
						minimum = y;
				}
				else
					minimum = y;
			}
			return minimum;
		};
  
		return FibonacciHeap;
	}

	exports.name = 'FibonacciHeap';
	exports.path = 'type';
	exports.factory = factory;

},{"../../function/relational/larger":470,"../../function/relational/smaller":472}],546:[function(require,module,exports){
	'use strict';

	var util = require('../../utils/index');

	var string = util.string;
	var object = util.object;

	var isArray = Array.isArray;
	var isString = string.isString;

	function factory (type, config, load) {

		var DenseMatrix = load(require('./DenseMatrix'));

		var smaller = load(require('../../function/relational/smaller'));

		function ImmutableDenseMatrix(data, datatype) {
			if (!(this instanceof ImmutableDenseMatrix))
				throw new SyntaxError('Constructor must be called with the new operator');
			if (datatype && !isString(datatype))
				throw new Error('Invalid datatype: ' + datatype);

			if ((data && data.isMatrix === true) || isArray(data)) {
				// use DenseMatrix implementation
				var matrix = new DenseMatrix(data, datatype);
				// internal structures
				this._data = matrix._data;
				this._size = matrix._size;
				this._datatype = matrix._datatype;
				this._min = null;
				this._max = null;
			}
			else if (data && isArray(data.data) && isArray(data.size)) {
				// initialize fields from JSON representation
				this._data = data.data;
				this._size = data.size;
				this._datatype = data.datatype;
				this._min = typeof data.min !== 'undefined' ? data.min : null;
				this._max = typeof data.max !== 'undefined' ? data.max : null;
			}
			else if (data) {
				// unsupported type
				throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
			}
			else {
				// nothing provided
				this._data = [];
				this._size = [0];
				this._datatype = datatype;
				this._min = null;
				this._max = null;
			}
		}

		ImmutableDenseMatrix.prototype = new DenseMatrix();

		/**
   * Attach type information
   */
		ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
		ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;

		/**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
		ImmutableDenseMatrix.prototype.subset = function (index) {
			switch (arguments.length) {
			case 1:
				// use base implementation
				var m = DenseMatrix.prototype.subset.call(this, index);
				// check result is a matrix
				if (m.isMatrix) {
					// return immutable matrix
					return new ImmutableDenseMatrix({
						data: m._data,
						size: m._size,
						datatype: m._datatype
					});
				}
				return m;
        
				// intentional fall through
			case 2:
			case 3:
				throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

			default:
				throw new SyntaxError('Wrong number of arguments');
			}
		};

		/**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */
		ImmutableDenseMatrix.prototype.set = function () {
			throw new Error('Cannot invoke set on an Immutable Matrix instance');
		};

		/**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
		ImmutableDenseMatrix.prototype.resize = function () {
			throw new Error('Cannot invoke resize on an Immutable Matrix instance');
		};

		/**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */
		ImmutableDenseMatrix.prototype.clone = function () {
			var m = new ImmutableDenseMatrix({
				data: object.clone(this._data),
				size: object.clone(this._size),
				datatype: this._datatype
			});
			return m;
		};

		/**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */
		ImmutableDenseMatrix.prototype.toJSON = function () {
			return {
				mathjs: 'ImmutableDenseMatrix',
				data: this._data,
				size: this._size,
				datatype: this._datatype
			};
		};

		/**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */
		ImmutableDenseMatrix.fromJSON = function (json) {
			return new ImmutableDenseMatrix(json);
		};

		/**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */
		ImmutableDenseMatrix.prototype.swapRows = function () {
			throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
		};

		/**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */
		ImmutableDenseMatrix.prototype.min = function () {
			// check min has been calculated before
			if (this._min === null) {
				// minimum
				var m = null;
				// compute min
				this.forEach(function (v) {
					if (m === null || smaller(v, m))
						m = v;
				});
				this._min = m !== null ? m : undefined;
			}
			return this._min;
		};

		/**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */
		ImmutableDenseMatrix.prototype.max = function () {
			// check max has been calculated before
			if (this._max === null) {
				// maximum
				var m = null;
				// compute max
				this.forEach(function (v) {
					if (m === null || smaller(m, v))
						m = v;
				});
				this._max = m !== null ? m : undefined;
			}
			return this._max;
		};

		// exports
		return ImmutableDenseMatrix;
	}

	exports.name = 'ImmutableDenseMatrix';
	exports.path = 'type';
	exports.factory = factory;

},{"../../function/relational/smaller":472,"../../utils/index":601,"./DenseMatrix":544}],547:[function(require,module,exports){
	'use strict';

	var util = require('../../utils/index');

	var string = util.string;

	var isString = string.isString;

	function factory (type, config, load, typed) {
		/**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *     var matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *     var matrix = math.matrix([[1, 2], [3, 4]]);
   *     matix.size();              // [2, 2]
   *     matrix.resize([3, 2], 5);
   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
		function Matrix() {
			if (!(this instanceof Matrix)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}
		}

		/**
   * Attach type information
   */
		Matrix.prototype.type = 'Matrix';
		Matrix.prototype.isMatrix = true;

		/**
   * Get the Matrix storage constructor for the given format.
   *
   * @param {string} format       The Matrix storage format.
   *
   * @return {Function}           The Matrix storage constructor.
   */
		Matrix.storage = function (format) {
			// check storage format is a string
			if (!isString(format)) {
				throw new TypeError('format must be a string value');
			}

			// get storage format constructor
			var constructor = Matrix._storage[format];
			if (!constructor) {
				throw new SyntaxError('Unsupported matrix storage format: ' + format);
			}

			// return storage constructor
			return constructor;
		};

		// a map with all constructors for all storage types
		Matrix._storage = {};

		/**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @return {string}           The storage format.
   */
		Matrix.prototype.storage = function () {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke storage on a Matrix interface');
		};
  
		/**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */
		Matrix.prototype.datatype = function () {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke datatype on a Matrix interface');
		};

		/**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */
		Matrix.prototype.create = function (data, datatype) {
			throw new Error('Cannot invoke create on a Matrix interface');
		};

		/**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
		Matrix.prototype.subset = function (index, replacement, defaultValue) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke subset on a Matrix interface');
		};

		/**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */
		Matrix.prototype.get = function (index) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke get on a Matrix interface');
		};

		/**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */
		Matrix.prototype.set = function (index, value, defaultValue) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke set on a Matrix interface');
		};

		/**
   * Resize the matrix to the given size. Returns a copy of the matrix when 
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
		Matrix.prototype.resize = function (size, defaultValue) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke resize on a Matrix interface');
		};

		/**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */
		Matrix.prototype.clone = function () {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke clone on a Matrix interface');
		};

		/**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */
		Matrix.prototype.size = function() {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke size on a Matrix interface');
		};

		/**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */
		Matrix.prototype.map = function (callback, skipZeros) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke map on a Matrix interface');
		};

		/**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */
		Matrix.prototype.forEach = function (callback) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke forEach on a Matrix interface');
		};

		/**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */
		Matrix.prototype.toArray = function () {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke toArray on a Matrix interface');
		};

		/**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */
		Matrix.prototype.valueOf = function () {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke valueOf on a Matrix interface');
		};

		/**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
		Matrix.prototype.format = function (options) {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke format on a Matrix interface');
		};

		/**
   * Get a string representation of the matrix
   * @returns {string} str
   */
		Matrix.prototype.toString = function () {
			// must be implemented by each of the Matrix implementations
			throw new Error('Cannot invoke toString on a Matrix interface');
		};
   
		// exports
		return Matrix;
	}

	exports.name = 'Matrix';
	exports.path = 'type';
	exports.factory = factory;

},{"../../utils/index":601}],548:[function(require,module,exports){
	'use strict';

	var clone = require('../../utils/object').clone;
	var isInteger = require('../../utils/number').isInteger;

	function factory (type) {
  
		/**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     var index = new Index(range1, range2, matrix1, array1, ...);
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
		function Index(ranges) {
			if (!(this instanceof Index)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			this._dimensions = [];
			this._isScalar = true;

			for (var i = 0, ii = arguments.length; i < ii; i++) {
				var arg = arguments[i];

				if (arg && (arg.isRange === true)) {
					this._dimensions.push(arg);
					this._isScalar = false;
				}
				else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
					// create matrix
					var m = _createImmutableMatrix(arg.valueOf());
					this._dimensions.push(m);
					// size
					var size = m.size();
					// scalar
					if (size.length !== 1 || size[0] !== 1) {
						this._isScalar = false;
					}
				}
				else if (typeof arg === 'number') {
					this._dimensions.push(_createImmutableMatrix([arg]));
				}
				else if (typeof arg === 'string') {
					// object property (arguments.count should be 1)
					this._dimensions.push(arg);
				}
				// TODO: implement support for wildcard '*'
				else {
					throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
				}
			}
		}

		/**
   * Attach type information
   */
		Index.prototype.type = 'Index';
		Index.prototype.isIndex = true;

		function _createImmutableMatrix(arg) {
			// loop array elements
			for (var i = 0, l = arg.length; i < l; i++) {
				if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
					throw new TypeError('Index parameters must be positive integer numbers');
				}
			}
			// create matrix
			return new type.ImmutableDenseMatrix(arg);
		}

		/**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */
		Index.prototype.clone = function () {
			var index = new Index();
			index._dimensions = clone(this._dimensions);
			index._isScalar = this._isScalar;
			return index;
		};

		/**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */
		Index.create = function (ranges) {
			var index = new Index();
			Index.apply(index, ranges);
			return index;
		};

		/**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */
		Index.prototype.size = function () {
			var size = [];

			for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
				var d = this._dimensions[i];
				size[i] = (typeof d === 'string') ? 1 : d.size()[0];
			}

			return size;
		};

		/**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */
		Index.prototype.max = function () {
			var values = [];

			for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
				var range = this._dimensions[i];
				values[i] = (typeof range === 'string') ? range : range.max();
			}

			return values;
		};

		/**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */
		Index.prototype.min = function () {
			var values = [];

			for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
				var range = this._dimensions[i];
				values[i] = (typeof range === 'string') ? range : range.min();
			}

			return values;
		};

		/**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */
		Index.prototype.forEach = function (callback) {
			for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
				callback(this._dimensions[i], i, this);
			}
		};

		/**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */
		Index.prototype.dimension = function (dim) {
			return this._dimensions[dim] || null;
		};

		/**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */
		Index.prototype.isObjectProperty = function () {
			return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
		};

		/**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */
		Index.prototype.getObjectProperty = function () {
			return this.isObjectProperty() ? this._dimensions[0] : null;
		};

		/**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */
		Index.prototype.isScalar = function () {
			return this._isScalar;
		};

		/**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */
		Index.prototype.toArray = function () {
			var array = [];
			for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
				var dimension = this._dimensions[i];
				array.push((typeof dimension === 'string') ? dimension : dimension.toArray());
			}
			return array;
		};

		/**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */
		Index.prototype.valueOf = Index.prototype.toArray;

		/**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */
		Index.prototype.toString = function () {
			var strings = [];

			for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
				var dimension = this._dimensions[i];
				if (typeof dimension === 'string') {
					strings.push(JSON.stringify(dimension));
				}
				else {
					strings.push(dimension.toString());
				}
			}

			return '[' + strings.join(', ') + ']';
		};

		/**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */
		Index.prototype.toJSON = function () {
			return {
				mathjs: 'Index',
				dimensions: this._dimensions
			};
		};

		/**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */
		Index.fromJSON = function (json) {
			return Index.create(json.dimensions);
		};

		return Index;
	}

	exports.name = 'Index';
	exports.path = 'type';
	exports.factory = factory;

},{"../../utils/number":603,"../../utils/object":604}],549:[function(require,module,exports){
	'use strict';

	var number = require('../../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *     var range = new Range(start, end);
   *     var range = new Range(start, end, step);
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x);
   *     });
   *     range.map(function (x) {
   *         return math.sin(x);
   *     });
   *     range.toArray();
   *
   * Example usage:
   *     var c = new Range(2, 6);         // 2:1:5
   *     c.toArray();                     // [2, 3, 4, 5]
   *     var d = new Range(2, -3, -1);    // 2:-1:-2
   *     d.toArray();                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
		function Range(start, end, step) {
			if (!(this instanceof Range)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			if (start != null) {
				if (start.isBigNumber === true)
					start = start.toNumber();
				else if (typeof start !== 'number')
					throw new TypeError('Parameter start must be a number');
			}
			if (end != null) {
				if (end.isBigNumber === true)
					end = end.toNumber();
				else if (typeof end !== 'number')
					throw new TypeError('Parameter end must be a number');
			}
			if (step != null) {
				if (step.isBigNumber === true)
					step = step.toNumber();
				else if (typeof step !== 'number')
					throw new TypeError('Parameter step must be a number');
			}

			this.start = (start != null) ? parseFloat(start) : 0;
			this.end   = (end != null)   ? parseFloat(end)   : 0;
			this.step  = (step != null)  ? parseFloat(step)  : 1;
		}

		/**
   * Attach type information
   */
		Range.prototype.type = 'Range';
		Range.prototype.isRange = true;

		/**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */
		Range.parse = function (str) {
			if (typeof str !== 'string') {
				return null;
			}

			var args = str.split(':');
			var nums = args.map(function (arg) {
				return parseFloat(arg);
			});

			var invalid = nums.some(function (num) {
				return isNaN(num);
			});
			if (invalid) {
				return null;
			}

			switch (nums.length) {
			case 2:
				return new Range(nums[0], nums[1]);
			case 3:
				return new Range(nums[0], nums[2], nums[1]);
			default:
				return null;
			}
		};

		/**
   * Create a clone of the range
   * @return {Range} clone
   */
		Range.prototype.clone = function () {
			return new Range(this.start, this.end, this.step);
		};

		/**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */
		Range.prototype.size = function () {
			var len = 0,
				start = this.start,
				step = this.step,
				end = this.end,
				diff = end - start;

			if (number.sign(step) == number.sign(diff)) {
				len = Math.ceil((diff) / step);
			}
			else if (diff == 0) {
				len = 0;
			}

			if (isNaN(len)) {
				len = 0;
			}
			return [len];
		};

		/**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */
		Range.prototype.min = function () {
			var size = this.size()[0];

			if (size > 0) {
				if (this.step > 0) {
					// positive step
					return this.start;
				}
				else {
					// negative step
					return this.start + (size - 1) * this.step;
				}
			}
			else {
				return undefined;
			}
		};

		/**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */
		Range.prototype.max = function () {
			var size = this.size()[0];

			if (size > 0) {
				if (this.step > 0) {
					// positive step
					return this.start + (size - 1) * this.step;
				}
				else {
					// negative step
					return this.start;
				}
			}
			else {
				return undefined;
			}
		};


		/**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */
		Range.prototype.forEach = function (callback) {
			var x = this.start;
			var step = this.step;
			var end = this.end;
			var i = 0;

			if (step > 0) {
				while (x < end) {
					callback(x, [i], this);
					x += step;
					i++;
				}
			}
			else if (step < 0) {
				while (x > end) {
					callback(x, [i], this);
					x += step;
					i++;
				}
			}
		};

		/**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */
		Range.prototype.map = function (callback) {
			var array = [];
			this.forEach(function (value, index, obj) {
				array[index[0]] = callback(value, index, obj);
			});
			return array;
		};

		/**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */
		Range.prototype.toArray = function () {
			var array = [];
			this.forEach(function (value, index) {
				array[index[0]] = value;
			});
			return array;
		};

		/**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */
		Range.prototype.valueOf = function () {
			// TODO: implement a caching mechanism for range.valueOf()
			return this.toArray();
		};

		/**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
		Range.prototype.format = function (options) {
			var str = number.format(this.start, options);

			if (this.step != 1) {
				str += ':' + number.format(this.step, options);
			}
			str += ':' + number.format(this.end, options);
			return str;
		};

		/**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */
		Range.prototype.toString = function () {
			return this.format();
		};

		/**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */
		Range.prototype.toJSON = function () {
			return {
				mathjs: 'Range',
				start: this.start,
				end: this.end,
				step: this.step
			};
		};

		/**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */
		Range.fromJSON = function (json) {
			return new Range(json.start, json.end, json.step);
		};

		return Range;
	}

	exports.name = 'Range';
	exports.path = 'type';
	exports.factory = factory;

},{"../../utils/number":603}],550:[function(require,module,exports){
	'use strict';

	function factory (type, config, load) {
  
		var add = load(require('../../function/arithmetic/add'));
		var equalScalar = load(require('../../function/relational/equalScalar'));
  
		/**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array 
   * of the vector elements and an ordered list of non-zero elements.
   */
		function Spa() {
			if (!(this instanceof Spa))
				throw new SyntaxError('Constructor must be called with the new operator');
    
			// allocate vector, TODO use typed arrays
			this._values = [];
			this._heap = new type.FibonacciHeap();
		}

		/**
   * Attach type information
   */
		Spa.prototype.type = 'Spa';
		Spa.prototype.isSpa = true;

		/**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */
		Spa.prototype.set = function (i, v) {
			// check we have a value @ i
			if (!this._values[i]) {
				// insert in heap
				var node = this._heap.insert(i, v);
				// set the value @ i
				this._values[i] = node;
			}
			else {
				// update the value @ i
				this._values[i].value = v;
			}
		};
  
		Spa.prototype.get = function (i) {
			var node = this._values[i];
			if (node)
				return node.value;
			return 0;
		};
  
		Spa.prototype.accumulate = function (i, v) {
			// node @ i
			var node = this._values[i];
			if (!node) {
				// insert in heap
				node = this._heap.insert(i, v);
				// initialize value
				this._values[i] = node;
			}
			else {
				// accumulate value
				node.value = add(node.value, v);
			}
		};
  
		Spa.prototype.forEach = function (from, to, callback) {
			// references
			var heap = this._heap;
			var values = this._values;
			// nodes
			var nodes = [];
			// node with minimum key, save it
			var node = heap.extractMinimum();
			if (node)
				nodes.push(node);
			// extract nodes from heap (ordered)
			while (node && node.key <= to) {
				// check it is in range
				if (node.key >= from) {
					// check value is not zero
					if (!equalScalar(node.value, 0)) {
						// invoke callback
						callback(node.key, node.value, this);
					}
				}
				// extract next node, save it
				node = heap.extractMinimum();
				if (node)
					nodes.push(node);
			}
			// reinsert all nodes in heap
			for (var i = 0; i < nodes.length; i++) {
				// current node
				var n = nodes[i];
				// insert node in heap
				node = heap.insert(n.key, n.value);
				// update values
				values[node.key] = node;
			}
		};
  
		Spa.prototype.swap = function (i, j) {
			// node @ i and j
			var nodei = this._values[i];
			var nodej = this._values[j];
			// check we need to insert indeces
			if (!nodei && nodej) {
				// insert in heap
				nodei = this._heap.insert(i, nodej.value);
				// remove from heap
				this._heap.remove(nodej);
				// set values
				this._values[i] = nodei;
				this._values[j] = undefined;
			}
			else if (nodei && !nodej) {
				// insert in heap
				nodej = this._heap.insert(j, nodei.value);
				// remove from heap
				this._heap.remove(nodei);
				// set values
				this._values[j] = nodej;
				this._values[i] = undefined;
			}
			else if (nodei && nodej) {
				// swap values
				var v = nodei.value;
				nodei.value = nodej.value;
				nodej.value = v;
			}
		};
  
		return Spa;
	}

	exports.name = 'Spa';
	exports.path = 'type';
	exports.factory = factory;

},{"../../function/arithmetic/add":371,"../../function/relational/equalScalar":468}],551:[function(require,module,exports){
	'use strict';

	var util = require('../../utils/index');
	var DimensionError = require('../../error/DimensionError');

	var array = util.array;
	var object = util.object;
	var string = util.string;
	var number = util.number;

	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;

	var validateIndex = array.validateIndex;

	function factory (type, config, load, typed) {
		var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)
		var equalScalar = load(require('../../function/relational/equalScalar'));

		/**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */
		function SparseMatrix(data, datatype) {
			if (!(this instanceof SparseMatrix))
				throw new SyntaxError('Constructor must be called with the new operator');
			if (datatype && !isString(datatype))
				throw new Error('Invalid datatype: ' + datatype);
    
			if (data && data.isMatrix === true) {
				// create from matrix
				_createFromMatrix(this, data, datatype);
			}
			else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
				// initialize fields
				this._values = data.values;
				this._index = data.index;
				this._ptr = data.ptr;
				this._size = data.size;
				this._datatype = datatype || data.datatype;
			}
			else if (isArray(data)) {
				// create from array
				_createFromArray(this, data, datatype);
			}
			else if (data) {
				// unsupported type
				throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
			}
			else {
				// nothing provided
				this._values = [];
				this._index = [];
				this._ptr = [0];
				this._size = [0, 0];
				this._datatype = datatype;
			}
		}
  
		var _createFromMatrix = function (matrix, source, datatype) {
			// check matrix type
			if (source.type === 'SparseMatrix') {
				// clone arrays
				matrix._values = source._values ? object.clone(source._values) : undefined;
				matrix._index = object.clone(source._index);
				matrix._ptr = object.clone(source._ptr);
				matrix._size = object.clone(source._size);
				matrix._datatype = datatype || source._datatype;
			}
			else {
				// build from matrix data
				_createFromArray(matrix, source.valueOf(), datatype || source._datatype);
			}
		};
  
		var _createFromArray = function (matrix, data, datatype) {
			// initialize fields
			matrix._values = [];
			matrix._index = [];
			matrix._ptr = [];
			matrix._datatype = datatype;
			// discover rows & columns, do not use math.size() to avoid looping array twice
			var rows = data.length;
			var columns = 0;
    
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
    
			if (isString(datatype)) {
				// find signature that matches (datatype, datatype)
				eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
				// convert 0 to the same datatype
				zero = typed.convert(0, datatype);
			}

			// check we have rows (empty array)
			if (rows > 0) {
				// column index
				var j = 0;
				do {
					// store pointer to values index
					matrix._ptr.push(matrix._index.length);
					// loop rows
					for (var i = 0; i < rows; i++) {
						// current row
						var row = data[i];
						// check row is an array
						if (isArray(row)) {
							// update columns if needed (only on first column)
							if (j === 0 && columns < row.length)
								columns = row.length;
							// check row has column
							if (j < row.length) {
								// value
								var v = row[j];
								// check value != 0
								if (!eq(v, zero)) {
									// store value
									matrix._values.push(v);
									// index
									matrix._index.push(i);
								}
							}
						}
						else {
							// update columns if needed (only on first column)
							if (j === 0 && columns < 1)
								columns = 1;
							// check value != 0 (row is a scalar)
							if (!eq(row, zero)) {
								// store value
								matrix._values.push(row);
								// index
								matrix._index.push(i);
							}
						}
					}
					// increment index
					j++;      
				}
				while (j < columns);
			}
			// store number of values in ptr
			matrix._ptr.push(matrix._index.length);
			// size
			matrix._size = [rows, columns];
		};
  
		SparseMatrix.prototype = new Matrix();

		/**
   * Attach type information
   */
		SparseMatrix.prototype.type = 'SparseMatrix';
		SparseMatrix.prototype.isSparseMatrix = true;

		/**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */
		SparseMatrix.prototype.storage = function () {
			return 'sparse';
		};

		/**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */
		SparseMatrix.prototype.datatype = function () {
			return this._datatype;
		};

		/**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */
		SparseMatrix.prototype.create = function (data, datatype) {
			return new SparseMatrix(data, datatype);
		};

		/**
   * Get the matrix density.
   *
   * Usage:
   *     var density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */
		SparseMatrix.prototype.density = function () {
			// rows & columns
			var rows = this._size[0];
			var columns = this._size[1];
			// calculate density
			return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;
		};
  
		/**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Maytrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
		SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix
			if (!this._values)
				throw new Error('Cannot invoke subset on a Pattern only matrix');

			// check arguments
			switch (arguments.length) {
			case 1:
				return _getsubset(this, index);

				// intentional fall through
			case 2:
			case 3:
				return _setsubset(this, index, replacement, defaultValue);

			default:
				throw new SyntaxError('Wrong number of arguments');
			}
		};
  
		var _getsubset = function (matrix, idx) {
			// check idx
			if (!idx || idx.isIndex !== true) {
				throw new TypeError('Invalid index');
			}

			var isScalar = idx.isScalar();
			if (isScalar) {
				// return a scalar
				return matrix.get(idx.min());
			}
			// validate dimensions
			var size = idx.size();
			if (size.length != matrix._size.length) {
				throw new DimensionError(size.length, matrix._size.length);
			}

			// vars
			var i, ii, k, kk;
    
			// validate if any of the ranges in the index is out of range
			var min = idx.min();
			var max = idx.max();
			for (i = 0, ii = matrix._size.length; i < ii; i++) {
				validateIndex(min[i], matrix._size[i]);
				validateIndex(max[i], matrix._size[i]);
			}
    
			// matrix arrays
			var mvalues = matrix._values;
			var mindex = matrix._index;
			var mptr = matrix._ptr;
        
			// rows & columns dimensions for result matrix
			var rows = idx.dimension(0);
			var columns = idx.dimension(1);
    
			// workspace & permutation vector
			var w = [];
			var pv = [];
    
			// loop rows in resulting matrix
			rows.forEach(function (i, r) {
				// update permutation vector
				pv[i] = r[0];  
				// mark i in workspace
				w[i] = true;
			});

			// result matrix arrays
			var values = mvalues ? [] : undefined;
			var index = [];
			var ptr = [];
        
			// loop columns in result matrix
			columns.forEach(function (j) {
				// update ptr
				ptr.push(index.length);
				// loop values in column j
				for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
					// row
					i = mindex[k];
					// check row is in result matrix
					if (w[i] === true) {
						// push index
						index.push(pv[i]);
						// check we need to process values
						if (values)
							values.push(mvalues[k]);
					}
				}
			});
			// update ptr
			ptr.push(index.length);
    
			// return matrix
			return new SparseMatrix({
				values: values,
				index: index,
				ptr: ptr,
				size: size,
				datatype: matrix._datatype
			});
		};
  
		var _setsubset = function (matrix, index, submatrix, defaultValue) {
			// check index
			if (!index || index.isIndex !== true) {
				throw new TypeError('Invalid index');
			}
    
			// get index size and check whether the index contains a single value
			var iSize = index.size(),
				isScalar = index.isScalar();
    
			// calculate the size of the submatrix, and convert it into an Array if needed
			var sSize;
			if (submatrix && submatrix.isMatrix === true) {
				// submatrix size
				sSize = submatrix.size();
				// use array representation
				submatrix = submatrix.toArray();
			}
			else {
				// get submatrix size (array, scalar)
				sSize = array.size(submatrix);
			}
    
			// check index is a scalar
			if (isScalar) {
				// verify submatrix is a scalar
				if (sSize.length !== 0) {
					throw new TypeError('Scalar expected');
				}
				// set value
				matrix.set(index.min(), submatrix, defaultValue);
			}
			else {
				// validate dimensions, index size must be one or two dimensions
				if (iSize.length !== 1 && iSize.length !== 2) {
					throw new DimensionError(iSize.length, matrix._size.length, '<');
				}
      
				// check submatrix and index have the same dimensions
				if (sSize.length < iSize.length) {
					// calculate number of missing outer dimensions
					var i = 0;
					var outer = 0;
					while (iSize[i] === 1 && sSize[i] === 1) {
						i++;
					}
					while (iSize[i] === 1) {
						outer++;
						i++;
					}
					// unsqueeze both outer and inner dimensions
					submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
				}
      
				// check whether the size of the submatrix matches the index size
				if (!object.deepEqual(iSize, sSize)) {
					throw new DimensionError(iSize, sSize, '>');
				}
      
				// offsets
				var x0 = index.min()[0];
				var y0 = index.min()[1];      
      
				// submatrix rows and columns
				var m = sSize[0];
				var n = sSize[1];

				// loop submatrix
				for (var x = 0; x < m; x++) {
					// loop columns
					for (var y = 0; y < n; y++) {
						// value at i, j
						var v = submatrix[x][y];
						// invoke set (zero value will remove entry from matrix)
						matrix.set([x + x0, y + y0], v, defaultValue);
					}
				}
			}
			return matrix;
		};

		/**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */
		SparseMatrix.prototype.get = function (index) {
			if (!isArray(index))
				throw new TypeError('Array expected');
			if (index.length != this._size.length)
				throw new DimensionError(index.length, this._size.length);

			// check it is a pattern matrix
			if (!this._values)
				throw new Error('Cannot invoke get on a Pattern only matrix');

			// row and column
			var i = index[0];
			var j = index[1];

			// check i, j are valid
			validateIndex(i, this._size[0]);
			validateIndex(j, this._size[1]);

			// find value index
			var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
			// check k is prior to next column k and it is in the correct row
			if (k < this._ptr[j + 1] && this._index[k] === i)
				return this._values[k];

			return 0;
		};
  
		/**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */
		SparseMatrix.prototype.set = function (index, v, defaultValue) {
			if (!isArray(index))
				throw new TypeError('Array expected');
			if (index.length != this._size.length)
				throw new DimensionError(index.length, this._size.length);

			// check it is a pattern matrix
			if (!this._values)
				throw new Error('Cannot invoke set on a Pattern only matrix');
      
			// row and column
			var i = index[0];
			var j = index[1];

			// rows & columns
			var rows = this._size[0];
			var columns = this._size[1];
    
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			if (isString(this._datatype)) {
				// find signature that matches (datatype, datatype)
				eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
				// convert 0 to the same datatype
				zero = typed.convert(0, this._datatype);
			}

			// check we need to resize matrix
			if (i > rows - 1 || j > columns - 1) {
				// resize matrix
				_resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
				// update rows & columns
				rows = this._size[0];
				columns = this._size[1];
			}

			// check i, j are valid
			validateIndex(i, rows);
			validateIndex(j, columns);

			// find value index
			var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
			// check k is prior to next column k and it is in the correct row
			if (k < this._ptr[j + 1] && this._index[k] === i) {
				// check value != 0
				if (!eq(v, zero)) {
					// update value
					this._values[k] = v;
				}
				else {
					// remove value from matrix
					_remove(k, j, this._values, this._index, this._ptr);
				}
			}
			else {
				// insert value @ (i, j)
				_insert(k, i, j, v, this._values, this._index, this._ptr);
			}

			return this;
		};
  
		var _getValueIndex = function(i, top, bottom, index) {
			// check row is on the bottom side
			if (bottom - top === 0)
				return bottom;
			// loop rows [top, bottom[
			for (var r = top; r < bottom; r++) {
				// check we found value index
				if (index[r] === i)
					return r;
			}
			// we did not find row
			return top;
		};

		var _remove = function (k, j, values, index, ptr) {
			// remove value @ k
			values.splice(k, 1);
			index.splice(k, 1);
			// update pointers
			for (var x = j + 1; x < ptr.length; x++)
				ptr[x]--;
		};

		var _insert = function (k, i, j, v, values, index, ptr) {
			// insert value
			values.splice(k, 0, v);
			// update row for k
			index.splice(k, 0, i);
			// update column pointers
			for (var x = j + 1; x < ptr.length; x++)
				ptr[x]++;
		};
  
		/**
   * Resize the matrix to the given size. Returns a copy of the matrix when 
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
		SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    
			// validate arguments
			if (!isArray(size))
				throw new TypeError('Array expected');
			if (size.length !== 2)
				throw new Error('Only two dimensions matrix are supported');

			// check sizes
			size.forEach(function (value) {
				if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
					throw new TypeError('Invalid size, must contain positive integers ' +
                            '(size: ' + string.format(size) + ')');
				}
			});
    
			// matrix to resize
			var m = copy ? this.clone() : this;
			// resize matrix
			return _resize(m, size[0], size[1], defaultValue);
		};
  
		var _resize = function (matrix, rows, columns, defaultValue) {
			// value to insert at the time of growing matrix
			var value = defaultValue || 0;
    
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			if (isString(matrix._datatype)) {
				// find signature that matches (datatype, datatype)
				eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
				// convert 0 to the same datatype
				zero = typed.convert(0, matrix._datatype);
				// convert value to the same datatype
				value = typed.convert(value, matrix._datatype);
			}
    
			// should we insert the value?
			var ins = !eq(value, zero);

			// old columns and rows
			var r = matrix._size[0];
			var c = matrix._size[1];

			var i, j, k;

			// check we need to increase columns
			if (columns > c) {
				// loop new columns
				for (j = c; j < columns; j++) {
					// update matrix._ptr for current column
					matrix._ptr[j] = matrix._values.length;
					// check we need to insert matrix._values
					if (ins) {
						// loop rows
						for (i = 0; i < r; i++) {
							// add new matrix._values
							matrix._values.push(value);
							// update matrix._index
							matrix._index.push(i);
						}
					}        
				}
				// store number of matrix._values in matrix._ptr
				matrix._ptr[columns] = matrix._values.length;
			}
			else if (columns < c) {
				// truncate matrix._ptr
				matrix._ptr.splice(columns + 1, c - columns);
				// truncate matrix._values and matrix._index
				matrix._values.splice(matrix._ptr[columns], matrix._values.length);
				matrix._index.splice(matrix._ptr[columns], matrix._index.length);
			}
			// update columns
			c = columns;

			// check we need to increase rows
			if (rows > r) {
				// check we have to insert values
				if (ins) {
					// inserts
					var n = 0;
					// loop columns
					for (j = 0; j < c; j++) {
						// update matrix._ptr for current column
						matrix._ptr[j] = matrix._ptr[j] + n;
						// where to insert matrix._values
						k = matrix._ptr[j + 1] + n;
						// pointer
						var p = 0;
						// loop new rows, initialize pointer
						for (i = r; i < rows; i++, p++) {
							// add value
							matrix._values.splice(k + p, 0, value);
							// update matrix._index
							matrix._index.splice(k + p, 0, i);
							// increment inserts
							n++;
						}
					}
					// store number of matrix._values in matrix._ptr
					matrix._ptr[c] = matrix._values.length;
				}
			}
			else if (rows < r) {
				// deletes
				var d = 0;
				// loop columns
				for (j = 0; j < c; j++) {
					// update matrix._ptr for current column
					matrix._ptr[j] = matrix._ptr[j] - d;
					// where matrix._values start for next column
					var k0 = matrix._ptr[j];
					var k1 = matrix._ptr[j + 1] - d;
					// loop matrix._index
					for (k = k0; k < k1; k++) {
						// row
						i = matrix._index[k];
						// check we need to delete value and matrix._index
						if (i > rows - 1) {
							// remove value
							matrix._values.splice(k, 1);
							// remove item from matrix._index
							matrix._index.splice(k, 1);
							// increase deletes
							d++;
						}
					}
				}
				// update matrix._ptr for current column
				matrix._ptr[j] = matrix._values.length;
			}
			// update matrix._size
			matrix._size[0] = rows;
			matrix._size[1] = columns;
			// return matrix
			return matrix;
		};
  
		/**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */
		SparseMatrix.prototype.clone = function () {
			var m = new SparseMatrix({
				values: this._values ? object.clone(this._values) : undefined,
				index: object.clone(this._index),
				ptr: object.clone(this._ptr),
				size: object.clone(this._size),
				datatype: this._datatype
			});
			return m;
		};
  
		/**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */
		SparseMatrix.prototype.size = function() {
			return this._size.slice(0); // copy the Array
		};
  
		/**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */
		SparseMatrix.prototype.map = function (callback, skipZeros) {
			// check it is a pattern matrix
			if (!this._values)
				throw new Error('Cannot invoke map on a Pattern only matrix');
			// matrix instance
			var me = this;
			// rows and columns
			var rows = this._size[0];
			var columns = this._size[1];
			// invoke callback
			var invoke = function (v, i, j) {
				// invoke callback
				return callback(v, [i, j], me);
			};
			// invoke _map
			return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
		};

		/**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */
		var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
			// result arrays
			var values = [];
			var index = [];
			var ptr = [];
    
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			if (isString(matrix._datatype)) {
				// find signature that matches (datatype, datatype)
				eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
				// convert 0 to the same datatype
				zero = typed.convert(0, matrix._datatype);
			}
    
			// invoke callback
			var invoke = function (v, x, y) {
				// invoke callback
				v = callback(v, x, y);
				// check value != 0
				if (!eq(v, zero)) {
					// store value
					values.push(v);
					// index
					index.push(x);
				}
			};
			// loop columns
			for (var j = minColumn; j <= maxColumn; j++) {
				// store pointer to values index
				ptr.push(values.length);
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = matrix._ptr[j];
				var k1 = matrix._ptr[j + 1];
				// row pointer
				var p = minRow;
				// loop k within [k0, k1[
				for (var k = k0; k < k1; k++) {
					// row index
					var i = matrix._index[k];
					// check i is in range
					if (i >= minRow && i <= maxRow) {
						// zero values
						if (!skipZeros) {
							for (var x = p; x < i; x++)
								invoke(0, x - minRow, j - minColumn);
						}
						// value @ k
						invoke(matrix._values[k], i - minRow, j - minColumn);
					}
					// update pointer
					p = i + 1;
				}
				// zero values
				if (!skipZeros) {
					for (var y = p; y <= maxRow; y++)
						invoke(0, y - minRow, j - minColumn);
				}
			}
			// store number of values in ptr
			ptr.push(values.length);
			// return sparse matrix
			return new SparseMatrix({
				values: values,
				index: index,
				ptr: ptr,
				size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
			});
		};
  
		/**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */
		SparseMatrix.prototype.forEach = function (callback, skipZeros) {
			// check it is a pattern matrix
			if (!this._values)
				throw new Error('Cannot invoke forEach on a Pattern only matrix');
			// matrix instance
			var me = this;
			// rows and columns
			var rows = this._size[0];
			var columns = this._size[1];
			// loop columns
			for (var j = 0; j < columns; j++) {
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = this._ptr[j];
				var k1 = this._ptr[j + 1];
				// column pointer
				var p = 0;
				// loop k within [k0, k1[
				for (var k = k0; k < k1; k++) {
					// row index
					var i = this._index[k];
					// check we need to process zeros
					if (!skipZeros) {
						// zero values
						for (var x = p; x < i; x++)
							callback(0, [x, j], me);
					}
					// value @ k
					callback(this._values[k], [i, j], me);
					// update pointer
					p = i + 1;
				}
				// check we need to process zeros
				if (!skipZeros) {
					// zero values
					for (var y = p; y < rows; y++)
						callback(0, [y, j], me);
				}
			}
		};
  
		/**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */
		SparseMatrix.prototype.toArray = function () {
			return _toArray(this._values, this._index, this._ptr, this._size, true);
		};

		/**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */
		SparseMatrix.prototype.valueOf = function () {
			return _toArray(this._values, this._index, this._ptr, this._size, false);
		};
  
		var _toArray = function (values, index, ptr, size, copy) {    
			// rows and columns
			var rows = size[0];
			var columns = size[1];
			// result
			var a = [];
			// vars
			var i, j;
			// initialize array
			for (i = 0; i < rows; i++) {
				a[i] = [];
				for (j = 0; j < columns; j++)
					a[i][j] = 0;
			}

			// loop columns
			for (j = 0; j < columns; j++) {
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = ptr[j];
				var k1 = ptr[j + 1];
				// loop k within [k0, k1[
				for (var k = k0; k < k1; k++) {
					// row index
					i = index[k];
					// set value (use one for pattern matrix)
					a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;
				}
			}
			return a;
		};
  
		/**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
		SparseMatrix.prototype.format = function (options) {
			// rows and columns
			var rows = this._size[0];
			var columns = this._size[1];
			// density
			var density = this.density();
			// rows & columns
			var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
			// loop columns
			for (var j = 0; j < columns; j++) {
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = this._ptr[j];
				var k1 = this._ptr[j + 1];
				// loop k within [k0, k1[
				for (var k = k0; k < k1; k++) {
					// row index
					var i = this._index[k];
					// append value
					str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
				}
			}
			return str;
		};
  
		/**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */
		SparseMatrix.prototype.toString = function () {
			return string.format(this.toArray());
		};
  
		/**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */
		SparseMatrix.prototype.toJSON = function () {
			return {
				mathjs: 'SparseMatrix',
				values: this._values,
				index: this._index,
				ptr: this._ptr,
				size: this._size,
				datatype: this._datatype
			};
		};

		/**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */
		SparseMatrix.prototype.diagonal = function(k) {
			// validate k if any
			if (k) {
				// convert BigNumber to a number
				if (k.isBigNumber === true)
					k = k.toNumber();
				// is must be an integer
				if (!isNumber(k) || !isInteger(k)) {
					throw new TypeError ('The parameter k must be an integer number');
				}
			}
			else {
				// default value
				k = 0;
			}

			var kSuper = k > 0 ? k : 0;
			var kSub = k < 0 ? -k : 0;
    
			// rows & columns
			var rows = this._size[0];
			var columns = this._size[1];
    
			// number diagonal values
			var n = Math.min(rows - kSub, columns -  kSuper);
    
			// diagonal arrays
			var values = [];
			var index = [];
			var ptr = [];
			// initial ptr value
			ptr[0] = 0;
			// loop columns
			for (var j = kSuper; j < columns && values.length < n; j++) {
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = this._ptr[j];
				var k1 = this._ptr[j + 1];
				// loop x within [k0, k1[
				for (var x = k0; x < k1; x++) {
					// row index
					var i = this._index[x];
					// check row
					if (i === j - kSuper + kSub) {
						// value on this column
						values.push(this._values[x]);
						// store row
						index[values.length - 1] = i - kSub;
						// exit loop
						break;
					}
				}
			}
			// close ptr
			ptr.push(values.length);
			// return matrix
			return new SparseMatrix({
				values: values,
				index: index,
				ptr: ptr,
				size: [n, 1]
			});
		};
  
		/**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */
		SparseMatrix.fromJSON = function (json) {
			return new SparseMatrix(json);
		};

		/**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */
		SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
			if (!isArray(size))
				throw new TypeError('Array expected, size parameter');
			if (size.length !== 2)
				throw new Error('Only two dimensions matrix are supported');
    
			// map size & validate
			size = size.map(function (s) {
				// check it is a big number
				if (s && s.isBigNumber === true) {
					// convert it
					s = s.toNumber();
				}
				// validate arguments
				if (!isNumber(s) || !isInteger(s) || s < 1) {
					throw new Error('Size values must be positive integers');
				} 
				return s;
			});
    
			// validate k if any
			if (k) {
				// convert BigNumber to a number
				if (k.isBigNumber === true)
					k = k.toNumber();
				// is must be an integer
				if (!isNumber(k) || !isInteger(k)) {
					throw new TypeError ('The parameter k must be an integer number');
				}
			}
			else {
				// default value
				k = 0;
			}

			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;

			if (isString(datatype)) {
				// find signature that matches (datatype, datatype)
				eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
				// convert 0 to the same datatype
				zero = typed.convert(0, datatype);
			}
    
			var kSuper = k > 0 ? k : 0;
			var kSub = k < 0 ? -k : 0;
    
			// rows and columns
			var rows = size[0];
			var columns = size[1];
    
			// number of non-zero items
			var n = Math.min(rows - kSub, columns -  kSuper);
    
			// value extraction function
			var _value;
      
			// check value
			if (isArray(value)) {
				// validate array
				if (value.length !== n) {
					// number of values in array must be n
					throw new Error('Invalid value array length');
				}
				// define function
				_value = function (i) {
					// return value @ i
					return value[i];
				};
			}
			else if (value && value.isMatrix === true) {
				// matrix size
				var ms = value.size();
				// validate matrix
				if (ms.length !== 1 || ms[0] !== n) {
					// number of values in array must be n
					throw new Error('Invalid matrix length');
				}
				// define function
				_value = function (i) {
					// return value @ i
					return value.get([i]);
				};
			}
			else {
				// define function
				_value = function () {
					// return value
					return value;
				};
			}
    
			// create arrays
			var values = [];
			var index = [];
			var ptr = [];
    
			// loop items
			for (var j = 0; j < columns; j++) {
				// number of rows with value
				ptr.push(values.length);
				// diagonal index
				var i = j - kSuper;      
				// check we need to set diagonal value
				if (i >= 0 && i < n) {
					// get value @ i
					var v = _value(i);
					// check for zero
					if (!eq(v, zero)) {
						// column
						index.push(i + kSub);
						// add value
						values.push(v);
					}
				}
			}
			// last value should be number of values
			ptr.push(values.length);
			// create SparseMatrix
			return new SparseMatrix({
				values: values,
				index: index,
				ptr: ptr,
				size: [rows, columns]
			});
		};
  
		/**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */
		SparseMatrix.prototype.swapRows = function (i, j) {
			// check index
			if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
				throw new Error('Row index must be positive integers');
			}
			// check dimensions
			if (this._size.length !== 2) {
				throw new Error('Only two dimensional matrix is supported');
			}
			// validate index
			validateIndex(i, this._size[0]);
			validateIndex(j, this._size[0]);
    
			// swap rows
			SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
			// return current instance
			return this;
		};
  
		/**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */
		SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
			// indeces for column j
			var k0 = ptr[j];
			var k1 = ptr[j + 1];
			// loop
			for (var k = k0; k < k1; k++) {
				// invoke callback
				callback(index[k], values[k]);
			}
		};
  
		/**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */
		SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
			// loop columns
			for (var j = 0; j < columns; j++) {
				// k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
				var k0 = ptr[j];
				var k1 = ptr[j + 1];
				// find value index @ x
				var kx = _getValueIndex(x, k0, k1, index);
				// find value index @ x
				var ky = _getValueIndex(y, k0, k1, index);
				// check both rows exist in matrix
				if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
					// swap values (check for pattern matrix)
					if (values) {
						var v = values[kx];
						values[kx] = values[ky];
						values[ky] = v;
					}
					// next column
					continue;
				}
				// check x row exist & no y row
				if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
					// value @ x (check for pattern matrix)
					var vx = values ? values[kx] : undefined;
					// insert value @ y
					index.splice(ky, 0, y);
					if (values)
						values.splice(ky, 0, vx);        
					// remove value @ x (adjust array index if needed)
					index.splice(ky <= kx ? kx + 1 : kx, 1);
					if (values)
						values.splice(ky <= kx ? kx + 1 : kx, 1);
					// next column
					continue;
				}
				// check y row exist & no x row
				if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
					// value @ y (check for pattern matrix)
					var vy = values ? values[ky] : undefined;
					// insert value @ x
					index.splice(kx, 0, x);
					if (values)
						values.splice(kx, 0, vy);
					// remove value @ y (adjust array index if needed)
					index.splice(kx <= ky ? ky + 1 : ky, 1);
					if (values)
						values.splice(kx <= ky ? ky + 1 : ky, 1);
				}
			}
		};

		// register this type in the base class Matrix
		type.Matrix._storage.sparse = SparseMatrix;

		return SparseMatrix;
	}

	exports.name = 'SparseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage

},{"../../error/DimensionError":125,"../../function/relational/equalScalar":468,"../../utils/index":601,"./Matrix":547}],552:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		/**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    var math = math.js
   *
   *    var b = [1, 2, 3, 4, 5];
   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]
   *
   *    var a = math.matrix([[1, 2], [3, 4]]);
   *    a.subset(math.index(0, 1));             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
		return typed('index', {
			'...number | string | BigNumber | Range | Array | Matrix': function (args) {
				var ranges = args.map(function (arg) {
					if (arg && arg.isBigNumber === true) {
						return arg.toNumber(); // convert BigNumber to Number
					}
					else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
						return arg.map(function (elem) {
							// convert BigNumber to Number
							return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;
						});
					}
					else {
						return arg;
					}
				});

				var res = new type.Index();
				type.Index.apply(res, ranges);
				return res;
			}
		});
	}

	exports.name = 'index';
	exports.factory = factory;

},{}],553:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		/**
   * Create a Matrix. The function creates a new `math.type.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    var m = math.matrix([[1, 2], [3, 4]]);
   *    m.size();                        // Array [2, 2]
   *    m.resize([3, 2], 5);
   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
		var matrix = typed('matrix', {
			'': function () {
				return _create([]);
			},

			'string': function (format) {
				return _create([], format);
			},
    
			'string, string': function (format, datatype) {
				return _create([], format, datatype);
			},

			'Array': function (data) {
				return _create(data);
			},
      
			'Matrix': function (data) {
				return _create(data, data.storage());
			},
    
			'Array | Matrix, string': _create,
    
			'Array | Matrix, string, string': _create
		});

		matrix.toTex = {
			0: '\\begin{bmatrix}\\end{bmatrix}',
			1: '\\left(${args[0]}\\right)',
			2: '\\left(${args[0]}\\right)'
		};

		return matrix;

		/**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */
		function _create(data, format, datatype) {
			// get storage format constructor
			var M = type.Matrix.storage(format || 'default');

			// create instance
			return new M(data, datatype);
		}
	}

	exports.name = 'matrix';
	exports.factory = factory;

},{}],554:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var SparseMatrix = type.SparseMatrix;

		/**
   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    var m = math.sparse([[1, 2], [3, 4]]);
   *    m.size();                        // Array [2, 2]
   *    m.resize([3, 2], 5);
   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
		var sparse = typed('sparse', {
			'': function () {
				return new SparseMatrix([]);
			},
    
			'string': function (datatype) {
				return new SparseMatrix([], datatype);
			},

			'Array | Matrix': function (data) {
				return new SparseMatrix(data);
			},
    
			'Array | Matrix, string': function (data, datatype) {
				return new SparseMatrix(data, datatype);
			}
		});

		sparse.toTex = {
			0: '\\begin{bsparse}\\end{bsparse}',
			1: '\\left(${args[0]}\\right)'
		};

		return sparse;
	}

	exports.name = 'sparse';
	exports.factory = factory;

},{}],555:[function(require,module,exports){
	module.exports = [
		// types
		require('./Matrix'),
		require('./DenseMatrix'),
		require('./SparseMatrix'),
		require('./Spa'),
		require('./FibonacciHeap'),
		require('./ImmutableDenseMatrix'),
		require('./MatrixIndex'),
		require('./Range'),

		// construction functions
		require('./function/index'),
		require('./function/matrix'),
		require('./function/sparse')
	];

},{"./DenseMatrix":544,"./FibonacciHeap":545,"./ImmutableDenseMatrix":546,"./Matrix":547,"./MatrixIndex":548,"./Range":549,"./Spa":550,"./SparseMatrix":551,"./function/index":552,"./function/matrix":553,"./function/sparse":554}],556:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
		var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {
			// dense matrix arrays
			var adata = denseMatrix._data;
			var asize = denseMatrix._size;
			var adt = denseMatrix._datatype;
			// sparse matrix arrays
			var bvalues = sparseMatrix._values;
			var bindex = sparseMatrix._index;
			var bptr = sparseMatrix._ptr;
			var bsize = sparseMatrix._size;
			var bdt = sparseMatrix._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// sparse matrix cannot be a Pattern matrix
			if (!bvalues)
				throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// process data types
			var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
			// callback function
			var cf = dt ? typed.find(callback, [dt, dt]) : callback;

			// vars
			var i, j;
    
			// result (DenseMatrix)
			var cdata = [];
			// initialize c
			for (i = 0; i < rows; i++)
				cdata[i] = [];      
    
			// workspace
			var x = [];
			// marks indicating we have a value in x for a given column
			var w = [];

			// loop columns in b
			for (j = 0; j < columns; j++) {
				// column mark
				var mark = j + 1;
				// values in column j
				for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
					// row
					i = bindex[k];
					// update workspace
					x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
					// mark i as updated
					w[i] = mark;
				}
				// loop rows
				for (i = 0; i < rows; i++) {
					// check row is in workspace
					if (w[i] === mark) {
						// c[i][j] was already calculated
						cdata[i][j] = x[i];
					}
					else {
						// item does not exist in S
						cdata[i][j] = adata[i][j];
					}
				}
			}

			// return dense matrix
			return new DenseMatrix({
				data: cdata,
				size: [rows, columns],
				datatype: dt
			});
		};
  
		return algorithm01;
	}

	exports.name = 'algorithm01';
	exports.factory = factory;

},{"../../../error/DimensionError":125}],557:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
		var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {
			// dense matrix arrays
			var adata = denseMatrix._data;
			var asize = denseMatrix._size;
			var adt = denseMatrix._datatype;
			// sparse matrix arrays
			var bvalues = sparseMatrix._values;
			var bindex = sparseMatrix._index;
			var bptr = sparseMatrix._ptr;
			var bsize = sparseMatrix._size;
			var bdt = sparseMatrix._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// sparse matrix cannot be a Pattern matrix
			if (!bvalues)
				throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];
    
			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result (SparseMatrix)
			var cvalues = [];
			var cindex = [];
			var cptr = [];

			// loop columns in b
			for (var j = 0; j < columns; j++) {
				// update cptr
				cptr[j] = cindex.length;
				// values in column j
				for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
					// row
					var i = bindex[k];
					// update C(i,j)
					var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
					// check for nonzero
					if (!eq(cij, zero)) {
						// push i & v
						cindex.push(i);
						cvalues.push(cij);
					}
				}
			}
			// update cptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});
		};
  
		return algorithm02;
	}

	exports.name = 'algorithm02';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../function/relational/equalScalar":468}],558:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
		var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {
			// dense matrix arrays
			var adata = denseMatrix._data;
			var asize = denseMatrix._size;
			var adt = denseMatrix._datatype;
			// sparse matrix arrays
			var bvalues = sparseMatrix._values;
			var bindex = sparseMatrix._index;
			var bptr = sparseMatrix._ptr;
			var bsize = sparseMatrix._size;
			var bdt = sparseMatrix._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// sparse matrix cannot be a Pattern matrix
			if (!bvalues)
				throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result (DenseMatrix)
			var cdata = [];

			// initialize dense matrix
			for (var z = 0; z < rows; z++) {
				// initialize row
				cdata[z] = [];
			}

			// workspace
			var x = [];
			// marks indicating we have a value in x for a given column
			var w = [];

			// loop columns in b
			for (var j = 0; j < columns; j++) {
				// column mark
				var mark = j + 1;
				// values in column j
				for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
					// row
					var i = bindex[k];
					// update workspace
					x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
					w[i] = mark;
				}
				// process workspace
				for (var y = 0; y < rows; y++) {
					// check we have a calculated value for current row
					if (w[y] === mark) {
						// use calculated value
						cdata[y][j] = x[y];
					}
					else {
						// calculate value
						cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
					}
				}
			}

			// return dense matrix
			return new DenseMatrix({
				data: cdata,
				size: [rows, columns],
				datatype: dt
			});
		};
  
		return algorithm03;
	}

	exports.name = 'algorithm03';
	exports.factory = factory;

},{"../../../error/DimensionError":125}],559:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
		var algorithm04 = function (a, b, callback) {
			// sparse matrix arrays
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			var adt = a._datatype;
			// sparse matrix arrays
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			var bsize = b._size;
			var bdt = b._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cvalues = avalues && bvalues ? [] : undefined;
			var cindex = [];
			var cptr = [];
			// matrix
			var c = new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});

			// workspace
			var xa = avalues && bvalues ? [] : undefined;
			var xb = avalues && bvalues ? [] : undefined;
			// marks indicating we have a value in x for a given column
			var wa = [];
			var wb = [];

			// vars 
			var i, j, k, k0, k1;
    
			// loop columns
			for (j = 0; j < columns; j++) {
				// update cptr
				cptr[j] = cindex.length;
				// columns mark
				var mark = j + 1;
				// loop A(:,j)
				for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
					// row
					i = aindex[k];
					// update c
					cindex.push(i);
					// update workspace
					wa[i] = mark;
					// check we need to process values
					if (xa)
						xa[i] = avalues[k];
				}
				// loop B(:,j)
				for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
					// row
					i = bindex[k];
					// check row exists in A
					if (wa[i] === mark) {
						// update record in xa @ i
						if (xa) {
							// invoke callback
							var v = cf(xa[i], bvalues[k]);
							// check for zero
							if (!eq(v, zero)) {
								// update workspace
								xa[i] = v;              
							}
							else {
								// remove mark (index will be removed later)
								wa[i] = null;
							}
						}
					}
					else {
						// update c
						cindex.push(i);
						// update workspace
						wb[i] = mark;
						// check we need to process values
						if (xb)
							xb[i] = bvalues[k];
					}
				}
				// check we need to process values (non pattern matrix)
				if (xa && xb) {
					// initialize first index in j
					k = cptr[j];
					// loop index in j
					while (k < cindex.length) {
						// row
						i = cindex[k];
						// check workspace has value @ i
						if (wa[i] === mark) {
							// push value (Aij != 0 || (Aij != 0 && Bij != 0))
							cvalues[k] = xa[i];
							// increment pointer
							k++;
						}
						else if (wb[i] === mark) {
							// push value (bij != 0)
							cvalues[k] = xb[i];
							// increment pointer
							k++;
						}
						else {
							// remove index @ k
							cindex.splice(k, 1);
						}
					}
				}
			}
			// update cptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return c;
		};
  
		return algorithm04;
	}

	exports.name = 'algorithm04';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../function/relational/equalScalar":468}],560:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));
  
		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
		var algorithm05 = function (a, b, callback) {
			// sparse matrix arrays
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			var adt = a._datatype;
			// sparse matrix arrays
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			var bsize = b._size;
			var bdt = b._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cvalues = avalues && bvalues ? [] : undefined;
			var cindex = [];
			var cptr = [];
			// matrix
			var c = new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});

			// workspaces
			var xa = cvalues ? [] : undefined;
			var xb = cvalues ? [] : undefined;
			// marks indicating we have a value in x for a given column
			var wa = [];
			var wb = [];

			// vars
			var i, j, k, k1;
    
			// loop columns
			for (j = 0; j < columns; j++) {
				// update cptr
				cptr[j] = cindex.length;
				// columns mark
				var mark = j + 1;
				// loop values A(:,j)
				for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
					// row
					i = aindex[k];
					// push index
					cindex.push(i);
					// update workspace
					wa[i] = mark;
					// check we need to process values
					if (xa)
						xa[i] = avalues[k];
				}
				// loop values B(:,j)
				for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
					// row
					i = bindex[k];
					// check row existed in A
					if (wa[i] !== mark) {
						// push index
						cindex.push(i);
					}
					// update workspace
					wb[i] = mark;
					// check we need to process values
					if (xb)
						xb[i] = bvalues[k];
				}
				// check we need to process values (non pattern matrix)
				if (cvalues) {
					// initialize first index in j
					k = cptr[j];
					// loop index in j
					while (k < cindex.length) {
						// row
						i = cindex[k];
						// marks
						var wai = wa[i];
						var wbi = wb[i];
						// check Aij or Bij are nonzero
						if (wai === mark || wbi === mark) {
							// matrix values @ i,j
							var va = wai === mark ? xa[i] : zero;
							var vb = wbi === mark ? xb[i] : zero;
							// Cij
							var vc = cf(va, vb);
							// check for zero
							if (!eq(vc, zero)) {
								// push value
								cvalues.push(vc);
								// increment pointer
								k++;
							}
							else {
								// remove value @ i, do not increment pointer
								cindex.splice(k, 1);
							}
						}
					}
				}
			}
			// update cptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return c;
		};

		return algorithm05;
	}

	exports.name = 'algorithm05';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../function/relational/equalScalar":468}],561:[function(require,module,exports){
	'use strict';

	var scatter = require('./../../../utils/collection/scatter');
	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
		var algorithm06 = function (a, b, callback) {
			// sparse matrix arrays
			var avalues = a._values;
			var asize = a._size;
			var adt = a._datatype;
			// sparse matrix arrays
			var bvalues = b._values;
			var bsize = b._size;
			var bdt = b._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cvalues = avalues && bvalues ? [] : undefined;
			var cindex = [];
			var cptr = [];
			// matrix
			var c = new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});

			// workspaces
			var x = cvalues ? [] : undefined;
			// marks indicating we have a value in x for a given column
			var w = [];
			// marks indicating value in a given row has been updated
			var u = [];

			// loop columns
			for (var j = 0; j < columns; j++) {
				// update cptr
				cptr[j] = cindex.length;
				// columns mark
				var mark = j + 1;
				// scatter the values of A(:,j) into workspace
				scatter(a, j, w, x, u, mark, c, cf);
				// scatter the values of B(:,j) into workspace
				scatter(b, j, w, x, u, mark, c, cf);
				// check we need to process values (non pattern matrix)
				if (x) {
					// initialize first index in j
					var k = cptr[j];
					// loop index in j
					while (k < cindex.length) {
						// row
						var i = cindex[k];
						// check function was invoked on current row (Aij !=0 && Bij != 0)
						if (u[i] === mark) {
							// value @ i
							var v = x[i];
							// check for zero value
							if (!eq(v, zero)) {
								// push value
								cvalues.push(v);
								// increment pointer
								k++;
							}
							else {
								// remove value @ i, do not increment pointer
								cindex.splice(k, 1);
							}
						}
						else {
							// remove value @ i, do not increment pointer
							cindex.splice(k, 1);
						}
					}
				}
				else {
					// initialize first index in j
					var p = cptr[j];
					// loop index in j
					while (p < cindex.length) {
						// row
						var r = cindex[p];
						// check function was invoked on current row (Aij !=0 && Bij != 0)
						if (u[r] !== mark) {
							// remove value @ i, do not increment pointer
							cindex.splice(p, 1);
						}
						else {
							// increment pointer
							p++;
						}
					}
				}
			}
			// update cptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return c;
		};
  
		return algorithm06;
	}

	exports.name = 'algorithm06';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../function/relational/equalScalar":468,"./../../../utils/collection/scatter":598}],562:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
		var algorithm07 = function (a, b, callback) {
			// sparse matrix arrays
			var asize = a._size;
			var adt = a._datatype;
			// sparse matrix arrays
			var bsize = b._size;
			var bdt = b._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// vars
			var i, j;
    
			// result arrays
			var cdata = [];
			// initialize c
			for (i = 0; i < rows; i++)
				cdata[i] = [];

			// matrix
			var c = new DenseMatrix({
				data: cdata,
				size: [rows, columns],
				datatype: dt
			});

			// workspaces
			var xa = [];
			var xb = [];
			// marks indicating we have a value in x for a given column
			var wa = [];
			var wb = [];

			// loop columns
			for (j = 0; j < columns; j++) {
				// columns mark
				var mark = j + 1;
				// scatter the values of A(:,j) into workspace
				_scatter(a, j, wa, xa, mark);
				// scatter the values of B(:,j) into workspace
				_scatter(b, j, wb, xb, mark);
				// loop rows
				for (i = 0; i < rows; i++) {
					// matrix values @ i,j
					var va = wa[i] === mark ? xa[i] : zero;
					var vb = wb[i] === mark ? xb[i] : zero;
					// invoke callback
					cdata[i][j] = cf(va, vb);
				}          
			}

			// return sparse matrix
			return c;
		};
  
		var _scatter = function (m, j, w, x, mark) {
			// a arrays
			var values = m._values;
			var index = m._index;
			var ptr = m._ptr;
			// loop values in column j
			for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
				// row
				var i = index[k];
				// update workspace
				w[i] = mark;
				x[i] = values[k];
			}
		};
  
		return algorithm07;
	}

	exports.name = 'algorithm07';
	exports.factory = factory;

},{"../../../error/DimensionError":125}],563:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
		var algorithm08 = function (a, b, callback) {
			// sparse matrix arrays
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			var adt = a._datatype;
			// sparse matrix arrays
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			var bsize = b._size;
			var bdt = b._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// sparse matrix cannot be a Pattern matrix
			if (!avalues || !bvalues)
				throw new Error('Cannot perform operation on Pattern Sparse Matrices');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cvalues = [];
			var cindex = [];
			var cptr = [];
			// matrix
			var c = new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});

			// workspace
			var x = [];
			// marks indicating we have a value in x for a given column
			var w = [];

			// vars
			var k, k0, k1, i;

			// loop columns
			for (var j = 0; j < columns; j++) {
				// update cptr
				cptr[j] = cindex.length;
				// columns mark
				var mark = j + 1;
				// loop values in a
				for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
					// row
					i = aindex[k];
					// mark workspace
					w[i] = mark;
					// set value
					x[i] = avalues[k];
					// add index
					cindex.push(i);
				}
				// loop values in b
				for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
					// row
					i = bindex[k];
					// check value exists in workspace
					if (w[i] === mark) {
						// evaluate callback
						x[i] = cf(x[i], bvalues[k]);
					}
				}
				// initialize first index in j
				k = cptr[j];
				// loop index in j
				while (k < cindex.length) {
					// row
					i = cindex[k];
					// value @ i
					var v = x[i];
					// check for zero value
					if (!eq(v, zero)) {
						// push value
						cvalues.push(v);
						// increment pointer
						k++;
					}
					else {
						// remove value @ i, do not increment pointer
						cindex.splice(k, 1);
					}
				}      
			}
			// update cptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return c;
		};

		return algorithm08;
	}

	exports.name = 'algorithm08';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../function/relational/equalScalar":468}],564:[function(require,module,exports){
	'use strict';

	var DimensionError = require('../../../error/DimensionError');

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). 
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
		var algorithm09 = function (a, b, callback) {
			// sparse matrix arrays
			var avalues = a._values;
			var aindex = a._index;
			var aptr = a._ptr;
			var asize = a._size;
			var adt = a._datatype;
			// sparse matrix arrays
			var bvalues = b._values;
			var bindex = b._index;
			var bptr = b._ptr;
			var bsize = b._size;
			var bdt = b._datatype;

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// check rows & columns
			if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
				throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cvalues = avalues && bvalues ? [] : undefined;
			var cindex = [];
			var cptr = [];
			// matrix
			var c = new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});

			// workspaces
			var x = cvalues ? [] : undefined;
			// marks indicating we have a value in x for a given column
			var w = [];

			// vars
			var i, j, k, k0, k1;
    
			// loop columns
			for (j = 0; j < columns; j++) {
				// update cptr
				cptr[j] = cindex.length;
				// column mark
				var mark = j + 1;
				// check we need to process values
				if (x) {
					// loop B(:,j)
					for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
						// row
						i = bindex[k];
						// update workspace
						w[i] = mark;
						x[i] = bvalues[k];
					}
				}
				// loop A(:,j)
				for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
					// row
					i = aindex[k];
					// check we need to process values
					if (x) {
						// b value @ i,j
						var vb = w[i] === mark ? x[i] : zero;
						// invoke f
						var vc = cf(avalues[k], vb);
						// check zero value
						if (!eq(vc, zero)) {
							// push index
							cindex.push(i);
							// push value
							cvalues.push(vc);
						}
					}
					else {
						// push index
						cindex.push(i);
					}
				}
			}
			// update cptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return c;
		};

		return algorithm09;
	}

	exports.name = 'algorithm09';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../function/relational/equalScalar":468}],565:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
		var algorithm10 = function (s, b, callback, inverse) {
			// sparse matrix arrays
			var avalues = s._values;
			var aindex = s._index;
			var aptr = s._ptr;
			var asize = s._size;
			var adt = s._datatype;

			// sparse matrix cannot be a Pattern matrix
			if (!avalues)
				throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string') {
				// datatype
				dt = adt;
				// convert b to the same datatype
				b = typed.convert(b, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cdata = [];
			// matrix
			var c = new DenseMatrix({
				data: cdata,
				size: [rows, columns],
				datatype: dt
			});

			// workspaces
			var x = [];
			// marks indicating we have a value in x for a given column
			var w = [];

			// loop columns
			for (var j = 0; j < columns; j++) {
				// columns mark
				var mark = j + 1;
				// values in j
				for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
					// row
					var r = aindex[k];
					// update workspace
					x[r] = avalues[k];
					w[r] = mark;
				}
				// loop rows
				for (var i = 0; i < rows; i++) {
					// initialize C on first column
					if (j === 0) {
						// create row array
						cdata[i] = [];
					}
					// check sparse matrix has a value @ i,j
					if (w[i] === mark) {
						// invoke callback, update C
						cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
					}
					else {
						// dense matrix value @ i, j
						cdata[i][j] = b;
					}
				}
			}

			// return sparse matrix
			return c;
		};

		return algorithm10;
	}

	exports.name = 'algorithm10';
	exports.factory = factory;

},{}],566:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var equalScalar = load(require('../../../function/relational/equalScalar'));

		var SparseMatrix = type.SparseMatrix;

		/**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
		var algorithm11 = function (s, b, callback, inverse) {
			// sparse matrix arrays
			var avalues = s._values;
			var aindex = s._index;
			var aptr = s._ptr;
			var asize = s._size;
			var adt = s._datatype;

			// sparse matrix cannot be a Pattern matrix
			if (!avalues)
				throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// equal signature to use
			var eq = equalScalar;
			// zero value
			var zero = 0;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string') {
				// datatype
				dt = adt;
				// find signature that matches (dt, dt)
				eq = typed.find(equalScalar, [dt, dt]);
				// convert 0 to the same datatype
				zero = typed.convert(0, dt);
				// convert b to the same datatype
				b = typed.convert(b, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// result arrays
			var cvalues = [];
			var cindex = [];
			var cptr = [];
			// matrix
			var c = new SparseMatrix({
				values: cvalues,
				index: cindex,
				ptr: cptr,
				size: [rows, columns],
				datatype: dt
			});

			// loop columns
			for (var j = 0; j < columns; j++) {
				// initialize ptr
				cptr[j] = cindex.length;
				// values in j
				for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
					// row
					var i = aindex[k];
					// invoke callback
					var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
					// check value is zero
					if (!eq(v, zero)) {
						// push index & value
						cindex.push(i);
						cvalues.push(v);
					}
				}
			}
			// update ptr
			cptr[columns] = cindex.length;

			// return sparse matrix
			return c;
		};

		return algorithm11;
	}

	exports.name = 'algorithm11';
	exports.factory = factory;

},{"../../../function/relational/equalScalar":468}],567:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
		var algorithm12 = function (s, b, callback, inverse) {
			// sparse matrix arrays
			var avalues = s._values;
			var aindex = s._index;
			var aptr = s._ptr;
			var asize = s._size;
			var adt = s._datatype;

			// sparse matrix cannot be a Pattern matrix
			if (!avalues)
				throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

			// rows & columns
			var rows = asize[0];
			var columns = asize[1];

			// datatype
			var dt;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string') {
				// datatype
				dt = adt;
				// convert b to the same datatype
				b = typed.convert(b, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}
    
			// result arrays
			var cdata = [];
			// matrix
			var c = new DenseMatrix({
				data: cdata,
				size: [rows, columns],
				datatype: dt
			});

			// workspaces
			var x = [];
			// marks indicating we have a value in x for a given column
			var w = [];

			// loop columns
			for (var j = 0; j < columns; j++) {
				// columns mark
				var mark = j + 1;
				// values in j
				for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
					// row
					var r = aindex[k];
					// update workspace
					x[r] = avalues[k];
					w[r] = mark;
				}
				// loop rows
				for (var i = 0; i < rows; i++) {
					// initialize C on first column
					if (j === 0) {
						// create row array
						cdata[i] = [];
					}
					// check sparse matrix has a value @ i,j
					if (w[i] === mark) {
						// invoke callback, update C
						cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
					}
					else {
						// dense matrix value @ i, j
						cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
					}
				}
			}

			// return sparse matrix
			return c;
		};
  
		return algorithm12;
	}

	exports.name = 'algorithm12';
	exports.factory = factory;

},{}],568:[function(require,module,exports){
	'use strict';

	var util = require('../../../utils/index');
	var DimensionError = require('../../../error/DimensionError');

	var string = util.string,
		isString = string.isString;

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). 
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
		var algorithm13 = function (a, b, callback) {
			// a arrays
			var adata = a._data;
			var asize = a._size;
			var adt = a._datatype;
			// b arrays
			var bdata = b._data;
			var bsize = b._size;
			var bdt = b._datatype;
			// c arrays
			var csize = [];

			// validate dimensions
			if (asize.length !== bsize.length)
				throw new DimensionError(asize.length, bsize.length);

			// validate each one of the dimension sizes
			for (var s = 0; s < asize.length; s++) {
				// must match
				if (asize[s] !== bsize[s])
					throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
				// update dimension in c
				csize[s] = asize[s];
			}

			// datatype
			var dt;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string' && adt === bdt) {
				// datatype
				dt = adt;
				// convert b to the same datatype
				b = typed.convert(b, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}

			// populate cdata, iterate through dimensions
			var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
    
			// c matrix
			return new DenseMatrix({
				data: cdata,
				size: csize,
				datatype: dt
			});
		};
  
		// recursive function
		var _iterate = function (f, level, s, n, av, bv) {
			// initialize array for this level
			var cv = [];
			// check we reach the last level
			if (level === s.length - 1) {
				// loop arrays in last level
				for (var i = 0; i < n; i++) {
					// invoke callback and store value
					cv[i] = f(av[i], bv[i]);
				}
			}
			else {
				// iterate current level
				for (var j = 0; j < n; j++) {
					// iterate next level
					cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
				}
			}
			return cv;
		};
  
		return algorithm13;
	}

	exports.name = 'algorithm13';
	exports.factory = factory;

},{"../../../error/DimensionError":125,"../../../utils/index":601}],569:[function(require,module,exports){
	'use strict';

	var clone = require('../../../utils/object').clone;

	function factory (type, config, load, typed) {

		var DenseMatrix = type.DenseMatrix;

		/**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). 
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
		var algorithm14 = function (a, b, callback, inverse) {
			// a arrays
			var adata = a._data;
			var asize = a._size;
			var adt = a._datatype;
    
			// datatype
			var dt;
			// callback signature to use
			var cf = callback;

			// process data types
			if (typeof adt === 'string') {
				// datatype
				dt = adt;
				// convert b to the same datatype
				b = typed.convert(b, dt);
				// callback
				cf = typed.find(callback, [dt, dt]);
			}
    
			// populate cdata, iterate through dimensions
			var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

			// c matrix
			return new DenseMatrix({
				data: cdata,
				size: clone(asize),
				datatype: dt
			});
		};
  
		// recursive function
		var _iterate = function (f, level, s, n, av, bv, inverse) {
			// initialize array for this level
			var cv = [];
			// check we reach the last level
			if (level === s.length - 1) {
				// loop arrays in last level
				for (var i = 0; i < n; i++) {
					// invoke callback and store value
					cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
				}
			}
			else {
				// iterate current level
				for (var j = 0; j < n; j++) {
					// iterate next level
					cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
				}
			}
			return cv;
		};

		return algorithm14;
	}

	exports.name = 'algorithm14';
	exports.factory = factory;

},{"../../../utils/object":604}],570:[function(require,module,exports){
	'use strict';

	var deepMap = require('./../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2);                         // returns number 2
   *    math.number('7.2');                     // returns number 7.2
   *    math.number(true);                      // returns number 1
   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm');    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
		var number = typed('number', {
			'': function () {
				return 0;
			},

			'number': function (x) {
				return x;
			},

			'string': function (x) {
				var num = Number(x);
				if (isNaN(num)) {
					throw new SyntaxError('String "' + x + '" is no valid number');
				}
				return num;
			},

			'BigNumber': function (x) {
				return x.toNumber();
			},

			'Fraction': function (x) {
				return x.valueOf();
			},

			'Unit': function (x) {
				throw new Error('Second argument with valueless unit expected');
			},

			'Unit, string | Unit': function (unit, valuelessUnit) {
				return unit.toNumber(valuelessUnit);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, number);
			}
		});

		number.toTex = {
			0: '0',
			1: '\\left(${args[0]}\\right)',
			2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
		};

		return number;
	}

	exports.name = 'number';
	exports.factory = factory;

},{"./../utils/collection/deepMap":595}],571:[function(require,module,exports){
	'use strict';

	function factory (type, config, load, typed) {
		/**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
		function ResultSet(entries) {
			if (!(this instanceof ResultSet)) {
				throw new SyntaxError('Constructor must be called with the new operator');
			}

			this.entries = entries || [];
		}

		/**
   * Attach type information
   */
		ResultSet.prototype.type = 'ResultSet';
		ResultSet.prototype.isResultSet = true;

		/**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */
		ResultSet.prototype.valueOf = function () {
			return this.entries;
		};

		/**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */
		ResultSet.prototype.toString = function () {
			return '[' + this.entries.join(', ') + ']';
		};

		/**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */
		ResultSet.prototype.toJSON = function () {
			return {
				mathjs: 'ResultSet',
				entries: this.entries
			};
		};

		/**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */
		ResultSet.fromJSON = function (json) {
			return new ResultSet(json.entries);
		};

		return ResultSet;
	}

	exports.name = 'ResultSet';
	exports.path = 'type';
	exports.factory = factory;

},{}],572:[function(require,module,exports){
	module.exports = [
		// type
		require('./ResultSet')
	];

},{"./ResultSet":571}],573:[function(require,module,exports){
	'use strict';

	var deepMap = require('./../utils/collection/deepMap');
	var number = require('../utils/number');

	function factory (type, config, load, typed) {
		/**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2);               // returns string '4.2'
   *    math.string(math.complex(3, 2); // returns string '3 + 2i'
   *
   *    var u = math.unit(5, 'km');
   *    math.string(u.to('m'));         // returns string '5000 m'
   *
   *    math.string([true, false]);     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
		var string = typed('string', {
			'': function () {
				return '';
			},

			'number': number.format,

			'null': function (x) {
				return 'null';
			},

			'boolean': function (x) {
				return x + '';
			},

			'string': function (x) {
				return x;
			},

			'Array | Matrix': function (x) {
				return deepMap(x, string);
			},

			'any': function (x) {
				return String(x);
			}
		});

		string.toTex = {
			0: '\\mathtt{""}',
			1: '\\mathrm{string}\\left(${args[0]}\\right)'
		};

		return string;
	}

	exports.name = 'string';
	exports.factory = factory;

},{"../utils/number":603,"./../utils/collection/deepMap":595}],574:[function(require,module,exports){
	'use strict';

	var endsWith = require('../../utils/string').endsWith;
	var clone = require('../../utils/object').clone;
	var constants = require('../../utils/bignumber/constants');

	function factory (type, config, load, typed, math) {
		var add       = load(require('../../function/arithmetic/addScalar'));
		var subtract  = load(require('../../function/arithmetic/subtract'));
		var multiply  = load(require('../../function/arithmetic/multiplyScalar'));
		var divide    = load(require('../../function/arithmetic/divideScalar'));
		var pow       = load(require('../../function/arithmetic/pow'));
		var abs       = load(require('../../function/arithmetic/abs'));
		var fix       = load(require('../../function/arithmetic/fix'));
		var equal     = load(require('../../function/relational/equal'));
		var isNumeric = load(require('../../function/utils/isNumeric'));
		var format    = load(require('../../function/string/format'));
		var getTypeOf = load(require('../../function/utils/typeof'));
		var toNumber  = load(require('../../type/number'));
		var Complex   = load(require('../../type/complex/Complex'));

		/**
   * A unit can be constructed in the following ways:
   *     var a = new Unit(value, name);
   *     var b = new Unit(null, name);
   *     var c = Unit.parse(str);
   *
   * Example usage:
   *     var a = new Unit(5, 'cm');               // 50 mm
   *     var b = Unit.parse('23 kg');             // 23 kg
   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
   *     var d = new Unit(9.81, "m/s^2");         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */
		function Unit(value, name) {
			if (!(this instanceof Unit)) {
				throw new Error('Constructor must be called with the new operator');
			}

			if (!(value === undefined || isNumeric(value) || value.isComplex)) {
				throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
			}
			if (name != undefined && (typeof name !== 'string' || name == '')) {
				throw new TypeError('Second parameter in Unit constructor must be a string');
			}

			if (name != undefined) {
				var u = Unit.parse(name);
				this.units = u.units;
				this.dimensions = u.dimensions;
			}
			else {
				this.units = [
					{
						unit: UNIT_NONE,
						prefix: PREFIXES.NONE,  // link to a list with supported prefixes
						power: 0
					}
				];
				this.dimensions = []; 
				for(var i=0; i<BASE_DIMENSIONS.length; i++) {
					this.dimensions[i] = 0;
				}
			}

			this.value = (value != undefined) ? this._normalize(value) : null;

			this.fixPrefix = false; // if true, function format will not search for the
			// best prefix but leave it as initially provided.
			// fixPrefix is set true by the method Unit.to

			// The justification behind this is that if the constructor is explicitly called,
			// the caller wishes the units to be returned exactly as he supplied.
			this.isUnitListSimplified = true;

		}

		/**
   * Attach type information
   */
		Unit.prototype.type = 'Unit';
		Unit.prototype.isUnit = true;

		// private variables and functions for the Unit parser
		var text, index, c;

		function skipWhitespace() {
			while (c == ' ' || c == '\t') {
				next();
			}
		}

		function isDigitDot(c) {
			return ((c >= '0' && c <= '9') || c == '.');
		}

		function isDigit(c) {
			return ((c >= '0' && c <= '9'));
		}

		function next() {
			index++;
			c = text.charAt(index);
		}

		function revert(oldIndex) {
			index = oldIndex;
			c = text.charAt(index);
		}

		function parseNumber() {
			var number = '';
			var oldIndex;
			oldIndex = index;

			if (c == '+') {
				next();
			}
			else if (c == '-') {
				number += c;
				next();
			}

			if (!isDigitDot(c)) {
				// a + or - must be followed by a digit
				revert(oldIndex);
				return null;
			}

			// get number, can have a single dot
			if (c == '.') {
				number += c;
				next();
				if (!isDigit(c)) {
					// this is no legal number, it is just a dot
					revert(oldIndex);
					return null;
				}
			}
			else {
				while (isDigit(c)) {
					number += c;
					next();
				}
				if (c == '.') {
					number += c;
					next();
				}
			}
			while (isDigit(c)) {
				number += c;
				next();
			}

			// check for exponential notation like "2.3e-4" or "1.23e50"
			if (c == 'E' || c == 'e') {
				// The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"

				var tentativeNumber = '';
				var tentativeIndex = index;

				tentativeNumber += c;
				next();

				if (c == '+' || c == '-') {
					tentativeNumber += c;
					next();
				}

				// Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)
				if (!isDigit(c)) {
					// The e or E must belong to something else, so return the number without the e or E.
					revert(tentativeIndex);
					return number;
				}
      
				// We can now safely say that this is scientific notation.
				number = number + tentativeNumber;
				while (isDigit(c)) {
					number += c;
					next();
				}
			}

			return number;
		}

		function parseUnit() {
			var unitName = '';

			// Alphanumeric characters only; matches [a-zA-Z0-9]
			var code = text.charCodeAt(index);
			while ( (code >= 48 && code <= 57) ||
            (code >= 65 && code <= 90) ||
            (code >= 97 && code <= 122)) {
				unitName += c;
				next();
				code = text.charCodeAt(index);
			}

			// Must begin with [a-zA-Z]
			code = unitName.charCodeAt(0);
			if ((code >= 65 && code <= 90) ||
        (code >= 97 && code <= 122)) {
				return unitName || null;
			} 
			else {
				return null;
			}
		}

		function parseCharacter(toFind) {
			if (c === toFind) {
				next();
				return toFind;
			}
			else {
				return null;
			}
		}

		/**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */
		Unit.parse = function (str, options) {
			options = options || {};
			text = str;
			index = -1;
			c = '';

			if (typeof text !== 'string') {
				throw new TypeError('Invalid argument in Unit.parse, string expected');
			}

			var unit = new Unit();
			unit.units = [];

			// A unit should follow this pattern:
			// [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]

			// Rules:
			// number is any floating point number.
			// unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
			// The string may optionally begin with a number.
			// Each unit may optionally be followed by ^number.
			// Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
			//   2m^2kg/s^2
			// it is not good form. If a unit starts with e, then it could be confused as a floating point number:
			//   4erg

			next();
			skipWhitespace();
			// Optional number at the start of the string
			var valueStr = parseNumber();
			var value = null;
			if(valueStr) {
				if (config.number === 'BigNumber') {
					value = new type.BigNumber(valueStr);
				}
				else if (config.number === 'Fraction') {
					value = new type.Fraction(valueStr);
				}
				else { // number
					value = parseFloat(valueStr);
				}
			}
			skipWhitespace();    // Whitespace is not required here

			// Next, we read any number of unit[^number]
			var powerMultiplierCurrent = 1;
			var expectingUnit = false;

			// Stack to keep track of powerMultipliers applied to each parentheses group
			var powerMultiplierStack = [];

			// Running product of all elements in powerMultiplierStack
			var powerMultiplierStackProduct = 1;

			while (true) {
				skipWhitespace();

				// Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
				// A '(' will always appear directly before a unit.
				while (c === '(') {
					powerMultiplierStack.push(powerMultiplierCurrent);
					powerMultiplierStackProduct *= powerMultiplierCurrent;
					powerMultiplierCurrent = 1;
					next();
					skipWhitespace();
				}

				// Is there something here?
				if(c) {
					var oldC = c;
					var uStr = parseUnit();
					if(uStr == null) {
						throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
					}
				}
				else {
					// End of input.
					break;
				}

				// Verify the unit exists and get the prefix (if any)
				var res = _findUnit(uStr);
				if(res == null) {
					// Unit not found.
					throw new SyntaxError('Unit "' + uStr + '" not found.');
				}

				var power = powerMultiplierCurrent * powerMultiplierStackProduct;
				// Is there a "^ number"?
				skipWhitespace();
				if (parseCharacter('^')) {
					skipWhitespace();
					var p = parseNumber();
					if(p == null) {
						// No valid number found for the power!
						throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
					}
					power *= p;
				}

				// Add the unit to the list
				unit.units.push( {
					unit: res.unit,
					prefix: res.prefix,
					power: power
				});
				for(var i=0; i<BASE_DIMENSIONS.length; i++) {
					unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
				}

				// Check for and consume closing parentheses, popping from the stack.
				// A ')' will always follow a unit.
				skipWhitespace();
				while (c === ')') {
					if(powerMultiplierStack.length === 0) {
						throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
					}
					powerMultiplierStackProduct /= powerMultiplierStack.pop();
					next();
					skipWhitespace();
				}

				// "*" and "/" should mean we are expecting something to come next.
				// Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.
				expectingUnit = false;

				if (parseCharacter('*')) {
					// explicit multiplication
					powerMultiplierCurrent = 1;
					expectingUnit = true;
				}
				else if (parseCharacter('/')) {
					// division
					powerMultiplierCurrent = -1;
					expectingUnit = true;
				}
				else {
					// implicit multiplication
					powerMultiplierCurrent = 1;
				}

				// Replace the unit into the auto unit system
				if(res.unit.base) {
					var baseDim = res.unit.base.key;
					UNIT_SYSTEMS.auto[baseDim] = {
						unit: res.unit,
						prefix: res.prefix
					};
				}
			}
    
			// Has the string been entirely consumed?
			skipWhitespace();
			if(c) {
				throw new SyntaxError('Could not parse: "' + str + '"');
			}

			// Is there a trailing slash?
			if(expectingUnit) {
				throw new SyntaxError('Trailing characters: "' + str + '"');
			}

			// Is the parentheses stack empty?
			if(powerMultiplierStack.length !== 0) {
				throw new SyntaxError('Unmatched "(" in "' + text + '"');
			}

			// Are there any units at all?
			if(unit.units.length == 0 && !options.allowNoUnits) {
				throw new SyntaxError('"' + str + '" contains no units');
			}

			unit.value = (value != undefined) ? unit._normalize(value) : null;
			return unit;
		};

		/**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */
		Unit.prototype.clone = function () {
			var unit = new Unit();

			unit.fixPrefix = this.fixPrefix;
			unit.isUnitListSimplified = this.isUnitListSimplified;

			unit.value = clone(this.value);
			unit.dimensions = this.dimensions.slice(0);
			unit.units = [];
			for(var i = 0; i < this.units.length; i++) {
				unit.units[i] = { };
				for (var p in this.units[i]) {
					if (this.units[i].hasOwnProperty(p)) {
						unit.units[i][p] = this.units[i][p];
					}
				}
			}

			return unit;
		};

		/**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */
		Unit.prototype._isDerived = function() {
			if(this.units.length === 0) {
				return false;
			}
			return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
		};

		/**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */
		Unit.prototype._normalize = function (value) {
			var unitValue, unitOffset, unitPower, unitPrefixValue;
			var convert;

			if (value == null || this.units.length === 0) {
				return value;
			}
			else if (this._isDerived()) {
				// This is a derived unit, so do not apply offsets.
				// For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
				var res = value;
				convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

				for(var i=0; i < this.units.length; i++) {
					unitValue       = convert(this.units[i].unit.value);
					unitPrefixValue = convert(this.units[i].prefix.value);
					unitPower       = convert(this.units[i].power);
					res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
				}

				return res;
			}
			else {
				// This is a single unit of power 1, like kg or degC
				convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

				unitValue       = convert(this.units[0].unit.value);
				unitOffset      = convert(this.units[0].unit.offset);
				unitPrefixValue = convert(this.units[0].prefix.value);

				return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
			}
		};

		/**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */
		Unit.prototype._denormalize = function (value, prefixValue) {
			var unitValue, unitOffset, unitPower, unitPrefixValue;
			var convert;

			if (value == null || this.units.length === 0) {
				return value;
			}
			else if (this._isDerived()) {
				// This is a derived unit, so do not apply offsets.
				// For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
				// Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
				var res = value;
				convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

				for (var i = 0; i < this.units.length; i++) {
					unitValue       = convert(this.units[i].unit.value);
					unitPrefixValue = convert(this.units[i].prefix.value);
					unitPower       = convert(this.units[i].power);
					res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
				}

				return res;
			}
			else {
				// This is a single unit of power 1, like kg or degC
				convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

				unitValue       = convert(this.units[0].unit.value);
				unitPrefixValue = convert(this.units[0].prefix.value);
				unitOffset      = convert(this.units[0].unit.offset);

				if (prefixValue == undefined) {
					return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
				}
				else {
					return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
				}
			}
		};

		/**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */
		function _findUnit(str) {
  
			// First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
			if(UNITS.hasOwnProperty(str)) {
				var unit = UNITS[str];
				var prefix = unit.prefixes[''];
				return {
					unit: unit,
					prefix: prefix
				};
			}

			for (var name in UNITS) {
				if (UNITS.hasOwnProperty(name)) {
					if (endsWith(str, name)) {
						var unit = UNITS[name];
						var prefixLen = (str.length - name.length);
						var prefixName = str.substring(0, prefixLen);
						var prefix = unit.prefixes[prefixName];
						if (prefix !== undefined) {
							// store unit, prefix, and value
							return {
								unit: unit,
								prefix: prefix
							};
						}
					}
				}
			}

			return null;
		}

		/**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */
		Unit.isValuelessUnit = function (name) {
			return (_findUnit(name) != null);
		};

		/**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */
		Unit.prototype.hasBase = function (base) {

			if(typeof(base) === "string") {
				base = BASE_UNITS[base];
			}

			if(!base)
				return false;


			// All dimensions must be the same
			for(var i=0; i<BASE_DIMENSIONS.length; i++) {
				if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
					return false;
				}
			}
			return true;

		};

		/**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */
		Unit.prototype.equalBase = function (other) {
			// All dimensions must be the same
			for(var i=0; i<BASE_DIMENSIONS.length; i++) {
				if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
					return false;
				}
			}
			return true;
		};

		/**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */
		Unit.prototype.equals = function (other) {
			return (this.equalBase(other) && equal(this.value, other.value));
		};

		/**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */
		Unit.prototype.multiply = function (other) {
			var res = this.clone();
    
			for(var i = 0; i<BASE_DIMENSIONS.length; i++) {
				// Dimensions arrays may be of different lengths. Default to 0.
				res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
			}

			// Append other's units list onto res (simplify later in Unit.prototype.format)
			for(var i=0; i<other.units.length; i++) {
				// Make a deep copy
				var inverted = {};
				for(var key in other.units[i]) {
					inverted[key] = other.units[i][key];
				}
				res.units.push(inverted);
			}

			// If at least one operand has a value, then the result should also have a value
			if(this.value != null || other.value != null) {
				var valThis = this.value == null ? this._normalize(1) : this.value;
				var valOther = other.value == null ? other._normalize(1) : other.value;
				res.value = multiply(valThis, valOther);
			}
			else {
				res.value = null;
			}

			// Trigger simplification of the unit list at some future time
			res.isUnitListSimplified = false;

			return getNumericIfUnitless(res);
		};

		/**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */
		Unit.prototype.divide = function (other) {
			var res = this.clone();
    
			for(var i=0; i<BASE_DIMENSIONS.length; i++) {
				// Dimensions arrays may be of different lengths. Default to 0.
				res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
			}

			// Invert and append other's units list onto res (simplify later in Unit.prototype.format)
			for(var i=0; i<other.units.length; i++) {
				// Make a deep copy
				var inverted = {};
				for(var key in other.units[i]) {
					inverted[key] = other.units[i][key];
				}
				inverted.power = -inverted.power;
				res.units.push(inverted);
			}

			// If at least one operand has a value, the result should have a value
			if (this.value != null || other.value != null) {
				var valThis = this.value == null ? this._normalize(1) : this.value;
				var valOther = other.value == null ? other._normalize(1) : other.value;
				res.value = divide(valThis, valOther);
			}
			else {
				res.value = null;
			}

			// Trigger simplification of the unit list at some future time
			res.isUnitListSimplified = false;

			return getNumericIfUnitless(res);
		};

		/**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */
		Unit.prototype.pow = function (p) {
			var res = this.clone();
    
			for(var i=0; i<BASE_DIMENSIONS.length; i++) {
				// Dimensions arrays may be of different lengths. Default to 0.
				res.dimensions[i] = (this.dimensions[i] || 0) * p;
			}

			// Adjust the power of each unit in the list
			for(var i=0; i<res.units.length; i++) {
				res.units[i].power *= p;
			}

			if(res.value != null) {
				res.value = pow(res.value, p);

				// only allow numeric output, we don't want to return a Complex number
				//if (!isNumeric(res.value)) {
				//  res.value = NaN;
				//}
				// Update: Complex supported now
			}
			else {
				res.value = null;
			}

			// Trigger lazy evaluation of the unit list
			res.isUnitListSimplified = false;

			return getNumericIfUnitless(res);
		};

		/**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */
		var getNumericIfUnitless = function(unit) {
			if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
				return unit.value;
			}
			else {
				return unit;
			}
		};
    

		/**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */
		Unit.prototype.abs = function () {
			// This gives correct, but unexpected, results for units with an offset.
			// For example, abs(-283.15 degC) = -263.15 degC !!!
			var ret = this.clone();
			ret.value = abs(ret.value);

			for(var i in ret.units) {
				if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
					ret.units[i].unit = UNITS["W"];
				}
			}

			return ret;
		};

		/**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */
		Unit.prototype.to = function (valuelessUnit) {
			var other;
			var value = this.value == null ? this._normalize(1) : this.value;
			if (typeof valuelessUnit === 'string') {
				//other = new Unit(null, valuelessUnit);
				other = Unit.parse(valuelessUnit);
				if (!this.equalBase(other)) {
					throw new Error('Units do not match');
				}
				if (other.value !== null) {
					throw new Error('Cannot convert to a unit with a value');
				}

				other.value = clone(value);
				other.fixPrefix = true;
				other.isUnitListSimplified = true;
				return other;
			}
			else if (valuelessUnit && valuelessUnit.isUnit) {
				if (!this.equalBase(valuelessUnit)) {
					throw new Error('Units do not match');
				}
				if (valuelessUnit.value !== null) {
					throw new Error('Cannot convert to a unit with a value');
				}
				other = valuelessUnit.clone();
				other.value = clone(value);
				other.fixPrefix = true;
				other.isUnitListSimplified = true;
				return other;
			}
			else {
				throw new Error('String or Unit expected as parameter');
			}
		};

		/**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
		// TODO: deprecate Unit.toNumber? It's always better to use toNumeric
		Unit.prototype.toNumber = function (valuelessUnit) {
			return toNumber(this.toNumeric(valuelessUnit));
		};

		/**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */
		Unit.prototype.toNumeric = function (valuelessUnit) {
			var other = this;
			if(valuelessUnit) {
				// Allow getting the numeric value without converting to a different unit
				other = this.to(valuelessUnit);
			}

			if(other._isDerived()) {
				return other._denormalize(other.value);
			}
			else {
				return other._denormalize(other.value, other.units[0].prefix.value);
			}
		};

		/**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */
		Unit.prototype.toString = function () {
			return this.format();
		};

		/**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */
		Unit.prototype.toJSON = function () {
			return {
				mathjs: 'Unit',
				value: this._denormalize(this.value),
				unit: this.formatUnits(),
				fixPrefix: this.fixPrefix
			};
		};

		/**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */
		Unit.fromJSON = function (json) {
			var unit = new Unit(json.value, json.unit);
			unit.fixPrefix = json.fixPrefix || false;
			return unit;
		};

		/**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */
		Unit.prototype.valueOf = Unit.prototype.toString;

		/**
   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the "best" units for formatting.
   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.
   */
		Unit.prototype.simplifyUnitListLazy = function() {

			if (this.isUnitListSimplified || this.value == null) {
				return;
			}

			var proposedUnitList = [];

			// Search for a matching base
			var matchingBase;
			for(var key in currentUnitSystem) {
				if(this.hasBase(BASE_UNITS[key])) {
					matchingBase = key;
					break;
				}
			}

			if(matchingBase === 'NONE')
			{
				this.units = [];
			}
			else {
				var matchingUnit;
				if(matchingBase) {
					// Does the unit system have a matching unit?
					if(currentUnitSystem.hasOwnProperty(matchingBase)) {
						matchingUnit = currentUnitSystem[matchingBase];
					}
				}
				var value;
				var str;
				if(matchingUnit) {
					this.units = [{
						unit: matchingUnit.unit,
						prefix: matchingUnit.prefix,
						power: 1.0
					}];
				}
				else {
					// Multiple units or units with powers are formatted like this:
					// 5 (kg m^2) / (s^3 mol)
					// Build an representation from the base units of the current unit system
					var missingBaseDim = false;
					for(var i=0; i<BASE_DIMENSIONS.length; i++) {
						var baseDim = BASE_DIMENSIONS[i];
						if(Math.abs(this.dimensions[i] || 0) > 1e-12) {
							if(currentUnitSystem.hasOwnProperty(baseDim)) {
								proposedUnitList.push({
									unit: currentUnitSystem[baseDim].unit,
									prefix: currentUnitSystem[baseDim].prefix,
									power: this.dimensions[i] || 0
								});
							}
							else {
								missingBaseDim = true;
							}
						}
					}
					var util = require('util');

					// Is the proposed unit list "simpler" than the existing one?
					if(proposedUnitList.length < this.units.length && !missingBaseDim) {
						// Replace this unit list with the proposed list
						this.units = proposedUnitList;
					}
				}
			}

			this.isUnitListSimplified = true;
		};

		/**
   * Get a string representation of the units of this Unit, without the value.
   * @memberof Unit
   * @return {string}
   */
		Unit.prototype.formatUnits = function () {

			// Lazy evaluation of the unit list
			this.simplifyUnitListLazy();

			var strNum = "";
			var strDen = "";
			var nNum = 0;
			var nDen = 0;

			for(var i=0; i<this.units.length; i++) {
				if(this.units[i].power > 0) {
					nNum++;
					strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
					if(Math.abs(this.units[i].power - 1.0) > 1e-15) {
						strNum += "^" + this.units[i].power;
					}
				}
				else if(this.units[i].power < 0) {
					nDen++;
				}
			}

			if(nDen > 0) {
				for(var i=0; i<this.units.length; i++) {
					if(this.units[i].power < 0) {
						if(nNum > 0) {
							strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
							if(Math.abs(this.units[i].power + 1.0) > 1e-15) {
								strDen += "^" + (-this.units[i].power);
							}
						}
						else {
							strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
							strDen += "^" + (this.units[i].power);
						}
					}
				}
			}
			// Remove leading " "
			strNum = strNum.substr(1);
			strDen = strDen.substr(1);

			// Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting
			if(nNum > 1 && nDen > 0) {
				strNum = "(" + strNum + ")";
			}
			if(nDen > 1 && nNum > 0) {
				strDen = "(" + strDen + ")";
			}

			var str = strNum;
			if(nNum > 0 && nDen > 0) {
				str += " / ";
			}
			str += strDen;

			return str;
		};

		/**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */
		Unit.prototype.format = function (options) {

			// Simplfy the unit list, if necessary
			this.simplifyUnitListLazy();

			// Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.
			var isImaginary = false;
			var isReal = true;
			if(typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {
				// TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
				isImaginary = Math.abs(this.value.re) < 1e-14;
				isReal = Math.abs(this.value.im) < 1e-14;
			}
    
			for(var i in this.units) {
				if(this.units[i].unit) {
					if(this.units[i].unit.name === 'VA' && isImaginary) {
						this.units[i].unit = UNITS["VAR"];
					}
					else if(this.units[i].unit.name === 'VAR' && !isImaginary) {
						this.units[i].unit = UNITS["VA"];
					}
				}
			}


			// Now apply the best prefix
			// Units must have only one unit and not have the fixPrefix flag set
			if (this.units.length === 1 && !this.fixPrefix) {
				// Units must have integer powers, otherwise the prefix will change the
				// outputted value by not-an-integer-power-of-ten
				if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
					// Apply the best prefix
					this.units[0].prefix = this._bestPrefix();
				}
			}


			var value = this._denormalize(this.value);
			var str = (this.value !== null) ? format(value, options || {}) : '';
			var unitStr = this.formatUnits();
			if(this.value && this.value.isComplex) {
				str = "(" + str + ")";    // Surround complex values with ( ) to enable better parsing 
			}
			if(unitStr.length > 0 && str.length > 0) {
				str += " ";
			}
			str += unitStr;

			return str;
		};

		/**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */
		Unit.prototype._bestPrefix = function () {
			if (this.units.length !== 1) {
				throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
			}
			if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
				throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
			}

			// find the best prefix value (resulting in the value of which
			// the absolute value of the log10 is closest to zero,
			// though with a little offset of 1.2 for nicer values: you get a
			// sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...

			// Note: the units value can be any numeric type, but to find the best
			// prefix it's enough to work with limited precision of a regular number
			// Update: using mathjs abs since we also allow complex numbers
			var absValue = abs(this.value);
			var absUnitValue = abs(this.units[0].unit.value);
			var bestPrefix = this.units[0].prefix;
			if (absValue === 0) {
				return bestPrefix;
			}
			var power = this.units[0].power;
			var bestDiff = Math.abs(
				Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

			var prefixes = this.units[0].unit.prefixes;
			for (var p in prefixes) {
				if (prefixes.hasOwnProperty(p)) {
					var prefix = prefixes[p];
					if (prefix.scientific) {

						var diff = Math.abs(
							Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

						if (diff < bestDiff
              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {
							// choose the prefix with the smallest diff, or if equal, choose the one
							// with the shortest name (can happen with SHORTLONG for example)
							bestPrefix = prefix;
							bestDiff = diff;
						}
					}
				}
			}

			return bestPrefix;
		};

		/**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units. 
   *
   *   Example:
   *
   *   var u = new Unit(1, 'm');
   *   u.splitUnit(['feet', 'inch']);
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */
		Unit.prototype.splitUnit = function(parts) {

			var x = this.clone();
			var ret = [];
			for(var i=0; i<parts.length; i++) {
				x = x.to(parts[i]);
				if(i==parts.length-1) break;
				// fix rounds a number towards 0
				var fixedVal = fix(x.toNumeric());
				var y = new Unit(fixedVal, parts[i].toString());
				ret.push(y);
				x = subtract(x, y);
			}
			ret.push(x);

			return ret;
		};

		var PREFIXES = {
			NONE: {
				'': {name: '', value: 1, scientific: true}
			},
			SHORT: {
				'': {name: '', value: 1, scientific: true},

				'da': {name: 'da', value: 1e1, scientific: false},
				'h': {name: 'h', value: 1e2, scientific: false},
				'k': {name: 'k', value: 1e3, scientific: true},
				'M': {name: 'M', value: 1e6, scientific: true},
				'G': {name: 'G', value: 1e9, scientific: true},
				'T': {name: 'T', value: 1e12, scientific: true},
				'P': {name: 'P', value: 1e15, scientific: true},
				'E': {name: 'E', value: 1e18, scientific: true},
				'Z': {name: 'Z', value: 1e21, scientific: true},
				'Y': {name: 'Y', value: 1e24, scientific: true},

				'd': {name: 'd', value: 1e-1, scientific: false},
				'c': {name: 'c', value: 1e-2, scientific: false},
				'm': {name: 'm', value: 1e-3, scientific: true},
				'u': {name: 'u', value: 1e-6, scientific: true},
				'n': {name: 'n', value: 1e-9, scientific: true},
				'p': {name: 'p', value: 1e-12, scientific: true},
				'f': {name: 'f', value: 1e-15, scientific: true},
				'a': {name: 'a', value: 1e-18, scientific: true},
				'z': {name: 'z', value: 1e-21, scientific: true},
				'y': {name: 'y', value: 1e-24, scientific: true}
			},
			LONG: {
				'': {name: '', value: 1, scientific: true},

				'deca': {name: 'deca', value: 1e1, scientific: false},
				'hecto': {name: 'hecto', value: 1e2, scientific: false},
				'kilo': {name: 'kilo', value: 1e3, scientific: true},
				'mega': {name: 'mega', value: 1e6, scientific: true},
				'giga': {name: 'giga', value: 1e9, scientific: true},
				'tera': {name: 'tera', value: 1e12, scientific: true},
				'peta': {name: 'peta', value: 1e15, scientific: true},
				'exa': {name: 'exa', value: 1e18, scientific: true},
				'zetta': {name: 'zetta', value: 1e21, scientific: true},
				'yotta': {name: 'yotta', value: 1e24, scientific: true},

				'deci': {name: 'deci', value: 1e-1, scientific: false},
				'centi': {name: 'centi', value: 1e-2, scientific: false},
				'milli': {name: 'milli', value: 1e-3, scientific: true},
				'micro': {name: 'micro', value: 1e-6, scientific: true},
				'nano': {name: 'nano', value: 1e-9, scientific: true},
				'pico': {name: 'pico', value: 1e-12, scientific: true},
				'femto': {name: 'femto', value: 1e-15, scientific: true},
				'atto': {name: 'atto', value: 1e-18, scientific: true},
				'zepto': {name: 'zepto', value: 1e-21, scientific: true},
				'yocto': {name: 'yocto', value: 1e-24, scientific: true}
			},
			SQUARED: {
				'': {name: '', value: 1, scientific: true},

				'da': {name: 'da', value: 1e2, scientific: false},
				'h': {name: 'h', value: 1e4, scientific: false},
				'k': {name: 'k', value: 1e6, scientific: true},
				'M': {name: 'M', value: 1e12, scientific: true},
				'G': {name: 'G', value: 1e18, scientific: true},
				'T': {name: 'T', value: 1e24, scientific: true},
				'P': {name: 'P', value: 1e30, scientific: true},
				'E': {name: 'E', value: 1e36, scientific: true},
				'Z': {name: 'Z', value: 1e42, scientific: true},
				'Y': {name: 'Y', value: 1e48, scientific: true},

				'd': {name: 'd', value: 1e-2, scientific: false},
				'c': {name: 'c', value: 1e-4, scientific: false},
				'm': {name: 'm', value: 1e-6, scientific: true},
				'u': {name: 'u', value: 1e-12, scientific: true},
				'n': {name: 'n', value: 1e-18, scientific: true},
				'p': {name: 'p', value: 1e-24, scientific: true},
				'f': {name: 'f', value: 1e-30, scientific: true},
				'a': {name: 'a', value: 1e-36, scientific: true},
				'z': {name: 'z', value: 1e-42, scientific: true},
				'y': {name: 'y', value: 1e-48, scientific: true}
			},
			CUBIC: {
				'': {name: '', value: 1, scientific: true},

				'da': {name: 'da', value: 1e3, scientific: false},
				'h': {name: 'h', value: 1e6, scientific: false},
				'k': {name: 'k', value: 1e9, scientific: true},
				'M': {name: 'M', value: 1e18, scientific: true},
				'G': {name: 'G', value: 1e27, scientific: true},
				'T': {name: 'T', value: 1e36, scientific: true},
				'P': {name: 'P', value: 1e45, scientific: true},
				'E': {name: 'E', value: 1e54, scientific: true},
				'Z': {name: 'Z', value: 1e63, scientific: true},
				'Y': {name: 'Y', value: 1e72, scientific: true},

				'd': {name: 'd', value: 1e-3, scientific: false},
				'c': {name: 'c', value: 1e-6, scientific: false},
				'm': {name: 'm', value: 1e-9, scientific: true},
				'u': {name: 'u', value: 1e-18, scientific: true},
				'n': {name: 'n', value: 1e-27, scientific: true},
				'p': {name: 'p', value: 1e-36, scientific: true},
				'f': {name: 'f', value: 1e-45, scientific: true},
				'a': {name: 'a', value: 1e-54, scientific: true},
				'z': {name: 'z', value: 1e-63, scientific: true},
				'y': {name: 'y', value: 1e-72, scientific: true}
			},
			BINARY_SHORT: {
				'': {name: '', value: 1, scientific: true},
				'k': {name: 'k', value: 1e3, scientific: true},
				'M': {name: 'M', value: 1e6, scientific: true},
				'G': {name: 'G', value: 1e9, scientific: true},
				'T': {name: 'T', value: 1e12, scientific: true},
				'P': {name: 'P', value: 1e15, scientific: true},
				'E': {name: 'E', value: 1e18, scientific: true},
				'Z': {name: 'Z', value: 1e21, scientific: true},
				'Y': {name: 'Y', value: 1e24, scientific: true},

				'Ki': {name: 'Ki', value: 1024, scientific: true},
				'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},
				'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},
				'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},
				'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},
				'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},
				'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},
				'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}
			},
			BINARY_LONG: {
				'': {name: '', value: 1, scientific: true},
				'kilo': {name: 'kilo', value: 1e3, scientific: true},
				'mega': {name: 'mega', value: 1e6, scientific: true},
				'giga': {name: 'giga', value: 1e9, scientific: true},
				'tera': {name: 'tera', value: 1e12, scientific: true},
				'peta': {name: 'peta', value: 1e15, scientific: true},
				'exa': {name: 'exa', value: 1e18, scientific: true},
				'zetta': {name: 'zetta', value: 1e21, scientific: true},
				'yotta': {name: 'yotta', value: 1e24, scientific: true},

				'kibi': {name: 'kibi', value: 1024, scientific: true},
				'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},
				'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},
				'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},
				'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},
				'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},
				'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},
				'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}
			},
			BTU: {
				'':   {name: '',   value: 1,   scientific: true},
				'MM': {name: 'MM', value: 1e6, scientific: true}
			}
		};

		// Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):
		PREFIXES.SHORTLONG = {};
		for (var key in PREFIXES.SHORT) {
			if(PREFIXES.SHORT.hasOwnProperty(key)) {
				PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
			}
		}
		for (var key in PREFIXES.LONG) {
			if(PREFIXES.LONG.hasOwnProperty(key)) {
				PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
			}
		}

		/* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

		var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];

		var BASE_UNITS = {
			NONE: {
				dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
			},
			MASS: {
				dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
			},
			LENGTH: {
				dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
			},
			TIME: {
				dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
			},
			CURRENT: {
				dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
			},
			TEMPERATURE: {
				dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
			},
			LUMINOUS_INTENSITY: {
				dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
			},
			AMOUNT_OF_SUBSTANCE: {
				dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
			},

			FORCE: {
				dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
			},
			SURFACE: {
				dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
			},
			VOLUME: {
				dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
			},
			ENERGY: {
				dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
			},
			POWER: {
				dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
			},
			PRESSURE: {
				dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
			},

			ELECTRIC_CHARGE: {
				dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
			},
			ELECTRIC_CAPACITANCE: {
				dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
			},
			ELECTRIC_POTENTIAL: {
				dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
			},
			ELECTRIC_RESISTANCE: {
				dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
			},
			ELECTRIC_INDUCTANCE: {
				dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
			},
			ELECTRIC_CONDUCTANCE: {
				dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
			},
			MAGNETIC_FLUX: {
				dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
			},
			MAGNETIC_FLUX_DENSITY: {
				dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
			},

			FREQUENCY: {
				dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
			},
			ANGLE: {
				dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
			},
			BIT: {
				dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
			}
		};

		for(var key in BASE_UNITS) {
			BASE_UNITS[key].key = key;
		}

		var BASE_UNIT_NONE = {};

		var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};

		var UNITS = {
			// length
			meter: {
				name: 'meter',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			inch: {
				name: 'inch',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.0254,
				offset: 0
			},
			foot: {
				name: 'foot',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.3048,
				offset: 0
			},
			yard: {
				name: 'yard',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.9144,
				offset: 0
			},
			mile: {
				name: 'mile',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 1609.344,
				offset: 0
			},
			link: {
				name: 'link',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.201168,
				offset: 0
			},
			rod: {
				name: 'rod',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 5.029210,
				offset: 0
			},
			chain: {
				name: 'chain',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 20.1168,
				offset: 0
			},
			angstrom: {
				name: 'angstrom',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 1e-10,
				offset: 0
			},

			m: {
				name: 'm',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			'in': {
				name: 'in',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.0254,
				offset: 0
			},
			ft: {
				name: 'ft',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.3048,
				offset: 0
			},
			yd: {
				name: 'yd',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.9144,
				offset: 0
			},
			mi: {
				name: 'mi',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 1609.344,
				offset: 0
			},
			li: {
				name: 'li',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.201168,
				offset: 0
			},
			rd: {
				name: 'rd',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 5.029210,
				offset: 0
			},
			ch: {
				name: 'ch',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 20.1168,
				offset: 0
			},
			mil: {
				name: 'mil',
				base: BASE_UNITS.LENGTH,
				prefixes: PREFIXES.NONE,
				value: 0.0000254,
				offset: 0
			}, // 1/1000 inch

			// Surface
			m2: {
				name: 'm2',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.SQUARED,
				value: 1,
				offset: 0
			},
			sqin: {
				name: 'sqin',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 0.00064516,
				offset: 0
			}, // 645.16 mm2
			sqft: {
				name: 'sqft',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 0.09290304,
				offset: 0
			}, // 0.09290304 m2
			sqyd: {
				name: 'sqyd',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 0.83612736,
				offset: 0
			}, // 0.83612736 m2
			sqmi: {
				name: 'sqmi',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 2589988.110336,
				offset: 0
			}, // 2.589988110336 km2
			sqrd: {
				name: 'sqrd',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 25.29295,
				offset: 0
			}, // 25.29295 m2
			sqch: {
				name: 'sqch',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 404.6873,
				offset: 0
			}, // 404.6873 m2
			sqmil: {
				name: 'sqmil',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 6.4516e-10,
				offset: 0
			}, // 6.4516 * 10^-10 m2
			acre: {
				name: 'acre',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 4046.86,
				offset: 0
			}, // 4046.86 m2
			hectare: {
				name: 'hectare',
				base: BASE_UNITS.SURFACE,
				prefixes: PREFIXES.NONE,
				value: 10000,
				offset: 0
			}, // 10000 m2

			// Volume
			m3: {
				name: 'm3',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.CUBIC,
				value: 1,
				offset: 0
			},
			L: {
				name: 'L',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.SHORT,
				value: 0.001,
				offset: 0
			}, // litre
			l: {
				name: 'l',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.SHORT,
				value: 0.001,
				offset: 0
			}, // litre
			litre: {
				name: 'litre',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.LONG,
				value: 0.001,
				offset: 0
			},
			cuin: {
				name: 'cuin',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 1.6387064e-5,
				offset: 0
			}, // 1.6387064e-5 m3
			cuft: {
				name: 'cuft',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.028316846592,
				offset: 0
			}, // 28.316 846 592 L
			cuyd: {
				name: 'cuyd',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.764554857984,
				offset: 0
			}, // 764.554 857 984 L
			teaspoon: {
				name: 'teaspoon',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.000005,
				offset: 0
			}, // 5 mL
			tablespoon: {
				name: 'tablespoon',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.000015,
				offset: 0
			}, // 15 mL
			//{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
			drop: {
				name: 'drop',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 5e-8,
				offset: 0
			},  // 0.05 mL = 5e-8 m3
			gtt: {
				name: 'gtt',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 5e-8,
				offset: 0
			},  // 0.05 mL = 5e-8 m3

			// Liquid volume
			minim: {
				name: 'minim',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.00000006161152,
				offset: 0
			}, // 0.06161152 mL
			fluiddram: {
				name: 'fluiddram',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0000036966911,
				offset: 0
			},  // 3.696691 mL
			fluidounce: {
				name: 'fluidounce',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.00002957353,
				offset: 0
			}, // 29.57353 mL
			gill: {
				name: 'gill',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0001182941,
				offset: 0
			}, // 118.2941 mL
			cc: {
				name: 'cc',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 1e-6,
				offset: 0
			}, // 1e-6 L
			cup: {
				name: 'cup',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0002365882,
				offset: 0
			}, // 236.5882 mL
			pint: {
				name: 'pint',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0004731765,
				offset: 0
			}, // 473.1765 mL
			quart: {
				name: 'quart',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0009463529,
				offset: 0
			}, // 946.3529 mL
			gallon: {
				name: 'gallon',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.003785412,
				offset: 0
			}, // 3.785412 L
			beerbarrel: {
				name: 'beerbarrel',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.1173478,
				offset: 0
			}, // 117.3478 L
			oilbarrel: {
				name: 'oilbarrel',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.1589873,
				offset: 0
			}, // 158.9873 L
			hogshead: {
				name: 'hogshead',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.2384810,
				offset: 0
			}, // 238.4810 L

			//{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
			fldr: {
				name: 'fldr',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0000036966911,
				offset: 0
			},  // 3.696691 mL
			floz: {
				name: 'floz',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.00002957353,
				offset: 0
			}, // 29.57353 mL
			gi: {
				name: 'gi',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0001182941,
				offset: 0
			}, // 118.2941 mL
			cp: {
				name: 'cp',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0002365882,
				offset: 0
			}, // 236.5882 mL
			pt: {
				name: 'pt',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0004731765,
				offset: 0
			}, // 473.1765 mL
			qt: {
				name: 'qt',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.0009463529,
				offset: 0
			}, // 946.3529 mL
			gal: {
				name: 'gal',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.003785412,
				offset: 0
			}, // 3.785412 L
			bbl: {
				name: 'bbl',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.1173478,
				offset: 0
			}, // 117.3478 L
			obl: {
				name: 'obl',
				base: BASE_UNITS.VOLUME,
				prefixes: PREFIXES.NONE,
				value: 0.1589873,
				offset: 0
			}, // 158.9873 L
			//{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?

			// Mass
			g: {
				name: 'g',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.SHORT,
				value: 0.001,
				offset: 0
			},
			gram: {
				name: 'gram',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.LONG,
				value: 0.001,
				offset: 0
			},

			ton: {
				name: 'ton',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.SHORT,
				value: 907.18474,
				offset: 0
			},
			tonne: {
				name: 'tonne',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.SHORT,
				value: 1000,
				offset: 0
			},

			grain: {
				name: 'grain',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 64.79891e-6,
				offset: 0
			},
			dram: {
				name: 'dram',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 1.7718451953125e-3,
				offset: 0
			},
			ounce: {
				name: 'ounce',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 28.349523125e-3,
				offset: 0
			},
			poundmass: {
				name: 'poundmass',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 453.59237e-3,
				offset: 0
			},
			hundredweight: {
				name: 'hundredweight',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 45.359237,
				offset: 0
			},
			stick: {
				name: 'stick',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 115e-3,
				offset: 0
			},
			stone: {
				name: 'stone',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 6.35029318,
				offset: 0
			},

			gr: {
				name: 'gr',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 64.79891e-6,
				offset: 0
			},
			dr: {
				name: 'dr',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 1.7718451953125e-3,
				offset: 0
			},
			oz: {
				name: 'oz',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 28.349523125e-3,
				offset: 0
			},
			lbm: {
				name: 'lbm',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 453.59237e-3,
				offset: 0
			},
			cwt: {
				name: 'cwt',
				base: BASE_UNITS.MASS,
				prefixes: PREFIXES.NONE,
				value: 45.359237,
				offset: 0
			},

			// Time
			s: {
				name: 's',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			min: {
				name: 'min',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 60,
				offset: 0
			},
			h: {
				name: 'h',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 3600,
				offset: 0
			},
			second: {
				name: 'second',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			sec: {
				name: 'sec',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			minute: {
				name: 'minute',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 60,
				offset: 0
			},
			hour: {
				name: 'hour',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 3600,
				offset: 0
			},
			day: {
				name: 'day',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 86400,
				offset: 0
			},
			week: {
				name: 'week',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 7*86400,
				offset: 0
			},
			month: {
				name: 'month',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 2629800, //1/12th of Julian year
				offset: 0
			},
			year: {
				name: 'year',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 31557600, //Julian year
				offset: 0
			},
			decade: {
				name: 'year',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 315576000, //Julian decade
				offset: 0
			},
			century: {
				name: 'century',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 3155760000, //Julian century
				offset: 0
			},
			millennium: {
				name: 'millennium',
				base: BASE_UNITS.TIME,
				prefixes: PREFIXES.NONE,
				value: 31557600000, //Julian millennium
				offset: 0
			},

			// Frequency
			hertz: {
				name: 'Hertz',
				base: BASE_UNITS.FREQUENCY,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0,
				reciprocal: true
			},
			Hz: {
				name: 'Hz',
				base: BASE_UNITS.FREQUENCY,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0,
				reciprocal: true
			},

			// Angle
			rad: {
				name: 'rad',
				base: BASE_UNITS.ANGLE,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 0
			},
			// deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
			deg: {
				name: 'deg',
				base: BASE_UNITS.ANGLE,
				prefixes: PREFIXES.NONE,
				value: null, // will be filled in by calculateAngleValues()
				offset: 0
			},
			// grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
			grad: {
				name: 'grad',
				base: BASE_UNITS.ANGLE,
				prefixes: PREFIXES.NONE,
				value: null, // will be filled in by calculateAngleValues()
				offset: 0
			},
			// cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
			cycle: {
				name: 'cycle',
				base: BASE_UNITS.ANGLE,
				prefixes: PREFIXES.NONE,
				value: null, // will be filled in by calculateAngleValues()
				offset: 0
			},
			// arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
			arcsec: {
				name: 'arcsec',
				base: BASE_UNITS.ANGLE,
				prefixes: PREFIXES.NONE,
				value: null, // will be filled in by calculateAngleValues()
				offset: 0
			},
			// arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
			arcmin: {
				name: 'arcmin',
				base: BASE_UNITS.ANGLE,
				prefixes: PREFIXES.NONE,
				value: null, // will be filled in by calculateAngleValues()
				offset: 0
			},
    
			// Electric current
			A: {
				name: 'A',
				base: BASE_UNITS.CURRENT,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			ampere: {
				name: 'ampere',
				base: BASE_UNITS.CURRENT,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},

			// Temperature
			// K(C) = °C + 273.15
			// K(F) = (°F + 459.67) / 1.8
			// K(R) = °R / 1.8
			K: {
				name: 'K',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 0
			},
			degC: {
				name: 'degC',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 273.15
			},
			degF: {
				name: 'degF',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1 / 1.8,
				offset: 459.67
			},
			degR: {
				name: 'degR',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1 / 1.8,
				offset: 0
			},
			kelvin: {
				name: 'kelvin',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 0
			},
			celsius: {
				name: 'celsius',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 273.15
			},
			fahrenheit: {
				name: 'fahrenheit',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1 / 1.8,
				offset: 459.67
			},
			rankine: {
				name: 'rankine',
				base: BASE_UNITS.TEMPERATURE,
				prefixes: PREFIXES.NONE,
				value: 1 / 1.8,
				offset: 0
			},

			// amount of substance
			mol: {
				name: 'mol',
				base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			mole: {
				name: 'mole',
				base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},

			// luminous intensity
			cd: {
				name: 'cd',
				base: BASE_UNITS.LUMINOUS_INTENSITY,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 0
			},
			candela: {
				name: 'candela',
				base: BASE_UNITS.LUMINOUS_INTENSITY,
				prefixes: PREFIXES.NONE,
				value: 1,
				offset: 0
			},
			// TODO: units STERADIAN
			//{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
			//{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},

			// Force
			N: {
				name: 'N',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			newton: {
				name: 'newton',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			dyn: {
				name: 'dyn',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.SHORT,
				value: 0.00001,
				offset: 0
			},
			dyne: {
				name: 'dyne',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.LONG,
				value: 0.00001,
				offset: 0
			},
			lbf: {
				name: 'lbf',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.NONE,
				value: 4.4482216152605,
				offset: 0
			},
			poundforce: {
				name: 'poundforce',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.NONE,
				value: 4.4482216152605,
				offset: 0
			},
			kip: {
				name: 'kip',
				base: BASE_UNITS.FORCE,
				prefixes: PREFIXES.LONG,
				value: 4448.2216,
				offset: 0
			},
	
			// Energy
			J: {
				name: 'J',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			joule: {
				name: 'joule',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			erg: {
				name: 'erg',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.NONE,
				value: 1e-5,
				offset: 0
			},
			Wh: {
				name: 'Wh',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.SHORT,
				value: 3600,
				offset: 0
			},
			BTU: {
				name: 'BTU',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.BTU,
				value: 1055.05585262,
				offset: 0
			},
			eV: {
				name: 'eV',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.SHORT,
				value: 1.602176565e-19,
				offset: 0
			},
			electronvolt: {
				name: 'electronvolt',
				base: BASE_UNITS.ENERGY,
				prefixes: PREFIXES.LONG,
				value: 1.602176565e-19,
				offset: 0
			},


			// Power
			W: {
				name: 'W',
				base: BASE_UNITS.POWER,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			watt: {
				name: 'W',
				base: BASE_UNITS.POWER,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			hp: {
				name: 'hp',
				base: BASE_UNITS.POWER,
				prefixes: PREFIXES.NONE,
				value: 745.6998715386,
				offset: 0
			},

			// Electrical power units
			VAR: {
				name: 'VAR',
				base: BASE_UNITS.POWER,
				prefixes: PREFIXES.SHORT,
				value: Complex.I,
				offset: 0
			},
    
			VA: {
				name: 'VA',
				base: BASE_UNITS.POWER,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},

			// Pressure
			Pa: {
				name: 'Pa',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			psi: {
				name: 'psi',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 6894.75729276459,
				offset: 0
			},
			atm: {
				name: 'atm',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 101325,
				offset: 0
			},
			bar: {
				name: 'bar',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 100000,
				offset: 0
			},
			torr: {
				name: 'torr',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 133.322,
				offset: 0
			},
			mmHg: {
				name: 'mmHg',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 133.322,
				offset: 0
			},
			mmH2O: {
				name: 'mmH2O',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 9.80665,
				offset: 0
			},
			cmH2O: {
				name: 'cmH2O',
				base: BASE_UNITS.PRESSURE,
				prefixes: PREFIXES.NONE,
				value: 98.0665,
				offset: 0
			},

			// Electric charge
			coulomb: {
				name: 'coulomb',
				base: BASE_UNITS.ELECTRIC_CHARGE,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			C: {
				name: 'C',
				base: BASE_UNITS.ELECTRIC_CHARGE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			// Electric capacitance
			farad: {
				name: 'farad',
				base: BASE_UNITS.ELECTRIC_CAPACITANCE,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			F: {
				name: 'F',
				base: BASE_UNITS.ELECTRIC_CAPACITANCE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			// Electric potential
			volt: {
				name: 'volt',
				base: BASE_UNITS.ELECTRIC_POTENTIAL,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			V: {
				name: 'V',
				base: BASE_UNITS.ELECTRIC_POTENTIAL,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			// Electric resistance
			ohm: {
				name: 'ohm',
				base: BASE_UNITS.ELECTRIC_RESISTANCE,
				prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable
				value: 1,
				offset: 0
			},
			/*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
			// Electric inductance
			henry: {
				name: 'henry',
				base: BASE_UNITS.ELECTRIC_INDUCTANCE,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			H: {
				name: 'H',
				base: BASE_UNITS.ELECTRIC_INDUCTANCE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			// Electric conductance
			siemens: {
				name: 'siemens',
				base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			S: {
				name: 'S',
				base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			// Magnetic flux
			weber: {
				name: 'weber',
				base: BASE_UNITS.MAGNETIC_FLUX,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			Wb: {
				name: 'Wb',
				base: BASE_UNITS.MAGNETIC_FLUX,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},
			// Magnetic flux density
			tesla: {
				name: 'tesla',
				base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
				prefixes: PREFIXES.LONG,
				value: 1,
				offset: 0
			},
			T: {
				name: 'T',
				base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
				prefixes: PREFIXES.SHORT,
				value: 1,
				offset: 0
			},

			// Binary
			b: {
				name: 'b',
				base: BASE_UNITS.BIT,
				prefixes: PREFIXES.BINARY_SHORT,
				value: 1,
				offset: 0
			},
			bits: {
				name: 'bits',
				base: BASE_UNITS.BIT,
				prefixes: PREFIXES.BINARY_LONG,
				value: 1,
				offset: 0
			},
			B: {
				name: 'B',
				base: BASE_UNITS.BIT,
				prefixes: PREFIXES.BINARY_SHORT,
				value: 8,
				offset: 0
			},
			bytes: {
				name: 'bytes',
				base: BASE_UNITS.BIT,
				prefixes: PREFIXES.BINARY_LONG,
				value: 8,
				offset: 0
			}
		};

		// aliases (formerly plurals)
		var ALIASES = {
			meters: 'meter',
			inches: 'inch',
			feet: 'foot',
			yards: 'yard',
			miles: 'mile',
			links: 'link',
			rods: 'rod',
			chains: 'chain',
			angstroms: 'angstrom',

			lt: 'l',
			litres: 'litre',
			liter: 'litre',
			liters: 'litre',
			teaspoons: 'teaspoon',
			tablespoons: 'tablespoon',
			minims: 'minim',
			fluiddrams: 'fluiddram',
			fluidounces: 'fluidounce',
			gills: 'gill',
			cups: 'cup',
			pints: 'pint',
			quarts: 'quart',
			gallons: 'gallon',
			beerbarrels: 'beerbarrel',
			oilbarrels: 'oilbarrel',
			hogsheads: 'hogshead',
			gtts: 'gtt',

			grams: 'gram',
			tons: 'ton',
			tonnes: 'tonne',
			grains: 'grain',
			drams: 'dram',
			ounces: 'ounce',
			poundmasses: 'poundmass',
			hundredweights: 'hundredweight',
			sticks: 'stick',
			lb: 'lbm',
			lbs: 'lbm',
	
			kips: 'kip',

			acres: 'acre',
			hectares: 'hectare',
			sqfeet: 'sqft',
			sqyard: 'sqyd',
			sqmile: 'sqmi',
			sqmiles: 'sqmi',

			mmhg: 'mmHg',
			mmh2o: 'mmH2O',
			cmh2o: 'cmH2O',

			seconds: 'second',
			secs: 'second',
			minutes: 'minute',
			mins: 'minute',
			hours: 'hour',
			hr: 'hour',
			hrs: 'hour',
			days: 'day',
			weeks: 'week',
			months: 'month',
			years: 'year',

			hertz: 'hertz',

			radians: 'rad',
			degree: 'deg',
			degrees: 'deg',
			gradian: 'grad',
			gradians: 'grad',
			cycles: 'cycle',
			arcsecond: 'arcsec',
			arcseconds: 'arcsec',
			arcminute: 'arcmin',
			arcminutes: 'arcmin',

			BTUs: 'BTU',
			watts: 'watt',
			joules: 'joule',

			amperes: 'ampere',
			coulombs: 'coulomb',
			volts: 'volt',
			ohms: 'ohm',
			farads: 'farad',
			webers: 'weber',
			teslas: 'tesla',
			electronvolts: 'electronvolt',
			moles: 'mole'

		};

		/**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */
		function calculateAngleValues (config) {
			if (config.number === 'BigNumber') {
				var pi = constants.pi(type.BigNumber);
				UNITS.rad.value = new type.BigNumber(1);
				UNITS.deg.value = pi.div(180);        // 2 * pi / 360;
				UNITS.grad.value = pi.div(200);       // 2 * pi / 400;
				UNITS.cycle.value = pi.times(2);      // 2 * pi
				UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600
				UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60
			}
			else { // number
				UNITS.rad.value = 1;
				UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;
				UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;
				UNITS.cycle.value = Math.PI * 2;        // 2 * pi
				UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;
				UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;
			}
		}

		// apply the angle values now
		calculateAngleValues(config);

		// recalculate the values on change of configuration
		math.on('config', function (curr, prev) {
			if (curr.number !== prev.number) {
				calculateAngleValues(curr);
			}
		});

		/**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */
		var UNIT_SYSTEMS = {
			si: {
				// Base units
				NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},
				LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},
				MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, 
				TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, 
				CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, 
				TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, 
				LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, 
				AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, 
				ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, 
				BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, 

				// Derived units
				FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, 
				ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},
				POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},
				PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},
				ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},
				ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},
				ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},
				ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},
				ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},
				ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},
				MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},
				MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},
				FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}
			}
		};

		// Clone to create the other unit systems
		UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
		UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};
		UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};
		UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};
		UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};
		// there are wholly 4 unique cgs systems for electricity and magnetism,
		// so let's not worry about it unless somebody complains
  
		UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
		UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};
		UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};
		UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};
		UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};
		UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};
		UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};
		UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};

		// Add additional unit systems here.



		// Choose a unit system to seed the auto unit system.
		UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));

		// Set the current unit system
		var currentUnitSystem = UNIT_SYSTEMS.auto;

		/**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */
		Unit.setUnitSystem = function(name) {
			if(UNIT_SYSTEMS.hasOwnProperty(name)) {
				currentUnitSystem = UNIT_SYSTEMS[name];
			}
			else {
				throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
			}
		};

		/**
   * Return the current unit system.
   * @return {string} The current unit system.
   */
		Unit.getUnitSystem = function() {
			for(var key in UNIT_SYSTEMS) {
				if(UNIT_SYSTEMS[key] === currentUnitSystem) {
					return key;
				}
			}
		};

		/**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */
		Unit.typeConverters = {
			BigNumber: function (x) {
				return new type.BigNumber(x + ''); // stringify to prevent constructor error
			},

			Fraction: function (x) {
				return new type.Fraction(x);
			},

			Complex: function (x) {
				return x;
			},

			number: function (x) {
				return x;
			}
		};

		/**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */
		Unit._getNumberConverter = function (type) {
			if (!Unit.typeConverters[type]) {
				throw new TypeError('Unsupported type "' + type + '"');
			}

			return Unit.typeConverters[type];
		};

		// Add dimensions to each built-in unit
		for (var key in UNITS) {
			var unit = UNITS[key];
			unit.dimensions = unit.base.dimensions;
		}    

		// Create aliases
		for (var name in ALIASES) {
			if(ALIASES.hasOwnProperty(name)) {
				var unit = UNITS[ALIASES[name]];
				var alias = {};
				for(var key in unit) {
					if(unit.hasOwnProperty(key)) {
						alias[key] = unit[key];
					}
				}
				alias.name = name;
				UNITS[name] = alias;
			}
		}

		function assertUnitNameIsValid(name) {
			for(var i=0; i<name.length; i++) {
				var c = name.charAt(i);
       
				var isValidAlpha = function (p) {
					return /^[a-zA-Z]$/.test(p);
				};

				var isDigit = function (c) {
					return (c >= '0' && c <= '9');
				};

				if(i === 0 && !isValidAlpha(c))
					throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');

				if(i > 0 && !( isValidAlpha(c)
                  || isDigit(c)))
					throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');

			}
		}

		/**
   * Wrapper around createUnitSingle.
   * Example: 
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  }, 
   *  {
   *    override: true;
   *  });
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */
		Unit.createUnit = function(obj, options) {
    
			if(typeof(obj) !== 'object') {
				throw new TypeError("createUnit expects first parameter to be of type 'Object'");
			}

			// Remove all units and aliases we are overriding
			if(options && options.override) {
				for(var key in obj) {
					if(obj.hasOwnProperty(key)) {
						Unit.deleteUnit(key);
					}
					if(obj[key].aliases) {
						console.log(obj[key].aliases);
						for(var i=0; i<obj[key].aliases.length; i++) {
							Unit.deleteUnit(obj[key].aliases[i]);
						}
					}
				}
			}

			// TODO: traverse multiple times until all units have been added
			var lastUnit;
			for(var key in obj) {
				if(obj.hasOwnProperty(key)) {
					lastUnit = Unit.createUnitSingle(key, obj[key]);
				}
			}
			return lastUnit;
		};

		/**
   * Create a user-defined unit and register it with the Unit type.
   * Example: 
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
   *
   * @return {Unit} 
   */
		Unit.createUnitSingle = function(name, obj, options) {

			if(typeof(obj) === 'undefined' || obj === null) {
				obj = {};
			}
    
			if(typeof(name) !== 'string') {
				throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
			}
   
			// Check collisions with existing units
			if(UNITS.hasOwnProperty(name)) {
				throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
			}

			// TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.

			assertUnitNameIsValid(name);

			var defUnit = null;   // The Unit from which the new unit will be created.
			var aliases = [];
			var offset = 0;
			var definition;
			var prefixes;
			if(obj && obj.type === 'Unit') {
				defUnit = obj.clone();
			}
			else if(typeof(obj) === 'string') {
				if(obj !== '') {
					definition = obj;
				}
			}
			else if(typeof(obj) === 'object') {
				definition = obj.definition;
				prefixes = obj.prefixes; 
				offset = obj.offset;
				aliases = obj.aliases;
			}
			else {
				throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
			}

			if(aliases) {
				for (var i=0; i<aliases.length; i++) {
					if(UNITS.hasOwnProperty(aliases[i])) {
						throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
					}
				}
			}

			if(definition && typeof(definition) === 'string' && !defUnit) {
				try {
					defUnit = Unit.parse(definition, {allowNoUnits: true});
				}
				catch (ex) {
					ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
					throw(ex);
				}
			}
			else if(definition && definition.type === 'Unit') {
				defUnit = definition.clone();
			}

			aliases = aliases || [];
			offset = offset || 0;
			if(prefixes && prefixes.toUpperCase) 
				prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
			else
				prefixes = PREFIXES.NONE;


			// If defUnit is null, it is because the user did not
			// specify a defintion. So create a new base dimension.
			var newUnit = {};
			if(!defUnit) {
				// Add a new base dimension
				var baseName = name + "_STUFF";   // foo --> foo_STUFF, or the essence of foo
				if(BASE_DIMENSIONS.indexOf(baseName) >= 0) {
					throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
				}
				BASE_DIMENSIONS.push(baseName);

				// Push 0 onto existing base units
				for(var b in BASE_UNITS) {
					if(BASE_UNITS.hasOwnProperty(b)) {
						BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length-1] = 0;
					}
				}

				// Add the new base unit
				var newBaseUnit = { dimensions: [] };
				for(var i=0; i<BASE_DIMENSIONS.length; i++) {
					newBaseUnit.dimensions[i] = 0;
				}
				newBaseUnit.dimensions[BASE_DIMENSIONS.length-1] = 1;
				newBaseUnit.key = baseName;
				BASE_UNITS[baseName] = newBaseUnit;
       
				newUnit = {
					name: name,
					value: 1,
					dimensions: BASE_UNITS[baseName].dimensions.slice(0),
					prefixes: prefixes,
					offset: offset,
					base: baseName
				};

				currentUnitSystem[baseName] = {
					unit: newUnit,
					prefix: PREFIXES.NONE['']
				};

			}
			else {

				newUnit = {
					name: name,
					value: defUnit.value,
					dimensions: defUnit.dimensions.slice(0),
					prefixes: prefixes,
					offset: offset,
				};
      
				// Create a new base if no matching base exists
				var anyMatch = false;
				for(var i in BASE_UNITS) {
					if(BASE_UNITS.hasOwnProperty(i)) {
						var match = true;
						for(var j=0; j<BASE_DIMENSIONS.length; j++) {
							if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
								match = false;
								break;
							}
						}
						if(match) {
							anyMatch = true;
							break;
						}
					}
				}
				if(!anyMatch) {
					var baseName = name + "_STUFF";   // foo --> foo_STUFF, or the essence of foo
					// Add the new base unit
					var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
					newBaseUnit.key = baseName;
					BASE_UNITS[baseName] = newBaseUnit;

					currentUnitSystem[baseName] = {
						unit: newUnit,
						prefix: PREFIXES.NONE['']
					};

					newUnit.base = baseName;
				}
			}

			Unit.UNITS[name] = newUnit;

			for (var i=0; i<aliases.length; i++) {
				var aliasName = aliases[i];
				var alias = {};
				for(var key in newUnit) {
					if(newUnit.hasOwnProperty(key)) {
						alias[key] = newUnit[key];
					}
				}
				alias.name = aliasName;
				Unit.UNITS[aliasName] = alias;
			}

			return new Unit(null, name);
		};

		Unit.deleteUnit = function(name) {
			delete Unit.UNITS[name];
		};


		Unit.PREFIXES = PREFIXES;
		Unit.BASE_UNITS = BASE_UNITS;
		Unit.UNITS = UNITS;
		Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;

		return Unit;
	}

	exports.name = 'Unit';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

},{"../../function/arithmetic/abs":370,"../../function/arithmetic/addScalar":372,"../../function/arithmetic/divideScalar":377,"../../function/arithmetic/fix":382,"../../function/arithmetic/multiplyScalar":392,"../../function/arithmetic/pow":395,"../../function/arithmetic/subtract":400,"../../function/relational/equal":467,"../../function/string/format":486,"../../function/utils/isNumeric":522,"../../function/utils/typeof":526,"../../type/complex/Complex":537,"../../type/number":570,"../../utils/bignumber/constants":587,"../../utils/object":604,"../../utils/string":605,"util":792}],575:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples: 
   *
   *     math.createUnit('foo');
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts]});
   *     math.createUnit('mph', '1 mile/hour');
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
		var createUnit = typed('createUnit', {

			// General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
			'Object, Object': function(obj, options) {
				return type.Unit.createUnit(obj, options);
			},

			// Same as above but without the options.
			'Object': function(obj) {
				return type.Unit.createUnit(obj, {});
			},

			// Shortcut method for creating one unit.
			'string, Unit | string | Object, Object': function (name, def, options) {
				var obj = {};
				obj[name] = def;
				return type.Unit.createUnit(obj, options);
			},

			// Same as above but without the options.
			'string, Unit | string | Object': function (name, def) {
				var obj = {};
				obj[name] = def;
				return type.Unit.createUnit(obj, {});
			},

			// Without a definition, creates a base unit.
			'string': function (name) {
				var obj = {};
				obj[name] = {};
				return type.Unit.createUnit(obj, {});
			},
		});

		return createUnit;
	}

	exports.name = 'createUnit';
	exports.factory = factory;

},{"../../../utils/collection/deepMap":595}],576:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../../utils/collection/deepMap');

	function factory (type, config, load, typed) {

		/**
   * Returns an array of units whose sum is equal to this unit
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     splitUnit(new Unit(1, 'm'), ['feet', 'inch']);
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */

		var splitUnit = typed('splitUnit', {
			'Unit, Array': function(unit, parts) {
				return unit.splitUnit(parts);
			}
		});

		return splitUnit;

	}

	exports.name = 'splitUnit';
	exports.factory = factory;

},{"../../../utils/collection/deepMap":595}],577:[function(require,module,exports){
	'use strict';

	var deepMap = require('../../../utils/collection/deepMap');

	function factory (type, config, load, typed) {
		/**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.type.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm
   *    var b = math.unit('23 kg');    // returns Unit 23 kg
   *    a.to('m');                     // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */

		var unit = typed('unit', {
			'Unit': function (x) {
				return x.clone();
			},

			'string': function (x) {
				if (type.Unit.isValuelessUnit(x)) {
					return new type.Unit(null, x); // a pure unit
				}

				return type.Unit.parse(x); // a unit with value, like '5cm'
			},

			'number | BigNumber | Fraction | Complex, string': function (value, unit) {
				return new type.Unit(value, unit);
			},

			'Array | Matrix': function (x) {
				return deepMap(x, unit);
			}
		});

		unit.toTex = {
			1: '\\left(${args[0]}\\right)',
			2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
		};

		return unit;
	}

	exports.name = 'unit';
	exports.factory = factory;

},{"../../../utils/collection/deepMap":595}],578:[function(require,module,exports){
	module.exports = [
		// type
		require('./Unit'),

		// construction function
		require('./function/unit'),

		// create new units
		require('./function/createUnit'),

		// split units
		require('./function/splitUnit'),

		// physical constants
		require('./physicalConstants')
	];

},{"./Unit":574,"./function/createUnit":575,"./function/splitUnit":576,"./function/unit":577,"./physicalConstants":579}],579:[function(require,module,exports){
	var lazy = require('../../utils/object').lazy;


	function factory (type, config, load, typed, math) {

		// helper function to create a unit with a fixed prefix
		function fixedUnit(str) {
			var unit = type.Unit.parse(str);
			unit.fixPrefix = true;
			return unit;
		}

		// Source: http://www.wikiwand.com/en/Physical_constant

		// Universal constants
		lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1');});
		lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2');});
		lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s');});
		lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s');});

		// Electromagnetic constants
		lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2');});
		lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1');});
		lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm');});
		lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2');});
		lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C');});
		lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1');});
		lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S');});
		lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm');});
		lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb');});
		lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1');});
		lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm');});
		//lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed

		// Atomic and nuclear constants
		lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m');});
		lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m');});
		lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg');});
		lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2');});
		lazy(math, 'fineStructure',           function () {return 7.297352569824e-3;});
		lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J');});
		lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg');});
		lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg');});
		lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg');});
		lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1');});
		lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1');});
		lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2');});
		lazy(math, 'weakMixingAngle',         function () {return 0.222321;});
		lazy(math, 'efimovFactor',            function () {return 22.7;});

		// Physico-chemical constants
		lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg');});
		lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1');});
		lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1');});
		lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1');});
		lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2');});
		// lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance
		lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3');});
		lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1');});
		lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1');});
		lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1');});
		lazy(math, 'sackurTetrode',       function () {return -1.164870823;});
		lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K');});
		lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4');});
		lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K');});

		// Adopted values
		lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1');});
		lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1');});
		lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2');});
		// atm is defined in Unit.js

		// Natural units
		lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m');});
		lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg');});
		lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s');});
		lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C');});
		lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K');});

	}

	exports.factory = factory;
	exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
	exports.math = true;   // request access to the math namespace

},{"../../utils/object":604}],580:[function(require,module,exports){
	'use strict';

	/**
 * Format a number using methods toPrecision, toFixed, toExponential.
 * @param {number | string} value
 * @constructor
 */
	function NumberFormatter (value) {
		// parse the input value
		var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
		if (!match) {
			throw new SyntaxError('Invalid number');
		}

		var sign         = match[1];
		var coefficients = match[2];
		var exponent     = parseFloat(match[4] || '0');

		var dot = coefficients.indexOf('.');
		exponent += (dot !== -1) ? (dot - 1) : (coefficients.length - 1);

		this.sign = sign;
		this.coefficients = coefficients
			.replace('.', '')  // remove the dot (must be removed before removing leading zeros)
			.replace(/^0*/, function (zeros) {
				// remove leading zeros, add their count to the exponent
				exponent -= zeros.length;
				return '';
			})
			.replace(/0*$/, '') // remove trailing zeros
			.split('')
			.map(function (d) {
				return parseInt(d);
			});

		if (this.coefficients.length === 0) {
			this.coefficients.push(0);
			exponent++;
		}

		this.exponent = exponent;
	}


	/**
 * Format a number with engineering notation.
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
	NumberFormatter.prototype.toEngineering = function(precision) {
		var rounded = this.roundDigits(precision);

		var e = rounded.exponent;
		var c = rounded.coefficients;

		// find nearest lower multiple of 3 for exponent
		var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));

		// concatenate coefficients with necessary zeros
		var significandsDiff = e >= 0 ? e : Math.abs(newExp);

		// add zeros if necessary (for ex: 1e+8)
		if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));

		// find difference in exponents
		var expDiff = Math.abs(e - newExp);

		var decimalIdx = 1;
		var str = '';

		// push decimal index over by expDiff times
		while (--expDiff >= 0) decimalIdx++;

		// if all coefficient values are zero after the decimal point, don't add a decimal value. 
		// otherwise concat with the rest of the coefficients
		var decimals = c.slice(decimalIdx).join('');
		var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';

		str = c.slice(0, decimalIdx).join('') + decimalVal;

		str += 'e' + (e >= 0 ? '+' : '') + newExp.toString();
		return rounded.sign + str;
	};

	/**
 * Format a number with fixed notation.
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
	NumberFormatter.prototype.toFixed = function (precision) {
		var rounded = this.roundDigits(this.exponent + 1 + (precision || 0));
		var c = rounded.coefficients;
		var p = rounded.exponent + 1; // exponent may have changed

		// append zeros if needed
		var pp = p + (precision || 0);
		if (c.length < pp) {
			c = c.concat(zeros(pp - c.length));
		}

		// prepend zeros if needed
		if (p < 0) {
			c = zeros(-p + 1).concat(c);
			p = 1;
		}

		// insert a dot if needed
		if (precision) {
			c.splice(p, 0, (p === 0) ? '0.' : '.');
		}

		return this.sign + c.join('');
	};

	/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */
	NumberFormatter.prototype.toExponential = function (precision) {
		// round if needed, else create a clone
		var rounded = precision ? this.roundDigits(precision) : this.clone();
		var c = rounded.coefficients;
		var e = rounded.exponent;

		// append zeros if needed
		if (c.length < precision) {
			c = c.concat(zeros(precision - c.length));
		}

		// format as `C.CCCe+EEE` or `C.CCCe-EEE`
		var first = c.shift();
		return this.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +
      'e' + (e >= 0 ? '+' : '') + e;
	};

	/**
 * Format a number with a certain precision
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lower: number | undefined, upper: number | undefined}} [options]
 *                                       By default:
 *                                         lower = 1e-3 (excl)
 *                                         upper = 1e+5 (incl)
 * @return {string}
 */
	NumberFormatter.prototype.toPrecision = function(precision, options) {
		// determine lower and upper bound for exponential notation.
		var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;
		var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;

		var abs = Math.abs(Math.pow(10, this.exponent));
		if (abs < lower || abs >= upper) {
			// exponential notation
			return this.toExponential(precision);
		}
		else {
			var rounded = precision ? this.roundDigits(precision) : this.clone();
			var c = rounded.coefficients;
			var e = rounded.exponent;

			// append trailing zeros
			if (c.length < precision) {
				c = c.concat(zeros(precision - c.length));
			}

			// append trailing zeros
			// TODO: simplify the next statement
			c = c.concat(zeros(e - c.length + 1 +
        (c.length < precision ? precision - c.length : 0)));

			// prepend zeros
			c = zeros(-e).concat(c);

			var dot = e > 0 ? e : 0;
			if (dot < c.length - 1) {
				c.splice(dot + 1, 0, '.');
			}

			return this.sign + c.join('');
		}
	};

	/**
 * Crete a clone of the NumberFormatter
 * @return {NumberFormatter} Returns a clone of the NumberFormatter
 */
	NumberFormatter.prototype.clone = function () {
		var clone = new NumberFormatter('0');
		clone.sign = this.sign;
		clone.coefficients = this.coefficients.slice(0);
		clone.exponent = this.exponent;
		return clone;
	};

	/**
 * Round the number of digits of a number *
 * @param {number} precision  A positive integer
 * @return {NumberFormatter}  Returns a new NumberFormatter with the rounded
 *                            digits
 */
	NumberFormatter.prototype.roundDigits = function (precision) {
		var rounded = this.clone();
		var c = rounded.coefficients;

		// prepend zeros if needed
		while (precision <= 0) {
			c.unshift(0);
			rounded.exponent++;
			precision++;
		}

		if (c.length > precision) {
			var removed = c.splice(precision, c.length - precision);

			if (removed[0] >= 5) {
				var i = precision - 1;
				c[i]++;
				while (c[i] === 10) {
					c.pop();
					if (i === 0) {
						c.unshift(0);
						rounded.exponent++;
						i++;
					}
					i--;
					c[i]++;
				}
			}
		}

		return rounded;
	};

	/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */
	function zeros(length) {
		var arr = [];
		for (var i = 0; i < length; i++) {
			arr.push(0);
		}
		return arr;
	}

	module.exports = NumberFormatter;

},{}],581:[function(require,module,exports){
	'use strict';

	var number = require('./number');
	var string = require('./string');
	var object = require('./object');
	var types = require('./types');

	var DimensionError = require('../error/DimensionError');
	var IndexError = require('../error/IndexError');

	/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */
	exports.size = function (x) {
		var s = [];

		while (Array.isArray(x)) {
			s.push(x.length);
			x = x[0];
		}

		return s;
	};

	/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */
	function _validate(array, size, dim) {
		var i;
		var len = array.length;

		if (len != size[dim]) {
			throw new DimensionError(len, size[dim]);
		}

		if (dim < size.length - 1) {
			// recursively validate each child array
			var dimNext = dim + 1;
			for (i = 0; i < len; i++) {
				var child = array[i];
				if (!Array.isArray(child)) {
					throw new DimensionError(size.length - 1, size.length, '<');
				}
				_validate(array[i], size, dimNext);
			}
		}
		else {
			// last dimension. none of the childs may be an array
			for (i = 0; i < len; i++) {
				if (Array.isArray(array[i])) {
					throw new DimensionError(size.length + 1, size.length, '>');
				}
			}
		}
	}

	/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */
	exports.validate = function(array, size) {
		var isScalar = (size.length == 0);
		if (isScalar) {
			// scalar
			if (Array.isArray(array)) {
				throw new DimensionError(array.length, 0);
			}
		}
		else {
			// array
			_validate(array, size, 0);
		}
	};

	/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */
	exports.validateIndex = function(index, length) {
		if (!number.isNumber(index) || !number.isInteger(index)) {
			throw new TypeError('Index must be an integer (value: ' + index + ')');
		}
		if (index < 0 || (typeof length === 'number' && index >= length)) {
			throw new IndexError(index, length);
		}
	};

	// a constant used to specify an undefined defaultValue
	exports.UNINITIALIZED = {};

	/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. To leave new entries undefined,
 *                              specify array.UNINITIALIZED as defaultValue
 * @return {Array} array         The resized array
 */
	exports.resize = function(array, size, defaultValue) {
		// TODO: add support for scalars, having size=[] ?

		// check the type of the arguments
		if (!Array.isArray(array) || !Array.isArray(size)) {
			throw new TypeError('Array expected');
		}
		if (size.length === 0) {
			throw new Error('Resizing to scalar is not supported');
		}

		// check whether size contains positive integers
		size.forEach(function (value) {
			if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
				throw new TypeError('Invalid size, must contain positive integers ' +
          '(size: ' + string.format(size) + ')');
			}
		});

		// recursively resize the array
		var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;
		_resize(array, size, 0, _defaultValue);

		return array;
	};

	/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */
	function _resize (array, size, dim, defaultValue) {
		var i;
		var elem;
		var oldLen = array.length;
		var newLen = size[dim];
		var minLen = Math.min(oldLen, newLen);

		// apply new length
		array.length = newLen;

		if (dim < size.length - 1) {
			// non-last dimension
			var dimNext = dim + 1;

			// resize existing child arrays
			for (i = 0; i < minLen; i++) {
				// resize child array
				elem = array[i];
				if (!Array.isArray(elem)) {
					elem = [elem]; // add a dimension
					array[i] = elem;
				}
				_resize(elem, size, dimNext, defaultValue);
			}

			// create new child arrays
			for (i = minLen; i < newLen; i++) {
				// get child array
				elem = [];
				array[i] = elem;

				// resize new child array
				_resize(elem, size, dimNext, defaultValue);
			}
		}
		else {
			// last dimension

			// remove dimensions of existing values
			for (i = 0; i < minLen; i++) {
				while (Array.isArray(array[i])) {
					array[i] = array[i][0];
				}
			}

			if(defaultValue !== exports.UNINITIALIZED) {
				// fill new elements with the default value
				for (i = minLen; i < newLen; i++) {
					array[i] = defaultValue;
				}
			}
		}
	}

	/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */
	exports.squeeze = function(array, size) {
		var s = size || exports.size(array);

		// squeeze outer dimensions
		while (Array.isArray(array) && array.length === 1) {
			array = array[0];
			s.shift();
		}

		// find the first dimension to be squeezed
		var dims = s.length;
		while (s[dims - 1] === 1) {
			dims--;
		}

		// squeeze inner dimensions
		if (dims < s.length) {
			array = _squeeze(array, dims, 0);
			s.length = dims;
		}

		return array;
	};

	/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */
	function _squeeze (array, dims, dim) {
		var i, ii;

		if (dim < dims) {
			var next = dim + 1;
			for (i = 0, ii = array.length; i < ii; i++) {
				array[i] = _squeeze(array[i], dims, next);
			}
		}
		else {
			while (Array.isArray(array)) {
				array = array[0];
			}
		}

		return array;
	}

	/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 * 
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 * 
 * @param {Array} array
 * @param {number} dims     Desired number of dimensions of the array
 * @param {number} [outer]  Number of outer dimensions to be added
 * @param {Array} [size]    Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */
	exports.unsqueeze = function(array, dims, outer, size) {
		var s = size || exports.size(array);

		// unsqueeze outer dimensions
		if (outer) {
			for (var i = 0; i < outer; i++) {
				array = [array];
				s.unshift(1);
			}
		}

		// unsqueeze inner dimensions
		array = _unsqueeze(array, dims, 0);
		while (s.length < dims) {
			s.push(1);
		}

		return array;
	};

	/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */
	function _unsqueeze (array, dims, dim) {
		var i, ii;

		if (Array.isArray(array)) {
			var next = dim + 1;
			for (i = 0, ii = array.length; i < ii; i++) {
				array[i] = _unsqueeze(array[i], dims, next);
			}
		}
		else {
			for (var d = dim; d < dims; d++) {
				array = [array];
			}
		}

		return array;
	}
	/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */
	exports.flatten = function(array) {
		if (!Array.isArray(array)) {
			//if not an array, return as is
			return array;
		}
		var flat = [];

		array.forEach(function callback(value) {
			if (Array.isArray(value)) {
				value.forEach(callback);  //traverse through sub-arrays recursively
			}
			else {
				flat.push(value);
			}
		});

		return flat;
	};

	/**
 * Test whether an object is an array
 * @param {*} value
 * @return {boolean} isArray
 */
	exports.isArray = Array.isArray;

},{"../error/DimensionError":125,"../error/IndexError":126,"./number":603,"./object":604,"./string":605,"./types":606}],582:[function(require,module,exports){
	var bitwise = require('./bitwise');

	/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
	module.exports = function bitAnd(x, y) {
		if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
			throw new Error('Integers expected in function bitAnd');
		}

		var BigNumber = x.constructor;
		if (x.isNaN() || y.isNaN()) {
			return new BigNumber(NaN);
		}

		if (x.isZero() || y.eq(-1) || x.eq(y)) {
			return x;
		}
		if (y.isZero() || x.eq(-1)) {
			return y;
		}

		if (!x.isFinite() || !y.isFinite()) {
			if (!x.isFinite() && !y.isFinite()) {
				if (x.isNegative() == y.isNegative()) {
					return x;
				}
				return new BigNumber(0);
			}
			if (!x.isFinite()) {
				if (y.isNegative()) {
					return x;
				}
				if (x.isNegative()) {
					return new BigNumber(0);
				}
				return y;
			}
			if (!y.isFinite()) {
				if (x.isNegative()) {
					return y;
				}
				if (y.isNegative()) {
					return new BigNumber(0);
				}
				return x;
			}
		}
		return bitwise(x, y, function (a, b) { return a & b; });
	};

},{"./bitwise":586}],583:[function(require,module,exports){
/**
 * Bitwise not
 * @param {BigNumber} value
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */
	module.exports = function bitNot (x) {
		if (x.isFinite() && !x.isInteger()) {
			throw new Error('Integer expected in function bitNot');
		}

		var BigNumber = x.constructor;
		var prevPrec = BigNumber.precision;
		BigNumber.config({precision: 1E9});

		var x = x.plus(new BigNumber(1));
		x.s = -x.s || null;

		BigNumber.config({precision: prevPrec});
		return x;
	};

},{}],584:[function(require,module,exports){
	var bitwise = require('./bitwise');

	/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */
	module.exports = function bitOr (x, y) {
		if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
			throw new Error('Integers expected in function bitOr');
		}

		var BigNumber = x.constructor;
		if (x.isNaN() || y.isNaN()) {
			return new BigNumber(NaN);
		}

		var negOne = new BigNumber(-1);
		if (x.isZero() || y.eq(negOne) || x.eq(y)) {
			return y;
		}
		if (y.isZero() || x.eq(negOne)) {
			return x;
		}

		if (!x.isFinite() || !y.isFinite()) {
			if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||
        (x.isNegative() && !y.isNegative() && !y.isFinite())) {
				return negOne;
			}
			if (x.isNegative() && y.isNegative()) {
				return x.isFinite() ? x : y;
			}
			return x.isFinite() ? y : x;
		}

		return bitwise(x, y, function (a, b) { return a | b; });
	};

},{"./bitwise":586}],585:[function(require,module,exports){
	var bitwise = require('./bitwise');
	var bitNot = require('./bitNot');

	/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */
	module.exports = function bitXor(x, y) {
		if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
			throw new Error('Integers expected in function bitXor');
		}

		var BigNumber = x.constructor;
		if (x.isNaN() || y.isNaN()) {
			return new BigNumber(NaN);
		}
		if (x.isZero()) {
			return y;
		}
		if (y.isZero()) {
			return x;
		}

		if (x.eq(y)) {
			return new BigNumber(0);
		}

		var negOne = new BigNumber(-1);
		if (x.eq(negOne)) {
			return bitNot(y);
		}
		if (y.eq(negOne)) {
			return bitNot(x);
		}

		if (!x.isFinite() || !y.isFinite()) {
			if (!x.isFinite() && !y.isFinite()) {
				return negOne;
			}
			return new BigNumber(x.isNegative() == y.isNegative()
				?  Infinity
				: -Infinity);
		}
		return bitwise(x, y, function (a, b) { return a ^ b; });
	};

},{"./bitNot":583,"./bitwise":586}],586:[function(require,module,exports){
	var bitNot = require('./bitNot');

	/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */
	module.exports = function bitwise(x, y, func) {
		var BigNumber = x.constructor;

		var xBits, yBits;
		var xSign = +(x.s < 0);
		var ySign = +(y.s < 0);
		if (xSign) {
			xBits = decCoefficientToBinaryString(bitNot(x));
			for (var i = 0; i < xBits.length; ++i) {
				xBits[i] ^= 1;
			}
		} else {
			xBits = decCoefficientToBinaryString(x);
		}
		if (ySign) {
			yBits = decCoefficientToBinaryString(bitNot(y));
			for (var i = 0; i < yBits.length; ++i) {
				yBits[i] ^= 1;
			}
		} else {
			yBits = decCoefficientToBinaryString(y);
		}

		var minBits, maxBits, minSign;
		if (xBits.length <= yBits.length) {
			minBits = xBits;
			maxBits = yBits;
			minSign = xSign;
		} else {
			minBits = yBits;
			maxBits = xBits;
			minSign = ySign;
		}

		var shortLen = minBits.length;
		var longLen = maxBits.length;
		var expFuncVal = func(xSign, ySign) ^ 1;
		var outVal = new BigNumber(expFuncVal ^ 1);
		var twoPower = new BigNumber(1);
		var two = new BigNumber(2);

		var prevPrec = BigNumber.precision;
		BigNumber.config({precision: 1E9});

		while (shortLen > 0) {
			if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
				outVal = outVal.plus(twoPower);
			}
			twoPower = twoPower.times(two);
		}
		while (longLen > 0) {
			if (func(minSign, maxBits[--longLen]) == expFuncVal) {
				outVal = outVal.plus(twoPower);
			}
			twoPower = twoPower.times(two);
		}

		BigNumber.config({precision: prevPrec});

		if (expFuncVal == 0) {
			outVal.s = -outVal.s;
		}
		return outVal;
	};

	/* Extracted from decimal.js, and edited to specialize. */
	function decCoefficientToBinaryString (x) {
		// Convert to string
		var a = x.d; // array with digits
		var r = a[0] + '';

		for (var i = 1; i < a.length; ++i) {
			var s = a[i] + '';
			for (var z = 7 - s.length; z--; ) {
				s = '0' + s;
			}

			r += s;
		}

		var j;
		for (j = r.length - 1; r.charAt(j) == '0'; --j);

		var xe = x.e;
		var str = r.slice(0, j + 1 || 1);
		var strL = str.length;
		if (xe > 0) {
			if (++xe > strL) {
				// Append zeros.
				for (xe -= strL; xe--; str += '0');
			} else if (xe < strL) {
				str = str.slice(0, xe) + '.' + str.slice(xe);
			}
		}

		// Convert from base 10 (decimal) to base 2
		var arr = [0];
		for (var i = 0; i < str.length; ) {
			for (var arrL = arr.length; arrL--; arr[arrL] *= 10);

			arr[0] += str.charAt(i++) << 0;  // convert to int
			for (var j = 0; j < arr.length; ++j) {
				if (arr[j] > 1) {
					if (arr[j + 1] == null) {
						arr[j + 1] = 0;
					}

					arr[j + 1] += arr[j] >> 1;
					arr[j] &= 1;
				}
			}
		}

		return arr.reverse();
	}

},{"./bitNot":583}],587:[function(require,module,exports){
	var memoize = require('../function').memoize;

	/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */
	exports.e = memoize(function (BigNumber) {
		return new BigNumber(1).exp();
	}, hasher);

	/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */
	exports.phi = memoize(function (BigNumber) {
		return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
	}, hasher);

	/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */
	exports.pi = memoize(function (BigNumber) {
		return pi = BigNumber.acos(-1);
	}, hasher);

	/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */
	exports.tau = memoize(function (BigNumber) {
		return exports.pi(BigNumber).times(2);
	}, hasher);

	/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */
	function hasher (args) {
		return args[0].precision;
	}

},{"../function":600}],588:[function(require,module,exports){
/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential' and
 *                                          'auto', `precision` defines the total
 *                                          number of significant digits returned
 *                                          and is undefined by default.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point, and is 0 by default.
 *                     {Object} exponential An object containing two parameters,
 *                                          {number} lower and {number} upper,
 *                                          used by notation 'auto' to determine
 *                                          when to return exponential notation.
 *                                          Default values are `lower=1e-3` and
 *                                          `upper=1e5`.
 *                                          Only applicable for notation `auto`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4);                                        // '6.4'
 *    format(1240000);                                    // '1.24e6'
 *    format(1/3);                                        // '0.3333333333333333'
 *    format(1/3, 3);                                     // '0.333'
 *    format(21385, 2);                                   // '21000'
 *    format(12.071, {notation: 'fixed'});                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
	exports.format = function (value, options) {
		if (typeof options === 'function') {
			// handle format(value, fn)
			return options(value);
		}

		// handle special cases
		if (!value.isFinite()) {
			return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');
		}

		// default values for options
		var notation = 'auto';
		var precision = undefined;

		if (options !== undefined) {
			// determine notation from options
			if (options.notation) {
				notation = options.notation;
			}

			// determine precision from options
			if (typeof options === 'number') {
				precision = options;
			}
			else if (options.precision) {
				precision = options.precision;
			}
		}

		// handle the various notations
		switch (notation) {
		case 'fixed':
			return exports.toFixed(value, precision);

		case 'exponential':
			return exports.toExponential(value, precision);

		case 'auto':
			// determine lower and upper bound for exponential notation.
			// TODO: implement support for upper and lower to be BigNumbers themselves
			var lower = 1e-3;
			var upper = 1e5;
			if (options && options.exponential) {
				if (options.exponential.lower !== undefined) {
					lower = options.exponential.lower;
				}
				if (options.exponential.upper !== undefined) {
					upper = options.exponential.upper;
				}
			}

			// adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)
			var oldConfig = {
				toExpNeg: value.constructor.toExpNeg,
				toExpPos: value.constructor.toExpPos
			};

			value.constructor.config({
				toExpNeg: Math.round(Math.log(lower) / Math.LN10),
				toExpPos: Math.round(Math.log(upper) / Math.LN10)
			});

			// handle special case zero
			if (value.isZero()) return '0';

			// determine whether or not to output exponential notation
			var str;
			var abs = value.abs();
			if (abs.gte(lower) && abs.lt(upper)) {
				// normal number notation
				str = value.toSignificantDigits(precision).toFixed();
			}
			else {
				// exponential notation
				str = exports.toExponential(value, precision);
			}

			// remove trailing zeros after the decimal point
			return str.replace(/((\.\d*?)(0+))($|e)/, function () {
				var digits = arguments[2];
				var e = arguments[4];
				return (digits !== '.') ? digits + e : e;
			});

		default:
			throw new Error('Unknown notation "' + notation + '". ' +
          'Choose "auto", "exponential", or "fixed".');
		}
	};

	/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */
	exports.toExponential = function (value, precision) {
		if (precision !== undefined) {
			return value.toExponential(precision - 1); // Note the offset of one
		}
		else {
			return value.toExponential();
		}
	};

	/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
	exports.toFixed = function (value, precision) {
		return value.toFixed(precision || 0);
		// Note: the (precision || 0) is needed as the toFixed of BigNumber has an
		// undefined default precision instead of 0.
	};

},{}],589:[function(require,module,exports){

	/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */
	module.exports = function leftShift (x, y) {
		if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
			throw new Error('Integers expected in function leftShift');
		}

		var BigNumber = x.constructor;
		if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
			return new BigNumber(NaN);
		}
		if (x.isZero() || y.isZero()) {
			return x;
		}
		if (!x.isFinite() && !y.isFinite()) {
			return new BigNumber(NaN);
		}

		// Math.pow(2, y) is fully precise for y < 55, and fast
		if (y.lt(55)) {
			return x.times(Math.pow(2, y.toNumber()) + '');
		}
		return x.times(new BigNumber(2).pow(y));
	};

},{}],590:[function(require,module,exports){
	'use strict';

	/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
	module.exports = function nearlyEqual(x, y, epsilon) {
		// if epsilon is null or undefined, test whether x and y are exactly equal
		if (epsilon == null) {
			return x.eq(y);
		}


		// use "==" operator, handles infinities
		if (x.eq(y)) {
			return true;
		}

		// NaN
		if (x.isNaN() || y.isNaN()) {
			return false;
		}

		// at this point x and y should be finite
		if(x.isFinite() && y.isFinite()) {
			// check numbers are very close, needed when comparing numbers near zero
			var diff = x.minus(y).abs();
			if (diff.isZero()) {
				return true;
			}
			else {
				// use relative error
				var max = x.constructor.max(x.abs(), y.abs());
				return diff.lte(max.times(epsilon));
			}
		}

		// Infinite and Number or negative Infinite and positive Infinite cases
		return false;
	};

},{}],591:[function(require,module,exports){
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */
	module.exports = function rightArithShift (x, y) {
		if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
			throw new Error('Integers expected in function rightArithShift');
		}

		var BigNumber = x.constructor;
		if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
			return new BigNumber(NaN);
		}
		if (x.isZero() || y.isZero()) {
			return x;
		}
		if (!y.isFinite()) {
			if (x.isNegative()) {
				return new BigNumber(-1);
			}
			if (!x.isFinite()) {
				return new BigNumber(NaN);
			}
			return new BigNumber(0);
		}

		// Math.pow(2, y) is fully precise for y < 55, and fast
		if (y.lt(55)) {
			return x.div(Math.pow(2, y.toNumber()) + '').floor();
		}
		return x.div(new BigNumber(2).pow(y)).floor();
	};

},{}],592:[function(require,module,exports){
	'use strict';

	/**
 * Test whether value is a boolean
 * @param {*} value
 * @return {boolean} isBoolean
 */
	exports.isBoolean = function(value) {
		return typeof value == 'boolean';
	};

},{}],593:[function(require,module,exports){
	'use strict';

	var isCollection = require('./isCollection');

	/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */
	module.exports = function containsCollections (array) {
		for (var i = 0; i < array.length; i++) {
			if (isCollection(array[i])) {
				return true;
			}
		}
		return false;
	};

},{"./isCollection":596}],594:[function(require,module,exports){
	'use strict';

	/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */
	module.exports = function deepForEach (array, callback) {
		if (array && array.isMatrix === true) {
			array = array.valueOf();
		}

		for (var i = 0, ii = array.length; i < ii; i++) {
			var value = array[i];

			if (Array.isArray(value)) {
				deepForEach(value, callback);
			}
			else {
				callback(value);
			}
		}
	};

},{}],595:[function(require,module,exports){
	'use strict';

	/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */
	module.exports = function deepMap(array, callback, skipZeros) {
		if (array && (typeof array.map === 'function')) {
			// TODO: replace array.map with a for loop to improve performance
			return array.map(function (x) {
				return deepMap(x, callback, skipZeros);
			});
		}
		else {
			return callback(array);
		}
	};

},{}],596:[function(require,module,exports){
	'use strict';

	/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */
	module.exports = function isCollection (x) {
		return (Array.isArray(x) || (x && x.isMatrix === true));
	};

},{}],597:[function(require,module,exports){
	'use strict';

	var arraySize = require('../array').size;
	var IndexError = require('../../error/IndexError');

	/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */
	module.exports = function(mat, dim, callback) {
		var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
		if (dim < 0 || (dim >= size.length)) {
			// TODO: would be more clear when throwing a DimensionError here
			throw new IndexError(dim, size.length);
		}

		if (mat && mat.isMatrix === true) {
			return mat.create(_reduce(mat.valueOf(), dim, callback));
		}else {
			return _reduce(mat, dim, callback);
		}
	};

	/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */
	function _reduce(mat, dim, callback){
		var i, ret, val, tran;

		if(dim<=0){
			if( !Array.isArray(mat[0]) ){
				val = mat[0];
				for(i=1; i<mat.length; i++){
					val = callback(val, mat[i]);
				}
				return val;
			}else{
				tran = _switch(mat);
				ret = [];
				for(i=0; i<tran.length; i++){
					ret[i] = _reduce(tran[i], dim-1, callback);
				}
				return ret;
			}
		}else{
			ret = [];
			for(i=0; i<mat.length; i++){
				ret[i] = _reduce(mat[i], dim-1, callback);
			}
			return ret;
		}
	}

	/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */
	function _switch(mat){
		var I = mat.length;
		var J = mat[0].length;
		var i, j;
		var ret = [];
		for( j=0; j<J; j++) {
			var tmp = [];
			for( i=0; i<I; i++) {
				tmp.push(mat[i][j]);
			}
			ret.push(tmp);
		}
		return ret;
	}

},{"../../error/IndexError":126,"../array":581}],598:[function(require,module,exports){
	'use strict';

	module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
		// a arrays
		var avalues = a._values;
		var aindex = a._index;
		var aptr = a._ptr;
		// c arrays
		var cindex = c._index;

		// vars
		var k, k0, k1, i;

		// check we need to process values (pattern matrix)
		if (x) {
			// values in j
			for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
				// row
				i = aindex[k];
				// check value exists in current j
				if (w[i] !== mark) {
					// i is new entry in j
					w[i] = mark;
					// add i to pattern of C
					cindex.push(i);
					// x(i) = A, check we need to call function this time
					if (update) {
						// copy value to workspace calling callback function
						x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
						// function was called on current row
						u[i] = mark;
					}
					else {
						// copy value to workspace
						x[i] = avalues[k];
					}
				}
				else {
					// i exists in C already
					x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
					// function was called on current row
					u[i] = mark;
				}
			}
		}
		else {
			// values in j
			for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
				// row
				i = aindex[k];
				// check value exists in current j
				if (w[i] !== mark) {
					// i is new entry in j
					w[i] = mark;
					// add i to pattern of C
					cindex.push(i);
				}
				else {
					// indicate function was called on current row
					u[i] = mark;
				}
			}
		}
	};

},{}],599:[function(require,module,exports){
	var Emitter = require('tiny-emitter');

	/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */
	exports.mixin = function (obj) {
		// create event emitter
		var emitter = new Emitter();

		// bind methods to obj (we don't want to expose the emitter.e Array...)
		obj.on   = emitter.on.bind(emitter);
		obj.off  = emitter.off.bind(emitter);
		obj.once = emitter.once.bind(emitter);
		obj.emit = emitter.emit.bind(emitter);

		return obj;
	};

},{"tiny-emitter":789}],600:[function(require,module,exports){
// function utils

	/*
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {function(args: Array)} [hasher]  A custom hash builder.
 *                                          Is JSON.stringify by default.
 * @return {function}                       Returns the memoized function
 */
	exports.memoize = function(fn, hasher) {
		return function memoize() {
			if (typeof memoize.cache !== 'object') {
				memoize.cache = {};
			}

			var args = [];
			for (var i = 0; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			var hash = hasher ? hasher(args) : JSON.stringify(args);
			if (!(hash in memoize.cache)) {
				return memoize.cache[hash] = fn.apply(fn, args);
			}
			return memoize.cache[hash];
		};
	};

	/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */
	exports.maxArgumentCount = function (fn) {
		return Object.keys(fn.signatures || {})
			.reduce(function (args, signature) {
				var count = (signature.match(/,/g) || []).length + 1;
				return Math.max(args, count);
			}, -1);
	};

},{}],601:[function(require,module,exports){
	'use strict';

	exports.array = require('./array');
	exports['boolean'] = require('./boolean');
	exports['function'] = require('./function');
	exports.number = require('./number');
	exports.object = require('./object');
	exports.string = require('./string');
	exports.types = require('./types');
	exports.emitter = require('./emitter');

},{"./array":581,"./boolean":592,"./emitter":599,"./function":600,"./number":603,"./object":604,"./string":605,"./types":606}],602:[function(require,module,exports){
	'use strict';

	exports.symbols = {
		// GREEK LETTERS
		Alpha: 'A',     alpha: '\\alpha',
		Beta: 'B',      beta: '\\beta',
		Gamma: '\\Gamma',    gamma: '\\gamma',
		Delta: '\\Delta',    delta: '\\delta',
		Epsilon: 'E',   epsilon: '\\epsilon',  varepsilon: '\\varepsilon',
		Zeta: 'Z',      zeta: '\\zeta',
		Eta: 'H',       eta: '\\eta',
		Theta: '\\Theta',    theta: '\\theta',    vartheta: '\\vartheta',
		Iota: 'I',      iota: '\\iota',
		Kappa: 'K',     kappa: '\\kappa',    varkappa: '\\varkappa',
		Lambda: '\\Lambda',   lambda: '\\lambda',
		Mu: 'M',        mu: '\\mu',
		Nu: 'N',        nu: '\\nu',
		Xi: '\\Xi',       xi: '\\xi',
		Omicron: 'O',   omicron: 'o',
		Pi: '\\Pi',       pi: '\\pi',       varpi: '\\varpi',
		Rho: 'P',       rho: '\\rho',      varrho: '\\varrho',
		Sigma: '\\Sigma',    sigma: '\\sigma',    varsigma: '\\varsigma',
		Tau: 'T',       tau: '\\tau',
		Upsilon: '\\Upsilon',  upsilon: '\\upsilon',
		Phi: '\\Phi',      phi: '\\phi',      varphi: '\\varphi',
		Chi: 'X',       chi: '\\chi',
		Psi: '\\Psi',      psi: '\\psi',
		Omega: '\\Omega',    omega: '\\omega',
		//logic
		'true': '\\mathrm{True}',
		'false': '\\mathrm{False}',
		//other
		i: 'i', //TODO use \i ??
		inf: '\\infty',
		Inf: '\\infty',
		infinity: '\\infty',
		Infinity: '\\infty',
		oo: '\\infty',
		lim: '\\lim',
		'undefined': '\\mathbf{?}'
	};

	exports.operators = {
		'transpose': '^\\top',
		'factorial': '!',
		'pow': '^',
		'dotPow': '.^\\wedge', //TODO find ideal solution
		'unaryPlus': '+',
		'unaryMinus': '-',
		'bitNot': '~', //TODO find ideal solution
		'not': '\\neg',
		'multiply': '\\cdot',
		'divide': '\\frac', //TODO how to handle that properly?
		'dotMultiply': '.\\cdot', //TODO find ideal solution
		'dotDivide': '.:', //TODO find ideal solution
		'mod': '\\mod',
		'add': '+',
		'subtract': '-',
		'to': '\\rightarrow',
		'leftShift': '<<',
		'rightArithShift': '>>',
		'rightLogShift': '>>>',
		'equal': '=',
		'unequal': '\\neq',
		'smaller': '<',
		'larger': '>',
		'smallerEq': '\\leq',
		'largerEq': '\\geq',
		'bitAnd': '\\&',
		'bitXor': '\\underline{|}',
		'bitOr': '|',
		'and': '\\wedge',
		'xor': '\\veebar',
		'or': '\\vee'
	};

	exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';

	var units = {
		deg: '^\\circ'
	};

	//@param {string} name
	//@param {boolean} isUnit
	exports.toSymbol = function (name, isUnit) {
		isUnit = typeof isUnit === 'undefined' ? false : isUnit;
		if (isUnit) {
			if (units.hasOwnProperty(name)) {
				return units[name];
			}
			return '\\mathrm{' + name + '}';
		}

		if (exports.symbols.hasOwnProperty(name)) {
			return exports.symbols[name];
		}
		else if (name.indexOf('_') !== -1) {
			//symbol with index (eg. alpha_1)
			var index = name.indexOf('_');
			return exports.toSymbol(name.substring(0, index)) + '_{'
      + exports.toSymbol(name.substring(index + 1)) + '}';
		}
		return name;
	};

},{}],603:[function(require,module,exports){
	'use strict';

	var NumberFormatter = require('./NumberFormatter');

	/**
 * Test whether value is a number
 * @param {*} value
 * @return {boolean} isNumber
 */
	exports.isNumber = function(value) {
		return typeof value === 'number';
	};

	/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */
	exports.isInteger = function(value) {
		return isFinite(value)
			? (value == Math.round(value))
			: false;
		// Note: we use ==, not ===, as we can have Booleans as well
	};

	/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {*}
 */
	exports.sign = Math.sign || function(x) {
		if (x > 0) {
			return 1;
		}
		else if (x < 0) {
			return -1;
		}
		else {
			return 0;
		}
	};

	/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential' and
 *                                          'auto', `precision` defines the total
 *                                          number of significant digits returned
 *                                          and is undefined by default.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point, and is 0 by default.
 *                     {Object} exponential An object containing two parameters,
 *                                          {number} lower and {number} upper,
 *                                          used by notation 'auto' to determine
 *                                          when to return exponential notation.
 *                                          Default values are `lower=1e-3` and
 *                                          `upper=1e5`.
 *                                          Only applicable for notation `auto`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4);                                        // '6.4'
 *    format(1240000);                                    // '1.24e6'
 *    format(1/3);                                        // '0.3333333333333333'
 *    format(1/3, 3);                                     // '0.333'
 *    format(21385, 2);                                   // '21000'
 *    format(12.071, {notation: 'fixed'});                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
	exports.format = function(value, options) {
		if (typeof options === 'function') {
			// handle format(value, fn)
			return options(value);
		}

		// handle special cases
		if (value === Infinity) {
			return 'Infinity';
		}
		else if (value === -Infinity) {
			return '-Infinity';
		}
		else if (isNaN(value)) {
			return 'NaN';
		}

		// default values for options
		var notation = 'auto';
		var precision = undefined;

		if (options) {
			// determine notation from options
			if (options.notation) {
				notation = options.notation;
			}

			// determine precision from options
			if (exports.isNumber(options)) {
				precision = options;
			}
			else if (options.precision) {
				precision = options.precision;
			}
		}

		// handle the various notations
		switch (notation) {
		case 'fixed':
			return exports.toFixed(value, precision);

		case 'exponential':
			return exports.toExponential(value, precision);

		case 'engineering':
			return exports.toEngineering(value, precision);

		case 'auto':
			return exports
				.toPrecision(value, precision, options && options.exponential)

			// remove trailing zeros after the decimal point
				.replace(/((\.\d*?)(0+))($|e)/, function () {
					var digits = arguments[2];
					var e = arguments[4];
					return (digits !== '.') ? digits + e : e;
				});

		default:
			throw new Error('Unknown notation "' + notation + '". ' +
          'Choose "auto", "exponential", or "fixed".');
		}
	};

	/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */
	exports.toExponential = function(value, precision) {
		return new NumberFormatter(value).toExponential(precision);
	};

	/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */
	exports.toEngineering = function(value, precision) {
		return new NumberFormatter(value).toEngineering(precision);
	};

	/**
 * Format a number with fixed notation.
 * @param {number} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
	exports.toFixed = function(value, precision) {
		return new NumberFormatter(value).toFixed(precision);
	};

	/**
 * Format a number with a certain precision
 * @param {number} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lower: number, upper: number}} [options]  By default:
 *                                                    lower = 1e-3 (excl)
 *                                                    upper = 1e+5 (incl)
 * @return {string}
 */
	exports.toPrecision = function(value, precision, options) {
		return new NumberFormatter(value).toPrecision(precision, options);
	};

	/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */
	exports.digits = function(value) {
		return value
			.toExponential()
			.replace(/e.*$/, '')          // remove exponential notation
			.replace( /^0\.?0*|\./, '')   // remove decimal point and leading zeros
			.length;
	};

	/**
 * Minimum number added to one that makes the result different than one
 */
	exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

	/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/
	exports.nearlyEqual = function(x, y, epsilon) {
		// if epsilon is null or undefined, test whether x and y are exactly equal
		if (epsilon == null) {
			return x == y;
		}

		// use "==" operator, handles infinities
		if (x == y) {
			return true;
		}

		// NaN
		if (isNaN(x) || isNaN(y)) {
			return false;
		}

		// at this point x and y should be finite
		if(isFinite(x) && isFinite(y)) {
			// check numbers are very close, needed when comparing numbers near zero
			var diff = Math.abs(x - y);
			if (diff < exports.DBL_EPSILON) {
				return true;
			}
			else {
				// use relative error
				return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
			}
		}

		// Infinite and Number or negative Infinite and positive Infinite cases
		return false;
	};

},{"./NumberFormatter":580}],604:[function(require,module,exports){
	'use strict';

	/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */
	exports.clone = function clone(x) {
		var type = typeof x;

		// immutable primitive types
		if (type === 'number' || type === 'string' || type === 'boolean' ||
      x === null || x === undefined) {
			return x;
		}

		// use clone function of the object when available
		if (typeof x.clone === 'function') {
			return x.clone();
		}

		// array
		if (Array.isArray(x)) {
			return x.map(function (value) {
				return clone(value);
			});
		}

		if (x instanceof Number)    return new Number(x.valueOf());
		if (x instanceof String)    return new String(x.valueOf());
		if (x instanceof Boolean)   return new Boolean(x.valueOf());
		if (x instanceof Date)      return new Date(x.valueOf());
		if (x && x.isBigNumber === true) return x; // bignumbers are immutable
		if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp

		// object
		var m = {};
		for (var key in x) {
			if (x.hasOwnProperty(key)) {
				m[key] = clone(x[key]);
			}
		}
		return m;
	};

	/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */
	exports.extend = function(a, b) {
		for (var prop in b) {
			if (b.hasOwnProperty(prop)) {
				a[prop] = b[prop];
			}
		}
		return a;
	};

	/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */
	exports.deepExtend = function deepExtend (a, b) {
		// TODO: add support for Arrays to deepExtend
		if (Array.isArray(b)) {
			throw new TypeError('Arrays are not supported by deepExtend');
		}

		for (var prop in b) {
			if (b.hasOwnProperty(prop)) {
				if (b[prop] && b[prop].constructor === Object) {
					if (a[prop] === undefined) {
						a[prop] = {};
					}
					if (a[prop].constructor === Object) {
						deepExtend(a[prop], b[prop]);
					}
					else {
						a[prop] = b[prop];
					}
				} else if (Array.isArray(b[prop])) {
					throw new TypeError('Arrays are not supported by deepExtend');
				} else {
					a[prop] = b[prop];
				}
			}
		}
		return a;
	};

	/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */
	exports.deepEqual = function deepEqual (a, b) {
		var prop, i, len;
		if (Array.isArray(a)) {
			if (!Array.isArray(b)) {
				return false;
			}

			if (a.length != b.length) {
				return false;
			}

			for (i = 0, len = a.length; i < len; i++) {
				if (!exports.deepEqual(a[i], b[i])) {
					return false;
				}
			}
			return true;
		}
		else if (a instanceof Object) {
			if (Array.isArray(b) || !(b instanceof Object)) {
				return false;
			}

			for (prop in a) {
				//noinspection JSUnfilteredForInLoop
				if (!exports.deepEqual(a[prop], b[prop])) {
					return false;
				}
			}
			for (prop in b) {
				//noinspection JSUnfilteredForInLoop
				if (!exports.deepEqual(a[prop], b[prop])) {
					return false;
				}
			}
			return true;
		}
		else {
			return (typeof a === typeof b) && (a == b);
		}
	};

	/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */
	exports.canDefineProperty = function () {
		// test needed for broken IE8 implementation
		try {
			if (Object.defineProperty) {
				Object.defineProperty({}, 'x', { get: function () {} });
				return true;
			}
		} catch (e) {}

		return false;
	};

	/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 * On older browsers (<IE8), the function will fall back to direct evaluation
 * of the properties value.
 * @param {Object} object   Object where to add the property
 * @param {string} prop     Property name
 * @param {Function} fn     Function returning the property value. Called
 *                          without arguments.
 */
	exports.lazy = function (object, prop, fn) {
		if (exports.canDefineProperty()) {
			var _uninitialized = true;
			var _value;
			Object.defineProperty(object, prop, {
				get: function () {
					if (_uninitialized) {
						_value = fn();
						_uninitialized = false;
					}
					return _value;
				},

				set: function (value) {
					_value = value;
					_uninitialized = false;
				},

				configurable: true,
				enumerable: true
			});
		}
		else {
			// fall back to immediate evaluation
			object[prop] = fn();
		}
	};

	/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */
	exports.traverse = function(object, path) {
		var obj = object;

		if (path) {
			var names = path.split('.');
			for (var i = 0; i < names.length; i++) {
				var name = names[i];
				if (!(name in obj)) {
					obj[name] = {};
				}
				obj = obj[name];
			}
		}

		return obj;
	};

	/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */
	exports.isFactory = function (object) {
		return object && typeof object.factory === 'function';
	};

},{}],605:[function(require,module,exports){
	'use strict';

	var formatNumber = require('./number').format;
	var formatBigNumber = require('./bignumber/formatter').format;

	/**
 * Test whether value is a string
 * @param {*} value
 * @return {boolean} isString
 */
	exports.isString = function(value) {
		return typeof value === 'string';
	};

	/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */
	exports.endsWith = function(text, search) {
		var start = text.length - search.length;
		var end = text.length;
		return (text.substring(start, end) === search);
	};

	/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7);                // '0.2857142857142857'
 *     math.format(math.pi, 3);         // '3.14'
 *     math.format(new Complex(2, 3));  // '2 + 3i'
 *     math.format('hello');            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */
	exports.format = function(value, options) {
		if (typeof value === 'number') {
			return formatNumber(value, options);
		}

		if (value && value.isBigNumber === true) {
			return formatBigNumber(value, options);
		}

		if (value && value.isFraction === true) {
			if (!options || options.fraction !== 'decimal') {
				// output as ratio, like '1/3'
				return (value.s * value.n) + '/' + value.d;
			}
			else {
				// output as decimal, like '0.(3)'
				return value.toString();
			}
		}

		if (Array.isArray(value)) {
			return formatArray(value, options);
		}

		if (exports.isString(value)) {
			return '"' + value + '"';
		}

		if (typeof value === 'function') {
			return value.syntax ? String(value.syntax) : 'function';
		}

		if (value && typeof value === 'object') {
			if (typeof value.format === 'function') {
				return value.format(options);
			}
			else if (value && value.toString() !== {}.toString()) {
				// this object has a non-native toString method, use that one
				return value.toString();
			}
			else {
				var entries = [];

				for (var key in value) {
					if (value.hasOwnProperty(key)) {
						entries.push('"' + key + '": ' + exports.format(value[key], options));
					}
				}

				return '{' + entries.join(', ') + '}';
			}
		}

		return String(value);
	};

	/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */
	function formatArray (array, options) {
		if (Array.isArray(array)) {
			var str = '[';
			var len = array.length;
			for (var i = 0; i < len; i++) {
				if (i != 0) {
					str += ', ';
				}
				str += formatArray(array[i], options);
			}
			str += ']';
			return str;
		}
		else {
			return exports.format(array, options);
		}
	}

},{"./bignumber/formatter":588,"./number":603}],606:[function(require,module,exports){
	'use strict';

	/**
 * Determine the type of a variable
 *
 *     type(x)
 *
 * The following types are recognized:
 *
 *     'undefined'
 *     'null'
 *     'boolean'
 *     'number'
 *     'string'
 *     'Array'
 *     'Function'
 *     'Date'
 *     'RegExp'
 *     'Object'
 *
 * @param {*} x
 * @return {string} Returns the name of the type. Primitive types are lower case,
 *                  non-primitive types are upper-camel-case.
 *                  For example 'number', 'string', 'Array', 'Date'.
 */
	exports.type = function(x) {
		var type = typeof x;

		if (type === 'object') {
			if (x === null)           return 'null';
			if (x instanceof Boolean) return 'boolean';
			if (x instanceof Number)  return 'number';
			if (x instanceof String)  return 'string';
			if (Array.isArray(x))     return 'Array';
			if (x instanceof Date)    return 'Date';
			if (x instanceof RegExp)  return 'RegExp';

			return 'Object';
		}

		if (type === 'function')    return 'Function';

		return type;
	};

	/**
 * Test whether a value is a scalar
 * @param x
 * @return {boolean} Returns true when x is a scalar, returns false when
 *                   x is a Matrix or Array.
 */
	exports.isScalar = function (x) {
		return !((x && x.isMatrix) || Array.isArray(x));
	};

},{}],607:[function(require,module,exports){
	module.exports = '3.4.1';
	// Note: This file is automatically generated when building math.js.
	// Changes made in this file will be overwritten.

},{}],608:[function(require,module,exports){
	module.exports={
		"version": "2016j",
		"zones": [
			"Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5",
			"Africa/Accra|LMT GMT GHST|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5",
			"Africa/Nairobi|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5",
			"Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5",
			"Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6",
			"Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2ldWV.E 2xonV.E|39e4",
			"Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5",
			"Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6",
			"Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|32e5",
			"Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3",
			"Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|20e4",
			"Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5",
			"Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0|51e5",
			"Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m|11e5",
			"Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5",
			"Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5",
			"Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5",
			"Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0|32e4",
			"America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
			"America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
			"America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3",
			"America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4",
			"America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
			"America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
			"America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
			"America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0",
			"America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
			"America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0",
			"America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
			"America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0",
			"America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0",
			"America/Curacao|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4",
			"America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5",
			"America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2",
			"America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5",
			"America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3",
			"America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4",
			"America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5",
			"America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3",
			"America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2",
			"America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2",
			"America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5",
			"America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4",
			"America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2",
			"America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|77e4",
			"America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
			"America/Caracas|CMT VET VET|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5",
			"America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3",
			"America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5",
			"America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
			"America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4",
			"America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5",
			"America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2",
			"America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|54e4",
			"America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8",
			"America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2",
			"America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3",
			"America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
			"America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5",
			"America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5",
			"America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3",
			"America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5",
			"America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5",
			"America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
			"America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5",
			"America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
			"America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3",
			"America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2",
			"America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212123|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
			"America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5",
			"America/Guayaquil|QMT ECT|5e 50|01|-1yVSK|27e5",
			"America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf|80e4",
			"America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
			"America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
			"America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4",
			"America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2",
			"America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2",
			"America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4",
			"America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3",
			"America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5",
			"America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6",
			"America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
			"America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4",
			"America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5",
			"America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5",
			"America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4",
			"America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4",
			"America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4",
			"America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2",
			"America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5",
			"America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|0120303030303030303030303030303030454545454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
			"America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6",
			"America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
			"America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3",
			"America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5",
			"America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
			"America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5",
			"America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4",
			"America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
			"America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2",
			"America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2",
			"America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2",
			"America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
			"America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
			"America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0|24e4",
			"America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5",
			"America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
			"America/Rio_Branco|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4",
			"America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4",
			"America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5",
			"America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842",
			"America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2",
			"America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5",
			"America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4",
			"America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229",
			"America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4",
			"America/Santiago|SMT CLT CLT CLST CLST|4G.K 50 40 40 30|010203131313131212421242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5",
			"America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5",
			"America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|20e6",
			"America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452",
			"America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2",
			"America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
			"America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3",
			"America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5",
			"America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656",
			"America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
			"America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
			"America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
			"America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4",
			"America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642",
			"America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
			"Antarctica/Casey|-00 +08 +11|0 -80 -b0|0121212|-2q00 1DjS0 T90 40P0 KL0 blz0|10",
			"Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70",
			"Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80",
			"Antarctica/Macquarie|AEST AEDT -00 MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1",
			"Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60",
			"Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5",
			"Antarctica/Palmer|-00 ARST ART ART ARST CLT CLST|0 30 40 30 20 40 30|0121212121234356565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|40",
			"Antarctica/Rothera|-00 -03|0 30|01|gOo0|130",
			"Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20",
			"Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40",
			"Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25",
			"Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4",
			"Asia/Riyadh|LMT AST|-36.Q -30|01|-TvD6.Q|57e5",
			"Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5",
			"Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5",
			"Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3",
			"Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4",
			"Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4",
			"Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4",
			"Asia/Atyrau|LMT +04 +05 +06|-3r.I -40 -50 -60|01232323232323232323212323232323232321212121212|-1Pc3r.I eUnr.I 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0",
			"Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5",
			"Asia/Qatar|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4",
			"Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
			"Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4|15e6",
			"Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
			"Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5",
			"Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4",
			"Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4",
			"Asia/Kolkata|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0|15e6",
			"Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4",
			"Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT CHOST|-7C -70 -80 -a0 -90 -80 -90|0123434343434343434343434343434343434343434343456565656565656565656565656565656565656565656565|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|38e3",
			"Asia/Shanghai|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6",
			"Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5",
			"Asia/Dhaka|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1i00|16e6",
			"Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5",
			"Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0|19e4",
			"Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c|39e5",
			"Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4",
			"Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212123|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0",
			"Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0|18e5",
			"Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0|25e4",
			"Asia/Ho_Chi_Minh|LMT PLMT ICT IDT JST|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5",
			"Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5",
			"Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|81e3",
			"Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
			"Europe/Istanbul|IMT EET EEST +04 +03|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212124|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1de0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6",
			"Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6",
			"Asia/Jayapura|LMT WIT ACST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu|26e4",
			"Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4",
			"Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0|46e5",
			"Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4",
			"Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6",
			"Asia/Urumqi|LMT XJT|-5O.k -60|01|-1GgtO.k|32e5",
			"Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5",
			"Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2",
			"Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
			"Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u|71e5",
			"Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10|13e4",
			"Asia/Macau|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0|57e4",
			"Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3",
			"Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0|15e5",
			"Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6",
			"Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4",
			"Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4",
			"Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5",
			"Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5",
			"Asia/Oral|LMT +04 +05 +06|-3p.o -40 -50 -60|01232323232323232121212121212121212121212121212|-1Pc3p.o eUnp.o 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4",
			"Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4",
			"Asia/Pyongyang|LMT KST JCST JST KST|-8n -8u -90 -90 -90|012341|-2um8n 97XR 12FXu jdA0 2Onc0|29e5",
			"Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|0123232323232323232323232323232323232323232323|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|73e4",
			"Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u|48e5",
			"Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4",
			"Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4",
			"Asia/Seoul|LMT KST JCST JST KST KDT KDT|-8r.Q -8u -90 -90 -90 -9u -a0|01234151515151515146464|-2um8r.Q 97XV.Q 12FXu jjA0 kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6",
			"Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0|56e5",
			"Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2",
			"Asia/Taipei|JWST JST CST CDT|-80 -90 -80 -90|01232323232323232323232323232323232323232|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5",
			"Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5",
			"Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5",
			"Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
			"Asia/Thimphu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3",
			"Asia/Tokyo|JCST JST JDT|-90 -90 -a0|0121212121|-1iw90 pKq0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0|38e6",
			"Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5",
			"Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|12e5",
			"Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2",
			"Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
			"Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4",
			"Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5",
			"Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5",
			"Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4",
			"Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3",
			"Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
			"Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0|50e4",
			"Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3",
			"Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4",
			"Atlantic/Reykjavik|LMT IST ISST GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4",
			"Atlantic/South_Georgia|GST|20|0||30",
			"Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2",
			"Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5",
			"Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5",
			"Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5",
			"Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3",
			"Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746",
			"Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4",
			"Australia/Eucla|ACWST ACWDT|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368",
			"Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4",
			"Australia/Lord_Howe|AEST LHST LHDT LHDT|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347",
			"Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10",
			"Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5",
			"Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5",
			"CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Easter|EMT EAST EASST EAST EASST|7h.s 70 60 60 50|0121212121212121212121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2",
			"EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"EST|EST|50|0|",
			"EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Etc/GMT+0|GMT|0|0|",
			"Etc/GMT+1|-01|10|0|",
			"Etc/GMT+10|-10|a0|0|",
			"Etc/GMT+11|-11|b0|0|",
			"Etc/GMT+12|-12|c0|0|",
			"Etc/GMT+2|-02|20|0|",
			"Etc/GMT+3|-03|30|0|",
			"Etc/GMT+4|-04|40|0|",
			"Etc/GMT+5|-05|50|0|",
			"Etc/GMT+6|-06|60|0|",
			"Etc/GMT+7|-07|70|0|",
			"Etc/GMT+8|-08|80|0|",
			"Etc/GMT+9|-09|90|0|",
			"Etc/GMT-1|+01|-10|0|",
			"Etc/GMT-10|+10|-a0|0|",
			"Etc/GMT-11|+11|-b0|0|",
			"Etc/GMT-12|+12|-c0|0|",
			"Etc/GMT-13|+13|-d0|0|",
			"Etc/GMT-14|+14|-e0|0|",
			"Etc/GMT-2|+02|-20|0|",
			"Etc/GMT-3|+03|-30|0|",
			"Etc/GMT-4|+04|-40|0|",
			"Etc/GMT-5|+05|-50|0|",
			"Etc/GMT-6|+06|-60|0|",
			"Etc/GMT-7|+07|-70|0|",
			"Etc/GMT-8|+08|-80|0|",
			"Etc/GMT-9|+09|-90|0|",
			"Etc/UCT|UCT|0|0|",
			"Etc/UTC|UTC|0|0|",
			"Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5",
			"Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3",
			"Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
			"Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5",
			"Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6",
			"Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5",
			"Europe/Prague|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5",
			"Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5",
			"Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5",
			"Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
			"Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4",
			"Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4",
			"Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3",
			"Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET +03|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454546767676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4",
			"Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5",
			"Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4",
			"Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5",
			"Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
			"Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5",
			"Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
			"Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5",
			"Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3",
			"Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6",
			"Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6",
			"Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4",
			"Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5",
			"Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5",
			"Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810",
			"Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4",
			"Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5",
			"Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4",
			"Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
			"Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
			"Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4",
			"Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5",
			"Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
			"Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|01232323232323232121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
			"Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
			"Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4",
			"HST|HST|a0|0|",
			"Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2",
			"Indian/Christmas|CXT|-70|0||21e2",
			"Indian/Cocos|CCT|-6u|0||596",
			"Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130",
			"Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M|79e3",
			"Indian/Maldives|MMT MVT|-4S -50|01|-olgS|35e4",
			"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4",
			"Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q|84e4",
			"Pacific/Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0|14e3",
			"MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"MST|MST|70|0|",
			"MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Chatham|CHAST CHAST CHADT|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600",
			"PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Apia|LMT WSST SST SDT WSDT WSST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3",
			"Pacific/Bougainville|PGT JST BST|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4",
			"Pacific/Chuuk|CHUT|-a0|0||49e3",
			"Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3",
			"Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0|1",
			"Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0|483",
			"Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0|88e4",
			"Pacific/Funafuti|TVT|-c0|0||45e2",
			"Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A|25e3",
			"Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c|125",
			"Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M|11e4",
			"Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0|17e4",
			"Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0|37e4",
			"Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk|51e2",
			"Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0|66e2",
			"Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0|28e3",
			"Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG|86e2",
			"Pacific/Pago_Pago|LMT NST BST SST|bm.M b0 b0 b0|0123|-2nDMB.c 2gVzB.c EyM0|37e2",
			"Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu|10e3",
			"Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a|12e2",
			"Pacific/Norfolk|NMT NFT NFST NFT|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0|25e4",
			"Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3",
			"Pacific/Palau|PWT|-90|0||21e3",
			"Pacific/Pitcairn|PNT PST|8u 80|01|18Vku|56",
			"Pacific/Pohnpei|PONT|-b0|0||34e3",
			"Pacific/Port_Moresby|PGT|-a0|0||25e4",
			"Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3",
			"Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I|18e4",
			"Pacific/Tarawa|GILT|-c0|0||29e3",
			"Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121212121212121212121212121212121212121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0|75e3",
			"Pacific/Wake|WAKT|-c0|0||16e3",
			"Pacific/Wallis|WFT|-c0|0||94",
			"WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
		],
		"links": [
			"Africa/Abidjan|Africa/Bamako",
			"Africa/Abidjan|Africa/Banjul",
			"Africa/Abidjan|Africa/Conakry",
			"Africa/Abidjan|Africa/Dakar",
			"Africa/Abidjan|Africa/Freetown",
			"Africa/Abidjan|Africa/Lome",
			"Africa/Abidjan|Africa/Nouakchott",
			"Africa/Abidjan|Africa/Ouagadougou",
			"Africa/Abidjan|Africa/Sao_Tome",
			"Africa/Abidjan|Africa/Timbuktu",
			"Africa/Abidjan|Atlantic/St_Helena",
			"Africa/Cairo|Egypt",
			"Africa/Johannesburg|Africa/Maseru",
			"Africa/Johannesburg|Africa/Mbabane",
			"Africa/Khartoum|Africa/Juba",
			"Africa/Lagos|Africa/Bangui",
			"Africa/Lagos|Africa/Brazzaville",
			"Africa/Lagos|Africa/Douala",
			"Africa/Lagos|Africa/Kinshasa",
			"Africa/Lagos|Africa/Libreville",
			"Africa/Lagos|Africa/Luanda",
			"Africa/Lagos|Africa/Malabo",
			"Africa/Lagos|Africa/Niamey",
			"Africa/Lagos|Africa/Porto-Novo",
			"Africa/Maputo|Africa/Blantyre",
			"Africa/Maputo|Africa/Bujumbura",
			"Africa/Maputo|Africa/Gaborone",
			"Africa/Maputo|Africa/Harare",
			"Africa/Maputo|Africa/Kigali",
			"Africa/Maputo|Africa/Lubumbashi",
			"Africa/Maputo|Africa/Lusaka",
			"Africa/Nairobi|Africa/Addis_Ababa",
			"Africa/Nairobi|Africa/Asmara",
			"Africa/Nairobi|Africa/Asmera",
			"Africa/Nairobi|Africa/Dar_es_Salaam",
			"Africa/Nairobi|Africa/Djibouti",
			"Africa/Nairobi|Africa/Kampala",
			"Africa/Nairobi|Africa/Mogadishu",
			"Africa/Nairobi|Indian/Antananarivo",
			"Africa/Nairobi|Indian/Comoro",
			"Africa/Nairobi|Indian/Mayotte",
			"Africa/Tripoli|Libya",
			"America/Adak|America/Atka",
			"America/Adak|US/Aleutian",
			"America/Anchorage|US/Alaska",
			"America/Argentina/Buenos_Aires|America/Buenos_Aires",
			"America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
			"America/Argentina/Catamarca|America/Catamarca",
			"America/Argentina/Cordoba|America/Cordoba",
			"America/Argentina/Cordoba|America/Rosario",
			"America/Argentina/Jujuy|America/Jujuy",
			"America/Argentina/Mendoza|America/Mendoza",
			"America/Atikokan|America/Coral_Harbour",
			"America/Chicago|US/Central",
			"America/Curacao|America/Aruba",
			"America/Curacao|America/Kralendijk",
			"America/Curacao|America/Lower_Princes",
			"America/Denver|America/Shiprock",
			"America/Denver|Navajo",
			"America/Denver|US/Mountain",
			"America/Detroit|US/Michigan",
			"America/Edmonton|Canada/Mountain",
			"America/Fort_Wayne|America/Indiana/Indianapolis",
			"America/Fort_Wayne|America/Indianapolis",
			"America/Fort_Wayne|US/East-Indiana",
			"America/Halifax|Canada/Atlantic",
			"America/Havana|Cuba",
			"America/Indiana/Knox|America/Knox_IN",
			"America/Indiana/Knox|US/Indiana-Starke",
			"America/Jamaica|Jamaica",
			"America/Kentucky/Louisville|America/Louisville",
			"America/Los_Angeles|US/Pacific",
			"America/Los_Angeles|US/Pacific-New",
			"America/Manaus|Brazil/West",
			"America/Mazatlan|Mexico/BajaSur",
			"America/Mexico_City|Mexico/General",
			"America/New_York|US/Eastern",
			"America/Noronha|Brazil/DeNoronha",
			"America/Panama|America/Cayman",
			"America/Phoenix|US/Arizona",
			"America/Port_of_Spain|America/Anguilla",
			"America/Port_of_Spain|America/Antigua",
			"America/Port_of_Spain|America/Dominica",
			"America/Port_of_Spain|America/Grenada",
			"America/Port_of_Spain|America/Guadeloupe",
			"America/Port_of_Spain|America/Marigot",
			"America/Port_of_Spain|America/Montserrat",
			"America/Port_of_Spain|America/St_Barthelemy",
			"America/Port_of_Spain|America/St_Kitts",
			"America/Port_of_Spain|America/St_Lucia",
			"America/Port_of_Spain|America/St_Thomas",
			"America/Port_of_Spain|America/St_Vincent",
			"America/Port_of_Spain|America/Tortola",
			"America/Port_of_Spain|America/Virgin",
			"America/Regina|Canada/East-Saskatchewan",
			"America/Regina|Canada/Saskatchewan",
			"America/Rio_Branco|America/Porto_Acre",
			"America/Rio_Branco|Brazil/Acre",
			"America/Santiago|Chile/Continental",
			"America/Sao_Paulo|Brazil/East",
			"America/St_Johns|Canada/Newfoundland",
			"America/Tijuana|America/Ensenada",
			"America/Tijuana|America/Santa_Isabel",
			"America/Tijuana|Mexico/BajaNorte",
			"America/Toronto|America/Montreal",
			"America/Toronto|Canada/Eastern",
			"America/Vancouver|Canada/Pacific",
			"America/Whitehorse|Canada/Yukon",
			"America/Winnipeg|Canada/Central",
			"Asia/Ashgabat|Asia/Ashkhabad",
			"Asia/Bangkok|Asia/Phnom_Penh",
			"Asia/Bangkok|Asia/Vientiane",
			"Asia/Dhaka|Asia/Dacca",
			"Asia/Dubai|Asia/Muscat",
			"Asia/Ho_Chi_Minh|Asia/Saigon",
			"Asia/Hong_Kong|Hongkong",
			"Asia/Jerusalem|Asia/Tel_Aviv",
			"Asia/Jerusalem|Israel",
			"Asia/Kathmandu|Asia/Katmandu",
			"Asia/Kolkata|Asia/Calcutta",
			"Asia/Macau|Asia/Macao",
			"Asia/Makassar|Asia/Ujung_Pandang",
			"Asia/Nicosia|Europe/Nicosia",
			"Asia/Qatar|Asia/Bahrain",
			"Asia/Rangoon|Asia/Yangon",
			"Asia/Riyadh|Asia/Aden",
			"Asia/Riyadh|Asia/Kuwait",
			"Asia/Seoul|ROK",
			"Asia/Shanghai|Asia/Chongqing",
			"Asia/Shanghai|Asia/Chungking",
			"Asia/Shanghai|Asia/Harbin",
			"Asia/Shanghai|PRC",
			"Asia/Singapore|Singapore",
			"Asia/Taipei|ROC",
			"Asia/Tehran|Iran",
			"Asia/Thimphu|Asia/Thimbu",
			"Asia/Tokyo|Japan",
			"Asia/Ulaanbaatar|Asia/Ulan_Bator",
			"Asia/Urumqi|Asia/Kashgar",
			"Atlantic/Faroe|Atlantic/Faeroe",
			"Atlantic/Reykjavik|Iceland",
			"Australia/Adelaide|Australia/South",
			"Australia/Brisbane|Australia/Queensland",
			"Australia/Broken_Hill|Australia/Yancowinna",
			"Australia/Darwin|Australia/North",
			"Australia/Hobart|Australia/Tasmania",
			"Australia/Lord_Howe|Australia/LHI",
			"Australia/Melbourne|Australia/Victoria",
			"Australia/Perth|Australia/West",
			"Australia/Sydney|Australia/ACT",
			"Australia/Sydney|Australia/Canberra",
			"Australia/Sydney|Australia/NSW",
			"Etc/GMT+0|Etc/GMT",
			"Etc/GMT+0|Etc/GMT-0",
			"Etc/GMT+0|Etc/GMT0",
			"Etc/GMT+0|Etc/Greenwich",
			"Etc/GMT+0|GMT",
			"Etc/GMT+0|GMT+0",
			"Etc/GMT+0|GMT-0",
			"Etc/GMT+0|GMT0",
			"Etc/GMT+0|Greenwich",
			"Etc/UCT|UCT",
			"Etc/UTC|Etc/Universal",
			"Etc/UTC|Etc/Zulu",
			"Etc/UTC|UTC",
			"Etc/UTC|Universal",
			"Etc/UTC|Zulu",
			"Europe/Belgrade|Europe/Ljubljana",
			"Europe/Belgrade|Europe/Podgorica",
			"Europe/Belgrade|Europe/Sarajevo",
			"Europe/Belgrade|Europe/Skopje",
			"Europe/Belgrade|Europe/Zagreb",
			"Europe/Chisinau|Europe/Tiraspol",
			"Europe/Dublin|Eire",
			"Europe/Helsinki|Europe/Mariehamn",
			"Europe/Istanbul|Asia/Istanbul",
			"Europe/Istanbul|Turkey",
			"Europe/Lisbon|Portugal",
			"Europe/London|Europe/Belfast",
			"Europe/London|Europe/Guernsey",
			"Europe/London|Europe/Isle_of_Man",
			"Europe/London|Europe/Jersey",
			"Europe/London|GB",
			"Europe/London|GB-Eire",
			"Europe/Moscow|W-SU",
			"Europe/Oslo|Arctic/Longyearbyen",
			"Europe/Oslo|Atlantic/Jan_Mayen",
			"Europe/Prague|Europe/Bratislava",
			"Europe/Rome|Europe/San_Marino",
			"Europe/Rome|Europe/Vatican",
			"Europe/Warsaw|Poland",
			"Europe/Zurich|Europe/Busingen",
			"Europe/Zurich|Europe/Vaduz",
			"Pacific/Auckland|Antarctica/McMurdo",
			"Pacific/Auckland|Antarctica/South_Pole",
			"Pacific/Auckland|NZ",
			"Pacific/Chatham|NZ-CHAT",
			"Pacific/Chuuk|Pacific/Truk",
			"Pacific/Chuuk|Pacific/Yap",
			"Pacific/Easter|Chile/EasterIsland",
			"Pacific/Guam|Pacific/Saipan",
			"Pacific/Honolulu|Pacific/Johnston",
			"Pacific/Honolulu|US/Hawaii",
			"Pacific/Kwajalein|Kwajalein",
			"Pacific/Pago_Pago|Pacific/Midway",
			"Pacific/Pago_Pago|Pacific/Samoa",
			"Pacific/Pago_Pago|US/Samoa",
			"Pacific/Pohnpei|Pacific/Ponape"
		]
	};
},{}],609:[function(require,module,exports){
	var moment = module.exports = require("./moment-timezone");
	moment.tz.load(require('./data/packed/latest.json'));

},{"./data/packed/latest.json":608,"./moment-timezone":610}],610:[function(require,module,exports){
//! moment-timezone.js
//! version : 0.5.11
//! Copyright (c) JS Foundation and other contributors
//! license : MIT
//! github.com/moment/moment-timezone

	(function (root, factory) {
		"use strict";

		/*global define*/
		if (typeof define === 'function' && define.amd) {
			define(['moment'], factory);                 // AMD
		} else if (typeof module === 'object' && module.exports) {
			module.exports = factory(require('moment')); // Node
		} else {
			factory(root.moment);                        // Browser
		}
	}(this, function (moment) {
		"use strict";

		// Do not load moment-timezone a second time.
		// if (moment.tz !== undefined) {
		// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		// 	return moment;
		// }

		var VERSION = "0.5.11",
			zones = {},
			links = {},
			names = {},
			guesses = {},
			cachedGuess,

			momentVersion = moment.version.split('.'),
			major = +momentVersion[0],
			minor = +momentVersion[1];

		// Moment.js version check
		if (major < 2 || (major === 2 && minor < 6)) {
			logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
		}

		/************************************
		Unpacking
	************************************/

		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}

		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;

			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}

			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}

			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}

			return out * sign;
		}

		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}

		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}

			array[length - 1] = Infinity;
		}

		function mapIndices (source, indices) {
			var out = [], i;

			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}

			return out;
		}

		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');

			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);

			intToUntil(untils, indices.length);

			return {
				name       : data[0],
				abbrs      : mapIndices(data[1].split(' '), indices),
				offsets    : mapIndices(offsets, indices),
				untils     : untils,
				population : data[5] | 0
			};
		}

		/************************************
		Zone object
	************************************/

		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}

		Zone.prototype = {
			_set : function (unpacked) {
				this.name       = unpacked.name;
				this.abbrs      = unpacked.abbrs;
				this.untils     = unpacked.untils;
				this.offsets    = unpacked.offsets;
				this.population = unpacked.population;
			},

			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;

				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},

			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;

				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];

					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}

					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}

				return offsets[max];
			},

			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},

			offset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};

		/************************************
		Current Timezone
	************************************/

		function OffsetAt(at) {
			var timeString = at.toTimeString();
			var abbr = timeString.match(/\([a-z ]+\)/i);
			if (abbr && abbr[0]) {
			// 17:56:31 GMT-0600 (CST)
			// 17:56:31 GMT-0600 (Central Standard Time)
				abbr = abbr[0].match(/[A-Z]/g);
				abbr = abbr ? abbr.join('') : undefined;
			} else {
			// 17:56:31 CST
			// 17:56:31 GMT+0800 (台北標準時間)
				abbr = timeString.match(/[A-Z]{3,5}/g);
				abbr = abbr ? abbr[0] : undefined;
			}

			if (abbr === 'GMT') {
				abbr = undefined;
			}

			this.at = +at;
			this.abbr = abbr;
			this.offset = at.getTimezoneOffset();
		}

		function ZoneScore(zone) {
			this.zone = zone;
			this.offsetScore = 0;
			this.abbrScore = 0;
		}

		ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
			this.offsetScore += Math.abs(this.zone.offset(offsetAt.at) - offsetAt.offset);
			if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
				this.abbrScore++;
			}
		};

		function findChange(low, high) {
			var mid, diff;

			while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
				mid = new OffsetAt(new Date(low.at + diff));
				if (mid.offset === low.offset) {
					low = mid;
				} else {
					high = mid;
				}
			}

			return low;
		}

		function userOffsets() {
			var startYear = new Date().getFullYear() - 2,
				last = new OffsetAt(new Date(startYear, 0, 1)),
				offsets = [last],
				change, next, i;

			for (i = 1; i < 48; i++) {
				next = new OffsetAt(new Date(startYear, i, 1));
				if (next.offset !== last.offset) {
					change = findChange(last, next);
					offsets.push(change);
					offsets.push(new OffsetAt(new Date(change.at + 6e4)));
				}
				last = next;
			}

			for (i = 0; i < 4; i++) {
				offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
				offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
			}

			return offsets;
		}

		function sortZoneScores (a, b) {
			if (a.offsetScore !== b.offsetScore) {
				return a.offsetScore - b.offsetScore;
			}
			if (a.abbrScore !== b.abbrScore) {
				return a.abbrScore - b.abbrScore;
			}
			return b.zone.population - a.zone.population;
		}

		function addToGuesses (name, offsets) {
			var i, offset;
			arrayToInt(offsets);
			for (i = 0; i < offsets.length; i++) {
				offset = offsets[i];
				guesses[offset] = guesses[offset] || {};
				guesses[offset][name] = true;
			}
		}

		function guessesForUserOffsets (offsets) {
			var offsetsLength = offsets.length,
				filteredGuesses = {},
				out = [],
				i, j, guessesOffset;

			for (i = 0; i < offsetsLength; i++) {
				guessesOffset = guesses[offsets[i].offset] || {};
				for (j in guessesOffset) {
					if (guessesOffset.hasOwnProperty(j)) {
						filteredGuesses[j] = true;
					}
				}
			}

			for (i in filteredGuesses) {
				if (filteredGuesses.hasOwnProperty(i)) {
					out.push(names[i]);
				}
			}

			return out;
		}

		function rebuildGuess () {

			// use Intl API when available and returning valid time zone
			try {
				var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
				if (intlName){
					var name = names[normalizeName(intlName)];
					if (name) {
						return name;
					}
					logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
				}
			} catch (e) {
			// Intl unavailable, fall back to manual guessing.
			}

			var offsets = userOffsets(),
				offsetsLength = offsets.length,
				guesses = guessesForUserOffsets(offsets),
				zoneScores = [],
				zoneScore, i, j;

			for (i = 0; i < guesses.length; i++) {
				zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
				for (j = 0; j < offsetsLength; j++) {
					zoneScore.scoreOffsetAt(offsets[j]);
				}
				zoneScores.push(zoneScore);
			}

			zoneScores.sort(sortZoneScores);

			return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
		}

		function guess (ignoreCache) {
			if (!cachedGuess || ignoreCache) {
				cachedGuess = rebuildGuess();
			}
			return cachedGuess;
		}

		/************************************
		Global Methods
	************************************/

		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}

		function addZone (packed) {
			var i, name, split, normalized;

			if (typeof packed === "string") {
				packed = [packed];
			}

			for (i = 0; i < packed.length; i++) {
				split = packed[i].split('|');
				name = split[0];
				normalized = normalizeName(name);
				zones[normalized] = packed[i];
				names[normalized] = name;
				if (split[5]) {
					addToGuesses(normalized, split[2].split(' '));
				}
			}
		}

		function getZone (name, caller) {
			name = normalizeName(name);

			var zone = zones[name];
			var link;

			if (zone instanceof Zone) {
				return zone;
			}

			if (typeof zone === 'string') {
				zone = new Zone(zone);
				zones[name] = zone;
				return zone;
			}

			// Pass getZone to prevent recursion more than 1 level deep
			if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
				zone = zones[name] = new Zone();
				zone._set(link);
				zone.name = names[name];
				return zone;
			}

			return null;
		}

		function getNames () {
			var i, out = [];

			for (i in names) {
				if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
					out.push(names[i]);
				}
			}

			return out.sort();
		}

		function addLink (aliases) {
			var i, alias, normal0, normal1;

			if (typeof aliases === "string") {
				aliases = [aliases];
			}

			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');

				normal0 = normalizeName(alias[0]);
				normal1 = normalizeName(alias[1]);

				links[normal0] = normal1;
				names[normal0] = alias[0];

				links[normal1] = normal0;
				names[normal1] = alias[1];
			}
		}

		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			tz.dataVersion = data.version;
		}

		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
				logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
			return !!getZone(name);
		}

		function needsOffset (m) {
			return !!(m._a && (m._tzm === undefined));
		}

		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}

		/************************************
		moment.tz namespace
	************************************/

		function tz (input) {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);

			if (zone && !moment.isMoment(input) && needsOffset(out)) {
				out.add(zone.parse(out), 'minutes');
			}

			out.tz(name);

			return out;
		}

		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz._names       = names;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.guess        = guess;
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;

		/************************************
		Interface with Moment.js
	************************************/

		var fn = moment.fn;

		moment.tz = tz;

		moment.defaultZone = null;

		moment.updateOffset = function (mom, keepTime) {
			var zone = moment.defaultZone,
				offset;

			if (mom._z === undefined) {
				if (zone && needsOffset(mom) && !mom._isUTC) {
					mom._d = moment.utc(mom._a)._d;
					mom.utc().add(zone.parse(mom), 'minutes');
				}
				mom._z = zone;
			}
			if (mom._z) {
				offset = mom._z.offset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				if (mom.utcOffset !== undefined) {
					mom.utcOffset(-offset, keepTime);
				} else {
					mom.zone(offset, keepTime);
				}
			}
		};

		fn.tz = function (name) {
			if (name) {
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};

		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}

		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.apply(this, arguments);
			};
		}

		fn.zoneName = abbrWrap(fn.zoneName);
		fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
		fn.utc      = resetZoneWrap(fn.utc);

		moment.tz.setDefault = function(name) {
			if (major < 2 || (major === 2 && minor < 9)) {
				logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
			}
			moment.defaultZone = name ? getZone(name) : null;
			return moment;
		};

		// Cloning a moment should include the _z property.
		var momentProperties = moment.momentProperties;
		if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
		// moment 2.8.1+
			momentProperties.push('_z');
			momentProperties.push('_a');
		} else if (momentProperties) {
		// moment 2.7.0
			momentProperties._z = null;
		}

		// INJECT DATA

		return moment;
	}));

},{"moment":611}],611:[function(require,module,exports){
//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

	(function (global, factory) {
		typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
			typeof define === 'function' && define.amd ? define(factory) :
				global.moment = factory();
	}(this, (function () { 'use strict';

		var hookCallback;

		function hooks () {
			return hookCallback.apply(null, arguments);
		}

		// This is done to register the method called with moment()
		// without creating circular dependencies.
		function setHookCallback (callback) {
			hookCallback = callback;
		}

		function isArray(input) {
			return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
		}

		function isObject(input) {
			// IE8 will treat undefined and null as object if it wasn't for
			// input != null
			return input != null && Object.prototype.toString.call(input) === '[object Object]';
		}

		function isObjectEmpty(obj) {
			var k;
			for (k in obj) {
				// even if its not own property I'd still call it non-empty
				return false;
			}
			return true;
		}

		function isNumber(input) {
			return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
		}

		function isDate(input) {
			return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
		}

		function map(arr, fn) {
			var res = [], i;
			for (i = 0; i < arr.length; ++i) {
				res.push(fn(arr[i], i));
			}
			return res;
		}

		function hasOwnProp(a, b) {
			return Object.prototype.hasOwnProperty.call(a, b);
		}

		function extend(a, b) {
			for (var i in b) {
				if (hasOwnProp(b, i)) {
					a[i] = b[i];
				}
			}

			if (hasOwnProp(b, 'toString')) {
				a.toString = b.toString;
			}

			if (hasOwnProp(b, 'valueOf')) {
				a.valueOf = b.valueOf;
			}

			return a;
		}

		function createUTC (input, format, locale, strict) {
			return createLocalOrUTC(input, format, locale, strict, true).utc();
		}

		function defaultParsingFlags() {
			// We need to deep clone this object.
			return {
				empty           : false,
				unusedTokens    : [],
				unusedInput     : [],
				overflow        : -2,
				charsLeftOver   : 0,
				nullInput       : false,
				invalidMonth    : null,
				invalidFormat   : false,
				userInvalidated : false,
				iso             : false,
				parsedDateParts : [],
				meridiem        : null
			};
		}

		function getParsingFlags(m) {
			if (m._pf == null) {
				m._pf = defaultParsingFlags();
			}
			return m._pf;
		}

		var some;
		if (Array.prototype.some) {
			some = Array.prototype.some;
		} else {
			some = function (fun) {
				var t = Object(this);
				var len = t.length >>> 0;

				for (var i = 0; i < len; i++) {
					if (i in t && fun.call(this, t[i], i, t)) {
						return true;
					}
				}

				return false;
			};
		}

		var some$1 = some;

		function isValid(m) {
			if (m._isValid == null) {
				var flags = getParsingFlags(m);
				var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
					return i != null;
				});
				var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

				if (m._strict) {
					isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
				}

				if (Object.isFrozen == null || !Object.isFrozen(m)) {
					m._isValid = isNowValid;
				}
				else {
					return isNowValid;
				}
			}
			return m._isValid;
		}

		function createInvalid (flags) {
			var m = createUTC(NaN);
			if (flags != null) {
				extend(getParsingFlags(m), flags);
			}
			else {
				getParsingFlags(m).userInvalidated = true;
			}

			return m;
		}

		function isUndefined(input) {
			return input === void 0;
		}

		// Plugins that add properties should also add the key here (null value),
		// so we can properly clone ourselves.
		var momentProperties = hooks.momentProperties = [];

		function copyConfig(to, from) {
			var i, prop, val;

			if (!isUndefined(from._isAMomentObject)) {
				to._isAMomentObject = from._isAMomentObject;
			}
			if (!isUndefined(from._i)) {
				to._i = from._i;
			}
			if (!isUndefined(from._f)) {
				to._f = from._f;
			}
			if (!isUndefined(from._l)) {
				to._l = from._l;
			}
			if (!isUndefined(from._strict)) {
				to._strict = from._strict;
			}
			if (!isUndefined(from._tzm)) {
				to._tzm = from._tzm;
			}
			if (!isUndefined(from._isUTC)) {
				to._isUTC = from._isUTC;
			}
			if (!isUndefined(from._offset)) {
				to._offset = from._offset;
			}
			if (!isUndefined(from._pf)) {
				to._pf = getParsingFlags(from);
			}
			if (!isUndefined(from._locale)) {
				to._locale = from._locale;
			}

			if (momentProperties.length > 0) {
				for (i in momentProperties) {
					prop = momentProperties[i];
					val = from[prop];
					if (!isUndefined(val)) {
						to[prop] = val;
					}
				}
			}

			return to;
		}

		var updateInProgress = false;

		// Moment prototype object
		function Moment(config) {
			copyConfig(this, config);
			this._d = new Date(config._d != null ? config._d.getTime() : NaN);
			if (!this.isValid()) {
				this._d = new Date(NaN);
			}
			// Prevent infinite loop in case updateOffset creates new moment
			// objects.
			if (updateInProgress === false) {
				updateInProgress = true;
				hooks.updateOffset(this);
				updateInProgress = false;
			}
		}

		function isMoment (obj) {
			return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
		}

		function absFloor (number) {
			if (number < 0) {
				// -0 -> 0
				return Math.ceil(number) || 0;
			} else {
				return Math.floor(number);
			}
		}

		function toInt(argumentForCoercion) {
			var coercedNumber = +argumentForCoercion,
				value = 0;

			if (coercedNumber !== 0 && isFinite(coercedNumber)) {
				value = absFloor(coercedNumber);
			}

			return value;
		}

		// compare two arrays, return the number of differences
		function compareArrays(array1, array2, dontConvert) {
			var len = Math.min(array1.length, array2.length),
				lengthDiff = Math.abs(array1.length - array2.length),
				diffs = 0,
				i;
			for (i = 0; i < len; i++) {
				if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
					diffs++;
				}
			}
			return diffs + lengthDiff;
		}

		function warn(msg) {
			if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
				console.warn('Deprecation warning: ' + msg);
			}
		}

		function deprecate(msg, fn) {
			var firstTime = true;

			return extend(function () {
				if (hooks.deprecationHandler != null) {
					hooks.deprecationHandler(null, msg);
				}
				if (firstTime) {
					var args = [];
					var arg;
					for (var i = 0; i < arguments.length; i++) {
						arg = '';
						if (typeof arguments[i] === 'object') {
							arg += '\n[' + i + '] ';
							for (var key in arguments[0]) {
								arg += key + ': ' + arguments[0][key] + ', ';
							}
							arg = arg.slice(0, -2); // Remove trailing comma and space
						} else {
							arg = arguments[i];
						}
						args.push(arg);
					}
					warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
					firstTime = false;
				}
				return fn.apply(this, arguments);
			}, fn);
		}

		var deprecations = {};

		function deprecateSimple(name, msg) {
			if (hooks.deprecationHandler != null) {
				hooks.deprecationHandler(name, msg);
			}
			if (!deprecations[name]) {
				warn(msg);
				deprecations[name] = true;
			}
		}

		hooks.suppressDeprecationWarnings = false;
		hooks.deprecationHandler = null;

		function isFunction(input) {
			return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
		}

		function set (config) {
			var prop, i;
			for (i in config) {
				prop = config[i];
				if (isFunction(prop)) {
					this[i] = prop;
				} else {
					this['_' + i] = prop;
				}
			}
			this._config = config;
			// Lenient ordinal parsing accepts just a number in addition to
			// number + (possibly) stuff coming from _ordinalParseLenient.
			this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
		}

		function mergeConfigs(parentConfig, childConfig) {
			var res = extend({}, parentConfig), prop;
			for (prop in childConfig) {
				if (hasOwnProp(childConfig, prop)) {
					if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
						res[prop] = {};
						extend(res[prop], parentConfig[prop]);
						extend(res[prop], childConfig[prop]);
					} else if (childConfig[prop] != null) {
						res[prop] = childConfig[prop];
					} else {
						delete res[prop];
					}
				}
			}
			for (prop in parentConfig) {
				if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
					// make sure changes to properties don't modify parent config
					res[prop] = extend({}, res[prop]);
				}
			}
			return res;
		}

		function Locale(config) {
			if (config != null) {
				this.set(config);
			}
		}

		var keys;

		if (Object.keys) {
			keys = Object.keys;
		} else {
			keys = function (obj) {
				var i, res = [];
				for (i in obj) {
					if (hasOwnProp(obj, i)) {
						res.push(i);
					}
				}
				return res;
			};
		}

		var keys$1 = keys;

		var defaultCalendar = {
			sameDay : '[Today at] LT',
			nextDay : '[Tomorrow at] LT',
			nextWeek : 'dddd [at] LT',
			lastDay : '[Yesterday at] LT',
			lastWeek : '[Last] dddd [at] LT',
			sameElse : 'L'
		};

		function calendar (key, mom, now) {
			var output = this._calendar[key] || this._calendar['sameElse'];
			return isFunction(output) ? output.call(mom, now) : output;
		}

		var defaultLongDateFormat = {
			LTS  : 'h:mm:ss A',
			LT   : 'h:mm A',
			L    : 'MM/DD/YYYY',
			LL   : 'MMMM D, YYYY',
			LLL  : 'MMMM D, YYYY h:mm A',
			LLLL : 'dddd, MMMM D, YYYY h:mm A'
		};

		function longDateFormat (key) {
			var format = this._longDateFormat[key],
				formatUpper = this._longDateFormat[key.toUpperCase()];

			if (format || !formatUpper) {
				return format;
			}

			this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
				return val.slice(1);
			});

			return this._longDateFormat[key];
		}

		var defaultInvalidDate = 'Invalid date';

		function invalidDate () {
			return this._invalidDate;
		}

		var defaultOrdinal = '%d';
		var defaultOrdinalParse = /\d{1,2}/;

		function ordinal (number) {
			return this._ordinal.replace('%d', number);
		}

		var defaultRelativeTime = {
			future : 'in %s',
			past   : '%s ago',
			s  : 'a few seconds',
			m  : 'a minute',
			mm : '%d minutes',
			h  : 'an hour',
			hh : '%d hours',
			d  : 'a day',
			dd : '%d days',
			M  : 'a month',
			MM : '%d months',
			y  : 'a year',
			yy : '%d years'
		};

		function relativeTime (number, withoutSuffix, string, isFuture) {
			var output = this._relativeTime[string];
			return (isFunction(output)) ?
				output(number, withoutSuffix, string, isFuture) :
				output.replace(/%d/i, number);
		}

		function pastFuture (diff, output) {
			var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
			return isFunction(format) ? format(output) : format.replace(/%s/i, output);
		}

		var aliases = {};

		function addUnitAlias (unit, shorthand) {
			var lowerCase = unit.toLowerCase();
			aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
		}

		function normalizeUnits(units) {
			return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
		}

		function normalizeObjectUnits(inputObject) {
			var normalizedInput = {},
				normalizedProp,
				prop;

			for (prop in inputObject) {
				if (hasOwnProp(inputObject, prop)) {
					normalizedProp = normalizeUnits(prop);
					if (normalizedProp) {
						normalizedInput[normalizedProp] = inputObject[prop];
					}
				}
			}

			return normalizedInput;
		}

		var priorities = {};

		function addUnitPriority(unit, priority) {
			priorities[unit] = priority;
		}

		function getPrioritizedUnits(unitsObj) {
			var units = [];
			for (var u in unitsObj) {
				units.push({unit: u, priority: priorities[u]});
			}
			units.sort(function (a, b) {
				return a.priority - b.priority;
			});
			return units;
		}

		function makeGetSet (unit, keepTime) {
			return function (value) {
				if (value != null) {
					set$1(this, unit, value);
					hooks.updateOffset(this, keepTime);
					return this;
				} else {
					return get(this, unit);
				}
			};
		}

		function get (mom, unit) {
			return mom.isValid() ?
				mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
		}

		function set$1 (mom, unit, value) {
			if (mom.isValid()) {
				mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
			}
		}

		// MOMENTS

		function stringGet (units) {
			units = normalizeUnits(units);
			if (isFunction(this[units])) {
				return this[units]();
			}
			return this;
		}


		function stringSet (units, value) {
			if (typeof units === 'object') {
				units = normalizeObjectUnits(units);
				var prioritized = getPrioritizedUnits(units);
				for (var i = 0; i < prioritized.length; i++) {
					this[prioritized[i].unit](units[prioritized[i].unit]);
				}
			} else {
				units = normalizeUnits(units);
				if (isFunction(this[units])) {
					return this[units](value);
				}
			}
			return this;
		}

		function zeroFill(number, targetLength, forceSign) {
			var absNumber = '' + Math.abs(number),
				zerosToFill = targetLength - absNumber.length,
				sign = number >= 0;
			return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
		}

		var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

		var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

		var formatFunctions = {};

		var formatTokenFunctions = {};

		// token:    'M'
		// padded:   ['MM', 2]
		// ordinal:  'Mo'
		// callback: function () { this.month() + 1 }
		function addFormatToken (token, padded, ordinal, callback) {
			var func = callback;
			if (typeof callback === 'string') {
				func = function () {
					return this[callback]();
				};
			}
			if (token) {
				formatTokenFunctions[token] = func;
			}
			if (padded) {
				formatTokenFunctions[padded[0]] = function () {
					return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
				};
			}
			if (ordinal) {
				formatTokenFunctions[ordinal] = function () {
					return this.localeData().ordinal(func.apply(this, arguments), token);
				};
			}
		}

		function removeFormattingTokens(input) {
			if (input.match(/\[[\s\S]/)) {
				return input.replace(/^\[|\]$/g, '');
			}
			return input.replace(/\\/g, '');
		}

		function makeFormatFunction(format) {
			var array = format.match(formattingTokens), i, length;

			for (i = 0, length = array.length; i < length; i++) {
				if (formatTokenFunctions[array[i]]) {
					array[i] = formatTokenFunctions[array[i]];
				} else {
					array[i] = removeFormattingTokens(array[i]);
				}
			}

			return function (mom) {
				var output = '', i;
				for (i = 0; i < length; i++) {
					output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
				}
				return output;
			};
		}

		// format date using native date object
		function formatMoment(m, format) {
			if (!m.isValid()) {
				return m.localeData().invalidDate();
			}

			format = expandFormat(format, m.localeData());
			formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

			return formatFunctions[format](m);
		}

		function expandFormat(format, locale) {
			var i = 5;

			function replaceLongDateFormatTokens(input) {
				return locale.longDateFormat(input) || input;
			}

			localFormattingTokens.lastIndex = 0;
			while (i >= 0 && localFormattingTokens.test(format)) {
				format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
				localFormattingTokens.lastIndex = 0;
				i -= 1;
			}

			return format;
		}

		var match1         = /\d/;            //       0 - 9
		var match2         = /\d\d/;          //      00 - 99
		var match3         = /\d{3}/;         //     000 - 999
		var match4         = /\d{4}/;         //    0000 - 9999
		var match6         = /[+-]?\d{6}/;    // -999999 - 999999
		var match1to2      = /\d\d?/;         //       0 - 99
		var match3to4      = /\d\d\d\d?/;     //     999 - 9999
		var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
		var match1to3      = /\d{1,3}/;       //       0 - 999
		var match1to4      = /\d{1,4}/;       //       0 - 9999
		var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

		var matchUnsigned  = /\d+/;           //       0 - inf
		var matchSigned    = /[+-]?\d+/;      //    -inf - inf

		var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
		var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

		var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

		// any word (or two) characters or numbers including two/three word month in arabic.
		// includes scottish gaelic two word and hyphenated months
		var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


		var regexes = {};

		function addRegexToken (token, regex, strictRegex) {
			regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
				return (isStrict && strictRegex) ? strictRegex : regex;
			};
		}

		function getParseRegexForToken (token, config) {
			if (!hasOwnProp(regexes, token)) {
				return new RegExp(unescapeFormat(token));
			}

			return regexes[token](config._strict, config._locale);
		}

		// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
		function unescapeFormat(s) {
			return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
				return p1 || p2 || p3 || p4;
			}));
		}

		function regexEscape(s) {
			return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		}

		var tokens = {};

		function addParseToken (token, callback) {
			var i, func = callback;
			if (typeof token === 'string') {
				token = [token];
			}
			if (isNumber(callback)) {
				func = function (input, array) {
					array[callback] = toInt(input);
				};
			}
			for (i = 0; i < token.length; i++) {
				tokens[token[i]] = func;
			}
		}

		function addWeekParseToken (token, callback) {
			addParseToken(token, function (input, array, config, token) {
				config._w = config._w || {};
				callback(input, config._w, config, token);
			});
		}

		function addTimeToArrayFromToken(token, input, config) {
			if (input != null && hasOwnProp(tokens, token)) {
				tokens[token](input, config._a, config, token);
			}
		}

		var YEAR = 0;
		var MONTH = 1;
		var DATE = 2;
		var HOUR = 3;
		var MINUTE = 4;
		var SECOND = 5;
		var MILLISECOND = 6;
		var WEEK = 7;
		var WEEKDAY = 8;

		var indexOf;

		if (Array.prototype.indexOf) {
			indexOf = Array.prototype.indexOf;
		} else {
			indexOf = function (o) {
				// I know
				var i;
				for (i = 0; i < this.length; ++i) {
					if (this[i] === o) {
						return i;
					}
				}
				return -1;
			};
		}

		var indexOf$1 = indexOf;

		function daysInMonth(year, month) {
			return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
		}

		// FORMATTING

		addFormatToken('M', ['MM', 2], 'Mo', function () {
			return this.month() + 1;
		});

		addFormatToken('MMM', 0, 0, function (format) {
			return this.localeData().monthsShort(this, format);
		});

		addFormatToken('MMMM', 0, 0, function (format) {
			return this.localeData().months(this, format);
		});

		// ALIASES

		addUnitAlias('month', 'M');

		// PRIORITY

		addUnitPriority('month', 8);

		// PARSING

		addRegexToken('M',    match1to2);
		addRegexToken('MM',   match1to2, match2);
		addRegexToken('MMM',  function (isStrict, locale) {
			return locale.monthsShortRegex(isStrict);
		});
		addRegexToken('MMMM', function (isStrict, locale) {
			return locale.monthsRegex(isStrict);
		});

		addParseToken(['M', 'MM'], function (input, array) {
			array[MONTH] = toInt(input) - 1;
		});

		addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
			var month = config._locale.monthsParse(input, token, config._strict);
			// if we didn't find a month name, mark the date as invalid.
			if (month != null) {
				array[MONTH] = month;
			} else {
				getParsingFlags(config).invalidMonth = input;
			}
		});

		// LOCALES

		var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
		var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
		function localeMonths (m, format) {
			if (!m) {
				return this._months;
			}
			return isArray(this._months) ? this._months[m.month()] :
				this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
		}

		var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
		function localeMonthsShort (m, format) {
			if (!m) {
				return this._monthsShort;
			}
			return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
				this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
		}

		function handleStrictParse(monthName, format, strict) {
			var i, ii, mom, llc = monthName.toLocaleLowerCase();
			if (!this._monthsParse) {
				// this is not used
				this._monthsParse = [];
				this._longMonthsParse = [];
				this._shortMonthsParse = [];
				for (i = 0; i < 12; ++i) {
					mom = createUTC([2000, i]);
					this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
					this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
				}
			}

			if (strict) {
				if (format === 'MMM') {
					ii = indexOf$1.call(this._shortMonthsParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf$1.call(this._longMonthsParse, llc);
					return ii !== -1 ? ii : null;
				}
			} else {
				if (format === 'MMM') {
					ii = indexOf$1.call(this._shortMonthsParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._longMonthsParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf$1.call(this._longMonthsParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._shortMonthsParse, llc);
					return ii !== -1 ? ii : null;
				}
			}
		}

		function localeMonthsParse (monthName, format, strict) {
			var i, mom, regex;

			if (this._monthsParseExact) {
				return handleStrictParse.call(this, monthName, format, strict);
			}

			if (!this._monthsParse) {
				this._monthsParse = [];
				this._longMonthsParse = [];
				this._shortMonthsParse = [];
			}

			// TODO: add sorting
			// Sorting makes sure if one month (or abbr) is a prefix of another
			// see sorting in computeMonthsParse
			for (i = 0; i < 12; i++) {
				// make the regex if we don't have it already
				mom = createUTC([2000, i]);
				if (strict && !this._longMonthsParse[i]) {
					this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
					this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
				}
				if (!strict && !this._monthsParse[i]) {
					regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
					this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
				}
				// test the regex
				if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
					return i;
				} else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
					return i;
				} else if (!strict && this._monthsParse[i].test(monthName)) {
					return i;
				}
			}
		}

		// MOMENTS

		function setMonth (mom, value) {
			var dayOfMonth;

			if (!mom.isValid()) {
				// No op
				return mom;
			}

			if (typeof value === 'string') {
				if (/^\d+$/.test(value)) {
					value = toInt(value);
				} else {
					value = mom.localeData().monthsParse(value);
					// TODO: Another silent failure?
					if (!isNumber(value)) {
						return mom;
					}
				}
			}

			dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
			mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
			return mom;
		}

		function getSetMonth (value) {
			if (value != null) {
				setMonth(this, value);
				hooks.updateOffset(this, true);
				return this;
			} else {
				return get(this, 'Month');
			}
		}

		function getDaysInMonth () {
			return daysInMonth(this.year(), this.month());
		}

		var defaultMonthsShortRegex = matchWord;
		function monthsShortRegex (isStrict) {
			if (this._monthsParseExact) {
				if (!hasOwnProp(this, '_monthsRegex')) {
					computeMonthsParse.call(this);
				}
				if (isStrict) {
					return this._monthsShortStrictRegex;
				} else {
					return this._monthsShortRegex;
				}
			} else {
				if (!hasOwnProp(this, '_monthsShortRegex')) {
					this._monthsShortRegex = defaultMonthsShortRegex;
				}
				return this._monthsShortStrictRegex && isStrict ?
					this._monthsShortStrictRegex : this._monthsShortRegex;
			}
		}

		var defaultMonthsRegex = matchWord;
		function monthsRegex (isStrict) {
			if (this._monthsParseExact) {
				if (!hasOwnProp(this, '_monthsRegex')) {
					computeMonthsParse.call(this);
				}
				if (isStrict) {
					return this._monthsStrictRegex;
				} else {
					return this._monthsRegex;
				}
			} else {
				if (!hasOwnProp(this, '_monthsRegex')) {
					this._monthsRegex = defaultMonthsRegex;
				}
				return this._monthsStrictRegex && isStrict ?
					this._monthsStrictRegex : this._monthsRegex;
			}
		}

		function computeMonthsParse () {
			function cmpLenRev(a, b) {
				return b.length - a.length;
			}

			var shortPieces = [], longPieces = [], mixedPieces = [],
				i, mom;
			for (i = 0; i < 12; i++) {
				// make the regex if we don't have it already
				mom = createUTC([2000, i]);
				shortPieces.push(this.monthsShort(mom, ''));
				longPieces.push(this.months(mom, ''));
				mixedPieces.push(this.months(mom, ''));
				mixedPieces.push(this.monthsShort(mom, ''));
			}
			// Sorting makes sure if one month (or abbr) is a prefix of another it
			// will match the longer piece.
			shortPieces.sort(cmpLenRev);
			longPieces.sort(cmpLenRev);
			mixedPieces.sort(cmpLenRev);
			for (i = 0; i < 12; i++) {
				shortPieces[i] = regexEscape(shortPieces[i]);
				longPieces[i] = regexEscape(longPieces[i]);
			}
			for (i = 0; i < 24; i++) {
				mixedPieces[i] = regexEscape(mixedPieces[i]);
			}

			this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			this._monthsShortRegex = this._monthsRegex;
			this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
			this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
		}

		// FORMATTING

		addFormatToken('Y', 0, 0, function () {
			var y = this.year();
			return y <= 9999 ? '' + y : '+' + y;
		});

		addFormatToken(0, ['YY', 2], 0, function () {
			return this.year() % 100;
		});

		addFormatToken(0, ['YYYY',   4],       0, 'year');
		addFormatToken(0, ['YYYYY',  5],       0, 'year');
		addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

		// ALIASES

		addUnitAlias('year', 'y');

		// PRIORITIES

		addUnitPriority('year', 1);

		// PARSING

		addRegexToken('Y',      matchSigned);
		addRegexToken('YY',     match1to2, match2);
		addRegexToken('YYYY',   match1to4, match4);
		addRegexToken('YYYYY',  match1to6, match6);
		addRegexToken('YYYYYY', match1to6, match6);

		addParseToken(['YYYYY', 'YYYYYY'], YEAR);
		addParseToken('YYYY', function (input, array) {
			array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
		});
		addParseToken('YY', function (input, array) {
			array[YEAR] = hooks.parseTwoDigitYear(input);
		});
		addParseToken('Y', function (input, array) {
			array[YEAR] = parseInt(input, 10);
		});

		// HELPERS

		function daysInYear(year) {
			return isLeapYear(year) ? 366 : 365;
		}

		function isLeapYear(year) {
			return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
		}

		// HOOKS

		hooks.parseTwoDigitYear = function (input) {
			return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
		};

		// MOMENTS

		var getSetYear = makeGetSet('FullYear', true);

		function getIsLeapYear () {
			return isLeapYear(this.year());
		}

		function createDate (y, m, d, h, M, s, ms) {
			//can't just apply() to create a date:
			//http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
			var date = new Date(y, m, d, h, M, s, ms);

			//the date constructor remaps years 0-99 to 1900-1999
			if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
				date.setFullYear(y);
			}
			return date;
		}

		function createUTCDate (y) {
			var date = new Date(Date.UTC.apply(null, arguments));

			//the Date.UTC function remaps years 0-99 to 1900-1999
			if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
				date.setUTCFullYear(y);
			}
			return date;
		}

		// start-of-first-week - start-of-year
		function firstWeekOffset(year, dow, doy) {
			var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
				fwd = 7 + dow - doy,
				// first-week day local weekday -- which local weekday is fwd
				fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

			return -fwdlw + fwd - 1;
		}

		//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
		function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
			var localWeekday = (7 + weekday - dow) % 7,
				weekOffset = firstWeekOffset(year, dow, doy),
				dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
				resYear, resDayOfYear;

			if (dayOfYear <= 0) {
				resYear = year - 1;
				resDayOfYear = daysInYear(resYear) + dayOfYear;
			} else if (dayOfYear > daysInYear(year)) {
				resYear = year + 1;
				resDayOfYear = dayOfYear - daysInYear(year);
			} else {
				resYear = year;
				resDayOfYear = dayOfYear;
			}

			return {
				year: resYear,
				dayOfYear: resDayOfYear
			};
		}

		function weekOfYear(mom, dow, doy) {
			var weekOffset = firstWeekOffset(mom.year(), dow, doy),
				week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
				resWeek, resYear;

			if (week < 1) {
				resYear = mom.year() - 1;
				resWeek = week + weeksInYear(resYear, dow, doy);
			} else if (week > weeksInYear(mom.year(), dow, doy)) {
				resWeek = week - weeksInYear(mom.year(), dow, doy);
				resYear = mom.year() + 1;
			} else {
				resYear = mom.year();
				resWeek = week;
			}

			return {
				week: resWeek,
				year: resYear
			};
		}

		function weeksInYear(year, dow, doy) {
			var weekOffset = firstWeekOffset(year, dow, doy),
				weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
			return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
		}

		// FORMATTING

		addFormatToken('w', ['ww', 2], 'wo', 'week');
		addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

		// ALIASES

		addUnitAlias('week', 'w');
		addUnitAlias('isoWeek', 'W');

		// PRIORITIES

		addUnitPriority('week', 5);
		addUnitPriority('isoWeek', 5);

		// PARSING

		addRegexToken('w',  match1to2);
		addRegexToken('ww', match1to2, match2);
		addRegexToken('W',  match1to2);
		addRegexToken('WW', match1to2, match2);

		addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
			week[token.substr(0, 1)] = toInt(input);
		});

		// HELPERS

		// LOCALES

		function localeWeek (mom) {
			return weekOfYear(mom, this._week.dow, this._week.doy).week;
		}

		var defaultLocaleWeek = {
			dow : 0, // Sunday is the first day of the week.
			doy : 6  // The week that contains Jan 1st is the first week of the year.
		};

		function localeFirstDayOfWeek () {
			return this._week.dow;
		}

		function localeFirstDayOfYear () {
			return this._week.doy;
		}

		// MOMENTS

		function getSetWeek (input) {
			var week = this.localeData().week(this);
			return input == null ? week : this.add((input - week) * 7, 'd');
		}

		function getSetISOWeek (input) {
			var week = weekOfYear(this, 1, 4).week;
			return input == null ? week : this.add((input - week) * 7, 'd');
		}

		// FORMATTING

		addFormatToken('d', 0, 'do', 'day');

		addFormatToken('dd', 0, 0, function (format) {
			return this.localeData().weekdaysMin(this, format);
		});

		addFormatToken('ddd', 0, 0, function (format) {
			return this.localeData().weekdaysShort(this, format);
		});

		addFormatToken('dddd', 0, 0, function (format) {
			return this.localeData().weekdays(this, format);
		});

		addFormatToken('e', 0, 0, 'weekday');
		addFormatToken('E', 0, 0, 'isoWeekday');

		// ALIASES

		addUnitAlias('day', 'd');
		addUnitAlias('weekday', 'e');
		addUnitAlias('isoWeekday', 'E');

		// PRIORITY
		addUnitPriority('day', 11);
		addUnitPriority('weekday', 11);
		addUnitPriority('isoWeekday', 11);

		// PARSING

		addRegexToken('d',    match1to2);
		addRegexToken('e',    match1to2);
		addRegexToken('E',    match1to2);
		addRegexToken('dd',   function (isStrict, locale) {
			return locale.weekdaysMinRegex(isStrict);
		});
		addRegexToken('ddd',   function (isStrict, locale) {
			return locale.weekdaysShortRegex(isStrict);
		});
		addRegexToken('dddd',   function (isStrict, locale) {
			return locale.weekdaysRegex(isStrict);
		});

		addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
			var weekday = config._locale.weekdaysParse(input, token, config._strict);
			// if we didn't get a weekday name, mark the date as invalid
			if (weekday != null) {
				week.d = weekday;
			} else {
				getParsingFlags(config).invalidWeekday = input;
			}
		});

		addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
			week[token] = toInt(input);
		});

		// HELPERS

		function parseWeekday(input, locale) {
			if (typeof input !== 'string') {
				return input;
			}

			if (!isNaN(input)) {
				return parseInt(input, 10);
			}

			input = locale.weekdaysParse(input);
			if (typeof input === 'number') {
				return input;
			}

			return null;
		}

		function parseIsoWeekday(input, locale) {
			if (typeof input === 'string') {
				return locale.weekdaysParse(input) % 7 || 7;
			}
			return isNaN(input) ? null : input;
		}

		// LOCALES

		var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
		function localeWeekdays (m, format) {
			if (!m) {
				return this._weekdays;
			}
			return isArray(this._weekdays) ? this._weekdays[m.day()] :
				this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
		}

		var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
		function localeWeekdaysShort (m) {
			return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
		}

		var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
		function localeWeekdaysMin (m) {
			return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
		}

		function handleStrictParse$1(weekdayName, format, strict) {
			var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
			if (!this._weekdaysParse) {
				this._weekdaysParse = [];
				this._shortWeekdaysParse = [];
				this._minWeekdaysParse = [];

				for (i = 0; i < 7; ++i) {
					mom = createUTC([2000, 1]).day(i);
					this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
					this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
					this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
				}
			}

			if (strict) {
				if (format === 'dddd') {
					ii = indexOf$1.call(this._weekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else if (format === 'ddd') {
					ii = indexOf$1.call(this._shortWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf$1.call(this._minWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				}
			} else {
				if (format === 'dddd') {
					ii = indexOf$1.call(this._weekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._shortWeekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._minWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else if (format === 'ddd') {
					ii = indexOf$1.call(this._shortWeekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._weekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._minWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf$1.call(this._minWeekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._weekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf$1.call(this._shortWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				}
			}
		}

		function localeWeekdaysParse (weekdayName, format, strict) {
			var i, mom, regex;

			if (this._weekdaysParseExact) {
				return handleStrictParse$1.call(this, weekdayName, format, strict);
			}

			if (!this._weekdaysParse) {
				this._weekdaysParse = [];
				this._minWeekdaysParse = [];
				this._shortWeekdaysParse = [];
				this._fullWeekdaysParse = [];
			}

			for (i = 0; i < 7; i++) {
				// make the regex if we don't have it already

				mom = createUTC([2000, 1]).day(i);
				if (strict && !this._fullWeekdaysParse[i]) {
					this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
					this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
					this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
				}
				if (!this._weekdaysParse[i]) {
					regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
					this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
				}
				// test the regex
				if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
					return i;
				} else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
					return i;
				} else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
					return i;
				} else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
					return i;
				}
			}
		}

		// MOMENTS

		function getSetDayOfWeek (input) {
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
			var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
			if (input != null) {
				input = parseWeekday(input, this.localeData());
				return this.add(input - day, 'd');
			} else {
				return day;
			}
		}

		function getSetLocaleDayOfWeek (input) {
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
			var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
			return input == null ? weekday : this.add(input - weekday, 'd');
		}

		function getSetISODayOfWeek (input) {
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}

			// behaves the same as moment#day except
			// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
			// as a setter, sunday should belong to the previous week.

			if (input != null) {
				var weekday = parseIsoWeekday(input, this.localeData());
				return this.day(this.day() % 7 ? weekday : weekday - 7);
			} else {
				return this.day() || 7;
			}
		}

		var defaultWeekdaysRegex = matchWord;
		function weekdaysRegex (isStrict) {
			if (this._weekdaysParseExact) {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					computeWeekdaysParse.call(this);
				}
				if (isStrict) {
					return this._weekdaysStrictRegex;
				} else {
					return this._weekdaysRegex;
				}
			} else {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					this._weekdaysRegex = defaultWeekdaysRegex;
				}
				return this._weekdaysStrictRegex && isStrict ?
					this._weekdaysStrictRegex : this._weekdaysRegex;
			}
		}

		var defaultWeekdaysShortRegex = matchWord;
		function weekdaysShortRegex (isStrict) {
			if (this._weekdaysParseExact) {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					computeWeekdaysParse.call(this);
				}
				if (isStrict) {
					return this._weekdaysShortStrictRegex;
				} else {
					return this._weekdaysShortRegex;
				}
			} else {
				if (!hasOwnProp(this, '_weekdaysShortRegex')) {
					this._weekdaysShortRegex = defaultWeekdaysShortRegex;
				}
				return this._weekdaysShortStrictRegex && isStrict ?
					this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
			}
		}

		var defaultWeekdaysMinRegex = matchWord;
		function weekdaysMinRegex (isStrict) {
			if (this._weekdaysParseExact) {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					computeWeekdaysParse.call(this);
				}
				if (isStrict) {
					return this._weekdaysMinStrictRegex;
				} else {
					return this._weekdaysMinRegex;
				}
			} else {
				if (!hasOwnProp(this, '_weekdaysMinRegex')) {
					this._weekdaysMinRegex = defaultWeekdaysMinRegex;
				}
				return this._weekdaysMinStrictRegex && isStrict ?
					this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
			}
		}


		function computeWeekdaysParse () {
			function cmpLenRev(a, b) {
				return b.length - a.length;
			}

			var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
				i, mom, minp, shortp, longp;
			for (i = 0; i < 7; i++) {
				// make the regex if we don't have it already
				mom = createUTC([2000, 1]).day(i);
				minp = this.weekdaysMin(mom, '');
				shortp = this.weekdaysShort(mom, '');
				longp = this.weekdays(mom, '');
				minPieces.push(minp);
				shortPieces.push(shortp);
				longPieces.push(longp);
				mixedPieces.push(minp);
				mixedPieces.push(shortp);
				mixedPieces.push(longp);
			}
			// Sorting makes sure if one weekday (or abbr) is a prefix of another it
			// will match the longer piece.
			minPieces.sort(cmpLenRev);
			shortPieces.sort(cmpLenRev);
			longPieces.sort(cmpLenRev);
			mixedPieces.sort(cmpLenRev);
			for (i = 0; i < 7; i++) {
				shortPieces[i] = regexEscape(shortPieces[i]);
				longPieces[i] = regexEscape(longPieces[i]);
				mixedPieces[i] = regexEscape(mixedPieces[i]);
			}

			this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			this._weekdaysShortRegex = this._weekdaysRegex;
			this._weekdaysMinRegex = this._weekdaysRegex;

			this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
			this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
			this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
		}

		// FORMATTING

		function hFormat() {
			return this.hours() % 12 || 12;
		}

		function kFormat() {
			return this.hours() || 24;
		}

		addFormatToken('H', ['HH', 2], 0, 'hour');
		addFormatToken('h', ['hh', 2], 0, hFormat);
		addFormatToken('k', ['kk', 2], 0, kFormat);

		addFormatToken('hmm', 0, 0, function () {
			return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
		});

		addFormatToken('hmmss', 0, 0, function () {
			return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
		});

		addFormatToken('Hmm', 0, 0, function () {
			return '' + this.hours() + zeroFill(this.minutes(), 2);
		});

		addFormatToken('Hmmss', 0, 0, function () {
			return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
		});

		function meridiem (token, lowercase) {
			addFormatToken(token, 0, 0, function () {
				return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
			});
		}

		meridiem('a', true);
		meridiem('A', false);

		// ALIASES

		addUnitAlias('hour', 'h');

		// PRIORITY
		addUnitPriority('hour', 13);

		// PARSING

		function matchMeridiem (isStrict, locale) {
			return locale._meridiemParse;
		}

		addRegexToken('a',  matchMeridiem);
		addRegexToken('A',  matchMeridiem);
		addRegexToken('H',  match1to2);
		addRegexToken('h',  match1to2);
		addRegexToken('HH', match1to2, match2);
		addRegexToken('hh', match1to2, match2);

		addRegexToken('hmm', match3to4);
		addRegexToken('hmmss', match5to6);
		addRegexToken('Hmm', match3to4);
		addRegexToken('Hmmss', match5to6);

		addParseToken(['H', 'HH'], HOUR);
		addParseToken(['a', 'A'], function (input, array, config) {
			config._isPm = config._locale.isPM(input);
			config._meridiem = input;
		});
		addParseToken(['h', 'hh'], function (input, array, config) {
			array[HOUR] = toInt(input);
			getParsingFlags(config).bigHour = true;
		});
		addParseToken('hmm', function (input, array, config) {
			var pos = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos));
			array[MINUTE] = toInt(input.substr(pos));
			getParsingFlags(config).bigHour = true;
		});
		addParseToken('hmmss', function (input, array, config) {
			var pos1 = input.length - 4;
			var pos2 = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos1));
			array[MINUTE] = toInt(input.substr(pos1, 2));
			array[SECOND] = toInt(input.substr(pos2));
			getParsingFlags(config).bigHour = true;
		});
		addParseToken('Hmm', function (input, array, config) {
			var pos = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos));
			array[MINUTE] = toInt(input.substr(pos));
		});
		addParseToken('Hmmss', function (input, array, config) {
			var pos1 = input.length - 4;
			var pos2 = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos1));
			array[MINUTE] = toInt(input.substr(pos1, 2));
			array[SECOND] = toInt(input.substr(pos2));
		});

		// LOCALES

		function localeIsPM (input) {
			// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
			// Using charAt should be more compatible.
			return ((input + '').toLowerCase().charAt(0) === 'p');
		}

		var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
		function localeMeridiem (hours, minutes, isLower) {
			if (hours > 11) {
				return isLower ? 'pm' : 'PM';
			} else {
				return isLower ? 'am' : 'AM';
			}
		}


		// MOMENTS

		// Setting the hour should keep the time, because the user explicitly
		// specified which hour he wants. So trying to maintain the same hour (in
		// a new timezone) makes sense. Adding/subtracting hours does not follow
		// this rule.
		var getSetHour = makeGetSet('Hours', true);

		// months
		// week
		// weekdays
		// meridiem
		var baseConfig = {
			calendar: defaultCalendar,
			longDateFormat: defaultLongDateFormat,
			invalidDate: defaultInvalidDate,
			ordinal: defaultOrdinal,
			ordinalParse: defaultOrdinalParse,
			relativeTime: defaultRelativeTime,

			months: defaultLocaleMonths,
			monthsShort: defaultLocaleMonthsShort,

			week: defaultLocaleWeek,

			weekdays: defaultLocaleWeekdays,
			weekdaysMin: defaultLocaleWeekdaysMin,
			weekdaysShort: defaultLocaleWeekdaysShort,

			meridiemParse: defaultLocaleMeridiemParse
		};

		// internal storage for locale config files
		var locales = {};
		var localeFamilies = {};
		var globalLocale;

		function normalizeLocale(key) {
			return key ? key.toLowerCase().replace('_', '-') : key;
		}

		// pick the locale from the array
		// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
		// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
		function chooseLocale(names) {
			var i = 0, j, next, locale, split;

			while (i < names.length) {
				split = normalizeLocale(names[i]).split('-');
				j = split.length;
				next = normalizeLocale(names[i + 1]);
				next = next ? next.split('-') : null;
				while (j > 0) {
					locale = loadLocale(split.slice(0, j).join('-'));
					if (locale) {
						return locale;
					}
					if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
						//the next array item is better than a shallower substring of this one
						break;
					}
					j--;
				}
				i++;
			}
			return null;
		}

		function loadLocale(name) {
			var oldLocale = null;
			// TODO: Find a better way to register and load all the locales in Node
			if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
				try {
					oldLocale = globalLocale._abbr;
					require('./locale/' + name);
					// because defineLocale currently also sets the global locale, we
					// want to undo that for lazy loaded locales
					getSetGlobalLocale(oldLocale);
				} catch (e) { }
			}
			return locales[name];
		}

		// This function will load locale and then set the global locale.  If
		// no arguments are passed in, it will simply return the current global
		// locale key.
		function getSetGlobalLocale (key, values) {
			var data;
			if (key) {
				if (isUndefined(values)) {
					data = getLocale(key);
				}
				else {
					data = defineLocale(key, values);
				}

				if (data) {
					// moment.duration._locale = moment._locale = data;
					globalLocale = data;
				}
			}

			return globalLocale._abbr;
		}

		function defineLocale (name, config) {
			if (config !== null) {
				var parentConfig = baseConfig;
				config.abbr = name;
				if (locales[name] != null) {
					deprecateSimple('defineLocaleOverride',
						'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
					parentConfig = locales[name]._config;
				} else if (config.parentLocale != null) {
					if (locales[config.parentLocale] != null) {
						parentConfig = locales[config.parentLocale]._config;
					} else {
						if (!localeFamilies[config.parentLocale]) {
							localeFamilies[config.parentLocale] = [];
						}
						localeFamilies[config.parentLocale].push({
							name: name,
							config: config
						});
						return null;
					}
				}
				locales[name] = new Locale(mergeConfigs(parentConfig, config));

				if (localeFamilies[name]) {
					localeFamilies[name].forEach(function (x) {
						defineLocale(x.name, x.config);
					});
				}

				// backwards compat for now: also set the locale
				// make sure we set the locale AFTER all child locales have been
				// created, so we won't end up with the child locale set.
				getSetGlobalLocale(name);


				return locales[name];
			} else {
				// useful for testing
				delete locales[name];
				return null;
			}
		}

		function updateLocale(name, config) {
			if (config != null) {
				var locale, parentConfig = baseConfig;
				// MERGE
				if (locales[name] != null) {
					parentConfig = locales[name]._config;
				}
				config = mergeConfigs(parentConfig, config);
				locale = new Locale(config);
				locale.parentLocale = locales[name];
				locales[name] = locale;

				// backwards compat for now: also set the locale
				getSetGlobalLocale(name);
			} else {
				// pass null for config to unupdate, useful for tests
				if (locales[name] != null) {
					if (locales[name].parentLocale != null) {
						locales[name] = locales[name].parentLocale;
					} else if (locales[name] != null) {
						delete locales[name];
					}
				}
			}
			return locales[name];
		}

		// returns locale data
		function getLocale (key) {
			var locale;

			if (key && key._locale && key._locale._abbr) {
				key = key._locale._abbr;
			}

			if (!key) {
				return globalLocale;
			}

			if (!isArray(key)) {
				//short-circuit everything else
				locale = loadLocale(key);
				if (locale) {
					return locale;
				}
				key = [key];
			}

			return chooseLocale(key);
		}

		function listLocales() {
			return keys$1(locales);
		}

		function checkOverflow (m) {
			var overflow;
			var a = m._a;

			if (a && getParsingFlags(m).overflow === -2) {
				overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            	a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            		a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            			a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            				a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            					a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            						-1;

				if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
					overflow = DATE;
				}
				if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
					overflow = WEEK;
				}
				if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
					overflow = WEEKDAY;
				}

				getParsingFlags(m).overflow = overflow;
			}

			return m;
		}

		// iso 8601 regex
		// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
		var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
		var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

		var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

		var isoDates = [
			['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
			['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
			['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
			['GGGG-[W]WW', /\d{4}-W\d\d/, false],
			['YYYY-DDD', /\d{4}-\d{3}/],
			['YYYY-MM', /\d{4}-\d\d/, false],
			['YYYYYYMMDD', /[+-]\d{10}/],
			['YYYYMMDD', /\d{8}/],
			// YYYYMM is NOT allowed by the standard
			['GGGG[W]WWE', /\d{4}W\d{3}/],
			['GGGG[W]WW', /\d{4}W\d{2}/, false],
			['YYYYDDD', /\d{7}/]
		];

		// iso time formats and regexes
		var isoTimes = [
			['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
			['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
			['HH:mm:ss', /\d\d:\d\d:\d\d/],
			['HH:mm', /\d\d:\d\d/],
			['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
			['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
			['HHmmss', /\d\d\d\d\d\d/],
			['HHmm', /\d\d\d\d/],
			['HH', /\d\d/]
		];

		var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

		// date from iso format
		function configFromISO(config) {
			var i, l,
				string = config._i,
				match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
				allowTime, dateFormat, timeFormat, tzFormat;

			if (match) {
				getParsingFlags(config).iso = true;

				for (i = 0, l = isoDates.length; i < l; i++) {
					if (isoDates[i][1].exec(match[1])) {
						dateFormat = isoDates[i][0];
						allowTime = isoDates[i][2] !== false;
						break;
					}
				}
				if (dateFormat == null) {
					config._isValid = false;
					return;
				}
				if (match[3]) {
					for (i = 0, l = isoTimes.length; i < l; i++) {
						if (isoTimes[i][1].exec(match[3])) {
							// match[2] should be 'T' or space
							timeFormat = (match[2] || ' ') + isoTimes[i][0];
							break;
						}
					}
					if (timeFormat == null) {
						config._isValid = false;
						return;
					}
				}
				if (!allowTime && timeFormat != null) {
					config._isValid = false;
					return;
				}
				if (match[4]) {
					if (tzRegex.exec(match[4])) {
						tzFormat = 'Z';
					} else {
						config._isValid = false;
						return;
					}
				}
				config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
				configFromStringAndFormat(config);
			} else {
				config._isValid = false;
			}
		}

		// date from iso format or fallback
		function configFromString(config) {
			var matched = aspNetJsonRegex.exec(config._i);

			if (matched !== null) {
				config._d = new Date(+matched[1]);
				return;
			}

			configFromISO(config);
			if (config._isValid === false) {
				delete config._isValid;
				hooks.createFromInputFallback(config);
			}
		}

		hooks.createFromInputFallback = deprecate(
			'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
			function (config) {
				config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
			}
		);

		// Pick the first defined of two or three arguments.
		function defaults(a, b, c) {
			if (a != null) {
				return a;
			}
			if (b != null) {
				return b;
			}
			return c;
		}

		function currentDateArray(config) {
			// hooks is actually the exported moment object
			var nowValue = new Date(hooks.now());
			if (config._useUTC) {
				return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
			}
			return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
		}

		// convert an array to a date.
		// the array should mirror the parameters below
		// note: all values past the year are optional and will default to the lowest possible value.
		// [year, month, day , hour, minute, second, millisecond]
		function configFromArray (config) {
			var i, date, input = [], currentDate, yearToUse;

			if (config._d) {
				return;
			}

			currentDate = currentDateArray(config);

			//compute day of the year from weeks and weekdays
			if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
				dayOfYearFromWeekInfo(config);
			}

			//if the day of the year is set, figure out what it is
			if (config._dayOfYear) {
				yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

				if (config._dayOfYear > daysInYear(yearToUse)) {
					getParsingFlags(config)._overflowDayOfYear = true;
				}

				date = createUTCDate(yearToUse, 0, config._dayOfYear);
				config._a[MONTH] = date.getUTCMonth();
				config._a[DATE] = date.getUTCDate();
			}

			// Default to current date.
			// * if no year, month, day of month are given, default to today
			// * if day of month is given, default month and year
			// * if month is given, default only year
			// * if year is given, don't default anything
			for (i = 0; i < 3 && config._a[i] == null; ++i) {
				config._a[i] = input[i] = currentDate[i];
			}

			// Zero out whatever was not defaulted, including time
			for (; i < 7; i++) {
				config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
			}

			// Check for 24:00:00.000
			if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
				config._nextDay = true;
				config._a[HOUR] = 0;
			}

			config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
			// Apply timezone offset from input. The actual utcOffset can be changed
			// with parseZone.
			if (config._tzm != null) {
				config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
			}

			if (config._nextDay) {
				config._a[HOUR] = 24;
			}
		}

		function dayOfYearFromWeekInfo(config) {
			var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

			w = config._w;
			if (w.GG != null || w.W != null || w.E != null) {
				dow = 1;
				doy = 4;

				// TODO: We need to take the current isoWeekYear, but that depends on
				// how we interpret now (local, utc, fixed offset). So create
				// a now version of current config (take local/utc/offset flags, and
				// create now).
				weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
				week = defaults(w.W, 1);
				weekday = defaults(w.E, 1);
				if (weekday < 1 || weekday > 7) {
					weekdayOverflow = true;
				}
			} else {
				dow = config._locale._week.dow;
				doy = config._locale._week.doy;

				var curWeek = weekOfYear(createLocal(), dow, doy);

				weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

				// Default to current week.
				week = defaults(w.w, curWeek.week);

				if (w.d != null) {
					// weekday -- low day numbers are considered next week
					weekday = w.d;
					if (weekday < 0 || weekday > 6) {
						weekdayOverflow = true;
					}
				} else if (w.e != null) {
					// local weekday -- counting starts from begining of week
					weekday = w.e + dow;
					if (w.e < 0 || w.e > 6) {
						weekdayOverflow = true;
					}
				} else {
					// default to begining of week
					weekday = dow;
				}
			}
			if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
				getParsingFlags(config)._overflowWeeks = true;
			} else if (weekdayOverflow != null) {
				getParsingFlags(config)._overflowWeekday = true;
			} else {
				temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
				config._a[YEAR] = temp.year;
				config._dayOfYear = temp.dayOfYear;
			}
		}

		// constant that refers to the ISO standard
		hooks.ISO_8601 = function () {};

		// date from string and format string
		function configFromStringAndFormat(config) {
			// TODO: Move this to another part of the creation flow to prevent circular deps
			if (config._f === hooks.ISO_8601) {
				configFromISO(config);
				return;
			}

			config._a = [];
			getParsingFlags(config).empty = true;

			// This array is used to make a Date, either with `new Date` or `Date.UTC`
			var string = '' + config._i,
				i, parsedInput, tokens, token, skipped,
				stringLength = string.length,
				totalParsedInputLength = 0;

			tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

			for (i = 0; i < tokens.length; i++) {
				token = tokens[i];
				parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
				// console.log('token', token, 'parsedInput', parsedInput,
				//         'regex', getParseRegexForToken(token, config));
				if (parsedInput) {
					skipped = string.substr(0, string.indexOf(parsedInput));
					if (skipped.length > 0) {
						getParsingFlags(config).unusedInput.push(skipped);
					}
					string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
					totalParsedInputLength += parsedInput.length;
				}
				// don't parse if it's not a known token
				if (formatTokenFunctions[token]) {
					if (parsedInput) {
						getParsingFlags(config).empty = false;
					}
					else {
						getParsingFlags(config).unusedTokens.push(token);
					}
					addTimeToArrayFromToken(token, parsedInput, config);
				}
				else if (config._strict && !parsedInput) {
					getParsingFlags(config).unusedTokens.push(token);
				}
			}

			// add remaining unparsed input length to the string
			getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
			if (string.length > 0) {
				getParsingFlags(config).unusedInput.push(string);
			}

			// clear _12h flag if hour is <= 12
			if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
				getParsingFlags(config).bigHour = undefined;
			}

			getParsingFlags(config).parsedDateParts = config._a.slice(0);
			getParsingFlags(config).meridiem = config._meridiem;
			// handle meridiem
			config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

			configFromArray(config);
			checkOverflow(config);
		}


		function meridiemFixWrap (locale, hour, meridiem) {
			var isPm;

			if (meridiem == null) {
				// nothing to do
				return hour;
			}
			if (locale.meridiemHour != null) {
				return locale.meridiemHour(hour, meridiem);
			} else if (locale.isPM != null) {
				// Fallback
				isPm = locale.isPM(meridiem);
				if (isPm && hour < 12) {
					hour += 12;
				}
				if (!isPm && hour === 12) {
					hour = 0;
				}
				return hour;
			} else {
				// this is not supposed to happen
				return hour;
			}
		}

		// date from string and array of format strings
		function configFromStringAndArray(config) {
			var tempConfig,
				bestMoment,

				scoreToBeat,
				i,
				currentScore;

			if (config._f.length === 0) {
				getParsingFlags(config).invalidFormat = true;
				config._d = new Date(NaN);
				return;
			}

			for (i = 0; i < config._f.length; i++) {
				currentScore = 0;
				tempConfig = copyConfig({}, config);
				if (config._useUTC != null) {
					tempConfig._useUTC = config._useUTC;
				}
				tempConfig._f = config._f[i];
				configFromStringAndFormat(tempConfig);

				if (!isValid(tempConfig)) {
					continue;
				}

				// if there is any input that was not parsed add a penalty for that format
				currentScore += getParsingFlags(tempConfig).charsLeftOver;

				//or tokens
				currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

				getParsingFlags(tempConfig).score = currentScore;

				if (scoreToBeat == null || currentScore < scoreToBeat) {
					scoreToBeat = currentScore;
					bestMoment = tempConfig;
				}
			}

			extend(config, bestMoment || tempConfig);
		}

		function configFromObject(config) {
			if (config._d) {
				return;
			}

			var i = normalizeObjectUnits(config._i);
			config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
				return obj && parseInt(obj, 10);
			});

			configFromArray(config);
		}

		function createFromConfig (config) {
			var res = new Moment(checkOverflow(prepareConfig(config)));
			if (res._nextDay) {
				// Adding is smart enough around DST
				res.add(1, 'd');
				res._nextDay = undefined;
			}

			return res;
		}

		function prepareConfig (config) {
			var input = config._i,
				format = config._f;

			config._locale = config._locale || getLocale(config._l);

			if (input === null || (format === undefined && input === '')) {
				return createInvalid({nullInput: true});
			}

			if (typeof input === 'string') {
				config._i = input = config._locale.preparse(input);
			}

			if (isMoment(input)) {
				return new Moment(checkOverflow(input));
			} else if (isDate(input)) {
				config._d = input;
			} else if (isArray(format)) {
				configFromStringAndArray(config);
			} else if (format) {
				configFromStringAndFormat(config);
			}  else {
				configFromInput(config);
			}

			if (!isValid(config)) {
				config._d = null;
			}

			return config;
		}

		function configFromInput(config) {
			var input = config._i;
			if (input === undefined) {
				config._d = new Date(hooks.now());
			} else if (isDate(input)) {
				config._d = new Date(input.valueOf());
			} else if (typeof input === 'string') {
				configFromString(config);
			} else if (isArray(input)) {
				config._a = map(input.slice(0), function (obj) {
					return parseInt(obj, 10);
				});
				configFromArray(config);
			} else if (typeof(input) === 'object') {
				configFromObject(config);
			} else if (isNumber(input)) {
				// from milliseconds
				config._d = new Date(input);
			} else {
				hooks.createFromInputFallback(config);
			}
		}

		function createLocalOrUTC (input, format, locale, strict, isUTC) {
			var c = {};

			if (locale === true || locale === false) {
				strict = locale;
				locale = undefined;
			}

			if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
				input = undefined;
			}
			// object construction must be done this way.
			// https://github.com/moment/moment/issues/1423
			c._isAMomentObject = true;
			c._useUTC = c._isUTC = isUTC;
			c._l = locale;
			c._i = input;
			c._f = format;
			c._strict = strict;

			return createFromConfig(c);
		}

		function createLocal (input, format, locale, strict) {
			return createLocalOrUTC(input, format, locale, strict, false);
		}

		var prototypeMin = deprecate(
			'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
			function () {
				var other = createLocal.apply(null, arguments);
				if (this.isValid() && other.isValid()) {
					return other < this ? this : other;
				} else {
					return createInvalid();
				}
			}
		);

		var prototypeMax = deprecate(
			'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
			function () {
				var other = createLocal.apply(null, arguments);
				if (this.isValid() && other.isValid()) {
					return other > this ? this : other;
				} else {
					return createInvalid();
				}
			}
		);

		// Pick a moment m from moments so that m[fn](other) is true for all
		// other. This relies on the function fn to be transitive.
		//
		// moments should either be an array of moment objects or an array, whose
		// first element is an array of moment objects.
		function pickBy(fn, moments) {
			var res, i;
			if (moments.length === 1 && isArray(moments[0])) {
				moments = moments[0];
			}
			if (!moments.length) {
				return createLocal();
			}
			res = moments[0];
			for (i = 1; i < moments.length; ++i) {
				if (!moments[i].isValid() || moments[i][fn](res)) {
					res = moments[i];
				}
			}
			return res;
		}

		// TODO: Use [].sort instead?
		function min () {
			var args = [].slice.call(arguments, 0);

			return pickBy('isBefore', args);
		}

		function max () {
			var args = [].slice.call(arguments, 0);

			return pickBy('isAfter', args);
		}

		var now = function () {
			return Date.now ? Date.now() : +(new Date());
		};

		function Duration (duration) {
			var normalizedInput = normalizeObjectUnits(duration),
				years = normalizedInput.year || 0,
				quarters = normalizedInput.quarter || 0,
				months = normalizedInput.month || 0,
				weeks = normalizedInput.week || 0,
				days = normalizedInput.day || 0,
				hours = normalizedInput.hour || 0,
				minutes = normalizedInput.minute || 0,
				seconds = normalizedInput.second || 0,
				milliseconds = normalizedInput.millisecond || 0;

			// representation for dateAddRemove
			this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
			// Because of dateAddRemove treats 24 hours as different from a
			// day when working around DST, we need to store them separately
			this._days = +days +
        weeks * 7;
			// It is impossible translate months into days without knowing
			// which months you are are talking about, so we have to store
			// it separately.
			this._months = +months +
        quarters * 3 +
        years * 12;

			this._data = {};

			this._locale = getLocale();

			this._bubble();
		}

		function isDuration (obj) {
			return obj instanceof Duration;
		}

		function absRound (number) {
			if (number < 0) {
				return Math.round(-1 * number) * -1;
			} else {
				return Math.round(number);
			}
		}

		// FORMATTING

		function offset (token, separator) {
			addFormatToken(token, 0, 0, function () {
				var offset = this.utcOffset();
				var sign = '+';
				if (offset < 0) {
					offset = -offset;
					sign = '-';
				}
				return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
			});
		}

		offset('Z', ':');
		offset('ZZ', '');

		// PARSING

		addRegexToken('Z',  matchShortOffset);
		addRegexToken('ZZ', matchShortOffset);
		addParseToken(['Z', 'ZZ'], function (input, array, config) {
			config._useUTC = true;
			config._tzm = offsetFromString(matchShortOffset, input);
		});

		// HELPERS

		// timezone chunker
		// '+10:00' > ['10',  '00']
		// '-1530'  > ['-15', '30']
		var chunkOffset = /([\+\-]|\d\d)/gi;

		function offsetFromString(matcher, string) {
			var matches = (string || '').match(matcher);

			if (matches === null) {
				return null;
			}

			var chunk   = matches[matches.length - 1] || [];
			var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
			var minutes = +(parts[1] * 60) + toInt(parts[2]);

			return minutes === 0 ?
				0 :
				parts[0] === '+' ? minutes : -minutes;
		}

		// Return a moment from input, that is local/utc/zone equivalent to model.
		function cloneWithOffset(input, model) {
			var res, diff;
			if (model._isUTC) {
				res = model.clone();
				diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
				// Use low-level api, because this fn is low-level api.
				res._d.setTime(res._d.valueOf() + diff);
				hooks.updateOffset(res, false);
				return res;
			} else {
				return createLocal(input).local();
			}
		}

		function getDateOffset (m) {
			// On Firefox.24 Date#getTimezoneOffset returns a floating point.
			// https://github.com/moment/moment/pull/1871
			return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
		}

		// HOOKS

		// This function will be called whenever a moment is mutated.
		// It is intended to keep the offset in sync with the timezone.
		hooks.updateOffset = function () {};

		// MOMENTS

		// keepLocalTime = true means only change the timezone, without
		// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
		// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
		// +0200, so we adjust the time as needed, to be valid.
		//
		// Keeping the time actually adds/subtracts (one hour)
		// from the actual represented time. That is why we call updateOffset
		// a second time. In case it wants us to change the offset again
		// _changeInProgress == true case, then we have to adjust, because
		// there is no such time in the given timezone.
		function getSetOffset (input, keepLocalTime) {
			var offset = this._offset || 0,
				localAdjust;
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
			if (input != null) {
				if (typeof input === 'string') {
					input = offsetFromString(matchShortOffset, input);
					if (input === null) {
						return this;
					}
				} else if (Math.abs(input) < 16) {
					input = input * 60;
				}
				if (!this._isUTC && keepLocalTime) {
					localAdjust = getDateOffset(this);
				}
				this._offset = input;
				this._isUTC = true;
				if (localAdjust != null) {
					this.add(localAdjust, 'm');
				}
				if (offset !== input) {
					if (!keepLocalTime || this._changeInProgress) {
						addSubtract(this, createDuration(input - offset, 'm'), 1, false);
					} else if (!this._changeInProgress) {
						this._changeInProgress = true;
						hooks.updateOffset(this, true);
						this._changeInProgress = null;
					}
				}
				return this;
			} else {
				return this._isUTC ? offset : getDateOffset(this);
			}
		}

		function getSetZone (input, keepLocalTime) {
			if (input != null) {
				if (typeof input !== 'string') {
					input = -input;
				}

				this.utcOffset(input, keepLocalTime);

				return this;
			} else {
				return -this.utcOffset();
			}
		}

		function setOffsetToUTC (keepLocalTime) {
			return this.utcOffset(0, keepLocalTime);
		}

		function setOffsetToLocal (keepLocalTime) {
			if (this._isUTC) {
				this.utcOffset(0, keepLocalTime);
				this._isUTC = false;

				if (keepLocalTime) {
					this.subtract(getDateOffset(this), 'm');
				}
			}
			return this;
		}

		function setOffsetToParsedOffset () {
			if (this._tzm != null) {
				this.utcOffset(this._tzm);
			} else if (typeof this._i === 'string') {
				var tZone = offsetFromString(matchOffset, this._i);
				if (tZone != null) {
					this.utcOffset(tZone);
				}
				else {
					this.utcOffset(0, true);
				}
			}
			return this;
		}

		function hasAlignedHourOffset (input) {
			if (!this.isValid()) {
				return false;
			}
			input = input ? createLocal(input).utcOffset() : 0;

			return (this.utcOffset() - input) % 60 === 0;
		}

		function isDaylightSavingTime () {
			return (
				this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
			);
		}

		function isDaylightSavingTimeShifted () {
			if (!isUndefined(this._isDSTShifted)) {
				return this._isDSTShifted;
			}

			var c = {};

			copyConfig(c, this);
			c = prepareConfig(c);

			if (c._a) {
				var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
				this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
			} else {
				this._isDSTShifted = false;
			}

			return this._isDSTShifted;
		}

		function isLocal () {
			return this.isValid() ? !this._isUTC : false;
		}

		function isUtcOffset () {
			return this.isValid() ? this._isUTC : false;
		}

		function isUtc () {
			return this.isValid() ? this._isUTC && this._offset === 0 : false;
		}

		// ASP.NET json date format regex
		var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

		// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
		// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
		// and further modified to allow for strings containing both week and day
		var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

		function createDuration (input, key) {
			var duration = input,
				// matching against regexp is expensive, do it on demand
				match = null,
				sign,
				ret,
				diffRes;

			if (isDuration(input)) {
				duration = {
					ms : input._milliseconds,
					d  : input._days,
					M  : input._months
				};
			} else if (isNumber(input)) {
				duration = {};
				if (key) {
					duration[key] = input;
				} else {
					duration.milliseconds = input;
				}
			} else if (match = aspNetRegex.exec(input)) {
				sign = (match[1] === '-') ? -1 : 1;
				duration = {
					y  : 0,
					d  : toInt(match[DATE])                         * sign,
					h  : toInt(match[HOUR])                         * sign,
					m  : toInt(match[MINUTE])                       * sign,
					s  : toInt(match[SECOND])                       * sign,
					ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
				};
			} else if (match = isoRegex.exec(input)) {
				sign = (match[1] === '-') ? -1 : 1;
				duration = {
					y : parseIso(match[2], sign),
					M : parseIso(match[3], sign),
					w : parseIso(match[4], sign),
					d : parseIso(match[5], sign),
					h : parseIso(match[6], sign),
					m : parseIso(match[7], sign),
					s : parseIso(match[8], sign)
				};
			} else if (duration == null) {// checks for null or undefined
				duration = {};
			} else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
				diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

				duration = {};
				duration.ms = diffRes.milliseconds;
				duration.M = diffRes.months;
			}

			ret = new Duration(duration);

			if (isDuration(input) && hasOwnProp(input, '_locale')) {
				ret._locale = input._locale;
			}

			return ret;
		}

		createDuration.fn = Duration.prototype;

		function parseIso (inp, sign) {
			// We'd normally use ~~inp for this, but unfortunately it also
			// converts floats to ints.
			// inp may be undefined, so careful calling replace on it.
			var res = inp && parseFloat(inp.replace(',', '.'));
			// apply sign while we're at it
			return (isNaN(res) ? 0 : res) * sign;
		}

		function positiveMomentsDifference(base, other) {
			var res = {milliseconds: 0, months: 0};

			res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
			if (base.clone().add(res.months, 'M').isAfter(other)) {
				--res.months;
			}

			res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

			return res;
		}

		function momentsDifference(base, other) {
			var res;
			if (!(base.isValid() && other.isValid())) {
				return {milliseconds: 0, months: 0};
			}

			other = cloneWithOffset(other, base);
			if (base.isBefore(other)) {
				res = positiveMomentsDifference(base, other);
			} else {
				res = positiveMomentsDifference(other, base);
				res.milliseconds = -res.milliseconds;
				res.months = -res.months;
			}

			return res;
		}

		// TODO: remove 'name' arg after deprecation is removed
		function createAdder(direction, name) {
			return function (val, period) {
				var dur, tmp;
				//invert the arguments, but complain about it
				if (period !== null && !isNaN(+period)) {
					deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
					tmp = val; val = period; period = tmp;
				}

				val = typeof val === 'string' ? +val : val;
				dur = createDuration(val, period);
				addSubtract(this, dur, direction);
				return this;
			};
		}

		function addSubtract (mom, duration, isAdding, updateOffset) {
			var milliseconds = duration._milliseconds,
				days = absRound(duration._days),
				months = absRound(duration._months);

			if (!mom.isValid()) {
				// No op
				return;
			}

			updateOffset = updateOffset == null ? true : updateOffset;

			if (milliseconds) {
				mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
			}
			if (days) {
				set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
			}
			if (months) {
				setMonth(mom, get(mom, 'Month') + months * isAdding);
			}
			if (updateOffset) {
				hooks.updateOffset(mom, days || months);
			}
		}

		var add      = createAdder(1, 'add');
		var subtract = createAdder(-1, 'subtract');

		function getCalendarFormat(myMoment, now) {
			var diff = myMoment.diff(now, 'days', true);
			return diff < -6 ? 'sameElse' :
				diff < -1 ? 'lastWeek' :
					diff < 0 ? 'lastDay' :
						diff < 1 ? 'sameDay' :
							diff < 2 ? 'nextDay' :
								diff < 7 ? 'nextWeek' : 'sameElse';
		}

		function calendar$1 (time, formats) {
			// We want to compare the start of today, vs this.
			// Getting start-of-today depends on whether we're local/utc/offset or not.
			var now = time || createLocal(),
				sod = cloneWithOffset(now, this).startOf('day'),
				format = hooks.calendarFormat(this, sod) || 'sameElse';

			var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

			return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
		}

		function clone () {
			return new Moment(this);
		}

		function isAfter (input, units) {
			var localInput = isMoment(input) ? input : createLocal(input);
			if (!(this.isValid() && localInput.isValid())) {
				return false;
			}
			units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
			if (units === 'millisecond') {
				return this.valueOf() > localInput.valueOf();
			} else {
				return localInput.valueOf() < this.clone().startOf(units).valueOf();
			}
		}

		function isBefore (input, units) {
			var localInput = isMoment(input) ? input : createLocal(input);
			if (!(this.isValid() && localInput.isValid())) {
				return false;
			}
			units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
			if (units === 'millisecond') {
				return this.valueOf() < localInput.valueOf();
			} else {
				return this.clone().endOf(units).valueOf() < localInput.valueOf();
			}
		}

		function isBetween (from, to, units, inclusivity) {
			inclusivity = inclusivity || '()';
			return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
		}

		function isSame (input, units) {
			var localInput = isMoment(input) ? input : createLocal(input),
				inputMs;
			if (!(this.isValid() && localInput.isValid())) {
				return false;
			}
			units = normalizeUnits(units || 'millisecond');
			if (units === 'millisecond') {
				return this.valueOf() === localInput.valueOf();
			} else {
				inputMs = localInput.valueOf();
				return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
			}
		}

		function isSameOrAfter (input, units) {
			return this.isSame(input, units) || this.isAfter(input,units);
		}

		function isSameOrBefore (input, units) {
			return this.isSame(input, units) || this.isBefore(input,units);
		}

		function diff (input, units, asFloat) {
			var that,
				zoneDelta,
				delta, output;

			if (!this.isValid()) {
				return NaN;
			}

			that = cloneWithOffset(input, this);

			if (!that.isValid()) {
				return NaN;
			}

			zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

			units = normalizeUnits(units);

			if (units === 'year' || units === 'month' || units === 'quarter') {
				output = monthDiff(this, that);
				if (units === 'quarter') {
					output = output / 3;
				} else if (units === 'year') {
					output = output / 12;
				}
			} else {
				delta = this - that;
				output = units === 'second' ? delta / 1e3 : // 1000
					units === 'minute' ? delta / 6e4 : // 1000 * 60
						units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
							units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
								units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
									delta;
			}
			return asFloat ? output : absFloor(output);
		}

		function monthDiff (a, b) {
			// difference in months
			var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
				// b is in (anchor - 1 month, anchor + 1 month)
				anchor = a.clone().add(wholeMonthDiff, 'months'),
				anchor2, adjust;

			if (b - anchor < 0) {
				anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
				// linear across the month
				adjust = (b - anchor) / (anchor - anchor2);
			} else {
				anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
				// linear across the month
				adjust = (b - anchor) / (anchor2 - anchor);
			}

			//check for negative zero, return zero if negative zero
			return -(wholeMonthDiff + adjust) || 0;
		}

		hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
		hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

		function toString () {
			return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
		}

		function toISOString () {
			var m = this.clone().utc();
			if (0 < m.year() && m.year() <= 9999) {
				if (isFunction(Date.prototype.toISOString)) {
					// native implementation is ~50x faster, use it when we can
					return this.toDate().toISOString();
				} else {
					return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
				}
			} else {
				return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
			}
		}

		/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
		function inspect () {
			if (!this.isValid()) {
				return 'moment.invalid(/* ' + this._i + ' */)';
			}
			var func = 'moment';
			var zone = '';
			if (!this.isLocal()) {
				func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
				zone = 'Z';
			}
			var prefix = '[' + func + '("]';
			var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
			var datetime = '-MM-DD[T]HH:mm:ss.SSS';
			var suffix = zone + '[")]';

			return this.format(prefix + year + datetime + suffix);
		}

		function format (inputString) {
			if (!inputString) {
				inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
			}
			var output = formatMoment(this, inputString);
			return this.localeData().postformat(output);
		}

		function from (time, withoutSuffix) {
			if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
				return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
			} else {
				return this.localeData().invalidDate();
			}
		}

		function fromNow (withoutSuffix) {
			return this.from(createLocal(), withoutSuffix);
		}

		function to (time, withoutSuffix) {
			if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
				return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
			} else {
				return this.localeData().invalidDate();
			}
		}

		function toNow (withoutSuffix) {
			return this.to(createLocal(), withoutSuffix);
		}

		// If passed a locale key, it will set the locale for this
		// instance.  Otherwise, it will return the locale configuration
		// variables for this instance.
		function locale (key) {
			var newLocaleData;

			if (key === undefined) {
				return this._locale._abbr;
			} else {
				newLocaleData = getLocale(key);
				if (newLocaleData != null) {
					this._locale = newLocaleData;
				}
				return this;
			}
		}

		var lang = deprecate(
			'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
			function (key) {
				if (key === undefined) {
					return this.localeData();
				} else {
					return this.locale(key);
				}
			}
		);

		function localeData () {
			return this._locale;
		}

		function startOf (units) {
			units = normalizeUnits(units);
			// the following switch intentionally omits break keywords
			// to utilize falling through the cases.
			switch (units) {
			case 'year':
				this.month(0);
				/* falls through */
			case 'quarter':
			case 'month':
				this.date(1);
				/* falls through */
			case 'week':
			case 'isoWeek':
			case 'day':
			case 'date':
				this.hours(0);
				/* falls through */
			case 'hour':
				this.minutes(0);
				/* falls through */
			case 'minute':
				this.seconds(0);
				/* falls through */
			case 'second':
				this.milliseconds(0);
			}

			// weeks are a special case
			if (units === 'week') {
				this.weekday(0);
			}
			if (units === 'isoWeek') {
				this.isoWeekday(1);
			}

			// quarters are also special
			if (units === 'quarter') {
				this.month(Math.floor(this.month() / 3) * 3);
			}

			return this;
		}

		function endOf (units) {
			units = normalizeUnits(units);
			if (units === undefined || units === 'millisecond') {
				return this;
			}

			// 'date' is an alias for 'day', so it should be considered as such.
			if (units === 'date') {
				units = 'day';
			}

			return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
		}

		function valueOf () {
			return this._d.valueOf() - ((this._offset || 0) * 60000);
		}

		function unix () {
			return Math.floor(this.valueOf() / 1000);
		}

		function toDate () {
			return new Date(this.valueOf());
		}

		function toArray () {
			var m = this;
			return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
		}

		function toObject () {
			var m = this;
			return {
				years: m.year(),
				months: m.month(),
				date: m.date(),
				hours: m.hours(),
				minutes: m.minutes(),
				seconds: m.seconds(),
				milliseconds: m.milliseconds()
			};
		}

		function toJSON () {
			// new Date(NaN).toJSON() === null
			return this.isValid() ? this.toISOString() : null;
		}

		function isValid$1 () {
			return isValid(this);
		}

		function parsingFlags () {
			return extend({}, getParsingFlags(this));
		}

		function invalidAt () {
			return getParsingFlags(this).overflow;
		}

		function creationData() {
			return {
				input: this._i,
				format: this._f,
				locale: this._locale,
				isUTC: this._isUTC,
				strict: this._strict
			};
		}

		// FORMATTING

		addFormatToken(0, ['gg', 2], 0, function () {
			return this.weekYear() % 100;
		});

		addFormatToken(0, ['GG', 2], 0, function () {
			return this.isoWeekYear() % 100;
		});

		function addWeekYearFormatToken (token, getter) {
			addFormatToken(0, [token, token.length], 0, getter);
		}

		addWeekYearFormatToken('gggg',     'weekYear');
		addWeekYearFormatToken('ggggg',    'weekYear');
		addWeekYearFormatToken('GGGG',  'isoWeekYear');
		addWeekYearFormatToken('GGGGG', 'isoWeekYear');

		// ALIASES

		addUnitAlias('weekYear', 'gg');
		addUnitAlias('isoWeekYear', 'GG');

		// PRIORITY

		addUnitPriority('weekYear', 1);
		addUnitPriority('isoWeekYear', 1);


		// PARSING

		addRegexToken('G',      matchSigned);
		addRegexToken('g',      matchSigned);
		addRegexToken('GG',     match1to2, match2);
		addRegexToken('gg',     match1to2, match2);
		addRegexToken('GGGG',   match1to4, match4);
		addRegexToken('gggg',   match1to4, match4);
		addRegexToken('GGGGG',  match1to6, match6);
		addRegexToken('ggggg',  match1to6, match6);

		addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
			week[token.substr(0, 2)] = toInt(input);
		});

		addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
			week[token] = hooks.parseTwoDigitYear(input);
		});

		// MOMENTS

		function getSetWeekYear (input) {
			return getSetWeekYearHelper.call(this,
				input,
				this.week(),
				this.weekday(),
				this.localeData()._week.dow,
				this.localeData()._week.doy);
		}

		function getSetISOWeekYear (input) {
			return getSetWeekYearHelper.call(this,
				input, this.isoWeek(), this.isoWeekday(), 1, 4);
		}

		function getISOWeeksInYear () {
			return weeksInYear(this.year(), 1, 4);
		}

		function getWeeksInYear () {
			var weekInfo = this.localeData()._week;
			return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
		}

		function getSetWeekYearHelper(input, week, weekday, dow, doy) {
			var weeksTarget;
			if (input == null) {
				return weekOfYear(this, dow, doy).year;
			} else {
				weeksTarget = weeksInYear(input, dow, doy);
				if (week > weeksTarget) {
					week = weeksTarget;
				}
				return setWeekAll.call(this, input, week, weekday, dow, doy);
			}
		}

		function setWeekAll(weekYear, week, weekday, dow, doy) {
			var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
				date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

			this.year(date.getUTCFullYear());
			this.month(date.getUTCMonth());
			this.date(date.getUTCDate());
			return this;
		}

		// FORMATTING

		addFormatToken('Q', 0, 'Qo', 'quarter');

		// ALIASES

		addUnitAlias('quarter', 'Q');

		// PRIORITY

		addUnitPriority('quarter', 7);

		// PARSING

		addRegexToken('Q', match1);
		addParseToken('Q', function (input, array) {
			array[MONTH] = (toInt(input) - 1) * 3;
		});

		// MOMENTS

		function getSetQuarter (input) {
			return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
		}

		// FORMATTING

		addFormatToken('D', ['DD', 2], 'Do', 'date');

		// ALIASES

		addUnitAlias('date', 'D');

		// PRIOROITY
		addUnitPriority('date', 9);

		// PARSING

		addRegexToken('D',  match1to2);
		addRegexToken('DD', match1to2, match2);
		addRegexToken('Do', function (isStrict, locale) {
			return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
		});

		addParseToken(['D', 'DD'], DATE);
		addParseToken('Do', function (input, array) {
			array[DATE] = toInt(input.match(match1to2)[0], 10);
		});

		// MOMENTS

		var getSetDayOfMonth = makeGetSet('Date', true);

		// FORMATTING

		addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

		// ALIASES

		addUnitAlias('dayOfYear', 'DDD');

		// PRIORITY
		addUnitPriority('dayOfYear', 4);

		// PARSING

		addRegexToken('DDD',  match1to3);
		addRegexToken('DDDD', match3);
		addParseToken(['DDD', 'DDDD'], function (input, array, config) {
			config._dayOfYear = toInt(input);
		});

		// HELPERS

		// MOMENTS

		function getSetDayOfYear (input) {
			var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
			return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
		}

		// FORMATTING

		addFormatToken('m', ['mm', 2], 0, 'minute');

		// ALIASES

		addUnitAlias('minute', 'm');

		// PRIORITY

		addUnitPriority('minute', 14);

		// PARSING

		addRegexToken('m',  match1to2);
		addRegexToken('mm', match1to2, match2);
		addParseToken(['m', 'mm'], MINUTE);

		// MOMENTS

		var getSetMinute = makeGetSet('Minutes', false);

		// FORMATTING

		addFormatToken('s', ['ss', 2], 0, 'second');

		// ALIASES

		addUnitAlias('second', 's');

		// PRIORITY

		addUnitPriority('second', 15);

		// PARSING

		addRegexToken('s',  match1to2);
		addRegexToken('ss', match1to2, match2);
		addParseToken(['s', 'ss'], SECOND);

		// MOMENTS

		var getSetSecond = makeGetSet('Seconds', false);

		// FORMATTING

		addFormatToken('S', 0, 0, function () {
			return ~~(this.millisecond() / 100);
		});

		addFormatToken(0, ['SS', 2], 0, function () {
			return ~~(this.millisecond() / 10);
		});

		addFormatToken(0, ['SSS', 3], 0, 'millisecond');
		addFormatToken(0, ['SSSS', 4], 0, function () {
			return this.millisecond() * 10;
		});
		addFormatToken(0, ['SSSSS', 5], 0, function () {
			return this.millisecond() * 100;
		});
		addFormatToken(0, ['SSSSSS', 6], 0, function () {
			return this.millisecond() * 1000;
		});
		addFormatToken(0, ['SSSSSSS', 7], 0, function () {
			return this.millisecond() * 10000;
		});
		addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
			return this.millisecond() * 100000;
		});
		addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
			return this.millisecond() * 1000000;
		});


		// ALIASES

		addUnitAlias('millisecond', 'ms');

		// PRIORITY

		addUnitPriority('millisecond', 16);

		// PARSING

		addRegexToken('S',    match1to3, match1);
		addRegexToken('SS',   match1to3, match2);
		addRegexToken('SSS',  match1to3, match3);

		var token;
		for (token = 'SSSS'; token.length <= 9; token += 'S') {
			addRegexToken(token, matchUnsigned);
		}

		function parseMs(input, array) {
			array[MILLISECOND] = toInt(('0.' + input) * 1000);
		}

		for (token = 'S'; token.length <= 9; token += 'S') {
			addParseToken(token, parseMs);
		}
		// MOMENTS

		var getSetMillisecond = makeGetSet('Milliseconds', false);

		// FORMATTING

		addFormatToken('z',  0, 0, 'zoneAbbr');
		addFormatToken('zz', 0, 0, 'zoneName');

		// MOMENTS

		function getZoneAbbr () {
			return this._isUTC ? 'UTC' : '';
		}

		function getZoneName () {
			return this._isUTC ? 'Coordinated Universal Time' : '';
		}

		var proto = Moment.prototype;

		proto.add               = add;
		proto.calendar          = calendar$1;
		proto.clone             = clone;
		proto.diff              = diff;
		proto.endOf             = endOf;
		proto.format            = format;
		proto.from              = from;
		proto.fromNow           = fromNow;
		proto.to                = to;
		proto.toNow             = toNow;
		proto.get               = stringGet;
		proto.invalidAt         = invalidAt;
		proto.isAfter           = isAfter;
		proto.isBefore          = isBefore;
		proto.isBetween         = isBetween;
		proto.isSame            = isSame;
		proto.isSameOrAfter     = isSameOrAfter;
		proto.isSameOrBefore    = isSameOrBefore;
		proto.isValid           = isValid$1;
		proto.lang              = lang;
		proto.locale            = locale;
		proto.localeData        = localeData;
		proto.max               = prototypeMax;
		proto.min               = prototypeMin;
		proto.parsingFlags      = parsingFlags;
		proto.set               = stringSet;
		proto.startOf           = startOf;
		proto.subtract          = subtract;
		proto.toArray           = toArray;
		proto.toObject          = toObject;
		proto.toDate            = toDate;
		proto.toISOString       = toISOString;
		proto.inspect           = inspect;
		proto.toJSON            = toJSON;
		proto.toString          = toString;
		proto.unix              = unix;
		proto.valueOf           = valueOf;
		proto.creationData      = creationData;

		// Year
		proto.year       = getSetYear;
		proto.isLeapYear = getIsLeapYear;

		// Week Year
		proto.weekYear    = getSetWeekYear;
		proto.isoWeekYear = getSetISOWeekYear;

		// Quarter
		proto.quarter = proto.quarters = getSetQuarter;

		// Month
		proto.month       = getSetMonth;
		proto.daysInMonth = getDaysInMonth;

		// Week
		proto.week           = proto.weeks        = getSetWeek;
		proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
		proto.weeksInYear    = getWeeksInYear;
		proto.isoWeeksInYear = getISOWeeksInYear;

		// Day
		proto.date       = getSetDayOfMonth;
		proto.day        = proto.days             = getSetDayOfWeek;
		proto.weekday    = getSetLocaleDayOfWeek;
		proto.isoWeekday = getSetISODayOfWeek;
		proto.dayOfYear  = getSetDayOfYear;

		// Hour
		proto.hour = proto.hours = getSetHour;

		// Minute
		proto.minute = proto.minutes = getSetMinute;

		// Second
		proto.second = proto.seconds = getSetSecond;

		// Millisecond
		proto.millisecond = proto.milliseconds = getSetMillisecond;

		// Offset
		proto.utcOffset            = getSetOffset;
		proto.utc                  = setOffsetToUTC;
		proto.local                = setOffsetToLocal;
		proto.parseZone            = setOffsetToParsedOffset;
		proto.hasAlignedHourOffset = hasAlignedHourOffset;
		proto.isDST                = isDaylightSavingTime;
		proto.isLocal              = isLocal;
		proto.isUtcOffset          = isUtcOffset;
		proto.isUtc                = isUtc;
		proto.isUTC                = isUtc;

		// Timezone
		proto.zoneAbbr = getZoneAbbr;
		proto.zoneName = getZoneName;

		// Deprecations
		proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
		proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
		proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
		proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
		proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

		function createUnix (input) {
			return createLocal(input * 1000);
		}

		function createInZone () {
			return createLocal.apply(null, arguments).parseZone();
		}

		function preParsePostFormat (string) {
			return string;
		}

		var proto$1 = Locale.prototype;

		proto$1.calendar        = calendar;
		proto$1.longDateFormat  = longDateFormat;
		proto$1.invalidDate     = invalidDate;
		proto$1.ordinal         = ordinal;
		proto$1.preparse        = preParsePostFormat;
		proto$1.postformat      = preParsePostFormat;
		proto$1.relativeTime    = relativeTime;
		proto$1.pastFuture      = pastFuture;
		proto$1.set             = set;

		// Month
		proto$1.months            =        localeMonths;
		proto$1.monthsShort       =        localeMonthsShort;
		proto$1.monthsParse       =        localeMonthsParse;
		proto$1.monthsRegex       = monthsRegex;
		proto$1.monthsShortRegex  = monthsShortRegex;

		// Week
		proto$1.week = localeWeek;
		proto$1.firstDayOfYear = localeFirstDayOfYear;
		proto$1.firstDayOfWeek = localeFirstDayOfWeek;

		// Day of Week
		proto$1.weekdays       =        localeWeekdays;
		proto$1.weekdaysMin    =        localeWeekdaysMin;
		proto$1.weekdaysShort  =        localeWeekdaysShort;
		proto$1.weekdaysParse  =        localeWeekdaysParse;

		proto$1.weekdaysRegex       =        weekdaysRegex;
		proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
		proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

		// Hours
		proto$1.isPM = localeIsPM;
		proto$1.meridiem = localeMeridiem;

		function get$1 (format, index, field, setter) {
			var locale = getLocale();
			var utc = createUTC().set(setter, index);
			return locale[field](utc, format);
		}

		function listMonthsImpl (format, index, field) {
			if (isNumber(format)) {
				index = format;
				format = undefined;
			}

			format = format || '';

			if (index != null) {
				return get$1(format, index, field, 'month');
			}

			var i;
			var out = [];
			for (i = 0; i < 12; i++) {
				out[i] = get$1(format, i, field, 'month');
			}
			return out;
		}

		// ()
		// (5)
		// (fmt, 5)
		// (fmt)
		// (true)
		// (true, 5)
		// (true, fmt, 5)
		// (true, fmt)
		function listWeekdaysImpl (localeSorted, format, index, field) {
			if (typeof localeSorted === 'boolean') {
				if (isNumber(format)) {
					index = format;
					format = undefined;
				}

				format = format || '';
			} else {
				format = localeSorted;
				index = format;
				localeSorted = false;

				if (isNumber(format)) {
					index = format;
					format = undefined;
				}

				format = format || '';
			}

			var locale = getLocale(),
				shift = localeSorted ? locale._week.dow : 0;

			if (index != null) {
				return get$1(format, (index + shift) % 7, field, 'day');
			}

			var i;
			var out = [];
			for (i = 0; i < 7; i++) {
				out[i] = get$1(format, (i + shift) % 7, field, 'day');
			}
			return out;
		}

		function listMonths (format, index) {
			return listMonthsImpl(format, index, 'months');
		}

		function listMonthsShort (format, index) {
			return listMonthsImpl(format, index, 'monthsShort');
		}

		function listWeekdays (localeSorted, format, index) {
			return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
		}

		function listWeekdaysShort (localeSorted, format, index) {
			return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
		}

		function listWeekdaysMin (localeSorted, format, index) {
			return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
		}

		getSetGlobalLocale('en', {
			ordinalParse: /\d{1,2}(th|st|nd|rd)/,
			ordinal : function (number) {
				var b = number % 10,
					output = (toInt(number % 100 / 10) === 1) ? 'th' :
						(b === 1) ? 'st' :
							(b === 2) ? 'nd' :
								(b === 3) ? 'rd' : 'th';
				return number + output;
			}
		});

		// Side effect imports
		hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
		hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

		var mathAbs = Math.abs;

		function abs () {
			var data           = this._data;

			this._milliseconds = mathAbs(this._milliseconds);
			this._days         = mathAbs(this._days);
			this._months       = mathAbs(this._months);

			data.milliseconds  = mathAbs(data.milliseconds);
			data.seconds       = mathAbs(data.seconds);
			data.minutes       = mathAbs(data.minutes);
			data.hours         = mathAbs(data.hours);
			data.months        = mathAbs(data.months);
			data.years         = mathAbs(data.years);

			return this;
		}

		function addSubtract$1 (duration, input, value, direction) {
			var other = createDuration(input, value);

			duration._milliseconds += direction * other._milliseconds;
			duration._days         += direction * other._days;
			duration._months       += direction * other._months;

			return duration._bubble();
		}

		// supports only 2.0-style add(1, 's') or add(duration)
		function add$1 (input, value) {
			return addSubtract$1(this, input, value, 1);
		}

		// supports only 2.0-style subtract(1, 's') or subtract(duration)
		function subtract$1 (input, value) {
			return addSubtract$1(this, input, value, -1);
		}

		function absCeil (number) {
			if (number < 0) {
				return Math.floor(number);
			} else {
				return Math.ceil(number);
			}
		}

		function bubble () {
			var milliseconds = this._milliseconds;
			var days         = this._days;
			var months       = this._months;
			var data         = this._data;
			var seconds, minutes, hours, years, monthsFromDays;

			// if we have a mix of positive and negative values, bubble down first
			// check: https://github.com/moment/moment/issues/2166
			if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
				milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
				days = 0;
				months = 0;
			}

			// The following code bubbles up values, see the tests for
			// examples of what that means.
			data.milliseconds = milliseconds % 1000;

			seconds           = absFloor(milliseconds / 1000);
			data.seconds      = seconds % 60;

			minutes           = absFloor(seconds / 60);
			data.minutes      = minutes % 60;

			hours             = absFloor(minutes / 60);
			data.hours        = hours % 24;

			days += absFloor(hours / 24);

			// convert days to months
			monthsFromDays = absFloor(daysToMonths(days));
			months += monthsFromDays;
			days -= absCeil(monthsToDays(monthsFromDays));

			// 12 months -> 1 year
			years = absFloor(months / 12);
			months %= 12;

			data.days   = days;
			data.months = months;
			data.years  = years;

			return this;
		}

		function daysToMonths (days) {
			// 400 years have 146097 days (taking into account leap year rules)
			// 400 years have 12 months === 4800
			return days * 4800 / 146097;
		}

		function monthsToDays (months) {
			// the reverse of daysToMonths
			return months * 146097 / 4800;
		}

		function as (units) {
			var days;
			var months;
			var milliseconds = this._milliseconds;

			units = normalizeUnits(units);

			if (units === 'month' || units === 'year') {
				days   = this._days   + milliseconds / 864e5;
				months = this._months + daysToMonths(days);
				return units === 'month' ? months : months / 12;
			} else {
				// handle milliseconds separately because of floating point math errors (issue #1867)
				days = this._days + Math.round(monthsToDays(this._months));
				switch (units) {
				case 'week'   : return days / 7     + milliseconds / 6048e5;
				case 'day'    : return days         + milliseconds / 864e5;
				case 'hour'   : return days * 24    + milliseconds / 36e5;
				case 'minute' : return days * 1440  + milliseconds / 6e4;
				case 'second' : return days * 86400 + milliseconds / 1000;
					// Math.floor prevents floating point math errors here
				case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
				default: throw new Error('Unknown unit ' + units);
				}
			}
		}

		// TODO: Use this.as('ms')?
		function valueOf$1 () {
			return (
				this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
			);
		}

		function makeAs (alias) {
			return function () {
				return this.as(alias);
			};
		}

		var asMilliseconds = makeAs('ms');
		var asSeconds      = makeAs('s');
		var asMinutes      = makeAs('m');
		var asHours        = makeAs('h');
		var asDays         = makeAs('d');
		var asWeeks        = makeAs('w');
		var asMonths       = makeAs('M');
		var asYears        = makeAs('y');

		function get$2 (units) {
			units = normalizeUnits(units);
			return this[units + 's']();
		}

		function makeGetter(name) {
			return function () {
				return this._data[name];
			};
		}

		var milliseconds = makeGetter('milliseconds');
		var seconds      = makeGetter('seconds');
		var minutes      = makeGetter('minutes');
		var hours        = makeGetter('hours');
		var days         = makeGetter('days');
		var months       = makeGetter('months');
		var years        = makeGetter('years');

		function weeks () {
			return absFloor(this.days() / 7);
		}

		var round = Math.round;
		var thresholds = {
			s: 45,  // seconds to minute
			m: 45,  // minutes to hour
			h: 22,  // hours to day
			d: 26,  // days to month
			M: 11   // months to year
		};

		// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
		function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
			return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
		}

		function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
			var duration = createDuration(posNegDuration).abs();
			var seconds  = round(duration.as('s'));
			var minutes  = round(duration.as('m'));
			var hours    = round(duration.as('h'));
			var days     = round(duration.as('d'));
			var months   = round(duration.as('M'));
			var years    = round(duration.as('y'));

			var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

			a[2] = withoutSuffix;
			a[3] = +posNegDuration > 0;
			a[4] = locale;
			return substituteTimeAgo.apply(null, a);
		}

		// This function allows you to set the rounding function for relative time strings
		function getSetRelativeTimeRounding (roundingFunction) {
			if (roundingFunction === undefined) {
				return round;
			}
			if (typeof(roundingFunction) === 'function') {
				round = roundingFunction;
				return true;
			}
			return false;
		}

		// This function allows you to set a threshold for relative time strings
		function getSetRelativeTimeThreshold (threshold, limit) {
			if (thresholds[threshold] === undefined) {
				return false;
			}
			if (limit === undefined) {
				return thresholds[threshold];
			}
			thresholds[threshold] = limit;
			return true;
		}

		function humanize (withSuffix) {
			var locale = this.localeData();
			var output = relativeTime$1(this, !withSuffix, locale);

			if (withSuffix) {
				output = locale.pastFuture(+this, output);
			}

			return locale.postformat(output);
		}

		var abs$1 = Math.abs;

		function toISOString$1() {
			// for ISO strings we do not use the normal bubbling rules:
			//  * milliseconds bubble up until they become hours
			//  * days do not bubble at all
			//  * months bubble up until they become years
			// This is because there is no context-free conversion between hours and days
			// (think of clock changes)
			// and also not between days and months (28-31 days per month)
			var seconds = abs$1(this._milliseconds) / 1000;
			var days         = abs$1(this._days);
			var months       = abs$1(this._months);
			var minutes, hours, years;

			// 3600 seconds -> 60 minutes -> 1 hour
			minutes           = absFloor(seconds / 60);
			hours             = absFloor(minutes / 60);
			seconds %= 60;
			minutes %= 60;

			// 12 months -> 1 year
			years  = absFloor(months / 12);
			months %= 12;


			// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
			var Y = years;
			var M = months;
			var D = days;
			var h = hours;
			var m = minutes;
			var s = seconds;
			var total = this.asSeconds();

			if (!total) {
				// this is the same as C#'s (Noda) and python (isodate)...
				// but not other JS (goog.date)
				return 'P0D';
			}

			return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
		}

		var proto$2 = Duration.prototype;

		proto$2.abs            = abs;
		proto$2.add            = add$1;
		proto$2.subtract       = subtract$1;
		proto$2.as             = as;
		proto$2.asMilliseconds = asMilliseconds;
		proto$2.asSeconds      = asSeconds;
		proto$2.asMinutes      = asMinutes;
		proto$2.asHours        = asHours;
		proto$2.asDays         = asDays;
		proto$2.asWeeks        = asWeeks;
		proto$2.asMonths       = asMonths;
		proto$2.asYears        = asYears;
		proto$2.valueOf        = valueOf$1;
		proto$2._bubble        = bubble;
		proto$2.get            = get$2;
		proto$2.milliseconds   = milliseconds;
		proto$2.seconds        = seconds;
		proto$2.minutes        = minutes;
		proto$2.hours          = hours;
		proto$2.days           = days;
		proto$2.weeks          = weeks;
		proto$2.months         = months;
		proto$2.years          = years;
		proto$2.humanize       = humanize;
		proto$2.toISOString    = toISOString$1;
		proto$2.toString       = toISOString$1;
		proto$2.toJSON         = toISOString$1;
		proto$2.locale         = locale;
		proto$2.localeData     = localeData;

		// Deprecations
		proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
		proto$2.lang = lang;

		// Side effect imports

		// FORMATTING

		addFormatToken('X', 0, 0, 'unix');
		addFormatToken('x', 0, 0, 'valueOf');

		// PARSING

		addRegexToken('x', matchSigned);
		addRegexToken('X', matchTimestamp);
		addParseToken('X', function (input, array, config) {
			config._d = new Date(parseFloat(input, 10) * 1000);
		});
		addParseToken('x', function (input, array, config) {
			config._d = new Date(toInt(input));
		});

		// Side effect imports


		hooks.version = '2.17.1';

		setHookCallback(createLocal);

		hooks.fn                    = proto;
		hooks.min                   = min;
		hooks.max                   = max;
		hooks.now                   = now;
		hooks.utc                   = createUTC;
		hooks.unix                  = createUnix;
		hooks.months                = listMonths;
		hooks.isDate                = isDate;
		hooks.locale                = getSetGlobalLocale;
		hooks.invalid               = createInvalid;
		hooks.duration              = createDuration;
		hooks.isMoment              = isMoment;
		hooks.weekdays              = listWeekdays;
		hooks.parseZone             = createInZone;
		hooks.localeData            = getLocale;
		hooks.isDuration            = isDuration;
		hooks.monthsShort           = listMonthsShort;
		hooks.weekdaysMin           = listWeekdaysMin;
		hooks.defineLocale          = defineLocale;
		hooks.updateLocale          = updateLocale;
		hooks.locales               = listLocales;
		hooks.weekdaysShort         = listWeekdaysShort;
		hooks.normalizeUnits        = normalizeUnits;
		hooks.relativeTimeRounding = getSetRelativeTimeRounding;
		hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
		hooks.calendarFormat        = getCalendarFormat;
		hooks.prototype             = proto;

		return hooks;

	})));

},{}],612:[function(require,module,exports){
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

	(function () {

		/************************************
        Constants
    ************************************/

		var numeral,
			VERSION = '1.5.3',
			// internal storage for language config files
			languages = {},
			currentLanguage = 'en',
			zeroFormat = null,
			defaultFormat = '0,0',
			// check for nodeJS
			hasModule = (typeof module !== 'undefined' && module.exports);


		/************************************
        Constructors
    ************************************/


		// Numeral prototype object
		function Numeral (number) {
			this._value = number;
		}

		/**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
		function toFixed (value, precision, roundingFunction, optionals) {
			var power = Math.pow(10, precision),
				optionalsRegExp,
				output;
            
			//roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
			// Multiply up by precision, round accurately, then divide and use native toFixed():
			output = (roundingFunction(value * power) / power).toFixed(precision);

			if (optionals) {
				optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
				output = output.replace(optionalsRegExp, '');
			}

			return output;
		}

		/************************************
        Formatting
    ************************************/

		// determine what type of formatting we need to do
		function formatNumeral (n, format, roundingFunction) {
			var output;

			// figure out what kind of format we are dealing with
			if (format.indexOf('$') > -1) { // currency!!!!!
				output = formatCurrency(n, format, roundingFunction);
			} else if (format.indexOf('%') > -1) { // percentage
				output = formatPercentage(n, format, roundingFunction);
			} else if (format.indexOf(':') > -1) { // time
				output = formatTime(n, format);
			} else { // plain ol' numbers or bytes
				output = formatNumber(n._value, format, roundingFunction);
			}

			// return string
			return output;
		}

		// revert to number
		function unformatNumeral (n, string) {
			var stringOriginal = string,
				thousandRegExp,
				millionRegExp,
				billionRegExp,
				trillionRegExp,
				suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
				bytesMultiplier = false,
				power;

			if (string.indexOf(':') > -1) {
				n._value = unformatTime(string);
			} else {
				if (string === zeroFormat) {
					n._value = 0;
				} else {
					if (languages[currentLanguage].delimiters.decimal !== '.') {
						string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
					}

					// see if abbreviations are there so that we can multiply to the correct number
					thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
					millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
					billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
					trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

					// see if bytes are there so that we can multiply to the correct number
					for (power = 0; power <= suffixes.length; power++) {
						bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

						if (bytesMultiplier) {
							break;
						}
					}

					// do some math to create our number
					n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

					// round if we are talking about bytes
					n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
				}
			}
			return n._value;
		}

		function formatCurrency (n, format, roundingFunction) {
			var symbolIndex = format.indexOf('$'),
				openParenIndex = format.indexOf('('),
				minusSignIndex = format.indexOf('-'),
				space = '',
				spliceIndex,
				output;

			// check for space before or after currency
			if (format.indexOf(' $') > -1) {
				space = ' ';
				format = format.replace(' $', '');
			} else if (format.indexOf('$ ') > -1) {
				space = ' ';
				format = format.replace('$ ', '');
			} else {
				format = format.replace('$', '');
			}

			// format the number
			output = formatNumber(n._value, format, roundingFunction);

			// position the symbol
			if (symbolIndex <= 1) {
				if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
					output = output.split('');
					spliceIndex = 1;
					if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
						// the symbol appears before the "(" or "-"
						spliceIndex = 0;
					}
					output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
					output = output.join('');
				} else {
					output = languages[currentLanguage].currency.symbol + space + output;
				}
			} else {
				if (output.indexOf(')') > -1) {
					output = output.split('');
					output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
					output = output.join('');
				} else {
					output = output + space + languages[currentLanguage].currency.symbol;
				}
			}

			return output;
		}

		function formatPercentage (n, format, roundingFunction) {
			var space = '',
				output,
				value = n._value * 100;

			// check for space before %
			if (format.indexOf(' %') > -1) {
				space = ' ';
				format = format.replace(' %', '');
			} else {
				format = format.replace('%', '');
			}

			output = formatNumber(value, format, roundingFunction);
        
			if (output.indexOf(')') > -1 ) {
				output = output.split('');
				output.splice(-1, 0, space + '%');
				output = output.join('');
			} else {
				output = output + space + '%';
			}

			return output;
		}

		function formatTime (n) {
			var hours = Math.floor(n._value/60/60),
				minutes = Math.floor((n._value - (hours * 60 * 60))/60),
				seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
			return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
		}

		function unformatTime (string) {
			var timeArray = string.split(':'),
				seconds = 0;
			// turn hours and minutes into seconds and add them all up
			if (timeArray.length === 3) {
				// hours
				seconds = seconds + (Number(timeArray[0]) * 60 * 60);
				// minutes
				seconds = seconds + (Number(timeArray[1]) * 60);
				// seconds
				seconds = seconds + Number(timeArray[2]);
			} else if (timeArray.length === 2) {
				// minutes
				seconds = seconds + (Number(timeArray[0]) * 60);
				// seconds
				seconds = seconds + Number(timeArray[1]);
			}
			return Number(seconds);
		}

		function formatNumber (value, format, roundingFunction) {
			var negP = false,
				signed = false,
				optDec = false,
				abbr = '',
				abbrK = false, // force abbreviation to thousands
				abbrM = false, // force abbreviation to millions
				abbrB = false, // force abbreviation to billions
				abbrT = false, // force abbreviation to trillions
				abbrForce = false, // force abbreviation
				bytes = '',
				ord = '',
				abs = Math.abs(value),
				suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
				min,
				max,
				power,
				w,
				precision,
				thousands,
				d = '',
				neg = false;

			// check if number is zero and a custom zero format has been set
			if (value === 0 && zeroFormat !== null) {
				return zeroFormat;
			} else {
				// see if we should use parentheses for negative number or if we should prefix with a sign
				// if both are present we default to parentheses
				if (format.indexOf('(') > -1) {
					negP = true;
					format = format.slice(1, -1);
				} else if (format.indexOf('+') > -1) {
					signed = true;
					format = format.replace(/\+/g, '');
				}

				// see if abbreviation is wanted
				if (format.indexOf('a') > -1) {
					// check if abbreviation is specified
					abbrK = format.indexOf('aK') >= 0;
					abbrM = format.indexOf('aM') >= 0;
					abbrB = format.indexOf('aB') >= 0;
					abbrT = format.indexOf('aT') >= 0;
					abbrForce = abbrK || abbrM || abbrB || abbrT;

					// check for space before abbreviation
					if (format.indexOf(' a') > -1) {
						abbr = ' ';
						format = format.replace(' a', '');
					} else {
						format = format.replace('a', '');
					}

					if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
						// trillion
						abbr = abbr + languages[currentLanguage].abbreviations.trillion;
						value = value / Math.pow(10, 12);
					} else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
						// billion
						abbr = abbr + languages[currentLanguage].abbreviations.billion;
						value = value / Math.pow(10, 9);
					} else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
						// million
						abbr = abbr + languages[currentLanguage].abbreviations.million;
						value = value / Math.pow(10, 6);
					} else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
						// thousand
						abbr = abbr + languages[currentLanguage].abbreviations.thousand;
						value = value / Math.pow(10, 3);
					}
				}

				// see if we are formatting bytes
				if (format.indexOf('b') > -1) {
					// check for space before
					if (format.indexOf(' b') > -1) {
						bytes = ' ';
						format = format.replace(' b', '');
					} else {
						format = format.replace('b', '');
					}

					for (power = 0; power <= suffixes.length; power++) {
						min = Math.pow(1024, power);
						max = Math.pow(1024, power+1);

						if (value >= min && value < max) {
							bytes = bytes + suffixes[power];
							if (min > 0) {
								value = value / min;
							}
							break;
						}
					}
				}

				// see if ordinal is wanted
				if (format.indexOf('o') > -1) {
					// check for space before
					if (format.indexOf(' o') > -1) {
						ord = ' ';
						format = format.replace(' o', '');
					} else {
						format = format.replace('o', '');
					}

					ord = ord + languages[currentLanguage].ordinal(value);
				}

				if (format.indexOf('[.]') > -1) {
					optDec = true;
					format = format.replace('[.]', '.');
				}

				w = value.toString().split('.')[0];
				precision = format.split('.')[1];
				thousands = format.indexOf(',');

				if (precision) {
					if (precision.indexOf('[') > -1) {
						precision = precision.replace(']', '');
						precision = precision.split('[');
						d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
					} else {
						d = toFixed(value, precision.length, roundingFunction);
					}

					w = d.split('.')[0];

					if (d.split('.')[1].length) {
						d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
					} else {
						d = '';
					}

					if (optDec && Number(d.slice(1)) === 0) {
						d = '';
					}
				} else {
					w = toFixed(value, null, roundingFunction);
				}

				// format number
				if (w.indexOf('-') > -1) {
					w = w.slice(1);
					neg = true;
				}

				if (thousands > -1) {
					w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
				}

				if (format.indexOf('.') === 0) {
					w = '';
				}

				return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
			}
		}

		/************************************
        Top Level Functions
    ************************************/

		numeral = function (input) {
			if (numeral.isNumeral(input)) {
				input = input.value();
			} else if (input === 0 || typeof input === 'undefined') {
				input = 0;
			} else if (!Number(input)) {
				input = numeral.fn.unformat(input);
			}

			return new Numeral(Number(input));
		};

		// version number
		numeral.version = VERSION;

		// compare numeral object
		numeral.isNumeral = function (obj) {
			return obj instanceof Numeral;
		};

		// This function will load languages and then set the global language.  If
		// no arguments are passed in, it will simply return the current global
		// language key.
		numeral.language = function (key, values) {
			if (!key) {
				return currentLanguage;
			}

			if (key && !values) {
				if(!languages[key]) {
					throw new Error('Unknown language : ' + key);
				}
				currentLanguage = key;
			}

			if (values || !languages[key]) {
				loadLanguage(key, values);
			}

			return numeral;
		};
    
		// This function provides access to the loaded language data.  If
		// no arguments are passed in, it will simply return the current
		// global language object.
		numeral.languageData = function (key) {
			if (!key) {
				return languages[currentLanguage];
			}
        
			if (!languages[key]) {
				throw new Error('Unknown language : ' + key);
			}
        
			return languages[key];
		};

		numeral.language('en', {
			delimiters: {
				thousands: ',',
				decimal: '.'
			},
			abbreviations: {
				thousand: 'k',
				million: 'm',
				billion: 'b',
				trillion: 't'
			},
			ordinal: function (number) {
				var b = number % 10;
				return (~~ (number % 100 / 10) === 1) ? 'th' :
					(b === 1) ? 'st' :
						(b === 2) ? 'nd' :
							(b === 3) ? 'rd' : 'th';
			},
			currency: {
				symbol: '$'
			}
		});

		numeral.zeroFormat = function (format) {
			zeroFormat = typeof(format) === 'string' ? format : null;
		};

		numeral.defaultFormat = function (format) {
			defaultFormat = typeof(format) === 'string' ? format : '0.0';
		};

		/************************************
        Helpers
    ************************************/

		function loadLanguage(key, values) {
			languages[key] = values;
		}

		/************************************
        Floating-point helpers
    ************************************/

		// The floating-point helper functions and implementation
		// borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

		/**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
		if ('function' !== typeof Array.prototype.reduce) {
			Array.prototype.reduce = function (callback, opt_initialValue) {
				'use strict';
            
				if (null === this || 'undefined' === typeof this) {
					// At the moment all modern browsers, that support strict mode, have
					// native implementation of Array.prototype.reduce. For instance, IE8
					// does not support strict mode, so this check is actually useless.
					throw new TypeError('Array.prototype.reduce called on null or undefined');
				}
            
				if ('function' !== typeof callback) {
					throw new TypeError(callback + ' is not a function');
				}

				var index,
					value,
					length = this.length >>> 0,
					isValueSet = false;

				if (1 < arguments.length) {
					value = opt_initialValue;
					isValueSet = true;
				}

				for (index = 0; length > index; ++index) {
					if (this.hasOwnProperty(index)) {
						if (isValueSet) {
							value = callback(value, this[index], index, this);
						} else {
							value = this[index];
							isValueSet = true;
						}
					}
				}

				if (!isValueSet) {
					throw new TypeError('Reduce of empty array with no initial value');
				}

				return value;
			};
		}

    
		/**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
		function multiplier(x) {
			var parts = x.toString().split('.');
			if (parts.length < 2) {
				return 1;
			}
			return Math.pow(10, parts[1].length);
		}

		/**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
		function correctionFactor() {
			var args = Array.prototype.slice.call(arguments);
			return args.reduce(function (prev, next) {
				var mp = multiplier(prev),
					mn = multiplier(next);
				return mp > mn ? mp : mn;
			}, -Infinity);
		}        


		/************************************
        Numeral Prototype
    ************************************/


		numeral.fn = Numeral.prototype = {

			clone : function () {
				return numeral(this);
			},

			format : function (inputString, roundingFunction) {
				return formatNumeral(this, 
					inputString ? inputString : defaultFormat, 
					(roundingFunction !== undefined) ? roundingFunction : Math.round
				);
			},

			unformat : function (inputString) {
				if (Object.prototype.toString.call(inputString) === '[object Number]') { 
					return inputString; 
				}
				return unformatNumeral(this, inputString ? inputString : defaultFormat);
			},

			value : function () {
				return this._value;
			},

			valueOf : function () {
				return this._value;
			},

			set : function (value) {
				this._value = Number(value);
				return this;
			},

			add : function (value) {
				var corrFactor = correctionFactor.call(null, this._value, value);
				function cback(accum, curr, currI, O) {
					return accum + corrFactor * curr;
				}
				this._value = [this._value, value].reduce(cback, 0) / corrFactor;
				return this;
			},

			subtract : function (value) {
				var corrFactor = correctionFactor.call(null, this._value, value);
				function cback(accum, curr, currI, O) {
					return accum - corrFactor * curr;
				}
				this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
				return this;
			},

			multiply : function (value) {
				function cback(accum, curr, currI, O) {
					var corrFactor = correctionFactor(accum, curr);
					return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
				}
				this._value = [this._value, value].reduce(cback, 1);
				return this;
			},

			divide : function (value) {
				function cback(accum, curr, currI, O) {
					var corrFactor = correctionFactor(accum, curr);
					return (accum * corrFactor) / (curr * corrFactor);
				}
				this._value = [this._value, value].reduce(cback);            
				return this;
			},

			difference : function (value) {
				return Math.abs(numeral(this._value).subtract(value).value());
			}

		};

		/************************************
        Exposing Numeral
    ************************************/

		// CommonJS module is defined
		if (hasModule) {
			module.exports = numeral;
		}

		/*global ender:false */
		if (typeof ender === 'undefined') {
			// here, `this` means `window` in the browser, or `global` on the server
			// add `numeral` as a global object via a string identifier,
			// for Closure Compiler 'advanced' mode
			this['numeral'] = numeral;
		}

		/*global define:false */
		if (typeof define === 'function' && define.amd) {
			define([], function () {
				return numeral;
			});
		}
	}).call(this);

},{}],613:[function(require,module,exports){
	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};

},{}],614:[function(require,module,exports){
	(function (process){
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// resolves . and .. elements in a path array with directory names there
		// must be no slashes, empty elements, or device names (c:\) in the array
		// (so also no leading and trailing slashes - it does not distinguish
		// relative and absolute paths)
		function normalizeArray(parts, allowAboveRoot) {
			// if the path tries to go above the root, `up` ends up > 0
			var up = 0;
			for (var i = parts.length - 1; i >= 0; i--) {
				var last = parts[i];
				if (last === '.') {
					parts.splice(i, 1);
				} else if (last === '..') {
					parts.splice(i, 1);
					up++;
				} else if (up) {
					parts.splice(i, 1);
					up--;
				}
			}

			// if the path is allowed to go above the root, restore leading ..s
			if (allowAboveRoot) {
				for (; up--; up) {
					parts.unshift('..');
				}
			}

			return parts;
		}

		// Split a filename into [root, dir, basename, ext], unix version
		// 'root' is just a slash, or nothing.
		var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
		var splitPath = function(filename) {
			return splitPathRe.exec(filename).slice(1);
		};

		// path.resolve([from ...], to)
		// posix version
		exports.resolve = function() {
			var resolvedPath = '',
				resolvedAbsolute = false;

			for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
				var path = (i >= 0) ? arguments[i] : process.cwd();

				// Skip empty and invalid entries
				if (typeof path !== 'string') {
					throw new TypeError('Arguments to path.resolve must be strings');
				} else if (!path) {
					continue;
				}

				resolvedPath = path + '/' + resolvedPath;
				resolvedAbsolute = path.charAt(0) === '/';
			}

			// At this point the path should be resolved to a full absolute path, but
			// handle relative paths to be safe (might happen when process.cwd() fails)

			// Normalize the path
			resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
				return !!p;
			}), !resolvedAbsolute).join('/');

			return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
		};

		// path.normalize(path)
		// posix version
		exports.normalize = function(path) {
			var isAbsolute = exports.isAbsolute(path),
				trailingSlash = substr(path, -1) === '/';

			// Normalize the path
			path = normalizeArray(filter(path.split('/'), function(p) {
				return !!p;
			}), !isAbsolute).join('/');

			if (!path && !isAbsolute) {
				path = '.';
			}
			if (path && trailingSlash) {
				path += '/';
			}

			return (isAbsolute ? '/' : '') + path;
		};

		// posix version
		exports.isAbsolute = function(path) {
			return path.charAt(0) === '/';
		};

		// posix version
		exports.join = function() {
			var paths = Array.prototype.slice.call(arguments, 0);
			return exports.normalize(filter(paths, function(p, index) {
				if (typeof p !== 'string') {
					throw new TypeError('Arguments to path.join must be strings');
				}
				return p;
			}).join('/'));
		};


		// path.relative(from, to)
		// posix version
		exports.relative = function(from, to) {
			from = exports.resolve(from).substr(1);
			to = exports.resolve(to).substr(1);

			function trim(arr) {
				var start = 0;
				for (; start < arr.length; start++) {
					if (arr[start] !== '') break;
				}

				var end = arr.length - 1;
				for (; end >= 0; end--) {
					if (arr[end] !== '') break;
				}

				if (start > end) return [];
				return arr.slice(start, end - start + 1);
			}

			var fromParts = trim(from.split('/'));
			var toParts = trim(to.split('/'));

			var length = Math.min(fromParts.length, toParts.length);
			var samePartsLength = length;
			for (var i = 0; i < length; i++) {
				if (fromParts[i] !== toParts[i]) {
					samePartsLength = i;
					break;
				}
			}

			var outputParts = [];
			for (var i = samePartsLength; i < fromParts.length; i++) {
				outputParts.push('..');
			}

			outputParts = outputParts.concat(toParts.slice(samePartsLength));

			return outputParts.join('/');
		};

		exports.sep = '/';
		exports.delimiter = ':';

		exports.dirname = function(path) {
			var result = splitPath(path),
				root = result[0],
				dir = result[1];

			if (!root && !dir) {
				// No dirname whatsoever
				return '.';
			}

			if (dir) {
				// It has a dirname, strip trailing slash
				dir = dir.substr(0, dir.length - 1);
			}

			return root + dir;
		};


		exports.basename = function(path, ext) {
			var f = splitPath(path)[2];
			// TODO: make this comparison case-insensitive on windows?
			if (ext && f.substr(-1 * ext.length) === ext) {
				f = f.substr(0, f.length - ext.length);
			}
			return f;
		};


		exports.extname = function(path) {
			return splitPath(path)[3];
		};

		function filter (xs, f) {
			if (xs.filter) return xs.filter(f);
			var res = [];
			for (var i = 0; i < xs.length; i++) {
				if (f(xs[i], i, xs)) res.push(xs[i]);
			}
			return res;
		}

		// String.prototype.substr - negative index don't work in IE8
		var substr = 'ab'.substr(-1) === 'b'
			? function (str, start, len) { return str.substr(start, len); }
			: function (str, start, len) {
				if (start < 0) start = str.length + start;
				return str.substr(start, len);
			}
;

	}).call(this,require('_process'));
},{"_process":615}],615:[function(require,module,exports){
// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
		try {
			cachedSetTimeout = setTimeout;
		} catch (e) {
			cachedSetTimeout = function () {
				throw new Error('setTimeout is not defined');
			};
		}
		try {
			cachedClearTimeout = clearTimeout;
		} catch (e) {
			cachedClearTimeout = function () {
				throw new Error('clearTimeout is not defined');
			};
		}
	} ());
	function runTimeout(fun) {
		if (cachedSetTimeout === setTimeout) {
			//normal enviroments in sane situations
			return setTimeout(fun, 0);
		}
		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedSetTimeout(fun, 0);
		} catch(e){
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
				return cachedSetTimeout.call(null, fun, 0);
			} catch(e){
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
				return cachedSetTimeout.call(this, fun, 0);
			}
		}


	}
	function runClearTimeout(marker) {
		if (cachedClearTimeout === clearTimeout) {
			//normal enviroments in sane situations
			return clearTimeout(marker);
		}
		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedClearTimeout(marker);
		} catch (e){
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
				return cachedClearTimeout.call(null, marker);
			} catch (e){
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
				// Some versions of I.E. have different rules for clearTimeout vs setTimeout
				return cachedClearTimeout.call(this, marker);
			}
		}



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
		if (!draining || !currentQueue) {
			return;
		}
		draining = false;
		if (currentQueue.length) {
			queue = currentQueue.concat(queue);
		} else {
			queueIndex = -1;
		}
		if (queue.length) {
			drainQueue();
		}
	}

	function drainQueue() {
		if (draining) {
			return;
		}
		var timeout = runTimeout(cleanUpNextTick);
		draining = true;

		var len = queue.length;
		while(len) {
			currentQueue = queue;
			queue = [];
			while (++queueIndex < len) {
				if (currentQueue) {
					currentQueue[queueIndex].run();
				}
			}
			queueIndex = -1;
			len = queue.length;
		}
		currentQueue = null;
		draining = false;
		runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
		var args = new Array(arguments.length - 1);
		if (arguments.length > 1) {
			for (var i = 1; i < arguments.length; i++) {
				args[i - 1] = arguments[i];
			}
		}
		queue.push(new Item(fun, args));
		if (queue.length === 1 && !draining) {
			runTimeout(drainQueue);
		}
	};

	// v8 likes predictible objects
	function Item(fun, array) {
		this.fun = fun;
		this.array = array;
	}
	Item.prototype.run = function () {
		this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
		throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/'; };
	process.chdir = function (dir) {
		throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };

},{}],616:[function(require,module,exports){
	'use strict';

	module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":654}],617:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 */

	'use strict';

	var ReactDOMComponentTree = require('./ReactDOMComponentTree');

	var focusNode = require('fbjs/lib/focusNode');

	var AutoFocusUtils = {
		focusDOMComponent: function () {
			focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
		}
	};

	module.exports = AutoFocusUtils;
},{"./ReactDOMComponentTree":658,"fbjs/lib/focusNode":768}],618:[function(require,module,exports){
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 */

	'use strict';

	var EventConstants = require('./EventConstants');
	var EventPropagators = require('./EventPropagators');
	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	var FallbackCompositionState = require('./FallbackCompositionState');
	var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
	var SyntheticInputEvent = require('./SyntheticInputEvent');

	var keyOf = require('fbjs/lib/keyOf');

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
		documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
	function isPresto() {
		var opera = window.opera;
		return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
		beforeInput: {
			phasedRegistrationNames: {
				bubbled: keyOf({ onBeforeInput: null }),
				captured: keyOf({ onBeforeInputCapture: null })
			},
			dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
		},
		compositionEnd: {
			phasedRegistrationNames: {
				bubbled: keyOf({ onCompositionEnd: null }),
				captured: keyOf({ onCompositionEndCapture: null })
			},
			dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
		},
		compositionStart: {
			phasedRegistrationNames: {
				bubbled: keyOf({ onCompositionStart: null }),
				captured: keyOf({ onCompositionStartCapture: null })
			},
			dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
		},
		compositionUpdate: {
			phasedRegistrationNames: {
				bubbled: keyOf({ onCompositionUpdate: null }),
				captured: keyOf({ onCompositionUpdateCapture: null })
			},
			dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
		}
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
	function isKeypressCommand(nativeEvent) {
		return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
	function getCompositionEventType(topLevelType) {
		switch (topLevelType) {
		case topLevelTypes.topCompositionStart:
			return eventTypes.compositionStart;
		case topLevelTypes.topCompositionEnd:
			return eventTypes.compositionEnd;
		case topLevelTypes.topCompositionUpdate:
			return eventTypes.compositionUpdate;
		}
	}

	/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
		return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
		switch (topLevelType) {
		case topLevelTypes.topKeyUp:
			// Command keys insert or clear IME input.
			return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
		case topLevelTypes.topKeyDown:
			// Expect IME keyCode on each keydown. If we get any other
			// code we must have exited earlier.
			return nativeEvent.keyCode !== START_KEYCODE;
		case topLevelTypes.topKeyPress:
		case topLevelTypes.topMouseDown:
		case topLevelTypes.topBlur:
			// Events are not possible without cancelling IME.
			return true;
		default:
			return false;
		}
	}

	/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
	function getDataFromCustomEvent(nativeEvent) {
		var detail = nativeEvent.detail;
		if (typeof detail === 'object' && 'data' in detail) {
			return detail.data;
		}
		return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
 * @return {?object} A SyntheticCompositionEvent.
 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
		var eventType;
		var fallbackData;

		if (canUseCompositionEvent) {
			eventType = getCompositionEventType(topLevelType);
		} else if (!currentComposition) {
			if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
				eventType = eventTypes.compositionStart;
			}
		} else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
			eventType = eventTypes.compositionEnd;
		}

		if (!eventType) {
			return null;
		}

		if (useFallbackCompositionData) {
			// The current composition is stored statically and must not be
			// overwritten while composition continues.
			if (!currentComposition && eventType === eventTypes.compositionStart) {
				currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
			} else if (eventType === eventTypes.compositionEnd) {
				if (currentComposition) {
					fallbackData = currentComposition.getData();
				}
			}
		}

		var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

		if (fallbackData) {
			// Inject data generated from fallback path into the synthetic event.
			// This matches the property of native CompositionEventInterface.
			event.data = fallbackData;
		} else {
			var customData = getDataFromCustomEvent(nativeEvent);
			if (customData !== null) {
				event.data = customData;
			}
		}

		EventPropagators.accumulateTwoPhaseDispatches(event);
		return event;
	}

	/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
		switch (topLevelType) {
		case topLevelTypes.topCompositionEnd:
			return getDataFromCustomEvent(nativeEvent);
		case topLevelTypes.topKeyPress:
			/**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
			var which = nativeEvent.which;
			if (which !== SPACEBAR_CODE) {
				return null;
			}

			hasSpaceKeypress = true;
			return SPACEBAR_CHAR;

		case topLevelTypes.topTextInput:
			// Record the characters to be added to the DOM.
			var chars = nativeEvent.data;

			// If it's a spacebar character, assume that we have already handled
			// it at the keypress level and bail immediately. Android Chrome
			// doesn't give us keycodes, so we need to blacklist it.
			if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
				return null;
			}

			return chars;

		default:
			// For other native event types, do nothing.
			return null;
		}
	}

	/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
		// If we are currently composing (IME) and using a fallback to do so,
		// try to extract the composed characters from the fallback object.
		// If composition event is available, we extract a string only at
		// compositionevent, otherwise extract it at fallback events.
		if (currentComposition) {
			if (topLevelType === topLevelTypes.topCompositionEnd || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
				var chars = currentComposition.getData();
				FallbackCompositionState.release(currentComposition);
				currentComposition = null;
				return chars;
			}
			return null;
		}

		switch (topLevelType) {
		case topLevelTypes.topPaste:
			// If a paste event occurs after a keypress, throw out the input
			// chars. Paste events should not lead to BeforeInput events.
			return null;
		case topLevelTypes.topKeyPress:
			/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
			if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
				return String.fromCharCode(nativeEvent.which);
			}
			return null;
		case topLevelTypes.topCompositionEnd:
			return useFallbackCompositionData ? null : nativeEvent.data;
		default:
			return null;
		}
	}

	/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
		var chars;

		if (canUseTextInputEvent) {
			chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
		} else {
			chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
		}

		// If no characters are being inserted, no BeforeInput event should
		// be fired.
		if (!chars) {
			return null;
		}

		var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

		event.data = chars;
		EventPropagators.accumulateTwoPhaseDispatches(event);
		return event;
	}

	/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
	var BeforeInputEventPlugin = {

		eventTypes: eventTypes,

		extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
			return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
		}
	};

	module.exports = BeforeInputEventPlugin;
},{"./EventConstants":632,"./EventPropagators":636,"./FallbackCompositionState":637,"./SyntheticCompositionEvent":715,"./SyntheticInputEvent":719,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/keyOf":778}],619:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

	'use strict';

	/**
 * CSS properties which accept numbers but are not in units of "px".
 */

	var isUnitlessNumber = {
		animationIterationCount: true,
		borderImageOutset: true,
		borderImageSlice: true,
		borderImageWidth: true,
		boxFlex: true,
		boxFlexGroup: true,
		boxOrdinalGroup: true,
		columnCount: true,
		flex: true,
		flexGrow: true,
		flexPositive: true,
		flexShrink: true,
		flexNegative: true,
		flexOrder: true,
		gridRow: true,
		gridColumn: true,
		fontWeight: true,
		lineClamp: true,
		lineHeight: true,
		opacity: true,
		order: true,
		orphans: true,
		tabSize: true,
		widows: true,
		zIndex: true,
		zoom: true,

		// SVG-related properties
		fillOpacity: true,
		floodOpacity: true,
		stopOpacity: true,
		strokeDasharray: true,
		strokeDashoffset: true,
		strokeMiterlimit: true,
		strokeOpacity: true,
		strokeWidth: true
	};

	/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
	function prefixKey(prefix, key) {
		return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
		prefixes.forEach(function (prefix) {
			isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
		});
	});

	/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
	var shorthandPropertyExpansions = {
		background: {
			backgroundAttachment: true,
			backgroundColor: true,
			backgroundImage: true,
			backgroundPositionX: true,
			backgroundPositionY: true,
			backgroundRepeat: true
		},
		backgroundPosition: {
			backgroundPositionX: true,
			backgroundPositionY: true
		},
		border: {
			borderWidth: true,
			borderStyle: true,
			borderColor: true
		},
		borderBottom: {
			borderBottomWidth: true,
			borderBottomStyle: true,
			borderBottomColor: true
		},
		borderLeft: {
			borderLeftWidth: true,
			borderLeftStyle: true,
			borderLeftColor: true
		},
		borderRight: {
			borderRightWidth: true,
			borderRightStyle: true,
			borderRightColor: true
		},
		borderTop: {
			borderTopWidth: true,
			borderTopStyle: true,
			borderTopColor: true
		},
		font: {
			fontStyle: true,
			fontVariant: true,
			fontWeight: true,
			fontSize: true,
			lineHeight: true,
			fontFamily: true
		},
		outline: {
			outlineWidth: true,
			outlineStyle: true,
			outlineColor: true
		}
	};

	var CSSProperty = {
		isUnitlessNumber: isUnitlessNumber,
		shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;
},{}],620:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 */

		'use strict';

		var CSSProperty = require('./CSSProperty');
		var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
		var ReactInstrumentation = require('./ReactInstrumentation');

		var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
		var dangerousStyleValue = require('./dangerousStyleValue');
		var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
		var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
		var warning = require('fbjs/lib/warning');

		var processStyleName = memoizeStringOnly(function (styleName) {
			return hyphenateStyleName(styleName);
		});

		var hasShorthandPropertyBug = false;
		var styleFloatAccessor = 'cssFloat';
		if (ExecutionEnvironment.canUseDOM) {
			var tempStyle = document.createElement('div').style;
			try {
				// IE8 throws "Invalid argument." if resetting shorthand style properties.
				tempStyle.font = '';
			} catch (e) {
				hasShorthandPropertyBug = true;
			}
			// IE8 only supports accessing cssFloat (standard) as styleFloat
			if (document.documentElement.style.cssFloat === undefined) {
				styleFloatAccessor = 'styleFloat';
			}
		}

		if (process.env.NODE_ENV !== 'production') {
			// 'msTransform' is correct, but the other prefixes should be capitalized
			var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

			// style values shouldn't contain a semicolon
			var badStyleValueWithSemicolonPattern = /;\s*$/;

			var warnedStyleNames = {};
			var warnedStyleValues = {};
			var warnedForNaNValue = false;

			var warnHyphenatedStyleName = function (name, owner) {
				if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
					return;
				}

				warnedStyleNames[name] = true;
				process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
			};

			var warnBadVendoredStyleName = function (name, owner) {
				if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
					return;
				}

				warnedStyleNames[name] = true;
				process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
			};

			var warnStyleValueWithSemicolon = function (name, value, owner) {
				if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
					return;
				}

				warnedStyleValues[value] = true;
				process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
			};

			var warnStyleValueIsNaN = function (name, value, owner) {
				if (warnedForNaNValue) {
					return;
				}

				warnedForNaNValue = true;
				process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
			};

			var checkRenderMessage = function (owner) {
				if (owner) {
					var name = owner.getName();
					if (name) {
						return ' Check the render method of `' + name + '`.';
					}
				}
				return '';
			};

			/**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
			var warnValidStyle = function (name, value, component) {
				var owner;
				if (component) {
					owner = component._currentElement._owner;
				}
				if (name.indexOf('-') > -1) {
					warnHyphenatedStyleName(name, owner);
				} else if (badVendoredStyleNamePattern.test(name)) {
					warnBadVendoredStyleName(name, owner);
				} else if (badStyleValueWithSemicolonPattern.test(value)) {
					warnStyleValueWithSemicolon(name, value, owner);
				}

				if (typeof value === 'number' && isNaN(value)) {
					warnStyleValueIsNaN(name, value, owner);
				}
			};
		}

		/**
 * Operations for dealing with CSS properties.
 */
		var CSSPropertyOperations = {

			/**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
			createMarkupForStyles: function (styles, component) {
				var serialized = '';
				for (var styleName in styles) {
					if (!styles.hasOwnProperty(styleName)) {
						continue;
					}
					var styleValue = styles[styleName];
					if (process.env.NODE_ENV !== 'production') {
						warnValidStyle(styleName, styleValue, component);
					}
					if (styleValue != null) {
						serialized += processStyleName(styleName) + ':';
						serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
					}
				}
				return serialized || null;
			},

			/**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
			setValueForStyles: function (node, styles, component) {
				if (process.env.NODE_ENV !== 'production') {
					ReactInstrumentation.debugTool.onHostOperation(component._debugID, 'update styles', styles);
				}

				var style = node.style;
				for (var styleName in styles) {
					if (!styles.hasOwnProperty(styleName)) {
						continue;
					}
					if (process.env.NODE_ENV !== 'production') {
						warnValidStyle(styleName, styles[styleName], component);
					}
					var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
					if (styleName === 'float' || styleName === 'cssFloat') {
						styleName = styleFloatAccessor;
					}
					if (styleValue) {
						style[styleName] = styleValue;
					} else {
						var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
						if (expansion) {
							// Shorthand property that IE8 won't like unsetting, so unset each
							// component to placate it
							for (var individualStyleName in expansion) {
								style[individualStyleName] = '';
							}
						} else {
							style[styleName] = '';
						}
					}
				}
			}

		};

		module.exports = CSSPropertyOperations;
	}).call(this,require('_process'));
},{"./CSSProperty":619,"./ReactInstrumentation":688,"./dangerousStyleValue":733,"_process":615,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/camelizeStyleName":762,"fbjs/lib/hyphenateStyleName":773,"fbjs/lib/memoizeStringOnly":779,"fbjs/lib/warning":783}],621:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var PooledClass = require('./PooledClass');

		var invariant = require('fbjs/lib/invariant');

		/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
		function CallbackQueue() {
			this._callbacks = null;
			this._contexts = null;
		}

		_assign(CallbackQueue.prototype, {

			/**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
			enqueue: function (callback, context) {
				this._callbacks = this._callbacks || [];
				this._contexts = this._contexts || [];
				this._callbacks.push(callback);
				this._contexts.push(context);
			},

			/**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
			notifyAll: function () {
				var callbacks = this._callbacks;
				var contexts = this._contexts;
				if (callbacks) {
					!(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
					this._callbacks = null;
					this._contexts = null;
					for (var i = 0; i < callbacks.length; i++) {
						callbacks[i].call(contexts[i]);
					}
					callbacks.length = 0;
					contexts.length = 0;
				}
			},

			checkpoint: function () {
				return this._callbacks ? this._callbacks.length : 0;
			},

			rollback: function (len) {
				if (this._callbacks) {
					this._callbacks.length = len;
					this._contexts.length = len;
				}
			},

			/**
   * Resets the internal queue.
   *
   * @internal
   */
			reset: function () {
				this._callbacks = null;
				this._contexts = null;
			},

			/**
   * `PooledClass` looks for this.
   */
			destructor: function () {
				this.reset();
			}

		});

		PooledClass.addPoolingTo(CallbackQueue);

		module.exports = CallbackQueue;
	}).call(this,require('_process'));
},{"./PooledClass":641,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"object-assign":784}],622:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

	'use strict';

	var EventConstants = require('./EventConstants');
	var EventPluginHub = require('./EventPluginHub');
	var EventPropagators = require('./EventPropagators');
	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');
	var ReactUpdates = require('./ReactUpdates');
	var SyntheticEvent = require('./SyntheticEvent');

	var getEventTarget = require('./getEventTarget');
	var isEventSupported = require('./isEventSupported');
	var isTextInputElement = require('./isTextInputElement');
	var keyOf = require('fbjs/lib/keyOf');

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
		change: {
			phasedRegistrationNames: {
				bubbled: keyOf({ onChange: null }),
				captured: keyOf({ onChangeCapture: null })
			},
			dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
		}
	};

	/**
 * For IE shims
 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
 * SECTION: handle `change` event
 */
	function shouldUseChangeEvent(elem) {
		var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
		return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
		// See `handleChange` comment below
		doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
		var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
		EventPropagators.accumulateTwoPhaseDispatches(event);

		// If change and propertychange bubbled, we'd just bind to it like all the
		// other events and have it go through ReactBrowserEventEmitter. Since it
		// doesn't, we manually listen for the events and so we have to enqueue and
		// process the abstract event manually.
		//
		// Batching is necessary here in order to ensure that all event handlers run
		// before the next rerender (including event handlers attached to ancestor
		// elements instead of directly on the input). Without this, controlled
		// components don't work properly in conjunction with event bubbling because
		// the component is rerendered and the value reverted before all the event
		// handlers can run. See https://github.com/facebook/react/issues/708.
		ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
		EventPluginHub.enqueueEvents(event);
		EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
		activeElement = target;
		activeElementInst = targetInst;
		activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
		if (!activeElement) {
			return;
		}
		activeElement.detachEvent('onchange', manualDispatchChangeEvent);
		activeElement = null;
		activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
		if (topLevelType === topLevelTypes.topChange) {
			return targetInst;
		}
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
		if (topLevelType === topLevelTypes.topFocus) {
			// stopWatching() should be a noop here but we call it just in case we
			// missed a blur event somehow.
			stopWatchingForChangeEventIE8();
			startWatchingForChangeEventIE8(target, targetInst);
		} else if (topLevelType === topLevelTypes.topBlur) {
			stopWatchingForChangeEventIE8();
		}
	}

	/**
 * SECTION: handle `input` event
 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
		// IE9 claims to support the input event but fails to trigger it when
		// deleting text, so we ignore its input events.
		// IE10+ fire input events to often, such when a placeholder
		// changes or when an input with a placeholder is focused.
		isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
	var newValueProp = {
		get: function () {
			return activeElementValueProp.get.call(this);
		},
		set: function (val) {
			// Cast to a string so we can do equality checks.
			activeElementValue = '' + val;
			activeElementValueProp.set.call(this, val);
		}
	};

	/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
	function startWatchingForValueChange(target, targetInst) {
		activeElement = target;
		activeElementInst = targetInst;
		activeElementValue = target.value;
		activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

		// Not guarded in a canDefineProperty check: IE8 supports defineProperty only
		// on DOM elements
		Object.defineProperty(activeElement, 'value', newValueProp);
		if (activeElement.attachEvent) {
			activeElement.attachEvent('onpropertychange', handlePropertyChange);
		} else {
			activeElement.addEventListener('propertychange', handlePropertyChange, false);
		}
	}

	/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
	function stopWatchingForValueChange() {
		if (!activeElement) {
			return;
		}

		// delete restores the original property definition
		delete activeElement.value;

		if (activeElement.detachEvent) {
			activeElement.detachEvent('onpropertychange', handlePropertyChange);
		} else {
			activeElement.removeEventListener('propertychange', handlePropertyChange, false);
		}

		activeElement = null;
		activeElementInst = null;
		activeElementValue = null;
		activeElementValueProp = null;
	}

	/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
	function handlePropertyChange(nativeEvent) {
		if (nativeEvent.propertyName !== 'value') {
			return;
		}
		var value = nativeEvent.srcElement.value;
		if (value === activeElementValue) {
			return;
		}
		activeElementValue = value;

		manualDispatchChangeEvent(nativeEvent);
	}

	/**
 * If a `change` event should be fired, returns the target's ID.
 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
		if (topLevelType === topLevelTypes.topInput) {
			// In modern browsers (i.e., not IE8 or IE9), the input event is exactly
			// what we want so fall through here and trigger an abstract event
			return targetInst;
		}
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
		if (topLevelType === topLevelTypes.topFocus) {
			// In IE8, we can capture almost all .value changes by adding a
			// propertychange handler and looking for events with propertyName
			// equal to 'value'
			// In IE9-11, propertychange fires for most input events but is buggy and
			// doesn't fire when text is deleted, but conveniently, selectionchange
			// appears to fire in all of the remaining cases so we catch those and
			// forward the event if the value has changed
			// In either case, we don't want to call the event handler if the value
			// is changed from JS so we redefine a setter for `.value` that updates
			// our activeElementValue variable, allowing us to ignore those changes
			//
			// stopWatching() should be a noop here but we call it just in case we
			// missed a blur event somehow.
			stopWatchingForValueChange();
			startWatchingForValueChange(target, targetInst);
		} else if (topLevelType === topLevelTypes.topBlur) {
			stopWatchingForValueChange();
		}
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
		if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
			// On the selectionchange event, the target is just document which isn't
			// helpful for us so just check activeElement instead.
			//
			// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
			// propertychange on the first input event after setting `value` from a
			// script and fires only keydown, keypress, keyup. Catching keyup usually
			// gets it and catching keydown lets us fire an event for the first
			// keystroke if user does a key repeat (it'll be a little delayed: right
			// before the second keystroke). Other input methods (e.g., paste) seem to
			// fire selectionchange normally.
			if (activeElement && activeElement.value !== activeElementValue) {
				activeElementValue = activeElement.value;
				return activeElementInst;
			}
		}
	}

	/**
 * SECTION: handle `click` event
 */
	function shouldUseClickEvent(elem) {
		// Use the `click` event to detect changes to checkbox and radio inputs.
		// This approach works across all browsers, whereas `change` does not fire
		// until `blur` in IE8.
		return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
		if (topLevelType === topLevelTypes.topClick) {
			return targetInst;
		}
	}

	/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
	var ChangeEventPlugin = {

		eventTypes: eventTypes,

		extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
			var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

			var getTargetInstFunc, handleEventFunc;
			if (shouldUseChangeEvent(targetNode)) {
				if (doesChangeEventBubble) {
					getTargetInstFunc = getTargetInstForChangeEvent;
				} else {
					handleEventFunc = handleEventsForChangeEventIE8;
				}
			} else if (isTextInputElement(targetNode)) {
				if (isInputEventSupported) {
					getTargetInstFunc = getTargetInstForInputEvent;
				} else {
					getTargetInstFunc = getTargetInstForInputEventIE;
					handleEventFunc = handleEventsForInputEventIE;
				}
			} else if (shouldUseClickEvent(targetNode)) {
				getTargetInstFunc = getTargetInstForClickEvent;
			}

			if (getTargetInstFunc) {
				var inst = getTargetInstFunc(topLevelType, targetInst);
				if (inst) {
					var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
					event.type = 'change';
					EventPropagators.accumulateTwoPhaseDispatches(event);
					return event;
				}
			}

			if (handleEventFunc) {
				handleEventFunc(topLevelType, targetNode, targetInst);
			}
		}

	};

	module.exports = ChangeEventPlugin;
},{"./EventConstants":632,"./EventPluginHub":633,"./EventPropagators":636,"./ReactDOMComponentTree":658,"./ReactUpdates":708,"./SyntheticEvent":717,"./getEventTarget":741,"./isEventSupported":748,"./isTextInputElement":749,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/keyOf":778}],623:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 */

		'use strict';

		var DOMLazyTree = require('./DOMLazyTree');
		var Danger = require('./Danger');
		var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactInstrumentation = require('./ReactInstrumentation');

		var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
		var setInnerHTML = require('./setInnerHTML');
		var setTextContent = require('./setTextContent');

		function getNodeAfter(parentNode, node) {
			// Special case for text components, which return [open, close] comments
			// from getHostNode.
			if (Array.isArray(node)) {
				node = node[1];
			}
			return node ? node.nextSibling : parentNode.firstChild;
		}

		/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
		var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
			// We rely exclusively on `insertBefore(node, null)` instead of also using
			// `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
			// we are careful to use `null`.)
			parentNode.insertBefore(childNode, referenceNode);
		});

		function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
			DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
		}

		function moveChild(parentNode, childNode, referenceNode) {
			if (Array.isArray(childNode)) {
				moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
			} else {
				insertChildAt(parentNode, childNode, referenceNode);
			}
		}

		function removeChild(parentNode, childNode) {
			if (Array.isArray(childNode)) {
				var closingComment = childNode[1];
				childNode = childNode[0];
				removeDelimitedText(parentNode, childNode, closingComment);
				parentNode.removeChild(closingComment);
			}
			parentNode.removeChild(childNode);
		}

		function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
			var node = openingComment;
			while (true) {
				var nextNode = node.nextSibling;
				insertChildAt(parentNode, node, referenceNode);
				if (node === closingComment) {
					break;
				}
				node = nextNode;
			}
		}

		function removeDelimitedText(parentNode, startNode, closingComment) {
			while (true) {
				var node = startNode.nextSibling;
				if (node === closingComment) {
					// The closing comment is removed by ReactMultiChild.
					break;
				} else {
					parentNode.removeChild(node);
				}
			}
		}

		function replaceDelimitedText(openingComment, closingComment, stringText) {
			var parentNode = openingComment.parentNode;
			var nodeAfterComment = openingComment.nextSibling;
			if (nodeAfterComment === closingComment) {
				// There are no text nodes between the opening and closing comments; insert
				// a new one if stringText isn't empty.
				if (stringText) {
					insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
				}
			} else {
				if (stringText) {
					// Set the text content of the first node after the opening comment, and
					// remove all following nodes up until the closing comment.
					setTextContent(nodeAfterComment, stringText);
					removeDelimitedText(parentNode, nodeAfterComment, closingComment);
				} else {
					removeDelimitedText(parentNode, openingComment, closingComment);
				}
			}

			if (process.env.NODE_ENV !== 'production') {
				ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 'replace text', stringText);
			}
		}

		var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
		if (process.env.NODE_ENV !== 'production') {
			dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
				Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
				if (prevInstance._debugID !== 0) {
					ReactInstrumentation.debugTool.onHostOperation(prevInstance._debugID, 'replace with', markup.toString());
				} else {
					var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
					if (nextInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onHostOperation(nextInstance._debugID, 'mount', markup.toString());
					}
				}
			};
		}

		/**
 * Operations for updating with DOM children.
 */
		var DOMChildrenOperations = {

			dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

			replaceDelimitedText: replaceDelimitedText,

			/**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
			processUpdates: function (parentNode, updates) {
				if (process.env.NODE_ENV !== 'production') {
					var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
				}

				for (var k = 0; k < updates.length; k++) {
					var update = updates[k];
					switch (update.type) {
					case ReactMultiChildUpdateTypes.INSERT_MARKUP:
						insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
						if (process.env.NODE_ENV !== 'production') {
							ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'insert child', { toIndex: update.toIndex, content: update.content.toString() });
						}
						break;
					case ReactMultiChildUpdateTypes.MOVE_EXISTING:
						moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
						if (process.env.NODE_ENV !== 'production') {
							ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'move child', { fromIndex: update.fromIndex, toIndex: update.toIndex });
						}
						break;
					case ReactMultiChildUpdateTypes.SET_MARKUP:
						setInnerHTML(parentNode, update.content);
						if (process.env.NODE_ENV !== 'production') {
							ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace children', update.content.toString());
						}
						break;
					case ReactMultiChildUpdateTypes.TEXT_CONTENT:
						setTextContent(parentNode, update.content);
						if (process.env.NODE_ENV !== 'production') {
							ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace text', update.content.toString());
						}
						break;
					case ReactMultiChildUpdateTypes.REMOVE_NODE:
						removeChild(parentNode, update.fromNode);
						if (process.env.NODE_ENV !== 'production') {
							ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'remove child', { fromIndex: update.fromIndex });
						}
						break;
					}
				}
			}

		};

		module.exports = DOMChildrenOperations;
	}).call(this,require('_process'));
},{"./DOMLazyTree":624,"./Danger":628,"./ReactDOMComponentTree":658,"./ReactInstrumentation":688,"./ReactMultiChildUpdateTypes":693,"./createMicrosoftUnsafeLocalFunction":732,"./setInnerHTML":754,"./setTextContent":755,"_process":615}],624:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMLazyTree
 */

	'use strict';

	var DOMNamespaces = require('./DOMNamespaces');
	var setInnerHTML = require('./setInnerHTML');

	var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
	var setTextContent = require('./setTextContent');

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
		if (!enableLazy) {
			return;
		}
		var node = tree.node;
		var children = tree.children;
		if (children.length) {
			for (var i = 0; i < children.length; i++) {
				insertTreeBefore(node, children[i], null);
			}
		} else if (tree.html != null) {
			setInnerHTML(node, tree.html);
		} else if (tree.text != null) {
			setTextContent(node, tree.text);
		}
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
		// DocumentFragments aren't actually part of the DOM after insertion so
		// appending children won't update the DOM. We need to ensure the fragment
		// is properly populated first, breaking out of our lazy approach for just
		// this level. Also, some <object> plugins (like Flash Player) will read
		// <param> nodes immediately upon insertion into the DOM, so <object>
		// must also be populated prior to insertion into the DOM.
		if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
			insertTreeChildren(tree);
			parentNode.insertBefore(tree.node, referenceNode);
		} else {
			parentNode.insertBefore(tree.node, referenceNode);
			insertTreeChildren(tree);
		}
	});

	function replaceChildWithTree(oldNode, newTree) {
		oldNode.parentNode.replaceChild(newTree.node, oldNode);
		insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
		if (enableLazy) {
			parentTree.children.push(childTree);
		} else {
			parentTree.node.appendChild(childTree.node);
		}
	}

	function queueHTML(tree, html) {
		if (enableLazy) {
			tree.html = html;
		} else {
			setInnerHTML(tree.node, html);
		}
	}

	function queueText(tree, text) {
		if (enableLazy) {
			tree.text = text;
		} else {
			setTextContent(tree.node, text);
		}
	}

	function toString() {
		return this.node.nodeName;
	}

	function DOMLazyTree(node) {
		return {
			node: node,
			children: [],
			html: null,
			text: null,
			toString: toString
		};
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;
},{"./DOMNamespaces":625,"./createMicrosoftUnsafeLocalFunction":732,"./setInnerHTML":754,"./setTextContent":755}],625:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMNamespaces
 */

	'use strict';

	var DOMNamespaces = {
		html: 'http://www.w3.org/1999/xhtml',
		mathml: 'http://www.w3.org/1998/Math/MathML',
		svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;
},{}],626:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		function checkMask(value, bitmask) {
			return (value & bitmask) === bitmask;
		}

		var DOMPropertyInjection = {
			/**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
			MUST_USE_PROPERTY: 0x1,
			HAS_BOOLEAN_VALUE: 0x4,
			HAS_NUMERIC_VALUE: 0x8,
			HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
			HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

			/**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
			injectDOMPropertyConfig: function (domPropertyConfig) {
				var Injection = DOMPropertyInjection;
				var Properties = domPropertyConfig.Properties || {};
				var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
				var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
				var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
				var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

				if (domPropertyConfig.isCustomAttribute) {
					DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
				}

				for (var propName in Properties) {
					DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

					var lowerCased = propName.toLowerCase();
					var propConfig = Properties[propName];

					var propertyInfo = {
						attributeName: lowerCased,
						attributeNamespace: null,
						propertyName: propName,
						mutationMethod: null,

						mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
						hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
						hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
						hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
						hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
					};
					!(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

					if (process.env.NODE_ENV !== 'production') {
						DOMProperty.getPossibleStandardName[lowerCased] = propName;
					}

					if (DOMAttributeNames.hasOwnProperty(propName)) {
						var attributeName = DOMAttributeNames[propName];
						propertyInfo.attributeName = attributeName;
						if (process.env.NODE_ENV !== 'production') {
							DOMProperty.getPossibleStandardName[attributeName] = propName;
						}
					}

					if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
						propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
					}

					if (DOMPropertyNames.hasOwnProperty(propName)) {
						propertyInfo.propertyName = DOMPropertyNames[propName];
					}

					if (DOMMutationMethods.hasOwnProperty(propName)) {
						propertyInfo.mutationMethod = DOMMutationMethods[propName];
					}

					DOMProperty.properties[propName] = propertyInfo;
				}
			}
		};

		/* eslint-disable max-len */
		var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
		/* eslint-enable max-len */

		/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
		var DOMProperty = {

			ID_ATTRIBUTE_NAME: 'data-reactid',
			ROOT_ATTRIBUTE_NAME: 'data-reactroot',

			ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
			ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

			/**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
			properties: {},

			/**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
			getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

			/**
   * All of the isCustomAttribute() functions that have been injected.
   */
			_isCustomAttributeFunctions: [],

			/**
   * Checks whether a property name is a custom attribute.
   * @method
   */
			isCustomAttribute: function (attributeName) {
				for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
					var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
					if (isCustomAttributeFn(attributeName)) {
						return true;
					}
				}
				return false;
			},

			injection: DOMPropertyInjection
		};

		module.exports = DOMProperty;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],627:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 */

		'use strict';

		var DOMProperty = require('./DOMProperty');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactInstrumentation = require('./ReactInstrumentation');

		var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
		var warning = require('fbjs/lib/warning');

		var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
		var illegalAttributeNameCache = {};
		var validatedAttributeNameCache = {};

		function isAttributeNameSafe(attributeName) {
			if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
				return true;
			}
			if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
				return false;
			}
			if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
				validatedAttributeNameCache[attributeName] = true;
				return true;
			}
			illegalAttributeNameCache[attributeName] = true;
			process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
			return false;
		}

		function shouldIgnoreValue(propertyInfo, value) {
			return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
		}

		/**
 * Operations for dealing with DOM properties.
 */
		var DOMPropertyOperations = {

			/**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
			createMarkupForID: function (id) {
				return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
			},

			setAttributeForID: function (node, id) {
				node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
			},

			createMarkupForRoot: function () {
				return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
			},

			setAttributeForRoot: function (node) {
				node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
			},

			/**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
			createMarkupForProperty: function (name, value) {
				var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
				if (propertyInfo) {
					if (shouldIgnoreValue(propertyInfo, value)) {
						return '';
					}
					var attributeName = propertyInfo.attributeName;
					if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
						return attributeName + '=""';
					}
					return attributeName + '=' + quoteAttributeValueForBrowser(value);
				} else if (DOMProperty.isCustomAttribute(name)) {
					if (value == null) {
						return '';
					}
					return name + '=' + quoteAttributeValueForBrowser(value);
				}
				return null;
			},

			/**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
			createMarkupForCustomAttribute: function (name, value) {
				if (!isAttributeNameSafe(name) || value == null) {
					return '';
				}
				return name + '=' + quoteAttributeValueForBrowser(value);
			},

			/**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
			setValueForProperty: function (node, name, value) {
				var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
				if (propertyInfo) {
					var mutationMethod = propertyInfo.mutationMethod;
					if (mutationMethod) {
						mutationMethod(node, value);
					} else if (shouldIgnoreValue(propertyInfo, value)) {
						this.deleteValueForProperty(node, name);
						return;
					} else if (propertyInfo.mustUseProperty) {
						// Contrary to `setAttribute`, object properties are properly
						// `toString`ed by IE8/9.
						node[propertyInfo.propertyName] = value;
					} else {
						var attributeName = propertyInfo.attributeName;
						var namespace = propertyInfo.attributeNamespace;
						// `setAttribute` with objects becomes only `[object]` in IE8/9,
						// ('' + value) makes it output the correct toString()-value.
						if (namespace) {
							node.setAttributeNS(namespace, attributeName, '' + value);
						} else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
							node.setAttribute(attributeName, '');
						} else {
							node.setAttribute(attributeName, '' + value);
						}
					}
				} else if (DOMProperty.isCustomAttribute(name)) {
					DOMPropertyOperations.setValueForAttribute(node, name, value);
					return;
				}

				if (process.env.NODE_ENV !== 'production') {
					var payload = {};
					payload[name] = value;
					ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
				}
			},

			setValueForAttribute: function (node, name, value) {
				if (!isAttributeNameSafe(name)) {
					return;
				}
				if (value == null) {
					node.removeAttribute(name);
				} else {
					node.setAttribute(name, '' + value);
				}

				if (process.env.NODE_ENV !== 'production') {
					var payload = {};
					payload[name] = value;
					ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
				}
			},

			/**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
			deleteValueForAttribute: function (node, name) {
				node.removeAttribute(name);
				if (process.env.NODE_ENV !== 'production') {
					ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
				}
			},

			/**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
			deleteValueForProperty: function (node, name) {
				var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
				if (propertyInfo) {
					var mutationMethod = propertyInfo.mutationMethod;
					if (mutationMethod) {
						mutationMethod(node, undefined);
					} else if (propertyInfo.mustUseProperty) {
						var propName = propertyInfo.propertyName;
						if (propertyInfo.hasBooleanValue) {
							node[propName] = false;
						} else {
							node[propName] = '';
						}
					} else {
						node.removeAttribute(propertyInfo.attributeName);
					}
				} else if (DOMProperty.isCustomAttribute(name)) {
					node.removeAttribute(name);
				}

				if (process.env.NODE_ENV !== 'production') {
					ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
				}
			}

		};

		module.exports = DOMPropertyOperations;
	}).call(this,require('_process'));
},{"./DOMProperty":626,"./ReactDOMComponentTree":658,"./ReactInstrumentation":688,"./quoteAttributeValueForBrowser":751,"_process":615,"fbjs/lib/warning":783}],628:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var DOMLazyTree = require('./DOMLazyTree');
		var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

		var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
		var emptyFunction = require('fbjs/lib/emptyFunction');
		var invariant = require('fbjs/lib/invariant');

		var Danger = {

			/**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
			dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
				!ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
				!markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
				!(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

				if (typeof markup === 'string') {
					var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
					oldChild.parentNode.replaceChild(newChild, oldChild);
				} else {
					DOMLazyTree.replaceChildWithTree(oldChild, markup);
				}
			}

		};

		module.exports = Danger;
	}).call(this,require('_process'));
},{"./DOMLazyTree":624,"./reactProdInvariant":752,"_process":615,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/createNodesFromMarkup":765,"fbjs/lib/emptyFunction":766,"fbjs/lib/invariant":774}],629:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

	'use strict';

	var keyOf = require('fbjs/lib/keyOf');

	/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":778}],630:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DisabledInputUtils
 */

	'use strict';

	var disableableMouseListenerNames = {
		onClick: true,
		onDoubleClick: true,
		onMouseDown: true,
		onMouseMove: true,
		onMouseUp: true,

		onClickCapture: true,
		onDoubleClickCapture: true,
		onMouseDownCapture: true,
		onMouseMoveCapture: true,
		onMouseUpCapture: true
	};

	/**
 * Implements a host component that does not receive mouse events
 * when `disabled` is set.
 */
	var DisabledInputUtils = {
		getHostProps: function (inst, props) {
			if (!props.disabled) {
				return props;
			}

			// Copy the props, except the mouse listeners
			var hostProps = {};
			for (var key in props) {
				if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {
					hostProps[key] = props[key];
				}
			}

			return hostProps;
		}
	};

	module.exports = DisabledInputUtils;
},{}],631:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 */

	'use strict';

	var EventConstants = require('./EventConstants');
	var EventPropagators = require('./EventPropagators');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');
	var SyntheticMouseEvent = require('./SyntheticMouseEvent');

	var keyOf = require('fbjs/lib/keyOf');

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
		mouseEnter: {
			registrationName: keyOf({ onMouseEnter: null }),
			dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
		},
		mouseLeave: {
			registrationName: keyOf({ onMouseLeave: null }),
			dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
		}
	};

	var EnterLeaveEventPlugin = {

		eventTypes: eventTypes,

		/**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
		extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
			if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
				return null;
			}
			if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
				// Must not be a mouse in or mouse out - ignoring.
				return null;
			}

			var win;
			if (nativeEventTarget.window === nativeEventTarget) {
				// `nativeEventTarget` is probably a window object.
				win = nativeEventTarget;
			} else {
				// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
				var doc = nativeEventTarget.ownerDocument;
				if (doc) {
					win = doc.defaultView || doc.parentWindow;
				} else {
					win = window;
				}
			}

			var from;
			var to;
			if (topLevelType === topLevelTypes.topMouseOut) {
				from = targetInst;
				var related = nativeEvent.relatedTarget || nativeEvent.toElement;
				to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
			} else {
				// Moving to a node from outside the window.
				from = null;
				to = targetInst;
			}

			if (from === to) {
				// Nothing pertains to our managed components.
				return null;
			}

			var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
			var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

			var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
			leave.type = 'mouseleave';
			leave.target = fromNode;
			leave.relatedTarget = toNode;

			var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
			enter.type = 'mouseenter';
			enter.target = toNode;
			enter.relatedTarget = fromNode;

			EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

			return [leave, enter];
		}

	};

	module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":632,"./EventPropagators":636,"./ReactDOMComponentTree":658,"./SyntheticMouseEvent":721,"fbjs/lib/keyOf":778}],632:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

	'use strict';

	var keyMirror = require('fbjs/lib/keyMirror');

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
 * Types of raw signals from the browser caught at the top level.
 */
	var topLevelTypes = keyMirror({
		topAbort: null,
		topAnimationEnd: null,
		topAnimationIteration: null,
		topAnimationStart: null,
		topBlur: null,
		topCanPlay: null,
		topCanPlayThrough: null,
		topChange: null,
		topClick: null,
		topCompositionEnd: null,
		topCompositionStart: null,
		topCompositionUpdate: null,
		topContextMenu: null,
		topCopy: null,
		topCut: null,
		topDoubleClick: null,
		topDrag: null,
		topDragEnd: null,
		topDragEnter: null,
		topDragExit: null,
		topDragLeave: null,
		topDragOver: null,
		topDragStart: null,
		topDrop: null,
		topDurationChange: null,
		topEmptied: null,
		topEncrypted: null,
		topEnded: null,
		topError: null,
		topFocus: null,
		topInput: null,
		topInvalid: null,
		topKeyDown: null,
		topKeyPress: null,
		topKeyUp: null,
		topLoad: null,
		topLoadedData: null,
		topLoadedMetadata: null,
		topLoadStart: null,
		topMouseDown: null,
		topMouseMove: null,
		topMouseOut: null,
		topMouseOver: null,
		topMouseUp: null,
		topPaste: null,
		topPause: null,
		topPlay: null,
		topPlaying: null,
		topProgress: null,
		topRateChange: null,
		topReset: null,
		topScroll: null,
		topSeeked: null,
		topSeeking: null,
		topSelectionChange: null,
		topStalled: null,
		topSubmit: null,
		topSuspend: null,
		topTextInput: null,
		topTimeUpdate: null,
		topTouchCancel: null,
		topTouchEnd: null,
		topTouchMove: null,
		topTouchStart: null,
		topTransitionEnd: null,
		topVolumeChange: null,
		topWaiting: null,
		topWheel: null
	});

	var EventConstants = {
		topLevelTypes: topLevelTypes,
		PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;
},{"fbjs/lib/keyMirror":777}],633:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var EventPluginRegistry = require('./EventPluginRegistry');
		var EventPluginUtils = require('./EventPluginUtils');
		var ReactErrorUtils = require('./ReactErrorUtils');

		var accumulateInto = require('./accumulateInto');
		var forEachAccumulated = require('./forEachAccumulated');
		var invariant = require('fbjs/lib/invariant');

		/**
 * Internal store for event listeners
 */
		var listenerBank = {};

		/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
		var eventQueue = null;

		/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
		var executeDispatchesAndRelease = function (event, simulated) {
			if (event) {
				EventPluginUtils.executeDispatchesInOrder(event, simulated);

				if (!event.isPersistent()) {
					event.constructor.release(event);
				}
			}
		};
		var executeDispatchesAndReleaseSimulated = function (e) {
			return executeDispatchesAndRelease(e, true);
		};
		var executeDispatchesAndReleaseTopLevel = function (e) {
			return executeDispatchesAndRelease(e, false);
		};

		var getDictionaryKey = function (inst) {
			// Prevents V8 performance issue:
			// https://github.com/facebook/react/pull/7232
			return '.' + inst._rootNodeID;
		};

		/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
		var EventPluginHub = {

			/**
   * Methods for injecting dependencies.
   */
			injection: {

				/**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
				injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

				/**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
				injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

			},

			/**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
			putListener: function (inst, registrationName, listener) {
				!(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

				var key = getDictionaryKey(inst);
				var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
				bankForRegistrationName[key] = listener;

				var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
				if (PluginModule && PluginModule.didPutListener) {
					PluginModule.didPutListener(inst, registrationName, listener);
				}
			},

			/**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
			getListener: function (inst, registrationName) {
				var bankForRegistrationName = listenerBank[registrationName];
				var key = getDictionaryKey(inst);
				return bankForRegistrationName && bankForRegistrationName[key];
			},

			/**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
			deleteListener: function (inst, registrationName) {
				var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
				if (PluginModule && PluginModule.willDeleteListener) {
					PluginModule.willDeleteListener(inst, registrationName);
				}

				var bankForRegistrationName = listenerBank[registrationName];
				// TODO: This should never be null -- when is it?
				if (bankForRegistrationName) {
					var key = getDictionaryKey(inst);
					delete bankForRegistrationName[key];
				}
			},

			/**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
			deleteAllListeners: function (inst) {
				var key = getDictionaryKey(inst);
				for (var registrationName in listenerBank) {
					if (!listenerBank.hasOwnProperty(registrationName)) {
						continue;
					}

					if (!listenerBank[registrationName][key]) {
						continue;
					}

					var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
					if (PluginModule && PluginModule.willDeleteListener) {
						PluginModule.willDeleteListener(inst, registrationName);
					}

					delete listenerBank[registrationName][key];
				}
			},

			/**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
			extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
				var events;
				var plugins = EventPluginRegistry.plugins;
				for (var i = 0; i < plugins.length; i++) {
					// Not every plugin in the ordering may be loaded at runtime.
					var possiblePlugin = plugins[i];
					if (possiblePlugin) {
						var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
						if (extractedEvents) {
							events = accumulateInto(events, extractedEvents);
						}
					}
				}
				return events;
			},

			/**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
			enqueueEvents: function (events) {
				if (events) {
					eventQueue = accumulateInto(eventQueue, events);
				}
			},

			/**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
			processEventQueue: function (simulated) {
				// Set `eventQueue` to null before processing it so that we can tell if more
				// events get enqueued while processing.
				var processingEventQueue = eventQueue;
				eventQueue = null;
				if (simulated) {
					forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
				} else {
					forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
				}
				eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
				// This would be a good time to rethrow if any of the event handlers threw.
				ReactErrorUtils.rethrowCaughtError();
			},

			/**
   * These are needed for tests only. Do not use!
   */
			__purge: function () {
				listenerBank = {};
			},

			__getListenerBank: function () {
				return listenerBank;
			}

		};

		module.exports = EventPluginHub;
	}).call(this,require('_process'));
},{"./EventPluginRegistry":634,"./EventPluginUtils":635,"./ReactErrorUtils":679,"./accumulateInto":728,"./forEachAccumulated":737,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],634:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		/**
 * Injectable ordering of event plugins.
 */
		var EventPluginOrder = null;

		/**
 * Injectable mapping from names to event plugin modules.
 */
		var namesToPlugins = {};

		/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
		function recomputePluginOrdering() {
			if (!EventPluginOrder) {
				// Wait until an `EventPluginOrder` is injected.
				return;
			}
			for (var pluginName in namesToPlugins) {
				var PluginModule = namesToPlugins[pluginName];
				var pluginIndex = EventPluginOrder.indexOf(pluginName);
				!(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
				if (EventPluginRegistry.plugins[pluginIndex]) {
					continue;
				}
				!PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
				EventPluginRegistry.plugins[pluginIndex] = PluginModule;
				var publishedEvents = PluginModule.eventTypes;
				for (var eventName in publishedEvents) {
					!publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
				}
			}
		}

		/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
		function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
			EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
			EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

			var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
			if (phasedRegistrationNames) {
				for (var phaseName in phasedRegistrationNames) {
					if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
						var phasedRegistrationName = phasedRegistrationNames[phaseName];
						publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
					}
				}
				return true;
			} else if (dispatchConfig.registrationName) {
				publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
				return true;
			}
			return false;
		}

		/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
		function publishRegistrationName(registrationName, PluginModule, eventName) {
			EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
			EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
			EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;

			if (process.env.NODE_ENV !== 'production') {
				var lowerCasedName = registrationName.toLowerCase();
				EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

				if (registrationName === 'onDoubleClick') {
					EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
				}
			}
		}

		/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
		var EventPluginRegistry = {

			/**
   * Ordered list of injected plugins.
   */
			plugins: [],

			/**
   * Mapping from event name to dispatch config
   */
			eventNameDispatchConfigs: {},

			/**
   * Mapping from registration name to plugin module
   */
			registrationNameModules: {},

			/**
   * Mapping from registration name to event name
   */
			registrationNameDependencies: {},

			/**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
			possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,

			/**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
			injectEventPluginOrder: function (InjectedEventPluginOrder) {
				EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
				// Clone the ordering so it cannot be dynamically mutated.
				EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
				recomputePluginOrdering();
			},

			/**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
			injectEventPluginsByName: function (injectedNamesToPlugins) {
				var isOrderingDirty = false;
				for (var pluginName in injectedNamesToPlugins) {
					if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
						continue;
					}
					var PluginModule = injectedNamesToPlugins[pluginName];
					if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
						namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
						namesToPlugins[pluginName] = PluginModule;
						isOrderingDirty = true;
					}
				}
				if (isOrderingDirty) {
					recomputePluginOrdering();
				}
			},

			/**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
			getPluginModuleForEvent: function (event) {
				var dispatchConfig = event.dispatchConfig;
				if (dispatchConfig.registrationName) {
					return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
				}
				for (var phase in dispatchConfig.phasedRegistrationNames) {
					if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
						continue;
					}
					var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
					if (PluginModule) {
						return PluginModule;
					}
				}
				return null;
			},

			/**
   * Exposed for unit testing.
   * @private
   */
			_resetEventPlugins: function () {
				EventPluginOrder = null;
				for (var pluginName in namesToPlugins) {
					if (namesToPlugins.hasOwnProperty(pluginName)) {
						delete namesToPlugins[pluginName];
					}
				}
				EventPluginRegistry.plugins.length = 0;

				var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
				for (var eventName in eventNameDispatchConfigs) {
					if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
						delete eventNameDispatchConfigs[eventName];
					}
				}

				var registrationNameModules = EventPluginRegistry.registrationNameModules;
				for (var registrationName in registrationNameModules) {
					if (registrationNameModules.hasOwnProperty(registrationName)) {
						delete registrationNameModules[registrationName];
					}
				}

				if (process.env.NODE_ENV !== 'production') {
					var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
					for (var lowerCasedName in possibleRegistrationNames) {
						if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
							delete possibleRegistrationNames[lowerCasedName];
						}
					}
				}
			}

		};

		module.exports = EventPluginRegistry;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],635:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var EventConstants = require('./EventConstants');
		var ReactErrorUtils = require('./ReactErrorUtils');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		/**
 * Injected dependencies:
 */

		/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
		var ComponentTree;
		var TreeTraversal;
		var injection = {
			injectComponentTree: function (Injected) {
				ComponentTree = Injected;
				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
				}
			},
			injectTreeTraversal: function (Injected) {
				TreeTraversal = Injected;
				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
				}
			}
		};

		var topLevelTypes = EventConstants.topLevelTypes;

		function isEndish(topLevelType) {
			return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
		}

		function isMoveish(topLevelType) {
			return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
		}
		function isStartish(topLevelType) {
			return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
		}

		var validateEventDispatches;
		if (process.env.NODE_ENV !== 'production') {
			validateEventDispatches = function (event) {
				var dispatchListeners = event._dispatchListeners;
				var dispatchInstances = event._dispatchInstances;

				var listenersIsArr = Array.isArray(dispatchListeners);
				var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

				var instancesIsArr = Array.isArray(dispatchInstances);
				var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

				process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
			};
		}

		/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
		function executeDispatch(event, simulated, listener, inst) {
			var type = event.type || 'unknown-event';
			event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
			if (simulated) {
				ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
			} else {
				ReactErrorUtils.invokeGuardedCallback(type, listener, event);
			}
			event.currentTarget = null;
		}

		/**
 * Standard/simple iteration through an event's collected dispatches.
 */
		function executeDispatchesInOrder(event, simulated) {
			var dispatchListeners = event._dispatchListeners;
			var dispatchInstances = event._dispatchInstances;
			if (process.env.NODE_ENV !== 'production') {
				validateEventDispatches(event);
			}
			if (Array.isArray(dispatchListeners)) {
				for (var i = 0; i < dispatchListeners.length; i++) {
					if (event.isPropagationStopped()) {
						break;
					}
					// Listeners and Instances are two parallel arrays that are always in sync.
					executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
				}
			} else if (dispatchListeners) {
				executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
			}
			event._dispatchListeners = null;
			event._dispatchInstances = null;
		}

		/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
		function executeDispatchesInOrderStopAtTrueImpl(event) {
			var dispatchListeners = event._dispatchListeners;
			var dispatchInstances = event._dispatchInstances;
			if (process.env.NODE_ENV !== 'production') {
				validateEventDispatches(event);
			}
			if (Array.isArray(dispatchListeners)) {
				for (var i = 0; i < dispatchListeners.length; i++) {
					if (event.isPropagationStopped()) {
						break;
					}
					// Listeners and Instances are two parallel arrays that are always in sync.
					if (dispatchListeners[i](event, dispatchInstances[i])) {
						return dispatchInstances[i];
					}
				}
			} else if (dispatchListeners) {
				if (dispatchListeners(event, dispatchInstances)) {
					return dispatchInstances;
				}
			}
			return null;
		}

		/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
		function executeDispatchesInOrderStopAtTrue(event) {
			var ret = executeDispatchesInOrderStopAtTrueImpl(event);
			event._dispatchInstances = null;
			event._dispatchListeners = null;
			return ret;
		}

		/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
		function executeDirectDispatch(event) {
			if (process.env.NODE_ENV !== 'production') {
				validateEventDispatches(event);
			}
			var dispatchListener = event._dispatchListeners;
			var dispatchInstance = event._dispatchInstances;
			Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
			event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
			var res = dispatchListener ? dispatchListener(event) : null;
			event.currentTarget = null;
			event._dispatchListeners = null;
			event._dispatchInstances = null;
			return res;
		}

		/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
		function hasDispatches(event) {
			return !!event._dispatchListeners;
		}

		/**
 * General utilities that are useful in creating custom Event Plugins.
 */
		var EventPluginUtils = {
			isEndish: isEndish,
			isMoveish: isMoveish,
			isStartish: isStartish,

			executeDirectDispatch: executeDirectDispatch,
			executeDispatchesInOrder: executeDispatchesInOrder,
			executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
			hasDispatches: hasDispatches,

			getInstanceFromNode: function (node) {
				return ComponentTree.getInstanceFromNode(node);
			},
			getNodeFromInstance: function (node) {
				return ComponentTree.getNodeFromInstance(node);
			},
			isAncestor: function (a, b) {
				return TreeTraversal.isAncestor(a, b);
			},
			getLowestCommonAncestor: function (a, b) {
				return TreeTraversal.getLowestCommonAncestor(a, b);
			},
			getParentInstance: function (inst) {
				return TreeTraversal.getParentInstance(inst);
			},
			traverseTwoPhase: function (target, fn, arg) {
				return TreeTraversal.traverseTwoPhase(target, fn, arg);
			},
			traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
				return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
			},

			injection: injection
		};

		module.exports = EventPluginUtils;
	}).call(this,require('_process'));
},{"./EventConstants":632,"./ReactErrorUtils":679,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],636:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

		'use strict';

		var EventConstants = require('./EventConstants');
		var EventPluginHub = require('./EventPluginHub');
		var EventPluginUtils = require('./EventPluginUtils');

		var accumulateInto = require('./accumulateInto');
		var forEachAccumulated = require('./forEachAccumulated');
		var warning = require('fbjs/lib/warning');

		var PropagationPhases = EventConstants.PropagationPhases;
		var getListener = EventPluginHub.getListener;

		/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
		function listenerAtPhase(inst, event, propagationPhase) {
			var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
			return getListener(inst, registrationName);
		}

		/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
		function accumulateDirectionalDispatches(inst, upwards, event) {
			if (process.env.NODE_ENV !== 'production') {
				process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
			}
			var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
			var listener = listenerAtPhase(inst, event, phase);
			if (listener) {
				event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
				event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
			}
		}

		/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
		function accumulateTwoPhaseDispatchesSingle(event) {
			if (event && event.dispatchConfig.phasedRegistrationNames) {
				EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
			}
		}

		/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
		function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
			if (event && event.dispatchConfig.phasedRegistrationNames) {
				var targetInst = event._targetInst;
				var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
				EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
			}
		}

		/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
		function accumulateDispatches(inst, ignoredDirection, event) {
			if (event && event.dispatchConfig.registrationName) {
				var registrationName = event.dispatchConfig.registrationName;
				var listener = getListener(inst, registrationName);
				if (listener) {
					event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
					event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
				}
			}
		}

		/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
		function accumulateDirectDispatchesSingle(event) {
			if (event && event.dispatchConfig.registrationName) {
				accumulateDispatches(event._targetInst, null, event);
			}
		}

		function accumulateTwoPhaseDispatches(events) {
			forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
		}

		function accumulateTwoPhaseDispatchesSkipTarget(events) {
			forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
		}

		function accumulateEnterLeaveDispatches(leave, enter, from, to) {
			EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
		}

		function accumulateDirectDispatches(events) {
			forEachAccumulated(events, accumulateDirectDispatchesSingle);
		}

		/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
		var EventPropagators = {
			accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
			accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
			accumulateDirectDispatches: accumulateDirectDispatches,
			accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
		};

		module.exports = EventPropagators;
	}).call(this,require('_process'));
},{"./EventConstants":632,"./EventPluginHub":633,"./EventPluginUtils":635,"./accumulateInto":728,"./forEachAccumulated":737,"_process":615,"fbjs/lib/warning":783}],637:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 */

	'use strict';

	var _assign = require('object-assign');

	var PooledClass = require('./PooledClass');

	var getTextContentAccessor = require('./getTextContentAccessor');

	/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
	function FallbackCompositionState(root) {
		this._root = root;
		this._startText = this.getText();
		this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
		destructor: function () {
			this._root = null;
			this._startText = null;
			this._fallbackText = null;
		},

		/**
   * Get current text of input.
   *
   * @return {string}
   */
		getText: function () {
			if ('value' in this._root) {
				return this._root.value;
			}
			return this._root[getTextContentAccessor()];
		},

		/**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
		getData: function () {
			if (this._fallbackText) {
				return this._fallbackText;
			}

			var start;
			var startValue = this._startText;
			var startLength = startValue.length;
			var end;
			var endValue = this.getText();
			var endLength = endValue.length;

			for (start = 0; start < startLength; start++) {
				if (startValue[start] !== endValue[start]) {
					break;
				}
			}

			var minEnd = startLength - start;
			for (end = 1; end <= minEnd; end++) {
				if (startValue[startLength - end] !== endValue[endLength - end]) {
					break;
				}
			}

			var sliceTail = end > 1 ? 1 - end : undefined;
			this._fallbackText = endValue.slice(start, sliceTail);
			return this._fallbackText;
		}
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;
},{"./PooledClass":641,"./getTextContentAccessor":745,"object-assign":784}],638:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

	'use strict';

	var DOMProperty = require('./DOMProperty');

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
		isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
		Properties: {
			/**
     * Standard Properties
     */
			accept: 0,
			acceptCharset: 0,
			accessKey: 0,
			action: 0,
			allowFullScreen: HAS_BOOLEAN_VALUE,
			allowTransparency: 0,
			alt: 0,
			// specifies target context for links with `preload` type
			as: 0,
			async: HAS_BOOLEAN_VALUE,
			autoComplete: 0,
			// autoFocus is polyfilled/normalized by AutoFocusUtils
			// autoFocus: HAS_BOOLEAN_VALUE,
			autoPlay: HAS_BOOLEAN_VALUE,
			capture: HAS_BOOLEAN_VALUE,
			cellPadding: 0,
			cellSpacing: 0,
			charSet: 0,
			challenge: 0,
			checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
			cite: 0,
			classID: 0,
			className: 0,
			cols: HAS_POSITIVE_NUMERIC_VALUE,
			colSpan: 0,
			content: 0,
			contentEditable: 0,
			contextMenu: 0,
			controls: HAS_BOOLEAN_VALUE,
			coords: 0,
			crossOrigin: 0,
			data: 0, // For `<object />` acts as `src`.
			dateTime: 0,
			'default': HAS_BOOLEAN_VALUE,
			defer: HAS_BOOLEAN_VALUE,
			dir: 0,
			disabled: HAS_BOOLEAN_VALUE,
			download: HAS_OVERLOADED_BOOLEAN_VALUE,
			draggable: 0,
			encType: 0,
			form: 0,
			formAction: 0,
			formEncType: 0,
			formMethod: 0,
			formNoValidate: HAS_BOOLEAN_VALUE,
			formTarget: 0,
			frameBorder: 0,
			headers: 0,
			height: 0,
			hidden: HAS_BOOLEAN_VALUE,
			high: 0,
			href: 0,
			hrefLang: 0,
			htmlFor: 0,
			httpEquiv: 0,
			icon: 0,
			id: 0,
			inputMode: 0,
			integrity: 0,
			is: 0,
			keyParams: 0,
			keyType: 0,
			kind: 0,
			label: 0,
			lang: 0,
			list: 0,
			loop: HAS_BOOLEAN_VALUE,
			low: 0,
			manifest: 0,
			marginHeight: 0,
			marginWidth: 0,
			max: 0,
			maxLength: 0,
			media: 0,
			mediaGroup: 0,
			method: 0,
			min: 0,
			minLength: 0,
			// Caution; `option.selected` is not updated if `select.multiple` is
			// disabled with `removeAttribute`.
			multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
			muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
			name: 0,
			nonce: 0,
			noValidate: HAS_BOOLEAN_VALUE,
			open: HAS_BOOLEAN_VALUE,
			optimum: 0,
			pattern: 0,
			placeholder: 0,
			playsInline: HAS_BOOLEAN_VALUE,
			poster: 0,
			preload: 0,
			profile: 0,
			radioGroup: 0,
			readOnly: HAS_BOOLEAN_VALUE,
			referrerPolicy: 0,
			rel: 0,
			required: HAS_BOOLEAN_VALUE,
			reversed: HAS_BOOLEAN_VALUE,
			role: 0,
			rows: HAS_POSITIVE_NUMERIC_VALUE,
			rowSpan: HAS_NUMERIC_VALUE,
			sandbox: 0,
			scope: 0,
			scoped: HAS_BOOLEAN_VALUE,
			scrolling: 0,
			seamless: HAS_BOOLEAN_VALUE,
			selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
			shape: 0,
			size: HAS_POSITIVE_NUMERIC_VALUE,
			sizes: 0,
			span: HAS_POSITIVE_NUMERIC_VALUE,
			spellCheck: 0,
			src: 0,
			srcDoc: 0,
			srcLang: 0,
			srcSet: 0,
			start: HAS_NUMERIC_VALUE,
			step: 0,
			style: 0,
			summary: 0,
			tabIndex: 0,
			target: 0,
			title: 0,
			// Setting .type throws on non-<input> tags
			type: 0,
			useMap: 0,
			value: 0,
			width: 0,
			wmode: 0,
			wrap: 0,

			/**
     * RDFa Properties
     */
			about: 0,
			datatype: 0,
			inlist: 0,
			prefix: 0,
			// property is also supported for OpenGraph in meta tags.
			property: 0,
			resource: 0,
			'typeof': 0,
			vocab: 0,

			/**
     * Non-standard Properties
     */
			// autoCapitalize and autoCorrect are supported in Mobile Safari for
			// keyboard hints.
			autoCapitalize: 0,
			autoCorrect: 0,
			// autoSave allows WebKit/Blink to persist values of input fields on page reloads
			autoSave: 0,
			// color is for Safari mask-icon link
			color: 0,
			// itemProp, itemScope, itemType are for
			// Microdata support. See http://schema.org/docs/gs.html
			itemProp: 0,
			itemScope: HAS_BOOLEAN_VALUE,
			itemType: 0,
			// itemID and itemRef are for Microdata support as well but
			// only specified in the WHATWG spec document. See
			// https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
			itemID: 0,
			itemRef: 0,
			// results show looking glass icon and recent searches on input
			// search fields in WebKit/Blink
			results: 0,
			// IE-only attribute that specifies security restrictions on an iframe
			// as an alternative to the sandbox attribute on IE<10
			security: 0,
			// IE-only attribute that controls focus behavior
			unselectable: 0
		},
		DOMAttributeNames: {
			acceptCharset: 'accept-charset',
			className: 'class',
			htmlFor: 'for',
			httpEquiv: 'http-equiv'
		},
		DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":626}],639:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule KeyEscapeUtils
 * 
 */

	'use strict';

	/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

	function escape(key) {
		var escapeRegex = /[=:]/g;
		var escaperLookup = {
			'=': '=0',
			':': '=2'
		};
		var escapedString = ('' + key).replace(escapeRegex, function (match) {
			return escaperLookup[match];
		});

		return '$' + escapedString;
	}

	/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
	function unescape(key) {
		var unescapeRegex = /(=0|=2)/g;
		var unescaperLookup = {
			'=0': '=',
			'=2': ':'
		};
		var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

		return ('' + keySubstring).replace(unescapeRegex, function (match) {
			return unescaperLookup[match];
		});
	}

	var KeyEscapeUtils = {
		escape: escape,
		unescape: unescape
	};

	module.exports = KeyEscapeUtils;
},{}],640:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactPropTypes = require('./ReactPropTypes');
		var ReactPropTypeLocations = require('./ReactPropTypeLocations');
		var ReactPropTypesSecret = require('./ReactPropTypesSecret');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		var hasReadOnlyValue = {
			'button': true,
			'checkbox': true,
			'image': true,
			'hidden': true,
			'radio': true,
			'reset': true,
			'submit': true
		};

		function _assertSingleLink(inputProps) {
			!(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
		}
		function _assertValueLink(inputProps) {
			_assertSingleLink(inputProps);
			!(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
		}

		function _assertCheckedLink(inputProps) {
			_assertSingleLink(inputProps);
			!(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
		}

		var propTypes = {
			value: function (props, propName, componentName) {
				if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
					return null;
				}
				return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
			},
			checked: function (props, propName, componentName) {
				if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
					return null;
				}
				return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
			},
			onChange: ReactPropTypes.func
		};

		var loggedTypeFailures = {};
		function getDeclarationErrorAddendum(owner) {
			if (owner) {
				var name = owner.getName();
				if (name) {
					return ' Check the render method of `' + name + '`.';
				}
			}
			return '';
		}

		/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
		var LinkedValueUtils = {
			checkPropTypes: function (tagName, props, owner) {
				for (var propName in propTypes) {
					if (propTypes.hasOwnProperty(propName)) {
						var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
					}
					if (error instanceof Error && !(error.message in loggedTypeFailures)) {
						// Only monitor this failure once because there tends to be a lot of the
						// same error.
						loggedTypeFailures[error.message] = true;

						var addendum = getDeclarationErrorAddendum(owner);
						process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
					}
				}
			},

			/**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
			getValue: function (inputProps) {
				if (inputProps.valueLink) {
					_assertValueLink(inputProps);
					return inputProps.valueLink.value;
				}
				return inputProps.value;
			},

			/**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
			getChecked: function (inputProps) {
				if (inputProps.checkedLink) {
					_assertCheckedLink(inputProps);
					return inputProps.checkedLink.value;
				}
				return inputProps.checked;
			},

			/**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
			executeOnChange: function (inputProps, event) {
				if (inputProps.valueLink) {
					_assertValueLink(inputProps);
					return inputProps.valueLink.requestChange(event.target.value);
				} else if (inputProps.checkedLink) {
					_assertCheckedLink(inputProps);
					return inputProps.checkedLink.requestChange(event.target.checked);
				} else if (inputProps.onChange) {
					return inputProps.onChange.call(undefined, event);
				}
			}
		};

		module.exports = LinkedValueUtils;
	}).call(this,require('_process'));
},{"./ReactPropTypeLocations":698,"./ReactPropTypes":699,"./ReactPropTypesSecret":700,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],641:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
		var oneArgumentPooler = function (copyFieldsFrom) {
			var Klass = this;
			if (Klass.instancePool.length) {
				var instance = Klass.instancePool.pop();
				Klass.call(instance, copyFieldsFrom);
				return instance;
			} else {
				return new Klass(copyFieldsFrom);
			}
		};

		var twoArgumentPooler = function (a1, a2) {
			var Klass = this;
			if (Klass.instancePool.length) {
				var instance = Klass.instancePool.pop();
				Klass.call(instance, a1, a2);
				return instance;
			} else {
				return new Klass(a1, a2);
			}
		};

		var threeArgumentPooler = function (a1, a2, a3) {
			var Klass = this;
			if (Klass.instancePool.length) {
				var instance = Klass.instancePool.pop();
				Klass.call(instance, a1, a2, a3);
				return instance;
			} else {
				return new Klass(a1, a2, a3);
			}
		};

		var fourArgumentPooler = function (a1, a2, a3, a4) {
			var Klass = this;
			if (Klass.instancePool.length) {
				var instance = Klass.instancePool.pop();
				Klass.call(instance, a1, a2, a3, a4);
				return instance;
			} else {
				return new Klass(a1, a2, a3, a4);
			}
		};

		var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
			var Klass = this;
			if (Klass.instancePool.length) {
				var instance = Klass.instancePool.pop();
				Klass.call(instance, a1, a2, a3, a4, a5);
				return instance;
			} else {
				return new Klass(a1, a2, a3, a4, a5);
			}
		};

		var standardReleaser = function (instance) {
			var Klass = this;
			!(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
			instance.destructor();
			if (Klass.instancePool.length < Klass.poolSize) {
				Klass.instancePool.push(instance);
			}
		};

		var DEFAULT_POOL_SIZE = 10;
		var DEFAULT_POOLER = oneArgumentPooler;

		/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
		var addPoolingTo = function (CopyConstructor, pooler) {
			var NewKlass = CopyConstructor;
			NewKlass.instancePool = [];
			NewKlass.getPooled = pooler || DEFAULT_POOLER;
			if (!NewKlass.poolSize) {
				NewKlass.poolSize = DEFAULT_POOL_SIZE;
			}
			NewKlass.release = standardReleaser;
			return NewKlass;
		};

		var PooledClass = {
			addPoolingTo: addPoolingTo,
			oneArgumentPooler: oneArgumentPooler,
			twoArgumentPooler: twoArgumentPooler,
			threeArgumentPooler: threeArgumentPooler,
			fourArgumentPooler: fourArgumentPooler,
			fiveArgumentPooler: fiveArgumentPooler
		};

		module.exports = PooledClass;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],642:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

		'use strict';

		var _assign = require('object-assign');

		var ReactChildren = require('./ReactChildren');
		var ReactComponent = require('./ReactComponent');
		var ReactPureComponent = require('./ReactPureComponent');
		var ReactClass = require('./ReactClass');
		var ReactDOMFactories = require('./ReactDOMFactories');
		var ReactElement = require('./ReactElement');
		var ReactPropTypes = require('./ReactPropTypes');
		var ReactVersion = require('./ReactVersion');

		var onlyChild = require('./onlyChild');
		var warning = require('fbjs/lib/warning');

		var createElement = ReactElement.createElement;
		var createFactory = ReactElement.createFactory;
		var cloneElement = ReactElement.cloneElement;

		if (process.env.NODE_ENV !== 'production') {
			var ReactElementValidator = require('./ReactElementValidator');
			createElement = ReactElementValidator.createElement;
			createFactory = ReactElementValidator.createFactory;
			cloneElement = ReactElementValidator.cloneElement;
		}

		var __spread = _assign;

		if (process.env.NODE_ENV !== 'production') {
			var warned = false;
			__spread = function () {
				process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
				warned = true;
				return _assign.apply(null, arguments);
			};
		}

		var React = {

			// Modern

			Children: {
				map: ReactChildren.map,
				forEach: ReactChildren.forEach,
				count: ReactChildren.count,
				toArray: ReactChildren.toArray,
				only: onlyChild
			},

			Component: ReactComponent,
			PureComponent: ReactPureComponent,

			createElement: createElement,
			cloneElement: cloneElement,
			isValidElement: ReactElement.isValidElement,

			// Classic

			PropTypes: ReactPropTypes,
			createClass: ReactClass.createClass,
			createFactory: createFactory,
			createMixin: function (mixin) {
				// Currently a noop. Will be used to validate and trace mixins.
				return mixin;
			},

			// This looks DOM specific but these are actually isomorphic helpers
			// since they are just generating DOM strings.
			DOM: ReactDOMFactories,

			version: ReactVersion,

			// Deprecated hook for JSX spread, don't use this for anything.
			__spread: __spread
		};

		module.exports = React;
	}).call(this,require('_process'));
},{"./ReactChildren":645,"./ReactClass":647,"./ReactComponent":648,"./ReactDOMFactories":661,"./ReactElement":676,"./ReactElementValidator":677,"./ReactPropTypes":699,"./ReactPureComponent":701,"./ReactVersion":709,"./onlyChild":750,"_process":615,"fbjs/lib/warning":783,"object-assign":784}],643:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 */

	'use strict';

	var _assign = require('object-assign');

	var EventConstants = require('./EventConstants');
	var EventPluginRegistry = require('./EventPluginRegistry');
	var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
	var ViewportMetrics = require('./ViewportMetrics');

	var getVendorPrefixedEventName = require('./getVendorPrefixedEventName');
	var isEventSupported = require('./isEventSupported');

	/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
		topAbort: 'abort',
		topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
		topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
		topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
		topBlur: 'blur',
		topCanPlay: 'canplay',
		topCanPlayThrough: 'canplaythrough',
		topChange: 'change',
		topClick: 'click',
		topCompositionEnd: 'compositionend',
		topCompositionStart: 'compositionstart',
		topCompositionUpdate: 'compositionupdate',
		topContextMenu: 'contextmenu',
		topCopy: 'copy',
		topCut: 'cut',
		topDoubleClick: 'dblclick',
		topDrag: 'drag',
		topDragEnd: 'dragend',
		topDragEnter: 'dragenter',
		topDragExit: 'dragexit',
		topDragLeave: 'dragleave',
		topDragOver: 'dragover',
		topDragStart: 'dragstart',
		topDrop: 'drop',
		topDurationChange: 'durationchange',
		topEmptied: 'emptied',
		topEncrypted: 'encrypted',
		topEnded: 'ended',
		topError: 'error',
		topFocus: 'focus',
		topInput: 'input',
		topKeyDown: 'keydown',
		topKeyPress: 'keypress',
		topKeyUp: 'keyup',
		topLoadedData: 'loadeddata',
		topLoadedMetadata: 'loadedmetadata',
		topLoadStart: 'loadstart',
		topMouseDown: 'mousedown',
		topMouseMove: 'mousemove',
		topMouseOut: 'mouseout',
		topMouseOver: 'mouseover',
		topMouseUp: 'mouseup',
		topPaste: 'paste',
		topPause: 'pause',
		topPlay: 'play',
		topPlaying: 'playing',
		topProgress: 'progress',
		topRateChange: 'ratechange',
		topScroll: 'scroll',
		topSeeked: 'seeked',
		topSeeking: 'seeking',
		topSelectionChange: 'selectionchange',
		topStalled: 'stalled',
		topSuspend: 'suspend',
		topTextInput: 'textInput',
		topTimeUpdate: 'timeupdate',
		topTouchCancel: 'touchcancel',
		topTouchEnd: 'touchend',
		topTouchMove: 'touchmove',
		topTouchStart: 'touchstart',
		topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
		topVolumeChange: 'volumechange',
		topWaiting: 'waiting',
		topWheel: 'wheel'
	};

	/**
 * To ensure no conflicts with other potential React instances on the page
 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
		// In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
		// directly.
		if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
			mountAt[topListenersIDKey] = reactTopListenersCounter++;
			alreadyListeningTo[mountAt[topListenersIDKey]] = {};
		}
		return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

		/**
   * Injectable event backend
   */
		ReactEventListener: null,

		injection: {
			/**
     * @param {object} ReactEventListener
     */
			injectReactEventListener: function (ReactEventListener) {
				ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
				ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
			}
		},

		/**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
		setEnabled: function (enabled) {
			if (ReactBrowserEventEmitter.ReactEventListener) {
				ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
			}
		},

		/**
   * @return {boolean} True if callbacks are enabled.
   */
		isEnabled: function () {
			return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
		},

		/**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
		listenTo: function (registrationName, contentDocumentHandle) {
			var mountAt = contentDocumentHandle;
			var isListening = getListeningForDocument(mountAt);
			var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

			var topLevelTypes = EventConstants.topLevelTypes;
			for (var i = 0; i < dependencies.length; i++) {
				var dependency = dependencies[i];
				if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
					if (dependency === topLevelTypes.topWheel) {
						if (isEventSupported('wheel')) {
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
						} else if (isEventSupported('mousewheel')) {
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
						} else {
							// Firefox needs to capture a different mouse scroll event.
							// @see http://www.quirksmode.org/dom/events/tests/scroll.html
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
						}
					} else if (dependency === topLevelTypes.topScroll) {

						if (isEventSupported('scroll', true)) {
							ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
						} else {
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
						}
					} else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

						if (isEventSupported('focus', true)) {
							ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
							ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
						} else if (isEventSupported('focusin')) {
							// IE has `focusin` and `focusout` events which bubble.
							// @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
							ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
						}

						// to make sure blur and focus event listeners are only attached once
						isListening[topLevelTypes.topBlur] = true;
						isListening[topLevelTypes.topFocus] = true;
					} else if (topEventMapping.hasOwnProperty(dependency)) {
						ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
					}

					isListening[dependency] = true;
				}
			}
		},

		trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
			return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
		},

		trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
			return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
		},

		/**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
		supportsEventPageXY: function () {
			if (!document.createEvent) {
				return false;
			}
			var ev = document.createEvent('MouseEvent');
			return ev != null && 'pageX' in ev;
		},

		/**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
		ensureScrollValueMonitoring: function () {
			if (hasEventPageXY === undefined) {
				hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
			}
			if (!hasEventPageXY && !isMonitoringScrollValue) {
				var refresh = ViewportMetrics.refreshScrollValues;
				ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
				isMonitoringScrollValue = true;
			}
		}

	});

	module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":632,"./EventPluginRegistry":634,"./ReactEventEmitterMixin":680,"./ViewportMetrics":727,"./getVendorPrefixedEventName":746,"./isEventSupported":748,"object-assign":784}],644:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 */

		'use strict';

		var ReactReconciler = require('./ReactReconciler');

		var instantiateReactComponent = require('./instantiateReactComponent');
		var KeyEscapeUtils = require('./KeyEscapeUtils');
		var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
		var traverseAllChildren = require('./traverseAllChildren');
		var warning = require('fbjs/lib/warning');

		var ReactComponentTreeHook;

		if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
			// Temporary hack.
			// Inline requires don't work well with Jest:
			// https://github.com/facebook/react/issues/7240
			// Remove the inline requires when we don't need them anymore:
			// https://github.com/facebook/react/pull/7178
			ReactComponentTreeHook = require('./ReactComponentTreeHook');
		}

		function instantiateChild(childInstances, child, name, selfDebugID) {
			// We found a component instance.
			var keyUnique = childInstances[name] === undefined;
			if (process.env.NODE_ENV !== 'production') {
				if (!ReactComponentTreeHook) {
					ReactComponentTreeHook = require('./ReactComponentTreeHook');
				}
				if (!keyUnique) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
				}
			}
			if (child != null && keyUnique) {
				childInstances[name] = instantiateReactComponent(child, true);
			}
		}

		/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
		var ReactChildReconciler = {
			/**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
			instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
			) {
				if (nestedChildNodes == null) {
					return null;
				}
				var childInstances = {};

				if (process.env.NODE_ENV !== 'production') {
					traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
						return instantiateChild(childInsts, child, name, selfDebugID);
					}, childInstances);
				} else {
					traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
				}
				return childInstances;
			},

			/**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
			updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
			) {
				// We currently don't have a way to track moves here but if we use iterators
				// instead of for..in we can zip the iterators and check if an item has
				// moved.
				// TODO: If nothing has changed, return the prevChildren object so that we
				// can quickly bailout if nothing has changed.
				if (!nextChildren && !prevChildren) {
					return;
				}
				var name;
				var prevChild;
				for (name in nextChildren) {
					if (!nextChildren.hasOwnProperty(name)) {
						continue;
					}
					prevChild = prevChildren && prevChildren[name];
					var prevElement = prevChild && prevChild._currentElement;
					var nextElement = nextChildren[name];
					if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
						ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
						nextChildren[name] = prevChild;
					} else {
						if (prevChild) {
							removedNodes[name] = ReactReconciler.getHostNode(prevChild);
							ReactReconciler.unmountComponent(prevChild, false);
						}
						// The child must be instantiated before it's mounted.
						var nextChildInstance = instantiateReactComponent(nextElement, true);
						nextChildren[name] = nextChildInstance;
						// Creating mount image now ensures refs are resolved in right order
						// (see https://github.com/facebook/react/pull/7101 for explanation).
						var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
						mountImages.push(nextChildMountImage);
					}
				}
				// Unmount children that are no longer present.
				for (name in prevChildren) {
					if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
						prevChild = prevChildren[name];
						removedNodes[name] = ReactReconciler.getHostNode(prevChild);
						ReactReconciler.unmountComponent(prevChild, false);
					}
				}
			},

			/**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
			unmountChildren: function (renderedChildren, safely) {
				for (var name in renderedChildren) {
					if (renderedChildren.hasOwnProperty(name)) {
						var renderedChild = renderedChildren[name];
						ReactReconciler.unmountComponent(renderedChild, safely);
					}
				}
			}

		};

		module.exports = ReactChildReconciler;
	}).call(this,require('_process'));
},{"./KeyEscapeUtils":639,"./ReactComponentTreeHook":651,"./ReactReconciler":703,"./instantiateReactComponent":747,"./shouldUpdateReactComponent":756,"./traverseAllChildren":757,"_process":615,"fbjs/lib/warning":783}],645:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

	'use strict';

	var PooledClass = require('./PooledClass');
	var ReactElement = require('./ReactElement');

	var emptyFunction = require('fbjs/lib/emptyFunction');
	var traverseAllChildren = require('./traverseAllChildren');

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
		return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
		this.func = forEachFunction;
		this.context = forEachContext;
		this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
		this.func = null;
		this.context = null;
		this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
		var func = bookKeeping.func;
		var context = bookKeeping.context;

		func.call(context, child, bookKeeping.count++);
	}

	/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
	function forEachChildren(children, forEachFunc, forEachContext) {
		if (children == null) {
			return children;
		}
		var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
		traverseAllChildren(children, forEachSingleChild, traverseContext);
		ForEachBookKeeping.release(traverseContext);
	}

	/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
		this.result = mapResult;
		this.keyPrefix = keyPrefix;
		this.func = mapFunction;
		this.context = mapContext;
		this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
		this.result = null;
		this.keyPrefix = null;
		this.func = null;
		this.context = null;
		this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
		var result = bookKeeping.result;
		var keyPrefix = bookKeeping.keyPrefix;
		var func = bookKeeping.func;
		var context = bookKeeping.context;


		var mappedChild = func.call(context, child, bookKeeping.count++);
		if (Array.isArray(mappedChild)) {
			mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
		} else if (mappedChild != null) {
			if (ReactElement.isValidElement(mappedChild)) {
				mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
					// Keep both the (mapped) and old keys if they differ, just as
					// traverseAllChildren used to do for objects as children
					keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
			}
			result.push(mappedChild);
		}
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
		var escapedPrefix = '';
		if (prefix != null) {
			escapedPrefix = escapeUserProvidedKey(prefix) + '/';
		}
		var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
		traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
		MapBookKeeping.release(traverseContext);
	}

	/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
	function mapChildren(children, func, context) {
		if (children == null) {
			return children;
		}
		var result = [];
		mapIntoWithKeyPrefixInternal(children, result, null, func, context);
		return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
		return null;
	}

	/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
	function countChildren(children, context) {
		return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
	function toArray(children) {
		var result = [];
		mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
		return result;
	}

	var ReactChildren = {
		forEach: forEachChildren,
		map: mapChildren,
		mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
		count: countChildren,
		toArray: toArray
	};

	module.exports = ReactChildren;
},{"./PooledClass":641,"./ReactElement":676,"./traverseAllChildren":757,"fbjs/lib/emptyFunction":766}],646:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildrenMutationWarningHook
 */

		'use strict';

		var ReactComponentTreeHook = require('./ReactComponentTreeHook');

		var warning = require('fbjs/lib/warning');

		function handleElement(debugID, element) {
			if (element == null) {
				return;
			}
			if (element._shadowChildren === undefined) {
				return;
			}
			if (element._shadowChildren === element.props.children) {
				return;
			}
			var isMutated = false;
			if (Array.isArray(element._shadowChildren)) {
				if (element._shadowChildren.length === element.props.children.length) {
					for (var i = 0; i < element._shadowChildren.length; i++) {
						if (element._shadowChildren[i] !== element.props.children[i]) {
							isMutated = true;
						}
					}
				} else {
					isMutated = true;
				}
			}
			if (!Array.isArray(element._shadowChildren) || isMutated) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'Component\'s children should not be mutated.%s', ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
			}
		}

		var ReactChildrenMutationWarningHook = {
			onMountComponent: function (debugID) {
				handleElement(debugID, ReactComponentTreeHook.getElement(debugID));
			},
			onUpdateComponent: function (debugID) {
				handleElement(debugID, ReactComponentTreeHook.getElement(debugID));
			}
		};

		module.exports = ReactChildrenMutationWarningHook;
	}).call(this,require('_process'));
},{"./ReactComponentTreeHook":651,"_process":615,"fbjs/lib/warning":783}],647:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var ReactComponent = require('./ReactComponent');
		var ReactElement = require('./ReactElement');
		var ReactPropTypeLocations = require('./ReactPropTypeLocations');
		var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
		var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

		var emptyObject = require('fbjs/lib/emptyObject');
		var invariant = require('fbjs/lib/invariant');
		var keyMirror = require('fbjs/lib/keyMirror');
		var keyOf = require('fbjs/lib/keyOf');
		var warning = require('fbjs/lib/warning');

		var MIXINS_KEY = keyOf({ mixins: null });

		/**
 * Policies that describe methods in `ReactClassInterface`.
 */
		var SpecPolicy = keyMirror({
			/**
   * These methods may be defined only once by the class specification or mixin.
   */
			DEFINE_ONCE: null,
			/**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
			DEFINE_MANY: null,
			/**
   * These methods are overriding the base class.
   */
			OVERRIDE_BASE: null,
			/**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
			DEFINE_MANY_MERGED: null
		});

		var injectedMixins = [];

		/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
		var ReactClassInterface = {

			/**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
			mixins: SpecPolicy.DEFINE_MANY,

			/**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
			statics: SpecPolicy.DEFINE_MANY,

			/**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
			propTypes: SpecPolicy.DEFINE_MANY,

			/**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
			contextTypes: SpecPolicy.DEFINE_MANY,

			/**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
			childContextTypes: SpecPolicy.DEFINE_MANY,

			// ==== Definition methods ====

			/**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
			getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

			/**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
			getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

			/**
   * @return {object}
   * @optional
   */
			getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

			/**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
			render: SpecPolicy.DEFINE_ONCE,

			// ==== Delegate methods ====

			/**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
			componentWillMount: SpecPolicy.DEFINE_MANY,

			/**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
			componentDidMount: SpecPolicy.DEFINE_MANY,

			/**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
			componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

			/**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
			shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

			/**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
			componentWillUpdate: SpecPolicy.DEFINE_MANY,

			/**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
			componentDidUpdate: SpecPolicy.DEFINE_MANY,

			/**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
			componentWillUnmount: SpecPolicy.DEFINE_MANY,

			// ==== Advanced methods ====

			/**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
			updateComponent: SpecPolicy.OVERRIDE_BASE

		};

		/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
		var RESERVED_SPEC_KEYS = {
			displayName: function (Constructor, displayName) {
				Constructor.displayName = displayName;
			},
			mixins: function (Constructor, mixins) {
				if (mixins) {
					for (var i = 0; i < mixins.length; i++) {
						mixSpecIntoComponent(Constructor, mixins[i]);
					}
				}
			},
			childContextTypes: function (Constructor, childContextTypes) {
				if (process.env.NODE_ENV !== 'production') {
					validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
				}
				Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
			},
			contextTypes: function (Constructor, contextTypes) {
				if (process.env.NODE_ENV !== 'production') {
					validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
				}
				Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
			},
			/**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
			getDefaultProps: function (Constructor, getDefaultProps) {
				if (Constructor.getDefaultProps) {
					Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
				} else {
					Constructor.getDefaultProps = getDefaultProps;
				}
			},
			propTypes: function (Constructor, propTypes) {
				if (process.env.NODE_ENV !== 'production') {
					validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
				}
				Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
			},
			statics: function (Constructor, statics) {
				mixStaticSpecIntoComponent(Constructor, statics);
			},
			autobind: function () {} };

		// noop
		function validateTypeDef(Constructor, typeDef, location) {
			for (var propName in typeDef) {
				if (typeDef.hasOwnProperty(propName)) {
					// use a warning instead of an invariant so components
					// don't show up in prod but only in __DEV__
					process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
				}
			}
		}

		function validateMethodOverride(isAlreadyDefined, name) {
			var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

			// Disallow overriding of base class methods unless explicitly allowed.
			if (ReactClassMixin.hasOwnProperty(name)) {
				!(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
			}

			// Disallow defining methods more than once unless explicitly allowed.
			if (isAlreadyDefined) {
				!(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
			}
		}

		/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
		function mixSpecIntoComponent(Constructor, spec) {
			if (!spec) {
				if (process.env.NODE_ENV !== 'production') {
					var typeofSpec = typeof spec;
					var isMixinValid = typeofSpec === 'object' && spec !== null;

					process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
				}

				return;
			}

			!(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
			ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

			var proto = Constructor.prototype;
			var autoBindPairs = proto.__reactAutoBindPairs;

			// By handling mixins before any other properties, we ensure the same
			// chaining order is applied to methods with DEFINE_MANY policy, whether
			// mixins are listed before or after these methods in the spec.
			if (spec.hasOwnProperty(MIXINS_KEY)) {
				RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
			}

			for (var name in spec) {
				if (!spec.hasOwnProperty(name)) {
					continue;
				}

				if (name === MIXINS_KEY) {
					// We have already handled mixins in a special case above.
					continue;
				}

				var property = spec[name];
				var isAlreadyDefined = proto.hasOwnProperty(name);
				validateMethodOverride(isAlreadyDefined, name);

				if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
					RESERVED_SPEC_KEYS[name](Constructor, property);
				} else {
					// Setup methods on prototype:
					// The following member methods should not be automatically bound:
					// 1. Expected ReactClass methods (in the "interface").
					// 2. Overridden methods (that were mixed in).
					var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
					var isFunction = typeof property === 'function';
					var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

					if (shouldAutoBind) {
						autoBindPairs.push(name, property);
						proto[name] = property;
					} else {
						if (isAlreadyDefined) {
							var specPolicy = ReactClassInterface[name];

							// These cases should already be caught by validateMethodOverride.
							!(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

							// For methods which are defined more than once, call the existing
							// methods before calling the new property, merging if appropriate.
							if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
								proto[name] = createMergedResultFunction(proto[name], property);
							} else if (specPolicy === SpecPolicy.DEFINE_MANY) {
								proto[name] = createChainedFunction(proto[name], property);
							}
						} else {
							proto[name] = property;
							if (process.env.NODE_ENV !== 'production') {
								// Add verbose displayName to the function, which helps when looking
								// at profiling tools.
								if (typeof property === 'function' && spec.displayName) {
									proto[name].displayName = spec.displayName + '_' + name;
								}
							}
						}
					}
				}
			}
		}

		function mixStaticSpecIntoComponent(Constructor, statics) {
			if (!statics) {
				return;
			}
			for (var name in statics) {
				var property = statics[name];
				if (!statics.hasOwnProperty(name)) {
					continue;
				}

				var isReserved = name in RESERVED_SPEC_KEYS;
				isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

				var isInherited = name in Constructor;
				isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
				Constructor[name] = property;
			}
		}

		/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
		function mergeIntoWithNoDuplicateKeys(one, two) {
			!(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

			for (var key in two) {
				if (two.hasOwnProperty(key)) {
					!(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
					one[key] = two[key];
				}
			}
			return one;
		}

		/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
		function createMergedResultFunction(one, two) {
			return function mergedResult() {
				var a = one.apply(this, arguments);
				var b = two.apply(this, arguments);
				if (a == null) {
					return b;
				} else if (b == null) {
					return a;
				}
				var c = {};
				mergeIntoWithNoDuplicateKeys(c, a);
				mergeIntoWithNoDuplicateKeys(c, b);
				return c;
			};
		}

		/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
		function createChainedFunction(one, two) {
			return function chainedFunction() {
				one.apply(this, arguments);
				two.apply(this, arguments);
			};
		}

		/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
		function bindAutoBindMethod(component, method) {
			var boundMethod = method.bind(component);
			if (process.env.NODE_ENV !== 'production') {
				boundMethod.__reactBoundContext = component;
				boundMethod.__reactBoundMethod = method;
				boundMethod.__reactBoundArguments = null;
				var componentName = component.constructor.displayName;
				var _bind = boundMethod.bind;
				boundMethod.bind = function (newThis) {
					for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
						args[_key - 1] = arguments[_key];
					}

					// User is trying to bind() an autobound method; we effectively will
					// ignore the value of "this" that the user is trying to use, so
					// let's warn.
					if (newThis !== component && newThis !== null) {
						process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
					} else if (!args.length) {
						process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
						return boundMethod;
					}
					var reboundMethod = _bind.apply(boundMethod, arguments);
					reboundMethod.__reactBoundContext = component;
					reboundMethod.__reactBoundMethod = method;
					reboundMethod.__reactBoundArguments = args;
					return reboundMethod;
				};
			}
			return boundMethod;
		}

		/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
		function bindAutoBindMethods(component) {
			var pairs = component.__reactAutoBindPairs;
			for (var i = 0; i < pairs.length; i += 2) {
				var autoBindKey = pairs[i];
				var method = pairs[i + 1];
				component[autoBindKey] = bindAutoBindMethod(component, method);
			}
		}

		/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
		var ReactClassMixin = {

			/**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
			replaceState: function (newState, callback) {
				this.updater.enqueueReplaceState(this, newState);
				if (callback) {
					this.updater.enqueueCallback(this, callback, 'replaceState');
				}
			},

			/**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
			isMounted: function () {
				return this.updater.isMounted(this);
			}
		};

		var ReactClassComponent = function () {};
		_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

		/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
		var ReactClass = {

			/**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
			createClass: function (spec) {
				var Constructor = function (props, context, updater) {
					// This constructor gets overridden by mocks. The argument is used
					// by mocks to assert on what gets mounted.

					if (process.env.NODE_ENV !== 'production') {
						process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
					}

					// Wire up auto-binding
					if (this.__reactAutoBindPairs.length) {
						bindAutoBindMethods(this);
					}

					this.props = props;
					this.context = context;
					this.refs = emptyObject;
					this.updater = updater || ReactNoopUpdateQueue;

					this.state = null;

					// ReactClasses doesn't have constructors. Instead, they use the
					// getInitialState and componentWillMount methods for initialization.

					var initialState = this.getInitialState ? this.getInitialState() : null;
					if (process.env.NODE_ENV !== 'production') {
						// We allow auto-mocks to proceed as if they're returning null.
						if (initialState === undefined && this.getInitialState._isMockFunction) {
							// This is probably bad practice. Consider warning here and
							// deprecating this convenience.
							initialState = null;
						}
					}
					!(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

					this.state = initialState;
				};
				Constructor.prototype = new ReactClassComponent();
				Constructor.prototype.constructor = Constructor;
				Constructor.prototype.__reactAutoBindPairs = [];

				injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

				mixSpecIntoComponent(Constructor, spec);

				// Initialize the defaultProps property after all mixins have been merged.
				if (Constructor.getDefaultProps) {
					Constructor.defaultProps = Constructor.getDefaultProps();
				}

				if (process.env.NODE_ENV !== 'production') {
					// This is a tag to indicate that the use of these method names is ok,
					// since it's used with createClass. If it's not, then it's likely a
					// mistake so we'll warn you to use the static property, property
					// initializer or constructor respectively.
					if (Constructor.getDefaultProps) {
						Constructor.getDefaultProps.isReactClassApproved = {};
					}
					if (Constructor.prototype.getInitialState) {
						Constructor.prototype.getInitialState.isReactClassApproved = {};
					}
				}

				!Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
				}

				// Reduce time spent doing lookups by setting these on the prototype.
				for (var methodName in ReactClassInterface) {
					if (!Constructor.prototype[methodName]) {
						Constructor.prototype[methodName] = null;
					}
				}

				return Constructor;
			},

			injection: {
				injectMixin: function (mixin) {
					injectedMixins.push(mixin);
				}
			}

		};

		module.exports = ReactClass;
	}).call(this,require('_process'));
},{"./ReactComponent":648,"./ReactElement":676,"./ReactNoopUpdateQueue":695,"./ReactPropTypeLocationNames":697,"./ReactPropTypeLocations":698,"./reactProdInvariant":752,"_process":615,"fbjs/lib/emptyObject":767,"fbjs/lib/invariant":774,"fbjs/lib/keyMirror":777,"fbjs/lib/keyOf":778,"fbjs/lib/warning":783,"object-assign":784}],648:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

		var canDefineProperty = require('./canDefineProperty');
		var emptyObject = require('fbjs/lib/emptyObject');
		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		/**
 * Base class helpers for the updating state of a component.
 */
		function ReactComponent(props, context, updater) {
			this.props = props;
			this.context = context;
			this.refs = emptyObject;
			// We initialize the default updater but the real one gets injected by the
			// renderer.
			this.updater = updater || ReactNoopUpdateQueue;
		}

		ReactComponent.prototype.isReactComponent = {};

		/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
		ReactComponent.prototype.setState = function (partialState, callback) {
			!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
			this.updater.enqueueSetState(this, partialState);
			if (callback) {
				this.updater.enqueueCallback(this, callback, 'setState');
			}
		};

		/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
		ReactComponent.prototype.forceUpdate = function (callback) {
			this.updater.enqueueForceUpdate(this);
			if (callback) {
				this.updater.enqueueCallback(this, callback, 'forceUpdate');
			}
		};

		/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
		if (process.env.NODE_ENV !== 'production') {
			var deprecatedAPIs = {
				isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
				replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
			};
			var defineDeprecationWarning = function (methodName, info) {
				if (canDefineProperty) {
					Object.defineProperty(ReactComponent.prototype, methodName, {
						get: function () {
							process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
							return undefined;
						}
					});
				}
			};
			for (var fnName in deprecatedAPIs) {
				if (deprecatedAPIs.hasOwnProperty(fnName)) {
					defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
				}
			}
		}

		module.exports = ReactComponent;
	}).call(this,require('_process'));
},{"./ReactNoopUpdateQueue":695,"./canDefineProperty":730,"./reactProdInvariant":752,"_process":615,"fbjs/lib/emptyObject":767,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],649:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

	'use strict';

	var DOMChildrenOperations = require('./DOMChildrenOperations');
	var ReactDOMIDOperations = require('./ReactDOMIDOperations');

	/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
	var ReactComponentBrowserEnvironment = {

		processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

		replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;
},{"./DOMChildrenOperations":623,"./ReactDOMIDOperations":663}],650:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		var injected = false;

		var ReactComponentEnvironment = {

			/**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
			replaceNodeWithMarkup: null,

			/**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
			processChildrenUpdates: null,

			injection: {
				injectEnvironment: function (environment) {
					injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
					ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
					ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
					injected = true;
				}
			}

		};

		module.exports = ReactComponentEnvironment;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],651:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentTreeHook
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactCurrentOwner = require('./ReactCurrentOwner');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		function isNative(fn) {
			// Based on isNative() from Lodash
			var funcToString = Function.prototype.toString;
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			var reIsNative = RegExp('^' + funcToString
			// Take an example native function source for comparison
				.call(hasOwnProperty)
			// Strip regex characters so we can use it for regex
				.replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
			// Remove hasOwnProperty from the template to make it generic
				.replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
			try {
				var source = funcToString.call(fn);
				return reIsNative.test(source);
			} catch (err) {
				return false;
			}
		}

		var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

		var itemMap;
		var rootIDSet;

		var itemByKey;
		var rootByKey;

		if (canUseCollections) {
			itemMap = new Map();
			rootIDSet = new Set();
		} else {
			itemByKey = {};
			rootByKey = {};
		}

		var unmountedIDs = [];

		// Use non-numeric keys to prevent V8 performance issues:
		// https://github.com/facebook/react/pull/7232
		function getKeyFromID(id) {
			return '.' + id;
		}
		function getIDFromKey(key) {
			return parseInt(key.substr(1), 10);
		}

		function get(id) {
			if (canUseCollections) {
				return itemMap.get(id);
			} else {
				var key = getKeyFromID(id);
				return itemByKey[key];
			}
		}

		function remove(id) {
			if (canUseCollections) {
				itemMap['delete'](id);
			} else {
				var key = getKeyFromID(id);
				delete itemByKey[key];
			}
		}

		function create(id, element, parentID) {
			var item = {
				element: element,
				parentID: parentID,
				text: null,
				childIDs: [],
				isMounted: false,
				updateCount: 0
			};

			if (canUseCollections) {
				itemMap.set(id, item);
			} else {
				var key = getKeyFromID(id);
				itemByKey[key] = item;
			}
		}

		function addRoot(id) {
			if (canUseCollections) {
				rootIDSet.add(id);
			} else {
				var key = getKeyFromID(id);
				rootByKey[key] = true;
			}
		}

		function removeRoot(id) {
			if (canUseCollections) {
				rootIDSet['delete'](id);
			} else {
				var key = getKeyFromID(id);
				delete rootByKey[key];
			}
		}

		function getRegisteredIDs() {
			if (canUseCollections) {
				return Array.from(itemMap.keys());
			} else {
				return Object.keys(itemByKey).map(getIDFromKey);
			}
		}

		function getRootIDs() {
			if (canUseCollections) {
				return Array.from(rootIDSet.keys());
			} else {
				return Object.keys(rootByKey).map(getIDFromKey);
			}
		}

		function purgeDeep(id) {
			var item = get(id);
			if (item) {
				var childIDs = item.childIDs;

				remove(id);
				childIDs.forEach(purgeDeep);
			}
		}

		function describeComponentFrame(name, source, ownerName) {
			return '\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
		}

		function getDisplayName(element) {
			if (element == null) {
				return '#empty';
			} else if (typeof element === 'string' || typeof element === 'number') {
				return '#text';
			} else if (typeof element.type === 'string') {
				return element.type;
			} else {
				return element.type.displayName || element.type.name || 'Unknown';
			}
		}

		function describeID(id) {
			var name = ReactComponentTreeHook.getDisplayName(id);
			var element = ReactComponentTreeHook.getElement(id);
			var ownerID = ReactComponentTreeHook.getOwnerID(id);
			var ownerName;
			if (ownerID) {
				ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
			}
			process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
			return describeComponentFrame(name, element && element._source, ownerName);
		}

		var ReactComponentTreeHook = {
			onSetChildren: function (id, nextChildIDs) {
				var item = get(id);
				item.childIDs = nextChildIDs;

				for (var i = 0; i < nextChildIDs.length; i++) {
					var nextChildID = nextChildIDs[i];
					var nextChild = get(nextChildID);
					!nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
					!(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
					!nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
					if (nextChild.parentID == null) {
						nextChild.parentID = id;
						// TODO: This shouldn't be necessary but mounting a new root during in
						// componentWillMount currently causes not-yet-mounted components to
						// be purged from our tree data so their parent ID is missing.
					}
					!(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
				}
			},
			onBeforeMountComponent: function (id, element, parentID) {
				create(id, element, parentID);
			},
			onBeforeUpdateComponent: function (id, element) {
				var item = get(id);
				if (!item || !item.isMounted) {
					// We may end up here as a result of setState() in componentWillUnmount().
					// In this case, ignore the element.
					return;
				}
				item.element = element;
			},
			onMountComponent: function (id) {
				var item = get(id);
				item.isMounted = true;
				var isRoot = item.parentID === 0;
				if (isRoot) {
					addRoot(id);
				}
			},
			onUpdateComponent: function (id) {
				var item = get(id);
				if (!item || !item.isMounted) {
					// We may end up here as a result of setState() in componentWillUnmount().
					// In this case, ignore the element.
					return;
				}
				item.updateCount++;
			},
			onUnmountComponent: function (id) {
				var item = get(id);
				if (item) {
					// We need to check if it exists.
					// `item` might not exist if it is inside an error boundary, and a sibling
					// error boundary child threw while mounting. Then this instance never
					// got a chance to mount, but it still gets an unmounting event during
					// the error boundary cleanup.
					item.isMounted = false;
					var isRoot = item.parentID === 0;
					if (isRoot) {
						removeRoot(id);
					}
				}
				unmountedIDs.push(id);
			},
			purgeUnmountedComponents: function () {
				if (ReactComponentTreeHook._preventPurging) {
					// Should only be used for testing.
					return;
				}

				for (var i = 0; i < unmountedIDs.length; i++) {
					var id = unmountedIDs[i];
					purgeDeep(id);
				}
				unmountedIDs.length = 0;
			},
			isMounted: function (id) {
				var item = get(id);
				return item ? item.isMounted : false;
			},
			getCurrentStackAddendum: function (topElement) {
				var info = '';
				if (topElement) {
					var type = topElement.type;
					var name = typeof type === 'function' ? type.displayName || type.name : type;
					var owner = topElement._owner;
					info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());
				}

				var currentOwner = ReactCurrentOwner.current;
				var id = currentOwner && currentOwner._debugID;

				info += ReactComponentTreeHook.getStackAddendumByID(id);
				return info;
			},
			getStackAddendumByID: function (id) {
				var info = '';
				while (id) {
					info += describeID(id);
					id = ReactComponentTreeHook.getParentID(id);
				}
				return info;
			},
			getChildIDs: function (id) {
				var item = get(id);
				return item ? item.childIDs : [];
			},
			getDisplayName: function (id) {
				var element = ReactComponentTreeHook.getElement(id);
				if (!element) {
					return null;
				}
				return getDisplayName(element);
			},
			getElement: function (id) {
				var item = get(id);
				return item ? item.element : null;
			},
			getOwnerID: function (id) {
				var element = ReactComponentTreeHook.getElement(id);
				if (!element || !element._owner) {
					return null;
				}
				return element._owner._debugID;
			},
			getParentID: function (id) {
				var item = get(id);
				return item ? item.parentID : null;
			},
			getSource: function (id) {
				var item = get(id);
				var element = item ? item.element : null;
				var source = element != null ? element._source : null;
				return source;
			},
			getText: function (id) {
				var element = ReactComponentTreeHook.getElement(id);
				if (typeof element === 'string') {
					return element;
				} else if (typeof element === 'number') {
					return '' + element;
				} else {
					return null;
				}
			},
			getUpdateCount: function (id) {
				var item = get(id);
				return item ? item.updateCount : 0;
			},


			getRegisteredIDs: getRegisteredIDs,

			getRootIDs: getRootIDs
		};

		module.exports = ReactComponentTreeHook;
	}).call(this,require('_process'));
},{"./ReactCurrentOwner":653,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],652:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var ReactComponentEnvironment = require('./ReactComponentEnvironment');
		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactElement = require('./ReactElement');
		var ReactErrorUtils = require('./ReactErrorUtils');
		var ReactInstanceMap = require('./ReactInstanceMap');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var ReactNodeTypes = require('./ReactNodeTypes');
		var ReactPropTypeLocations = require('./ReactPropTypeLocations');
		var ReactReconciler = require('./ReactReconciler');

		var checkReactTypeSpec = require('./checkReactTypeSpec');
		var emptyObject = require('fbjs/lib/emptyObject');
		var invariant = require('fbjs/lib/invariant');
		var shallowEqual = require('fbjs/lib/shallowEqual');
		var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
		var warning = require('fbjs/lib/warning');

		var CompositeTypes = {
			ImpureClass: 0,
			PureClass: 1,
			StatelessFunctional: 2
		};

		function StatelessComponent(Component) {}
		StatelessComponent.prototype.render = function () {
			var Component = ReactInstanceMap.get(this)._currentElement.type;
			var element = Component(this.props, this.context, this.updater);
			warnIfInvalidElement(Component, element);
			return element;
		};

		function warnIfInvalidElement(Component, element) {
			if (process.env.NODE_ENV !== 'production') {
				process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
				process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
			}
		}

		function shouldConstruct(Component) {
			return !!(Component.prototype && Component.prototype.isReactComponent);
		}

		function isPureComponent(Component) {
			return !!(Component.prototype && Component.prototype.isPureReactComponent);
		}

		// Separated into a function to contain deoptimizations caused by try/finally.
		function measureLifeCyclePerf(fn, debugID, timerType) {
			if (debugID === 0) {
				// Top-level wrappers (see ReactMount) and empty components (see
				// ReactDOMEmptyComponent) are invisible to hooks and devtools.
				// Both are implementation details that should go away in the future.
				return fn();
			}

			ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
			try {
				return fn();
			} finally {
				ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
			}
		}

		/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

		/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
		var nextMountID = 1;

		/**
 * @lends {ReactCompositeComponent.prototype}
 */
		var ReactCompositeComponentMixin = {

			/**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
			construct: function (element) {
				this._currentElement = element;
				this._rootNodeID = 0;
				this._compositeType = null;
				this._instance = null;
				this._hostParent = null;
				this._hostContainerInfo = null;

				// See ReactUpdateQueue
				this._updateBatchNumber = null;
				this._pendingElement = null;
				this._pendingStateQueue = null;
				this._pendingReplaceState = false;
				this._pendingForceUpdate = false;

				this._renderedNodeType = null;
				this._renderedComponent = null;
				this._context = null;
				this._mountOrder = 0;
				this._topLevelWrapper = null;

				// See ReactUpdates and ReactUpdateQueue.
				this._pendingCallbacks = null;

				// ComponentWillUnmount shall only be called once
				this._calledComponentWillUnmount = false;

				if (process.env.NODE_ENV !== 'production') {
					this._warnedAboutRefsInRender = false;
				}
			},

			/**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
			mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
				var _this = this;

				this._context = context;
				this._mountOrder = nextMountID++;
				this._hostParent = hostParent;
				this._hostContainerInfo = hostContainerInfo;

				var publicProps = this._currentElement.props;
				var publicContext = this._processContext(context);

				var Component = this._currentElement.type;

				var updateQueue = transaction.getUpdateQueue();

				// Initialize the public class
				var doConstruct = shouldConstruct(Component);
				var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
				var renderedElement;

				// Support functional components
				if (!doConstruct && (inst == null || inst.render == null)) {
					renderedElement = inst;
					warnIfInvalidElement(Component, renderedElement);
					!(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
					inst = new StatelessComponent(Component);
					this._compositeType = CompositeTypes.StatelessFunctional;
				} else {
					if (isPureComponent(Component)) {
						this._compositeType = CompositeTypes.PureClass;
					} else {
						this._compositeType = CompositeTypes.ImpureClass;
					}
				}

				if (process.env.NODE_ENV !== 'production') {
					// This will throw later in _renderValidatedComponent, but add an early
					// warning now to help debugging
					if (inst.render == null) {
						process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
					}

					var propsMutated = inst.props !== publicProps;
					var componentName = Component.displayName || Component.name || 'Component';

					process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
				}

				// These should be set up in the constructor, but as a convenience for
				// simpler class abstractions, we set them up after the fact.
				inst.props = publicProps;
				inst.context = publicContext;
				inst.refs = emptyObject;
				inst.updater = updateQueue;

				this._instance = inst;

				// Store a reference from the instance back to the internal representation
				ReactInstanceMap.set(inst, this);

				if (process.env.NODE_ENV !== 'production') {
					// Since plain JS classes are defined without any special initialization
					// logic, we can not catch common errors early. Therefore, we have to
					// catch them here, at initialization time, instead.
					process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
					process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
				}

				var initialState = inst.state;
				if (initialState === undefined) {
					inst.state = initialState = null;
				}
				!(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

				this._pendingStateQueue = null;
				this._pendingReplaceState = false;
				this._pendingForceUpdate = false;

				var markup;
				if (inst.unstable_handleError) {
					markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
				} else {
					markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
				}

				if (inst.componentDidMount) {
					if (process.env.NODE_ENV !== 'production') {
						transaction.getReactMountReady().enqueue(function () {
							measureLifeCyclePerf(function () {
								return inst.componentDidMount();
							}, _this._debugID, 'componentDidMount');
						});
					} else {
						transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
					}
				}

				return markup;
			},

			_constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
				if (process.env.NODE_ENV !== 'production') {
					ReactCurrentOwner.current = this;
					try {
						return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
					} finally {
						ReactCurrentOwner.current = null;
					}
				} else {
					return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
				}
			},

			_constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
				var Component = this._currentElement.type;

				if (doConstruct) {
					if (process.env.NODE_ENV !== 'production') {
						return measureLifeCyclePerf(function () {
							return new Component(publicProps, publicContext, updateQueue);
						}, this._debugID, 'ctor');
					} else {
						return new Component(publicProps, publicContext, updateQueue);
					}
				}

				// This can still be an instance in case of factory components
				// but we'll count this as time spent rendering as the more common case.
				if (process.env.NODE_ENV !== 'production') {
					return measureLifeCyclePerf(function () {
						return Component(publicProps, publicContext, updateQueue);
					}, this._debugID, 'render');
				} else {
					return Component(publicProps, publicContext, updateQueue);
				}
			},

			performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
				var markup;
				var checkpoint = transaction.checkpoint();
				try {
					markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
				} catch (e) {
					// Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
					transaction.rollback(checkpoint);
					this._instance.unstable_handleError(e);
					if (this._pendingStateQueue) {
						this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
					}
					checkpoint = transaction.checkpoint();

					this._renderedComponent.unmountComponent(true);
					transaction.rollback(checkpoint);

					// Try again - we've informed the component about the error, so they can render an error message this time.
					// If this throws again, the error will bubble up (and can be caught by a higher error boundary).
					markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
				}
				return markup;
			},

			performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
				var inst = this._instance;

				var debugID = 0;
				if (process.env.NODE_ENV !== 'production') {
					debugID = this._debugID;
				}

				if (inst.componentWillMount) {
					if (process.env.NODE_ENV !== 'production') {
						measureLifeCyclePerf(function () {
							return inst.componentWillMount();
						}, debugID, 'componentWillMount');
					} else {
						inst.componentWillMount();
					}
					// When mounting, calls to `setState` by `componentWillMount` will set
					// `this._pendingStateQueue` without triggering a re-render.
					if (this._pendingStateQueue) {
						inst.state = this._processPendingState(inst.props, inst.context);
					}
				}

				// If not a stateless component, we now render
				if (renderedElement === undefined) {
					renderedElement = this._renderValidatedComponent();
				}

				var nodeType = ReactNodeTypes.getType(renderedElement);
				this._renderedNodeType = nodeType;
				var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
				);
				this._renderedComponent = child;

				var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

				if (process.env.NODE_ENV !== 'production') {
					if (debugID !== 0) {
						var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
						ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
					}
				}

				return markup;
			},

			getHostNode: function () {
				return ReactReconciler.getHostNode(this._renderedComponent);
			},

			/**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
			unmountComponent: function (safely) {
				if (!this._renderedComponent) {
					return;
				}

				var inst = this._instance;

				if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
					inst._calledComponentWillUnmount = true;

					if (safely) {
						var name = this.getName() + '.componentWillUnmount()';
						ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
					} else {
						if (process.env.NODE_ENV !== 'production') {
							measureLifeCyclePerf(function () {
								return inst.componentWillUnmount();
							}, this._debugID, 'componentWillUnmount');
						} else {
							inst.componentWillUnmount();
						}
					}
				}

				if (this._renderedComponent) {
					ReactReconciler.unmountComponent(this._renderedComponent, safely);
					this._renderedNodeType = null;
					this._renderedComponent = null;
					this._instance = null;
				}

				// Reset pending fields
				// Even if this component is scheduled for another update in ReactUpdates,
				// it would still be ignored because these fields are reset.
				this._pendingStateQueue = null;
				this._pendingReplaceState = false;
				this._pendingForceUpdate = false;
				this._pendingCallbacks = null;
				this._pendingElement = null;

				// These fields do not really need to be reset since this object is no
				// longer accessible.
				this._context = null;
				this._rootNodeID = 0;
				this._topLevelWrapper = null;

				// Delete the reference from the instance to this internal representation
				// which allow the internals to be properly cleaned up even if the user
				// leaks a reference to the public instance.
				ReactInstanceMap.remove(inst);

				// Some existing components rely on inst.props even after they've been
				// destroyed (in event handlers).
				// TODO: inst.props = null;
				// TODO: inst.state = null;
				// TODO: inst.context = null;
			},

			/**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
			_maskContext: function (context) {
				var Component = this._currentElement.type;
				var contextTypes = Component.contextTypes;
				if (!contextTypes) {
					return emptyObject;
				}
				var maskedContext = {};
				for (var contextName in contextTypes) {
					maskedContext[contextName] = context[contextName];
				}
				return maskedContext;
			},

			/**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
			_processContext: function (context) {
				var maskedContext = this._maskContext(context);
				if (process.env.NODE_ENV !== 'production') {
					var Component = this._currentElement.type;
					if (Component.contextTypes) {
						this._checkContextTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
					}
				}
				return maskedContext;
			},

			/**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
			_processChildContext: function (currentContext) {
				var Component = this._currentElement.type;
				var inst = this._instance;
				var childContext;

				if (inst.getChildContext) {
					if (process.env.NODE_ENV !== 'production') {
						ReactInstrumentation.debugTool.onBeginProcessingChildContext();
						try {
							childContext = inst.getChildContext();
						} finally {
							ReactInstrumentation.debugTool.onEndProcessingChildContext();
						}
					} else {
						childContext = inst.getChildContext();
					}
				}

				if (childContext) {
					!(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
					if (process.env.NODE_ENV !== 'production') {
						this._checkContextTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
					}
					for (var name in childContext) {
						!(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
					}
					return _assign({}, currentContext, childContext);
				}
				return currentContext;
			},

			/**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
			_checkContextTypes: function (typeSpecs, values, location) {
				checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
			},

			receiveComponent: function (nextElement, transaction, nextContext) {
				var prevElement = this._currentElement;
				var prevContext = this._context;

				this._pendingElement = null;

				this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
			},

			/**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
			performUpdateIfNecessary: function (transaction) {
				if (this._pendingElement != null) {
					ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
				} else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
					this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
				} else {
					this._updateBatchNumber = null;
				}
			},

			/**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
			updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
				var inst = this._instance;
				!(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

				var willReceive = false;
				var nextContext;

				// Determine if the context has changed or not
				if (this._context === nextUnmaskedContext) {
					nextContext = inst.context;
				} else {
					nextContext = this._processContext(nextUnmaskedContext);
					willReceive = true;
				}

				var prevProps = prevParentElement.props;
				var nextProps = nextParentElement.props;

				// Not a simple state update but a props update
				if (prevParentElement !== nextParentElement) {
					willReceive = true;
				}

				// An update here will schedule an update but immediately set
				// _pendingStateQueue which will ensure that any state updates gets
				// immediately reconciled instead of waiting for the next batch.
				if (willReceive && inst.componentWillReceiveProps) {
					if (process.env.NODE_ENV !== 'production') {
						measureLifeCyclePerf(function () {
							return inst.componentWillReceiveProps(nextProps, nextContext);
						}, this._debugID, 'componentWillReceiveProps');
					} else {
						inst.componentWillReceiveProps(nextProps, nextContext);
					}
				}

				var nextState = this._processPendingState(nextProps, nextContext);
				var shouldUpdate = true;

				if (!this._pendingForceUpdate) {
					if (inst.shouldComponentUpdate) {
						if (process.env.NODE_ENV !== 'production') {
							shouldUpdate = measureLifeCyclePerf(function () {
								return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
							}, this._debugID, 'shouldComponentUpdate');
						} else {
							shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
						}
					} else {
						if (this._compositeType === CompositeTypes.PureClass) {
							shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
						}
					}
				}

				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
				}

				this._updateBatchNumber = null;
				if (shouldUpdate) {
					this._pendingForceUpdate = false;
					// Will set `this.props`, `this.state` and `this.context`.
					this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
				} else {
					// If it's determined that a component should not update, we still want
					// to set props and state but we shortcut the rest of the update.
					this._currentElement = nextParentElement;
					this._context = nextUnmaskedContext;
					inst.props = nextProps;
					inst.state = nextState;
					inst.context = nextContext;
				}
			},

			_processPendingState: function (props, context) {
				var inst = this._instance;
				var queue = this._pendingStateQueue;
				var replace = this._pendingReplaceState;
				this._pendingReplaceState = false;
				this._pendingStateQueue = null;

				if (!queue) {
					return inst.state;
				}

				if (replace && queue.length === 1) {
					return queue[0];
				}

				var nextState = _assign({}, replace ? queue[0] : inst.state);
				for (var i = replace ? 1 : 0; i < queue.length; i++) {
					var partial = queue[i];
					_assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
				}

				return nextState;
			},

			/**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
			_performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
				var _this2 = this;

				var inst = this._instance;

				var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
				var prevProps;
				var prevState;
				var prevContext;
				if (hasComponentDidUpdate) {
					prevProps = inst.props;
					prevState = inst.state;
					prevContext = inst.context;
				}

				if (inst.componentWillUpdate) {
					if (process.env.NODE_ENV !== 'production') {
						measureLifeCyclePerf(function () {
							return inst.componentWillUpdate(nextProps, nextState, nextContext);
						}, this._debugID, 'componentWillUpdate');
					} else {
						inst.componentWillUpdate(nextProps, nextState, nextContext);
					}
				}

				this._currentElement = nextElement;
				this._context = unmaskedContext;
				inst.props = nextProps;
				inst.state = nextState;
				inst.context = nextContext;

				this._updateRenderedComponent(transaction, unmaskedContext);

				if (hasComponentDidUpdate) {
					if (process.env.NODE_ENV !== 'production') {
						transaction.getReactMountReady().enqueue(function () {
							measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
						});
					} else {
						transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
					}
				}
			},

			/**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
			_updateRenderedComponent: function (transaction, context) {
				var prevComponentInstance = this._renderedComponent;
				var prevRenderedElement = prevComponentInstance._currentElement;
				var nextRenderedElement = this._renderValidatedComponent();

				var debugID = 0;
				if (process.env.NODE_ENV !== 'production') {
					debugID = this._debugID;
				}

				if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
					ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
				} else {
					var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
					ReactReconciler.unmountComponent(prevComponentInstance, false);

					var nodeType = ReactNodeTypes.getType(nextRenderedElement);
					this._renderedNodeType = nodeType;
					var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
					);
					this._renderedComponent = child;

					var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

					if (process.env.NODE_ENV !== 'production') {
						if (debugID !== 0) {
							var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
							ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
						}
					}

					this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
				}
			},

			/**
   * Overridden in shallow rendering.
   *
   * @protected
   */
			_replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
				ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
			},

			/**
   * @protected
   */
			_renderValidatedComponentWithoutOwnerOrContext: function () {
				var inst = this._instance;
				var renderedComponent;

				if (process.env.NODE_ENV !== 'production') {
					renderedComponent = measureLifeCyclePerf(function () {
						return inst.render();
					}, this._debugID, 'render');
				} else {
					renderedComponent = inst.render();
				}

				if (process.env.NODE_ENV !== 'production') {
					// We allow auto-mocks to proceed as if they're returning null.
					if (renderedComponent === undefined && inst.render._isMockFunction) {
						// This is probably bad practice. Consider warning here and
						// deprecating this convenience.
						renderedComponent = null;
					}
				}

				return renderedComponent;
			},

			/**
   * @private
   */
			_renderValidatedComponent: function () {
				var renderedComponent;
				if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
					ReactCurrentOwner.current = this;
					try {
						renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
					} finally {
						ReactCurrentOwner.current = null;
					}
				} else {
					renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
				}
				!(
				// TODO: An `isValidNode` function would probably be more appropriate
					renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

				return renderedComponent;
			},

			/**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
			attachRef: function (ref, component) {
				var inst = this.getPublicInstance();
				!(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
				var publicComponentInstance = component.getPublicInstance();
				if (process.env.NODE_ENV !== 'production') {
					var componentName = component && component.getName ? component.getName() : 'a component';
					process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
				}
				var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
				refs[ref] = publicComponentInstance;
			},

			/**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
			detachRef: function (ref) {
				var refs = this.getPublicInstance().refs;
				delete refs[ref];
			},

			/**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
			getName: function () {
				var type = this._currentElement.type;
				var constructor = this._instance && this._instance.constructor;
				return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
			},

			/**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
			getPublicInstance: function () {
				var inst = this._instance;
				if (this._compositeType === CompositeTypes.StatelessFunctional) {
					return null;
				}
				return inst;
			},

			// Stub
			_instantiateReactComponent: null

		};

		var ReactCompositeComponent = {

			Mixin: ReactCompositeComponentMixin

		};

		module.exports = ReactCompositeComponent;
	}).call(this,require('_process'));
},{"./ReactComponentEnvironment":650,"./ReactCurrentOwner":653,"./ReactElement":676,"./ReactErrorUtils":679,"./ReactInstanceMap":687,"./ReactInstrumentation":688,"./ReactNodeTypes":694,"./ReactPropTypeLocations":698,"./ReactReconciler":703,"./checkReactTypeSpec":731,"./reactProdInvariant":752,"./shouldUpdateReactComponent":756,"_process":615,"fbjs/lib/emptyObject":767,"fbjs/lib/invariant":774,"fbjs/lib/shallowEqual":782,"fbjs/lib/warning":783,"object-assign":784}],653:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

	'use strict';

	/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */

	var ReactCurrentOwner = {

		/**
   * @internal
   * @type {ReactComponent}
   */
		current: null

	};

	module.exports = ReactCurrentOwner;
},{}],654:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

		/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

		'use strict';

		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactDefaultInjection = require('./ReactDefaultInjection');
		var ReactMount = require('./ReactMount');
		var ReactReconciler = require('./ReactReconciler');
		var ReactUpdates = require('./ReactUpdates');
		var ReactVersion = require('./ReactVersion');

		var findDOMNode = require('./findDOMNode');
		var getHostComponentFromComposite = require('./getHostComponentFromComposite');
		var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
		var warning = require('fbjs/lib/warning');

		ReactDefaultInjection.inject();

		var ReactDOM = {
			findDOMNode: findDOMNode,
			render: ReactMount.render,
			unmountComponentAtNode: ReactMount.unmountComponentAtNode,
			version: ReactVersion,

			/* eslint-disable camelcase */
			unstable_batchedUpdates: ReactUpdates.batchedUpdates,
			unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
		};

		// Inject the runtime into a devtools global hook regardless of browser.
		// Allows for debugging when the hook is injected on the page.
		/* eslint-enable camelcase */
		if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
			__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
				ComponentTree: {
					getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
					getNodeFromInstance: function (inst) {
						// inst is an internal instance (but could be a composite)
						if (inst._renderedComponent) {
							inst = getHostComponentFromComposite(inst);
						}
						if (inst) {
							return ReactDOMComponentTree.getNodeFromInstance(inst);
						} else {
							return null;
						}
					}
				},
				Mount: ReactMount,
				Reconciler: ReactReconciler
			});
		}

		if (process.env.NODE_ENV !== 'production') {
			var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
			if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

				// First check if devtools is not installed
				if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
					// If we're in Chrome or Firefox, provide a download link if not installed.
					if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
						// Firefox does not have the issue with devtools loaded over file://
						var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
						console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
					}
				}

				var testFunc = function testFn() {};
				process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

				// If we're in IE8, check to see if we are in compatibility mode and provide
				// information on preventing compatibility mode
				var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

				process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

				var expectedFeatures = [
					// shims
					Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];

				for (var i = 0; i < expectedFeatures.length; i++) {
					if (!expectedFeatures[i]) {
						process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
						break;
					}
				}
			}
		}

		if (process.env.NODE_ENV !== 'production') {
			var ReactInstrumentation = require('./ReactInstrumentation');
			var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
			var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');

			ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
			ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
		}

		module.exports = ReactDOM;
	}).call(this,require('_process'));
},{"./ReactDOMComponentTree":658,"./ReactDOMNullInputValuePropHook":665,"./ReactDOMUnknownPropertyHook":672,"./ReactDefaultInjection":675,"./ReactInstrumentation":688,"./ReactMount":691,"./ReactReconciler":703,"./ReactUpdates":708,"./ReactVersion":709,"./findDOMNode":735,"./getHostComponentFromComposite":742,"./renderSubtreeIntoContainer":753,"_process":615,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/warning":783}],655:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

	'use strict';

	var DisabledInputUtils = require('./DisabledInputUtils');

	/**
 * Implements a <button> host component that does not receive mouse events
 * when `disabled` is set.
 */
	var ReactDOMButton = {
		getHostProps: DisabledInputUtils.getHostProps
	};

	module.exports = ReactDOMButton;
},{"./DisabledInputUtils":630}],656:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 */

		/* global hasOwnProperty:true */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var AutoFocusUtils = require('./AutoFocusUtils');
		var CSSPropertyOperations = require('./CSSPropertyOperations');
		var DOMLazyTree = require('./DOMLazyTree');
		var DOMNamespaces = require('./DOMNamespaces');
		var DOMProperty = require('./DOMProperty');
		var DOMPropertyOperations = require('./DOMPropertyOperations');
		var EventConstants = require('./EventConstants');
		var EventPluginHub = require('./EventPluginHub');
		var EventPluginRegistry = require('./EventPluginRegistry');
		var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
		var ReactDOMButton = require('./ReactDOMButton');
		var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactDOMInput = require('./ReactDOMInput');
		var ReactDOMOption = require('./ReactDOMOption');
		var ReactDOMSelect = require('./ReactDOMSelect');
		var ReactDOMTextarea = require('./ReactDOMTextarea');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var ReactMultiChild = require('./ReactMultiChild');
		var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');

		var emptyFunction = require('fbjs/lib/emptyFunction');
		var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
		var invariant = require('fbjs/lib/invariant');
		var isEventSupported = require('./isEventSupported');
		var keyOf = require('fbjs/lib/keyOf');
		var shallowEqual = require('fbjs/lib/shallowEqual');
		var validateDOMNesting = require('./validateDOMNesting');
		var warning = require('fbjs/lib/warning');

		var Flags = ReactDOMComponentFlags;
		var deleteListener = EventPluginHub.deleteListener;
		var getNode = ReactDOMComponentTree.getNodeFromInstance;
		var listenTo = ReactBrowserEventEmitter.listenTo;
		var registrationNameModules = EventPluginRegistry.registrationNameModules;

		// For quickly matching children type, to test if can be treated as content.
		var CONTENT_TYPES = { 'string': true, 'number': true };

		var STYLE = keyOf({ style: null });
		var HTML = keyOf({ __html: null });
		var RESERVED_PROPS = {
			children: null,
			dangerouslySetInnerHTML: null,
			suppressContentEditableWarning: null
		};

		// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
		var DOC_FRAGMENT_TYPE = 11;

		function getDeclarationErrorAddendum(internalInstance) {
			if (internalInstance) {
				var owner = internalInstance._currentElement._owner || null;
				if (owner) {
					var name = owner.getName();
					if (name) {
						return ' This DOM node was rendered by `' + name + '`.';
					}
				}
			}
			return '';
		}

		function friendlyStringify(obj) {
			if (typeof obj === 'object') {
				if (Array.isArray(obj)) {
					return '[' + obj.map(friendlyStringify).join(', ') + ']';
				} else {
					var pairs = [];
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) {
							var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
							pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
						}
					}
					return '{' + pairs.join(', ') + '}';
				}
			} else if (typeof obj === 'string') {
				return JSON.stringify(obj);
			} else if (typeof obj === 'function') {
				return '[function object]';
			}
			// Differs from JSON.stringify in that undefined because undefined and that
			// inf and nan don't become null
			return String(obj);
		}

		var styleMutationWarning = {};

		function checkAndWarnForMutatedStyle(style1, style2, component) {
			if (style1 == null || style2 == null) {
				return;
			}
			if (shallowEqual(style1, style2)) {
				return;
			}

			var componentName = component._tag;
			var owner = component._currentElement._owner;
			var ownerName;
			if (owner) {
				ownerName = owner.getName();
			}

			var hash = ownerName + '|' + componentName;

			if (styleMutationWarning.hasOwnProperty(hash)) {
				return;
			}

			styleMutationWarning[hash] = true;

			process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
		}

		/**
 * @param {object} component
 * @param {?object} props
 */
		function assertValidProps(component, props) {
			if (!props) {
				return;
			}
			// Note the use of `==` which checks for null or undefined.
			if (voidElementTags[component._tag]) {
				!(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
			}
			if (props.dangerouslySetInnerHTML != null) {
				!(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
				!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
			}
			if (process.env.NODE_ENV !== 'production') {
				process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
				process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
				process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
			}
			!(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
		}

		function enqueuePutListener(inst, registrationName, listener, transaction) {
			if (transaction instanceof ReactServerRenderingTransaction) {
				return;
			}
			if (process.env.NODE_ENV !== 'production') {
				// IE8 has no API for event capturing and the `onScroll` event doesn't
				// bubble.
				process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
			}
			var containerInfo = inst._hostContainerInfo;
			var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
			var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
			listenTo(registrationName, doc);
			transaction.getReactMountReady().enqueue(putListener, {
				inst: inst,
				registrationName: registrationName,
				listener: listener
			});
		}

		function putListener() {
			var listenerToPut = this;
			EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
		}

		function inputPostMount() {
			var inst = this;
			ReactDOMInput.postMountWrapper(inst);
		}

		function textareaPostMount() {
			var inst = this;
			ReactDOMTextarea.postMountWrapper(inst);
		}

		function optionPostMount() {
			var inst = this;
			ReactDOMOption.postMountWrapper(inst);
		}

		var setAndValidateContentChildDev = emptyFunction;
		if (process.env.NODE_ENV !== 'production') {
			setAndValidateContentChildDev = function (content) {
				var hasExistingContent = this._contentDebugID != null;
				var debugID = this._debugID;
				// This ID represents the inlined child that has no backing instance:
				var contentDebugID = -debugID;

				if (content == null) {
					if (hasExistingContent) {
						ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
					}
					this._contentDebugID = null;
					return;
				}

				validateDOMNesting(null, String(content), this, this._ancestorInfo);
				this._contentDebugID = contentDebugID;
				if (hasExistingContent) {
					ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
					ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
				} else {
					ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
					ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
					ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
				}
			};
		}

		// There are so many media events, it makes sense to just
		// maintain a list rather than create a `trapBubbledEvent` for each
		var mediaEvents = {
			topAbort: 'abort',
			topCanPlay: 'canplay',
			topCanPlayThrough: 'canplaythrough',
			topDurationChange: 'durationchange',
			topEmptied: 'emptied',
			topEncrypted: 'encrypted',
			topEnded: 'ended',
			topError: 'error',
			topLoadedData: 'loadeddata',
			topLoadedMetadata: 'loadedmetadata',
			topLoadStart: 'loadstart',
			topPause: 'pause',
			topPlay: 'play',
			topPlaying: 'playing',
			topProgress: 'progress',
			topRateChange: 'ratechange',
			topSeeked: 'seeked',
			topSeeking: 'seeking',
			topStalled: 'stalled',
			topSuspend: 'suspend',
			topTimeUpdate: 'timeupdate',
			topVolumeChange: 'volumechange',
			topWaiting: 'waiting'
		};

		function trapBubbledEventsLocal() {
			var inst = this;
			// If a component renders to null or if another component fatals and causes
			// the state of the tree to be corrupted, `node` here can be null.
			!inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
			var node = getNode(inst);
			!node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

			switch (inst._tag) {
			case 'iframe':
			case 'object':
				inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
				break;
			case 'video':
			case 'audio':

				inst._wrapperState.listeners = [];
				// Create listener for each media event
				for (var event in mediaEvents) {
					if (mediaEvents.hasOwnProperty(event)) {
						inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
					}
				}
				break;
			case 'source':
				inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node)];
				break;
			case 'img':
				inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
				break;
			case 'form':
				inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
				break;
			case 'input':
			case 'select':
			case 'textarea':
				inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
				break;
			}
		}

		function postUpdateSelectWrapper() {
			ReactDOMSelect.postUpdateWrapper(this);
		}

		// For HTML, certain tags should omit their close tag. We keep a whitelist for
		// those special-case tags.

		var omittedCloseTags = {
			'area': true,
			'base': true,
			'br': true,
			'col': true,
			'embed': true,
			'hr': true,
			'img': true,
			'input': true,
			'keygen': true,
			'link': true,
			'meta': true,
			'param': true,
			'source': true,
			'track': true,
			'wbr': true
		};

		// NOTE: menuitem's close tag should be omitted, but that causes problems.
		var newlineEatingTags = {
			'listing': true,
			'pre': true,
			'textarea': true
		};

		// For HTML, certain tags cannot have children. This has the same purpose as
		// `omittedCloseTags` except that `menuitem` should still have its closing tag.

		var voidElementTags = _assign({
			'menuitem': true
		}, omittedCloseTags);

		// We accept any tag to be rendered but since this gets injected into arbitrary
		// HTML, we want to make sure that it's a safe tag.
		// http://www.w3.org/TR/REC-xml/#NT-Name

		var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
		var validatedTagCache = {};
		var hasOwnProperty = {}.hasOwnProperty;

		function validateDangerousTag(tag) {
			if (!hasOwnProperty.call(validatedTagCache, tag)) {
				!VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
				validatedTagCache[tag] = true;
			}
		}

		function isCustomComponent(tagName, props) {
			return tagName.indexOf('-') >= 0 || props.is != null;
		}

		var globalIdCounter = 1;

		/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
		function ReactDOMComponent(element) {
			var tag = element.type;
			validateDangerousTag(tag);
			this._currentElement = element;
			this._tag = tag.toLowerCase();
			this._namespaceURI = null;
			this._renderedChildren = null;
			this._previousStyle = null;
			this._previousStyleCopy = null;
			this._hostNode = null;
			this._hostParent = null;
			this._rootNodeID = 0;
			this._domID = 0;
			this._hostContainerInfo = null;
			this._wrapperState = null;
			this._topLevelWrapper = null;
			this._flags = 0;
			if (process.env.NODE_ENV !== 'production') {
				this._ancestorInfo = null;
				setAndValidateContentChildDev.call(this, null);
			}
		}

		ReactDOMComponent.displayName = 'ReactDOMComponent';

		ReactDOMComponent.Mixin = {

			/**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
			mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
				this._rootNodeID = globalIdCounter++;
				this._domID = hostContainerInfo._idCounter++;
				this._hostParent = hostParent;
				this._hostContainerInfo = hostContainerInfo;

				var props = this._currentElement.props;

				switch (this._tag) {
				case 'audio':
				case 'form':
				case 'iframe':
				case 'img':
				case 'link':
				case 'object':
				case 'source':
				case 'video':
					this._wrapperState = {
						listeners: null
					};
					transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
					break;
				case 'button':
					props = ReactDOMButton.getHostProps(this, props, hostParent);
					break;
				case 'input':
					ReactDOMInput.mountWrapper(this, props, hostParent);
					props = ReactDOMInput.getHostProps(this, props);
					transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
					break;
				case 'option':
					ReactDOMOption.mountWrapper(this, props, hostParent);
					props = ReactDOMOption.getHostProps(this, props);
					break;
				case 'select':
					ReactDOMSelect.mountWrapper(this, props, hostParent);
					props = ReactDOMSelect.getHostProps(this, props);
					transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
					break;
				case 'textarea':
					ReactDOMTextarea.mountWrapper(this, props, hostParent);
					props = ReactDOMTextarea.getHostProps(this, props);
					transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
					break;
				}

				assertValidProps(this, props);

				// We create tags in the namespace of their parent container, except HTML
				// tags get no namespace.
				var namespaceURI;
				var parentTag;
				if (hostParent != null) {
					namespaceURI = hostParent._namespaceURI;
					parentTag = hostParent._tag;
				} else if (hostContainerInfo._tag) {
					namespaceURI = hostContainerInfo._namespaceURI;
					parentTag = hostContainerInfo._tag;
				}
				if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
					namespaceURI = DOMNamespaces.html;
				}
				if (namespaceURI === DOMNamespaces.html) {
					if (this._tag === 'svg') {
						namespaceURI = DOMNamespaces.svg;
					} else if (this._tag === 'math') {
						namespaceURI = DOMNamespaces.mathml;
					}
				}
				this._namespaceURI = namespaceURI;

				if (process.env.NODE_ENV !== 'production') {
					var parentInfo;
					if (hostParent != null) {
						parentInfo = hostParent._ancestorInfo;
					} else if (hostContainerInfo._tag) {
						parentInfo = hostContainerInfo._ancestorInfo;
					}
					if (parentInfo) {
						// parentInfo should always be present except for the top-level
						// component when server rendering
						validateDOMNesting(this._tag, null, this, parentInfo);
					}
					this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
				}

				var mountImage;
				if (transaction.useCreateElement) {
					var ownerDocument = hostContainerInfo._ownerDocument;
					var el;
					if (namespaceURI === DOMNamespaces.html) {
						if (this._tag === 'script') {
							// Create the script via .innerHTML so its "parser-inserted" flag is
							// set to true and it does not execute
							var div = ownerDocument.createElement('div');
							var type = this._currentElement.type;
							div.innerHTML = '<' + type + '></' + type + '>';
							el = div.removeChild(div.firstChild);
						} else if (props.is) {
							el = ownerDocument.createElement(this._currentElement.type, props.is);
						} else {
							// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
							// See discussion in https://github.com/facebook/react/pull/6896
							// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
							el = ownerDocument.createElement(this._currentElement.type);
						}
					} else {
						el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
					}
					ReactDOMComponentTree.precacheNode(this, el);
					this._flags |= Flags.hasCachedChildNodes;
					if (!this._hostParent) {
						DOMPropertyOperations.setAttributeForRoot(el);
					}
					this._updateDOMProperties(null, props, transaction);
					var lazyTree = DOMLazyTree(el);
					this._createInitialChildren(transaction, props, context, lazyTree);
					mountImage = lazyTree;
				} else {
					var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
					var tagContent = this._createContentMarkup(transaction, props, context);
					if (!tagContent && omittedCloseTags[this._tag]) {
						mountImage = tagOpen + '/>';
					} else {
						mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
					}
				}

				switch (this._tag) {
				case 'input':
					transaction.getReactMountReady().enqueue(inputPostMount, this);
					if (props.autoFocus) {
						transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
					}
					break;
				case 'textarea':
					transaction.getReactMountReady().enqueue(textareaPostMount, this);
					if (props.autoFocus) {
						transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
					}
					break;
				case 'select':
					if (props.autoFocus) {
						transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
					}
					break;
				case 'button':
					if (props.autoFocus) {
						transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
					}
					break;
				case 'option':
					transaction.getReactMountReady().enqueue(optionPostMount, this);
					break;
				}

				return mountImage;
			},

			/**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
			_createOpenTagMarkupAndPutListeners: function (transaction, props) {
				var ret = '<' + this._currentElement.type;

				for (var propKey in props) {
					if (!props.hasOwnProperty(propKey)) {
						continue;
					}
					var propValue = props[propKey];
					if (propValue == null) {
						continue;
					}
					if (registrationNameModules.hasOwnProperty(propKey)) {
						if (propValue) {
							enqueuePutListener(this, propKey, propValue, transaction);
						}
					} else {
						if (propKey === STYLE) {
							if (propValue) {
								if (process.env.NODE_ENV !== 'production') {
									// See `_updateDOMProperties`. style block
									this._previousStyle = propValue;
								}
								propValue = this._previousStyleCopy = _assign({}, props.style);
							}
							propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
						}
						var markup = null;
						if (this._tag != null && isCustomComponent(this._tag, props)) {
							if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
								markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
							}
						} else {
							markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
						}
						if (markup) {
							ret += ' ' + markup;
						}
					}
				}

				// For static pages, no need to put React ID and checksum. Saves lots of
				// bytes.
				if (transaction.renderToStaticMarkup) {
					return ret;
				}

				if (!this._hostParent) {
					ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
				}
				ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
				return ret;
			},

			/**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
			_createContentMarkup: function (transaction, props, context) {
				var ret = '';

				// Intentional use of != to avoid catching zero/false.
				var innerHTML = props.dangerouslySetInnerHTML;
				if (innerHTML != null) {
					if (innerHTML.__html != null) {
						ret = innerHTML.__html;
					}
				} else {
					var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
					var childrenToUse = contentToUse != null ? null : props.children;
					if (contentToUse != null) {
						// TODO: Validate that text is allowed as a child of this node
						ret = escapeTextContentForBrowser(contentToUse);
						if (process.env.NODE_ENV !== 'production') {
							setAndValidateContentChildDev.call(this, contentToUse);
						}
					} else if (childrenToUse != null) {
						var mountImages = this.mountChildren(childrenToUse, transaction, context);
						ret = mountImages.join('');
					}
				}
				if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
					// text/html ignores the first character in these tags if it's a newline
					// Prefer to break application/xml over text/html (for now) by adding
					// a newline specifically to get eaten by the parser. (Alternately for
					// textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
					// \r is normalized out by HTMLTextAreaElement#value.)
					// See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
					// See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
					// See: <http://www.w3.org/TR/html5/syntax.html#newlines>
					// See: Parsing of "textarea" "listing" and "pre" elements
					//  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
					return '\n' + ret;
				} else {
					return ret;
				}
			},

			_createInitialChildren: function (transaction, props, context, lazyTree) {
				// Intentional use of != to avoid catching zero/false.
				var innerHTML = props.dangerouslySetInnerHTML;
				if (innerHTML != null) {
					if (innerHTML.__html != null) {
						DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
					}
				} else {
					var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
					var childrenToUse = contentToUse != null ? null : props.children;
					if (contentToUse != null) {
						// TODO: Validate that text is allowed as a child of this node
						if (process.env.NODE_ENV !== 'production') {
							setAndValidateContentChildDev.call(this, contentToUse);
						}
						DOMLazyTree.queueText(lazyTree, contentToUse);
					} else if (childrenToUse != null) {
						var mountImages = this.mountChildren(childrenToUse, transaction, context);
						for (var i = 0; i < mountImages.length; i++) {
							DOMLazyTree.queueChild(lazyTree, mountImages[i]);
						}
					}
				}
			},

			/**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
			receiveComponent: function (nextElement, transaction, context) {
				var prevElement = this._currentElement;
				this._currentElement = nextElement;
				this.updateComponent(transaction, prevElement, nextElement, context);
			},

			/**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
			updateComponent: function (transaction, prevElement, nextElement, context) {
				var lastProps = prevElement.props;
				var nextProps = this._currentElement.props;

				switch (this._tag) {
				case 'button':
					lastProps = ReactDOMButton.getHostProps(this, lastProps);
					nextProps = ReactDOMButton.getHostProps(this, nextProps);
					break;
				case 'input':
					lastProps = ReactDOMInput.getHostProps(this, lastProps);
					nextProps = ReactDOMInput.getHostProps(this, nextProps);
					break;
				case 'option':
					lastProps = ReactDOMOption.getHostProps(this, lastProps);
					nextProps = ReactDOMOption.getHostProps(this, nextProps);
					break;
				case 'select':
					lastProps = ReactDOMSelect.getHostProps(this, lastProps);
					nextProps = ReactDOMSelect.getHostProps(this, nextProps);
					break;
				case 'textarea':
					lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
					nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
					break;
				}

				assertValidProps(this, nextProps);
				this._updateDOMProperties(lastProps, nextProps, transaction);
				this._updateDOMChildren(lastProps, nextProps, transaction, context);

				switch (this._tag) {
				case 'input':
					// Update the wrapper around inputs *after* updating props. This has to
					// happen after `_updateDOMProperties`. Otherwise HTML5 input validations
					// raise warnings and prevent the new value from being assigned.
					ReactDOMInput.updateWrapper(this);
					break;
				case 'textarea':
					ReactDOMTextarea.updateWrapper(this);
					break;
				case 'select':
					// <select> value update needs to occur after <option> children
					// reconciliation
					transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
					break;
				}
			},

			/**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
			_updateDOMProperties: function (lastProps, nextProps, transaction) {
				var propKey;
				var styleName;
				var styleUpdates;
				for (propKey in lastProps) {
					if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
						continue;
					}
					if (propKey === STYLE) {
						var lastStyle = this._previousStyleCopy;
						for (styleName in lastStyle) {
							if (lastStyle.hasOwnProperty(styleName)) {
								styleUpdates = styleUpdates || {};
								styleUpdates[styleName] = '';
							}
						}
						this._previousStyleCopy = null;
					} else if (registrationNameModules.hasOwnProperty(propKey)) {
						if (lastProps[propKey]) {
							// Only call deleteListener if there was a listener previously or
							// else willDeleteListener gets called when there wasn't actually a
							// listener (e.g., onClick={null})
							deleteListener(this, propKey);
						}
					} else if (isCustomComponent(this._tag, lastProps)) {
						if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
							DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
						}
					} else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
						DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
					}
				}
				for (propKey in nextProps) {
					var nextProp = nextProps[propKey];
					var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
					if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
						continue;
					}
					if (propKey === STYLE) {
						if (nextProp) {
							if (process.env.NODE_ENV !== 'production') {
								checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
								this._previousStyle = nextProp;
							}
							nextProp = this._previousStyleCopy = _assign({}, nextProp);
						} else {
							this._previousStyleCopy = null;
						}
						if (lastProp) {
							// Unset styles on `lastProp` but not on `nextProp`.
							for (styleName in lastProp) {
								if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
									styleUpdates = styleUpdates || {};
									styleUpdates[styleName] = '';
								}
							}
							// Update styles that changed since `lastProp`.
							for (styleName in nextProp) {
								if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
									styleUpdates = styleUpdates || {};
									styleUpdates[styleName] = nextProp[styleName];
								}
							}
						} else {
							// Relies on `updateStylesByID` not mutating `styleUpdates`.
							styleUpdates = nextProp;
						}
					} else if (registrationNameModules.hasOwnProperty(propKey)) {
						if (nextProp) {
							enqueuePutListener(this, propKey, nextProp, transaction);
						} else if (lastProp) {
							deleteListener(this, propKey);
						}
					} else if (isCustomComponent(this._tag, nextProps)) {
						if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
							DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
						}
					} else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
						var node = getNode(this);
						// If we're updating to null or undefined, we should remove the property
						// from the DOM node instead of inadvertently setting to a string. This
						// brings us in line with the same behavior we have on initial render.
						if (nextProp != null) {
							DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
						} else {
							DOMPropertyOperations.deleteValueForProperty(node, propKey);
						}
					}
				}
				if (styleUpdates) {
					CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
				}
			},

			/**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
			_updateDOMChildren: function (lastProps, nextProps, transaction, context) {
				var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
				var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

				var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
				var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

				// Note the use of `!=` which checks for null or undefined.
				var lastChildren = lastContent != null ? null : lastProps.children;
				var nextChildren = nextContent != null ? null : nextProps.children;

				// If we're switching from children to content/html or vice versa, remove
				// the old content
				var lastHasContentOrHtml = lastContent != null || lastHtml != null;
				var nextHasContentOrHtml = nextContent != null || nextHtml != null;
				if (lastChildren != null && nextChildren == null) {
					this.updateChildren(null, transaction, context);
				} else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
					this.updateTextContent('');
					if (process.env.NODE_ENV !== 'production') {
						ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
					}
				}

				if (nextContent != null) {
					if (lastContent !== nextContent) {
						this.updateTextContent('' + nextContent);
						if (process.env.NODE_ENV !== 'production') {
							setAndValidateContentChildDev.call(this, nextContent);
						}
					}
				} else if (nextHtml != null) {
					if (lastHtml !== nextHtml) {
						this.updateMarkup('' + nextHtml);
					}
					if (process.env.NODE_ENV !== 'production') {
						ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
					}
				} else if (nextChildren != null) {
					if (process.env.NODE_ENV !== 'production') {
						setAndValidateContentChildDev.call(this, null);
					}

					this.updateChildren(nextChildren, transaction, context);
				}
			},

			getHostNode: function () {
				return getNode(this);
			},

			/**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
			unmountComponent: function (safely) {
				switch (this._tag) {
				case 'audio':
				case 'form':
				case 'iframe':
				case 'img':
				case 'link':
				case 'object':
				case 'source':
				case 'video':
					var listeners = this._wrapperState.listeners;
					if (listeners) {
						for (var i = 0; i < listeners.length; i++) {
							listeners[i].remove();
						}
					}
					break;
				case 'html':
				case 'head':
				case 'body':
					/**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
					!false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
					break;
				}

				this.unmountChildren(safely);
				ReactDOMComponentTree.uncacheNode(this);
				EventPluginHub.deleteAllListeners(this);
				this._rootNodeID = 0;
				this._domID = 0;
				this._wrapperState = null;

				if (process.env.NODE_ENV !== 'production') {
					setAndValidateContentChildDev.call(this, null);
				}
			},

			getPublicInstance: function () {
				return getNode(this);
			}

		};

		_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

		module.exports = ReactDOMComponent;
	}).call(this,require('_process'));
},{"./AutoFocusUtils":617,"./CSSPropertyOperations":620,"./DOMLazyTree":624,"./DOMNamespaces":625,"./DOMProperty":626,"./DOMPropertyOperations":627,"./EventConstants":632,"./EventPluginHub":633,"./EventPluginRegistry":634,"./ReactBrowserEventEmitter":643,"./ReactDOMButton":655,"./ReactDOMComponentFlags":657,"./ReactDOMComponentTree":658,"./ReactDOMInput":664,"./ReactDOMOption":666,"./ReactDOMSelect":667,"./ReactDOMTextarea":670,"./ReactInstrumentation":688,"./ReactMultiChild":692,"./ReactServerRenderingTransaction":705,"./escapeTextContentForBrowser":734,"./isEventSupported":748,"./reactProdInvariant":752,"./validateDOMNesting":758,"_process":615,"fbjs/lib/emptyFunction":766,"fbjs/lib/invariant":774,"fbjs/lib/keyOf":778,"fbjs/lib/shallowEqual":782,"fbjs/lib/warning":783,"object-assign":784}],657:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponentFlags
 */

	'use strict';

	var ReactDOMComponentFlags = {
		hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;
},{}],658:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponentTree
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var DOMProperty = require('./DOMProperty');
		var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');

		var invariant = require('fbjs/lib/invariant');

		var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
		var Flags = ReactDOMComponentFlags;

		var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

		/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
		function getRenderedHostOrTextFromComponent(component) {
			var rendered;
			while (rendered = component._renderedComponent) {
				component = rendered;
			}
			return component;
		}

		/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
		function precacheNode(inst, node) {
			var hostInst = getRenderedHostOrTextFromComponent(inst);
			hostInst._hostNode = node;
			node[internalInstanceKey] = hostInst;
		}

		function uncacheNode(inst) {
			var node = inst._hostNode;
			if (node) {
				delete node[internalInstanceKey];
				inst._hostNode = null;
			}
		}

		/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
		function precacheChildNodes(inst, node) {
			if (inst._flags & Flags.hasCachedChildNodes) {
				return;
			}
			var children = inst._renderedChildren;
			var childNode = node.firstChild;
			outer: for (var name in children) {
				if (!children.hasOwnProperty(name)) {
					continue;
				}
				var childInst = children[name];
				var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
				if (childID === 0) {
					// We're currently unmounting this child in ReactMultiChild; skip it.
					continue;
				}
				// We assume the child nodes are in the same order as the child instances.
				for (; childNode !== null; childNode = childNode.nextSibling) {
					if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
						precacheNode(childInst, childNode);
						continue outer;
					}
				}
				// We reached the end of the DOM children without finding an ID match.
				!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
			}
			inst._flags |= Flags.hasCachedChildNodes;
		}

		/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
		function getClosestInstanceFromNode(node) {
			if (node[internalInstanceKey]) {
				return node[internalInstanceKey];
			}

			// Walk up the tree until we find an ancestor whose instance we have cached.
			var parents = [];
			while (!node[internalInstanceKey]) {
				parents.push(node);
				if (node.parentNode) {
					node = node.parentNode;
				} else {
					// Top of the tree. This node must not be part of a React tree (or is
					// unmounted, potentially).
					return null;
				}
			}

			var closest;
			var inst;
			for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
				closest = inst;
				if (parents.length) {
					precacheChildNodes(inst, node);
				}
			}

			return closest;
		}

		/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
		function getInstanceFromNode(node) {
			var inst = getClosestInstanceFromNode(node);
			if (inst != null && inst._hostNode === node) {
				return inst;
			} else {
				return null;
			}
		}

		/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
		function getNodeFromInstance(inst) {
			// Without this first invariant, passing a non-DOM-component triggers the next
			// invariant for a missing parent, which is super confusing.
			!(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

			if (inst._hostNode) {
				return inst._hostNode;
			}

			// Walk up the tree until we find an ancestor whose DOM node we have cached.
			var parents = [];
			while (!inst._hostNode) {
				parents.push(inst);
				!inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
				inst = inst._hostParent;
			}

			// Now parents contains each ancestor that does *not* have a cached native
			// node, and `inst` is the deepest ancestor that does.
			for (; parents.length; inst = parents.pop()) {
				precacheChildNodes(inst, inst._hostNode);
			}

			return inst._hostNode;
		}

		var ReactDOMComponentTree = {
			getClosestInstanceFromNode: getClosestInstanceFromNode,
			getInstanceFromNode: getInstanceFromNode,
			getNodeFromInstance: getNodeFromInstance,
			precacheChildNodes: precacheChildNodes,
			precacheNode: precacheNode,
			uncacheNode: uncacheNode
		};

		module.exports = ReactDOMComponentTree;
	}).call(this,require('_process'));
},{"./DOMProperty":626,"./ReactDOMComponentFlags":657,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],659:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMContainerInfo
 */

		'use strict';

		var validateDOMNesting = require('./validateDOMNesting');

		var DOC_NODE_TYPE = 9;

		function ReactDOMContainerInfo(topLevelWrapper, node) {
			var info = {
				_topLevelWrapper: topLevelWrapper,
				_idCounter: 1,
				_ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
				_node: node,
				_tag: node ? node.nodeName.toLowerCase() : null,
				_namespaceURI: node ? node.namespaceURI : null
			};
			if (process.env.NODE_ENV !== 'production') {
				info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
			}
			return info;
		}

		module.exports = ReactDOMContainerInfo;
	}).call(this,require('_process'));
},{"./validateDOMNesting":758,"_process":615}],660:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMEmptyComponent
 */

	'use strict';

	var _assign = require('object-assign');

	var DOMLazyTree = require('./DOMLazyTree');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');

	var ReactDOMEmptyComponent = function (instantiate) {
		// ReactCompositeComponent uses this:
		this._currentElement = null;
		// ReactDOMComponentTree uses these:
		this._hostNode = null;
		this._hostParent = null;
		this._hostContainerInfo = null;
		this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
		mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
			var domID = hostContainerInfo._idCounter++;
			this._domID = domID;
			this._hostParent = hostParent;
			this._hostContainerInfo = hostContainerInfo;

			var nodeValue = ' react-empty: ' + this._domID + ' ';
			if (transaction.useCreateElement) {
				var ownerDocument = hostContainerInfo._ownerDocument;
				var node = ownerDocument.createComment(nodeValue);
				ReactDOMComponentTree.precacheNode(this, node);
				return DOMLazyTree(node);
			} else {
				if (transaction.renderToStaticMarkup) {
					// Normally we'd insert a comment node, but since this is a situation
					// where React won't take over (static pages), we can simply return
					// nothing.
					return '';
				}
				return '<!--' + nodeValue + '-->';
			}
		},
		receiveComponent: function () {},
		getHostNode: function () {
			return ReactDOMComponentTree.getNodeFromInstance(this);
		},
		unmountComponent: function () {
			ReactDOMComponentTree.uncacheNode(this);
		}
	});

	module.exports = ReactDOMEmptyComponent;
},{"./DOMLazyTree":624,"./ReactDOMComponentTree":658,"object-assign":784}],661:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 */

		'use strict';

		var ReactElement = require('./ReactElement');

		/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
		var createDOMFactory = ReactElement.createFactory;
		if (process.env.NODE_ENV !== 'production') {
			var ReactElementValidator = require('./ReactElementValidator');
			createDOMFactory = ReactElementValidator.createFactory;
		}

		/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
		var ReactDOMFactories = {
			a: createDOMFactory('a'),
			abbr: createDOMFactory('abbr'),
			address: createDOMFactory('address'),
			area: createDOMFactory('area'),
			article: createDOMFactory('article'),
			aside: createDOMFactory('aside'),
			audio: createDOMFactory('audio'),
			b: createDOMFactory('b'),
			base: createDOMFactory('base'),
			bdi: createDOMFactory('bdi'),
			bdo: createDOMFactory('bdo'),
			big: createDOMFactory('big'),
			blockquote: createDOMFactory('blockquote'),
			body: createDOMFactory('body'),
			br: createDOMFactory('br'),
			button: createDOMFactory('button'),
			canvas: createDOMFactory('canvas'),
			caption: createDOMFactory('caption'),
			cite: createDOMFactory('cite'),
			code: createDOMFactory('code'),
			col: createDOMFactory('col'),
			colgroup: createDOMFactory('colgroup'),
			data: createDOMFactory('data'),
			datalist: createDOMFactory('datalist'),
			dd: createDOMFactory('dd'),
			del: createDOMFactory('del'),
			details: createDOMFactory('details'),
			dfn: createDOMFactory('dfn'),
			dialog: createDOMFactory('dialog'),
			div: createDOMFactory('div'),
			dl: createDOMFactory('dl'),
			dt: createDOMFactory('dt'),
			em: createDOMFactory('em'),
			embed: createDOMFactory('embed'),
			fieldset: createDOMFactory('fieldset'),
			figcaption: createDOMFactory('figcaption'),
			figure: createDOMFactory('figure'),
			footer: createDOMFactory('footer'),
			form: createDOMFactory('form'),
			h1: createDOMFactory('h1'),
			h2: createDOMFactory('h2'),
			h3: createDOMFactory('h3'),
			h4: createDOMFactory('h4'),
			h5: createDOMFactory('h5'),
			h6: createDOMFactory('h6'),
			head: createDOMFactory('head'),
			header: createDOMFactory('header'),
			hgroup: createDOMFactory('hgroup'),
			hr: createDOMFactory('hr'),
			html: createDOMFactory('html'),
			i: createDOMFactory('i'),
			iframe: createDOMFactory('iframe'),
			img: createDOMFactory('img'),
			input: createDOMFactory('input'),
			ins: createDOMFactory('ins'),
			kbd: createDOMFactory('kbd'),
			keygen: createDOMFactory('keygen'),
			label: createDOMFactory('label'),
			legend: createDOMFactory('legend'),
			li: createDOMFactory('li'),
			link: createDOMFactory('link'),
			main: createDOMFactory('main'),
			map: createDOMFactory('map'),
			mark: createDOMFactory('mark'),
			menu: createDOMFactory('menu'),
			menuitem: createDOMFactory('menuitem'),
			meta: createDOMFactory('meta'),
			meter: createDOMFactory('meter'),
			nav: createDOMFactory('nav'),
			noscript: createDOMFactory('noscript'),
			object: createDOMFactory('object'),
			ol: createDOMFactory('ol'),
			optgroup: createDOMFactory('optgroup'),
			option: createDOMFactory('option'),
			output: createDOMFactory('output'),
			p: createDOMFactory('p'),
			param: createDOMFactory('param'),
			picture: createDOMFactory('picture'),
			pre: createDOMFactory('pre'),
			progress: createDOMFactory('progress'),
			q: createDOMFactory('q'),
			rp: createDOMFactory('rp'),
			rt: createDOMFactory('rt'),
			ruby: createDOMFactory('ruby'),
			s: createDOMFactory('s'),
			samp: createDOMFactory('samp'),
			script: createDOMFactory('script'),
			section: createDOMFactory('section'),
			select: createDOMFactory('select'),
			small: createDOMFactory('small'),
			source: createDOMFactory('source'),
			span: createDOMFactory('span'),
			strong: createDOMFactory('strong'),
			style: createDOMFactory('style'),
			sub: createDOMFactory('sub'),
			summary: createDOMFactory('summary'),
			sup: createDOMFactory('sup'),
			table: createDOMFactory('table'),
			tbody: createDOMFactory('tbody'),
			td: createDOMFactory('td'),
			textarea: createDOMFactory('textarea'),
			tfoot: createDOMFactory('tfoot'),
			th: createDOMFactory('th'),
			thead: createDOMFactory('thead'),
			time: createDOMFactory('time'),
			title: createDOMFactory('title'),
			tr: createDOMFactory('tr'),
			track: createDOMFactory('track'),
			u: createDOMFactory('u'),
			ul: createDOMFactory('ul'),
			'var': createDOMFactory('var'),
			video: createDOMFactory('video'),
			wbr: createDOMFactory('wbr'),

			// SVG
			circle: createDOMFactory('circle'),
			clipPath: createDOMFactory('clipPath'),
			defs: createDOMFactory('defs'),
			ellipse: createDOMFactory('ellipse'),
			g: createDOMFactory('g'),
			image: createDOMFactory('image'),
			line: createDOMFactory('line'),
			linearGradient: createDOMFactory('linearGradient'),
			mask: createDOMFactory('mask'),
			path: createDOMFactory('path'),
			pattern: createDOMFactory('pattern'),
			polygon: createDOMFactory('polygon'),
			polyline: createDOMFactory('polyline'),
			radialGradient: createDOMFactory('radialGradient'),
			rect: createDOMFactory('rect'),
			stop: createDOMFactory('stop'),
			svg: createDOMFactory('svg'),
			text: createDOMFactory('text'),
			tspan: createDOMFactory('tspan')
		};

		module.exports = ReactDOMFactories;
	}).call(this,require('_process'));
},{"./ReactElement":676,"./ReactElementValidator":677,"_process":615}],662:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

	'use strict';

	var ReactDOMFeatureFlags = {
		useCreateElement: true
	};

	module.exports = ReactDOMFeatureFlags;
},{}],663:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 */

	'use strict';

	var DOMChildrenOperations = require('./DOMChildrenOperations');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');

	/**
 * Operations used to process updates to DOM nodes.
 */
	var ReactDOMIDOperations = {

		/**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
		dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
			var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
			DOMChildrenOperations.processUpdates(node, updates);
		}
	};

	module.exports = ReactDOMIDOperations;
},{"./DOMChildrenOperations":623,"./ReactDOMComponentTree":658}],664:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var DisabledInputUtils = require('./DisabledInputUtils');
		var DOMPropertyOperations = require('./DOMPropertyOperations');
		var LinkedValueUtils = require('./LinkedValueUtils');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactUpdates = require('./ReactUpdates');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		var didWarnValueLink = false;
		var didWarnCheckedLink = false;
		var didWarnValueDefaultValue = false;
		var didWarnCheckedDefaultChecked = false;
		var didWarnControlledToUncontrolled = false;
		var didWarnUncontrolledToControlled = false;

		function forceUpdateIfMounted() {
			if (this._rootNodeID) {
				// DOM component is still mounted; update
				ReactDOMInput.updateWrapper(this);
			}
		}

		function isControlled(props) {
			var usesChecked = props.type === 'checkbox' || props.type === 'radio';
			return usesChecked ? props.checked != null : props.value != null;
		}

		/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
		var ReactDOMInput = {
			getHostProps: function (inst, props) {
				var value = LinkedValueUtils.getValue(props);
				var checked = LinkedValueUtils.getChecked(props);

				var hostProps = _assign({
					// Make sure we set .type before any other properties (setting .value
					// before .type means .value is lost in IE11 and below)
					type: undefined,
					// Make sure we set .step before .value (setting .value before .step
					// means .value is rounded on mount, based upon step precision)
					step: undefined,
					// Make sure we set .min & .max before .value (to ensure proper order
					// in corner cases such as min or max deriving from value, e.g. Issue #7170)
					min: undefined,
					max: undefined
				}, DisabledInputUtils.getHostProps(inst, props), {
					defaultChecked: undefined,
					defaultValue: undefined,
					value: value != null ? value : inst._wrapperState.initialValue,
					checked: checked != null ? checked : inst._wrapperState.initialChecked,
					onChange: inst._wrapperState.onChange
				});

				return hostProps;
			},

			mountWrapper: function (inst, props) {
				if (process.env.NODE_ENV !== 'production') {
					LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

					var owner = inst._currentElement._owner;

					if (props.valueLink !== undefined && !didWarnValueLink) {
						process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
						didWarnValueLink = true;
					}
					if (props.checkedLink !== undefined && !didWarnCheckedLink) {
						process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
						didWarnCheckedLink = true;
					}
					if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
						process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
						didWarnCheckedDefaultChecked = true;
					}
					if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
						process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
						didWarnValueDefaultValue = true;
					}
				}

				var defaultValue = props.defaultValue;
				inst._wrapperState = {
					initialChecked: props.checked != null ? props.checked : props.defaultChecked,
					initialValue: props.value != null ? props.value : defaultValue,
					listeners: null,
					onChange: _handleChange.bind(inst)
				};

				if (process.env.NODE_ENV !== 'production') {
					inst._wrapperState.controlled = isControlled(props);
				}
			},

			updateWrapper: function (inst) {
				var props = inst._currentElement.props;

				if (process.env.NODE_ENV !== 'production') {
					var controlled = isControlled(props);
					var owner = inst._currentElement._owner;

					if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
						process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
						didWarnUncontrolledToControlled = true;
					}
					if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
						process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
						didWarnControlledToUncontrolled = true;
					}
				}

				// TODO: Shouldn't this be getChecked(props)?
				var checked = props.checked;
				if (checked != null) {
					DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
				}

				var node = ReactDOMComponentTree.getNodeFromInstance(inst);
				var value = LinkedValueUtils.getValue(props);
				if (value != null) {

					// Cast `value` to a string to ensure the value is set correctly. While
					// browsers typically do this as necessary, jsdom doesn't.
					var newValue = '' + value;

					// To avoid side effects (such as losing text selection), only set value if changed
					if (newValue !== node.value) {
						node.value = newValue;
					}
				} else {
					if (props.value == null && props.defaultValue != null) {
						node.defaultValue = '' + props.defaultValue;
					}
					if (props.checked == null && props.defaultChecked != null) {
						node.defaultChecked = !!props.defaultChecked;
					}
				}
			},

			postMountWrapper: function (inst) {
				var props = inst._currentElement.props;

				// This is in postMount because we need access to the DOM node, which is not
				// available until after the component has mounted.
				var node = ReactDOMComponentTree.getNodeFromInstance(inst);

				// Detach value from defaultValue. We won't do anything if we're working on
				// submit or reset inputs as those values & defaultValues are linked. They
				// are not resetable nodes so this operation doesn't matter and actually
				// removes browser-default values (eg "Submit Query") when no value is
				// provided.

				switch (props.type) {
				case 'submit':
				case 'reset':
					break;
				case 'color':
				case 'date':
				case 'datetime':
				case 'datetime-local':
				case 'month':
				case 'time':
				case 'week':
					// This fixes the no-show issue on iOS Safari and Android Chrome:
					// https://github.com/facebook/react/issues/7233
					node.value = '';
					node.value = node.defaultValue;
					break;
				default:
					node.value = node.value;
					break;
				}

				// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
				// this is needed to work around a chrome bug where setting defaultChecked
				// will sometimes influence the value of checked (even after detachment).
				// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
				// We need to temporarily unset name to avoid disrupting radio button groups.
				var name = node.name;
				if (name !== '') {
					node.name = '';
				}
				node.defaultChecked = !node.defaultChecked;
				node.defaultChecked = !node.defaultChecked;
				if (name !== '') {
					node.name = name;
				}
			}
		};

		function _handleChange(event) {
			var props = this._currentElement.props;

			var returnValue = LinkedValueUtils.executeOnChange(props, event);

			// Here we use asap to wait until all updates have propagated, which
			// is important when using controlled components within layers:
			// https://github.com/facebook/react/issues/1698
			ReactUpdates.asap(forceUpdateIfMounted, this);

			var name = props.name;
			if (props.type === 'radio' && name != null) {
				var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
				var queryRoot = rootNode;

				while (queryRoot.parentNode) {
					queryRoot = queryRoot.parentNode;
				}

				// If `rootNode.form` was non-null, then we could try `form.elements`,
				// but that sometimes behaves strangely in IE8. We could also try using
				// `form.getElementsByName`, but that will only return direct children
				// and won't include inputs that use the HTML5 `form=` attribute. Since
				// the input might not even be in a form, let's just use the global
				// `querySelectorAll` to ensure we don't miss anything.
				var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

				for (var i = 0; i < group.length; i++) {
					var otherNode = group[i];
					if (otherNode === rootNode || otherNode.form !== rootNode.form) {
						continue;
					}
					// This will throw if radio buttons rendered by different copies of React
					// and the same name are rendered into the same form (same as #1939).
					// That's probably okay; we don't support it just as we don't support
					// mixing React radio buttons with non-React ones.
					var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
					!otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
					// If this is a controlled radio button group, forcing the input that
					// was previously checked to update will cause it to be come re-checked
					// as appropriate.
					ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
				}
			}

			return returnValue;
		}

		module.exports = ReactDOMInput;
	}).call(this,require('_process'));
},{"./DOMPropertyOperations":627,"./DisabledInputUtils":630,"./LinkedValueUtils":640,"./ReactDOMComponentTree":658,"./ReactUpdates":708,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783,"object-assign":784}],665:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMNullInputValuePropHook
 */

		'use strict';

		var ReactComponentTreeHook = require('./ReactComponentTreeHook');

		var warning = require('fbjs/lib/warning');

		var didWarnValueNull = false;

		function handleElement(debugID, element) {
			if (element == null) {
				return;
			}
			if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
				return;
			}
			if (element.props != null && element.props.value === null && !didWarnValueNull) {
				process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

				didWarnValueNull = true;
			}
		}

		var ReactDOMNullInputValuePropHook = {
			onBeforeMountComponent: function (debugID, element) {
				handleElement(debugID, element);
			},
			onBeforeUpdateComponent: function (debugID, element) {
				handleElement(debugID, element);
			}
		};

		module.exports = ReactDOMNullInputValuePropHook;
	}).call(this,require('_process'));
},{"./ReactComponentTreeHook":651,"_process":615,"fbjs/lib/warning":783}],666:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

		'use strict';

		var _assign = require('object-assign');

		var ReactChildren = require('./ReactChildren');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactDOMSelect = require('./ReactDOMSelect');

		var warning = require('fbjs/lib/warning');
		var didWarnInvalidOptionChildren = false;

		function flattenChildren(children) {
			var content = '';

			// Flatten children and warn if they aren't strings or numbers;
			// invalid types are ignored.
			ReactChildren.forEach(children, function (child) {
				if (child == null) {
					return;
				}
				if (typeof child === 'string' || typeof child === 'number') {
					content += child;
				} else if (!didWarnInvalidOptionChildren) {
					didWarnInvalidOptionChildren = true;
					process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
				}
			});

			return content;
		}

		/**
 * Implements an <option> host component that warns when `selected` is set.
 */
		var ReactDOMOption = {
			mountWrapper: function (inst, props, hostParent) {
				// TODO (yungsters): Remove support for `selected` in <option>.
				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
				}

				// Look up whether this option is 'selected'
				var selectValue = null;
				if (hostParent != null) {
					var selectParent = hostParent;

					if (selectParent._tag === 'optgroup') {
						selectParent = selectParent._hostParent;
					}

					if (selectParent != null && selectParent._tag === 'select') {
						selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
					}
				}

				// If the value is null (e.g., no specified value or after initial mount)
				// or missing (e.g., for <datalist>), we don't change props.selected
				var selected = null;
				if (selectValue != null) {
					var value;
					if (props.value != null) {
						value = props.value + '';
					} else {
						value = flattenChildren(props.children);
					}
					selected = false;
					if (Array.isArray(selectValue)) {
						// multiple
						for (var i = 0; i < selectValue.length; i++) {
							if ('' + selectValue[i] === value) {
								selected = true;
								break;
							}
						}
					} else {
						selected = '' + selectValue === value;
					}
				}

				inst._wrapperState = { selected: selected };
			},

			postMountWrapper: function (inst) {
				// value="" should make a value attribute (#6219)
				var props = inst._currentElement.props;
				if (props.value != null) {
					var node = ReactDOMComponentTree.getNodeFromInstance(inst);
					node.setAttribute('value', props.value);
				}
			},

			getHostProps: function (inst, props) {
				var hostProps = _assign({ selected: undefined, children: undefined }, props);

				// Read state only from initial mount because <select> updates value
				// manually; we need the initial state only for server rendering
				if (inst._wrapperState.selected != null) {
					hostProps.selected = inst._wrapperState.selected;
				}

				var content = flattenChildren(props.children);

				if (content) {
					hostProps.children = content;
				}

				return hostProps;
			}

		};

		module.exports = ReactDOMOption;
	}).call(this,require('_process'));
},{"./ReactChildren":645,"./ReactDOMComponentTree":658,"./ReactDOMSelect":667,"_process":615,"fbjs/lib/warning":783,"object-assign":784}],667:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

		'use strict';

		var _assign = require('object-assign');

		var DisabledInputUtils = require('./DisabledInputUtils');
		var LinkedValueUtils = require('./LinkedValueUtils');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactUpdates = require('./ReactUpdates');

		var warning = require('fbjs/lib/warning');

		var didWarnValueLink = false;
		var didWarnValueDefaultValue = false;

		function updateOptionsIfPendingUpdateAndMounted() {
			if (this._rootNodeID && this._wrapperState.pendingUpdate) {
				this._wrapperState.pendingUpdate = false;

				var props = this._currentElement.props;
				var value = LinkedValueUtils.getValue(props);

				if (value != null) {
					updateOptions(this, Boolean(props.multiple), value);
				}
			}
		}

		function getDeclarationErrorAddendum(owner) {
			if (owner) {
				var name = owner.getName();
				if (name) {
					return ' Check the render method of `' + name + '`.';
				}
			}
			return '';
		}

		var valuePropNames = ['value', 'defaultValue'];

		/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
		function checkSelectPropTypes(inst, props) {
			var owner = inst._currentElement._owner;
			LinkedValueUtils.checkPropTypes('select', props, owner);

			if (props.valueLink !== undefined && !didWarnValueLink) {
				process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
				didWarnValueLink = true;
			}

			for (var i = 0; i < valuePropNames.length; i++) {
				var propName = valuePropNames[i];
				if (props[propName] == null) {
					continue;
				}
				var isArray = Array.isArray(props[propName]);
				if (props.multiple && !isArray) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
				} else if (!props.multiple && isArray) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
				}
			}
		}

		/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
		function updateOptions(inst, multiple, propValue) {
			var selectedValue, i;
			var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

			if (multiple) {
				selectedValue = {};
				for (i = 0; i < propValue.length; i++) {
					selectedValue['' + propValue[i]] = true;
				}
				for (i = 0; i < options.length; i++) {
					var selected = selectedValue.hasOwnProperty(options[i].value);
					if (options[i].selected !== selected) {
						options[i].selected = selected;
					}
				}
			} else {
				// Do not set `select.value` as exact behavior isn't consistent across all
				// browsers for all cases.
				selectedValue = '' + propValue;
				for (i = 0; i < options.length; i++) {
					if (options[i].value === selectedValue) {
						options[i].selected = true;
						return;
					}
				}
				if (options.length) {
					options[0].selected = true;
				}
			}
		}

		/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
		var ReactDOMSelect = {
			getHostProps: function (inst, props) {
				return _assign({}, DisabledInputUtils.getHostProps(inst, props), {
					onChange: inst._wrapperState.onChange,
					value: undefined
				});
			},

			mountWrapper: function (inst, props) {
				if (process.env.NODE_ENV !== 'production') {
					checkSelectPropTypes(inst, props);
				}

				var value = LinkedValueUtils.getValue(props);
				inst._wrapperState = {
					pendingUpdate: false,
					initialValue: value != null ? value : props.defaultValue,
					listeners: null,
					onChange: _handleChange.bind(inst),
					wasMultiple: Boolean(props.multiple)
				};

				if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
					didWarnValueDefaultValue = true;
				}
			},

			getSelectValueContext: function (inst) {
				// ReactDOMOption looks at this initial value so the initial generated
				// markup has correct `selected` attributes
				return inst._wrapperState.initialValue;
			},

			postUpdateWrapper: function (inst) {
				var props = inst._currentElement.props;

				// After the initial mount, we control selected-ness manually so don't pass
				// this value down
				inst._wrapperState.initialValue = undefined;

				var wasMultiple = inst._wrapperState.wasMultiple;
				inst._wrapperState.wasMultiple = Boolean(props.multiple);

				var value = LinkedValueUtils.getValue(props);
				if (value != null) {
					inst._wrapperState.pendingUpdate = false;
					updateOptions(inst, Boolean(props.multiple), value);
				} else if (wasMultiple !== Boolean(props.multiple)) {
					// For simplicity, reapply `defaultValue` if `multiple` is toggled.
					if (props.defaultValue != null) {
						updateOptions(inst, Boolean(props.multiple), props.defaultValue);
					} else {
						// Revert the select back to its default unselected state.
						updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
					}
				}
			}
		};

		function _handleChange(event) {
			var props = this._currentElement.props;
			var returnValue = LinkedValueUtils.executeOnChange(props, event);

			if (this._rootNodeID) {
				this._wrapperState.pendingUpdate = true;
			}
			ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
			return returnValue;
		}

		module.exports = ReactDOMSelect;
	}).call(this,require('_process'));
},{"./DisabledInputUtils":630,"./LinkedValueUtils":640,"./ReactDOMComponentTree":658,"./ReactUpdates":708,"_process":615,"fbjs/lib/warning":783,"object-assign":784}],668:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

	'use strict';

	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

	var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
	var getTextContentAccessor = require('./getTextContentAccessor');

	/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
		return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
	function getIEOffsets(node) {
		var selection = document.selection;
		var selectedRange = selection.createRange();
		var selectedLength = selectedRange.text.length;

		// Duplicate selection so we can move range without breaking user selection.
		var fromStart = selectedRange.duplicate();
		fromStart.moveToElementText(node);
		fromStart.setEndPoint('EndToStart', selectedRange);

		var startOffset = fromStart.text.length;
		var endOffset = startOffset + selectedLength;

		return {
			start: startOffset,
			end: endOffset
		};
	}

	/**
 * @param {DOMElement} node
 * @return {?object}
 */
	function getModernOffsets(node) {
		var selection = window.getSelection && window.getSelection();

		if (!selection || selection.rangeCount === 0) {
			return null;
		}

		var anchorNode = selection.anchorNode;
		var anchorOffset = selection.anchorOffset;
		var focusNode = selection.focusNode;
		var focusOffset = selection.focusOffset;

		var currentRange = selection.getRangeAt(0);

		// In Firefox, range.startContainer and range.endContainer can be "anonymous
		// divs", e.g. the up/down buttons on an <input type="number">. Anonymous
		// divs do not seem to expose properties, triggering a "Permission denied
		// error" if any of its properties are accessed. The only seemingly possible
		// way to avoid erroring is to access a property that typically works for
		// non-anonymous divs and catch any error that may otherwise arise. See
		// https://bugzilla.mozilla.org/show_bug.cgi?id=208427
		try {
			/* eslint-disable no-unused-expressions */
			currentRange.startContainer.nodeType;
			currentRange.endContainer.nodeType;
			/* eslint-enable no-unused-expressions */
		} catch (e) {
			return null;
		}

		// If the node and offset values are the same, the selection is collapsed.
		// `Selection.isCollapsed` is available natively, but IE sometimes gets
		// this value wrong.
		var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

		var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

		var tempRange = currentRange.cloneRange();
		tempRange.selectNodeContents(node);
		tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

		var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

		var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
		var end = start + rangeLength;

		// Detect whether the selection is backward.
		var detectionRange = document.createRange();
		detectionRange.setStart(anchorNode, anchorOffset);
		detectionRange.setEnd(focusNode, focusOffset);
		var isBackward = detectionRange.collapsed;

		return {
			start: isBackward ? end : start,
			end: isBackward ? start : end
		};
	}

	/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
	function setIEOffsets(node, offsets) {
		var range = document.selection.createRange().duplicate();
		var start, end;

		if (offsets.end === undefined) {
			start = offsets.start;
			end = start;
		} else if (offsets.start > offsets.end) {
			start = offsets.end;
			end = offsets.start;
		} else {
			start = offsets.start;
			end = offsets.end;
		}

		range.moveToElementText(node);
		range.moveStart('character', start);
		range.setEndPoint('EndToStart', range);
		range.moveEnd('character', end - start);
		range.select();
	}

	/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
	function setModernOffsets(node, offsets) {
		if (!window.getSelection) {
			return;
		}

		var selection = window.getSelection();
		var length = node[getTextContentAccessor()].length;
		var start = Math.min(offsets.start, length);
		var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

		// IE 11 uses modern selection, but doesn't support the extend method.
		// Flip backward selections, so we can set with a single range.
		if (!selection.extend && start > end) {
			var temp = end;
			end = start;
			start = temp;
		}

		var startMarker = getNodeForCharacterOffset(node, start);
		var endMarker = getNodeForCharacterOffset(node, end);

		if (startMarker && endMarker) {
			var range = document.createRange();
			range.setStart(startMarker.node, startMarker.offset);
			selection.removeAllRanges();

			if (start > end) {
				selection.addRange(range);
				selection.extend(endMarker.node, endMarker.offset);
			} else {
				range.setEnd(endMarker.node, endMarker.offset);
				selection.addRange(range);
			}
		}
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
		/**
   * @param {DOMElement} node
   */
		getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

		/**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
		setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":744,"./getTextContentAccessor":745,"fbjs/lib/ExecutionEnvironment":760}],669:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var DOMChildrenOperations = require('./DOMChildrenOperations');
		var DOMLazyTree = require('./DOMLazyTree');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');

		var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
		var invariant = require('fbjs/lib/invariant');
		var validateDOMNesting = require('./validateDOMNesting');

		/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
		var ReactDOMTextComponent = function (text) {
			// TODO: This is really a ReactText (ReactNode), not a ReactElement
			this._currentElement = text;
			this._stringText = '' + text;
			// ReactDOMComponentTree uses these:
			this._hostNode = null;
			this._hostParent = null;

			// Properties
			this._domID = 0;
			this._mountIndex = 0;
			this._closingComment = null;
			this._commentNodes = null;
		};

		_assign(ReactDOMTextComponent.prototype, {

			/**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
			mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
				if (process.env.NODE_ENV !== 'production') {
					var parentInfo;
					if (hostParent != null) {
						parentInfo = hostParent._ancestorInfo;
					} else if (hostContainerInfo != null) {
						parentInfo = hostContainerInfo._ancestorInfo;
					}
					if (parentInfo) {
						// parentInfo should always be present except for the top-level
						// component when server rendering
						validateDOMNesting(null, this._stringText, this, parentInfo);
					}
				}

				var domID = hostContainerInfo._idCounter++;
				var openingValue = ' react-text: ' + domID + ' ';
				var closingValue = ' /react-text ';
				this._domID = domID;
				this._hostParent = hostParent;
				if (transaction.useCreateElement) {
					var ownerDocument = hostContainerInfo._ownerDocument;
					var openingComment = ownerDocument.createComment(openingValue);
					var closingComment = ownerDocument.createComment(closingValue);
					var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
					DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
					if (this._stringText) {
						DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
					}
					DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
					ReactDOMComponentTree.precacheNode(this, openingComment);
					this._closingComment = closingComment;
					return lazyTree;
				} else {
					var escapedText = escapeTextContentForBrowser(this._stringText);

					if (transaction.renderToStaticMarkup) {
						// Normally we'd wrap this between comment nodes for the reasons stated
						// above, but since this is a situation where React won't take over
						// (static pages), we can simply return the text as it is.
						return escapedText;
					}

					return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
				}
			},

			/**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
			receiveComponent: function (nextText, transaction) {
				if (nextText !== this._currentElement) {
					this._currentElement = nextText;
					var nextStringText = '' + nextText;
					if (nextStringText !== this._stringText) {
						// TODO: Save this as pending props and use performUpdateIfNecessary
						// and/or updateComponent to do the actual update for consistency with
						// other component types?
						this._stringText = nextStringText;
						var commentNodes = this.getHostNode();
						DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
					}
				}
			},

			getHostNode: function () {
				var hostNode = this._commentNodes;
				if (hostNode) {
					return hostNode;
				}
				if (!this._closingComment) {
					var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
					var node = openingComment.nextSibling;
					while (true) {
						!(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
						if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
							this._closingComment = node;
							break;
						}
						node = node.nextSibling;
					}
				}
				hostNode = [this._hostNode, this._closingComment];
				this._commentNodes = hostNode;
				return hostNode;
			},

			unmountComponent: function () {
				this._closingComment = null;
				this._commentNodes = null;
				ReactDOMComponentTree.uncacheNode(this);
			}

		});

		module.exports = ReactDOMTextComponent;
	}).call(this,require('_process'));
},{"./DOMChildrenOperations":623,"./DOMLazyTree":624,"./ReactDOMComponentTree":658,"./escapeTextContentForBrowser":734,"./reactProdInvariant":752,"./validateDOMNesting":758,"_process":615,"fbjs/lib/invariant":774,"object-assign":784}],670:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var DisabledInputUtils = require('./DisabledInputUtils');
		var LinkedValueUtils = require('./LinkedValueUtils');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactUpdates = require('./ReactUpdates');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		var didWarnValueLink = false;
		var didWarnValDefaultVal = false;

		function forceUpdateIfMounted() {
			if (this._rootNodeID) {
				// DOM component is still mounted; update
				ReactDOMTextarea.updateWrapper(this);
			}
		}

		/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
		var ReactDOMTextarea = {
			getHostProps: function (inst, props) {
				!(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

				// Always set children to the same thing. In IE9, the selection range will
				// get reset if `textContent` is mutated.  We could add a check in setTextContent
				// to only set the value if/when the value differs from the node value (which would
				// completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
				// The value can be a boolean or object so that's why it's forced to be a string.
				var hostProps = _assign({}, DisabledInputUtils.getHostProps(inst, props), {
					value: undefined,
					defaultValue: undefined,
					children: '' + inst._wrapperState.initialValue,
					onChange: inst._wrapperState.onChange
				});

				return hostProps;
			},

			mountWrapper: function (inst, props) {
				if (process.env.NODE_ENV !== 'production') {
					LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
					if (props.valueLink !== undefined && !didWarnValueLink) {
						process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
						didWarnValueLink = true;
					}
					if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
						process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
						didWarnValDefaultVal = true;
					}
				}

				var value = LinkedValueUtils.getValue(props);
				var initialValue = value;

				// Only bother fetching default value if we're going to use it
				if (value == null) {
					var defaultValue = props.defaultValue;
					// TODO (yungsters): Remove support for children content in <textarea>.
					var children = props.children;
					if (children != null) {
						if (process.env.NODE_ENV !== 'production') {
							process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
						}
						!(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
						if (Array.isArray(children)) {
							!(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
							children = children[0];
						}

						defaultValue = '' + children;
					}
					if (defaultValue == null) {
						defaultValue = '';
					}
					initialValue = defaultValue;
				}

				inst._wrapperState = {
					initialValue: '' + initialValue,
					listeners: null,
					onChange: _handleChange.bind(inst)
				};
			},

			updateWrapper: function (inst) {
				var props = inst._currentElement.props;

				var node = ReactDOMComponentTree.getNodeFromInstance(inst);
				var value = LinkedValueUtils.getValue(props);
				if (value != null) {
					// Cast `value` to a string to ensure the value is set correctly. While
					// browsers typically do this as necessary, jsdom doesn't.
					var newValue = '' + value;

					// To avoid side effects (such as losing text selection), only set value if changed
					if (newValue !== node.value) {
						node.value = newValue;
					}
					if (props.defaultValue == null) {
						node.defaultValue = newValue;
					}
				}
				if (props.defaultValue != null) {
					node.defaultValue = props.defaultValue;
				}
			},

			postMountWrapper: function (inst) {
				// This is in postMount because we need access to the DOM node, which is not
				// available until after the component has mounted.
				var node = ReactDOMComponentTree.getNodeFromInstance(inst);

				// Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
				node.value = node.textContent; // Detach value from defaultValue
			}
		};

		function _handleChange(event) {
			var props = this._currentElement.props;
			var returnValue = LinkedValueUtils.executeOnChange(props, event);
			ReactUpdates.asap(forceUpdateIfMounted, this);
			return returnValue;
		}

		module.exports = ReactDOMTextarea;
	}).call(this,require('_process'));
},{"./DisabledInputUtils":630,"./LinkedValueUtils":640,"./ReactDOMComponentTree":658,"./ReactUpdates":708,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783,"object-assign":784}],671:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTreeTraversal
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
		function getLowestCommonAncestor(instA, instB) {
			!('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
			!('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

			var depthA = 0;
			for (var tempA = instA; tempA; tempA = tempA._hostParent) {
				depthA++;
			}
			var depthB = 0;
			for (var tempB = instB; tempB; tempB = tempB._hostParent) {
				depthB++;
			}

			// If A is deeper, crawl up.
			while (depthA - depthB > 0) {
				instA = instA._hostParent;
				depthA--;
			}

			// If B is deeper, crawl up.
			while (depthB - depthA > 0) {
				instB = instB._hostParent;
				depthB--;
			}

			// Walk in lockstep until we find a match.
			var depth = depthA;
			while (depth--) {
				if (instA === instB) {
					return instA;
				}
				instA = instA._hostParent;
				instB = instB._hostParent;
			}
			return null;
		}

		/**
 * Return if A is an ancestor of B.
 */
		function isAncestor(instA, instB) {
			!('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
			!('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

			while (instB) {
				if (instB === instA) {
					return true;
				}
				instB = instB._hostParent;
			}
			return false;
		}

		/**
 * Return the parent instance of the passed-in instance.
 */
		function getParentInstance(inst) {
			!('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

			return inst._hostParent;
		}

		/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
		function traverseTwoPhase(inst, fn, arg) {
			var path = [];
			while (inst) {
				path.push(inst);
				inst = inst._hostParent;
			}
			var i;
			for (i = path.length; i-- > 0;) {
				fn(path[i], false, arg);
			}
			for (i = 0; i < path.length; i++) {
				fn(path[i], true, arg);
			}
		}

		/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
		function traverseEnterLeave(from, to, fn, argFrom, argTo) {
			var common = from && to ? getLowestCommonAncestor(from, to) : null;
			var pathFrom = [];
			while (from && from !== common) {
				pathFrom.push(from);
				from = from._hostParent;
			}
			var pathTo = [];
			while (to && to !== common) {
				pathTo.push(to);
				to = to._hostParent;
			}
			var i;
			for (i = 0; i < pathFrom.length; i++) {
				fn(pathFrom[i], true, argFrom);
			}
			for (i = pathTo.length; i-- > 0;) {
				fn(pathTo[i], false, argTo);
			}
		}

		module.exports = {
			isAncestor: isAncestor,
			getLowestCommonAncestor: getLowestCommonAncestor,
			getParentInstance: getParentInstance,
			traverseTwoPhase: traverseTwoPhase,
			traverseEnterLeave: traverseEnterLeave
		};
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],672:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMUnknownPropertyHook
 */

		'use strict';

		var DOMProperty = require('./DOMProperty');
		var EventPluginRegistry = require('./EventPluginRegistry');
		var ReactComponentTreeHook = require('./ReactComponentTreeHook');

		var warning = require('fbjs/lib/warning');

		if (process.env.NODE_ENV !== 'production') {
			var reactProps = {
				children: true,
				dangerouslySetInnerHTML: true,
				key: true,
				ref: true,

				autoFocus: true,
				defaultValue: true,
				valueLink: true,
				defaultChecked: true,
				checkedLink: true,
				innerHTML: true,
				suppressContentEditableWarning: true,
				onFocusIn: true,
				onFocusOut: true
			};
			var warnedProperties = {};

			var validateProperty = function (tagName, name, debugID) {
				if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
					return true;
				}
				if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
					return true;
				}
				if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
					return true;
				}
				warnedProperties[name] = true;
				var lowerCasedName = name.toLowerCase();

				// data-* attributes should be lowercase; suggest the lowercase version
				var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

				var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

				if (standardName != null) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
					return true;
				} else if (registrationName != null) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
					return true;
				} else {
					// We were unable to guess which prop the user intended.
					// It is likely that the user was just blindly spreading/forwarding props
					// Components should be careful to only render valid props/attributes.
					// Warning will be invoked in warnUnknownProperties to allow grouping.
					return false;
				}
			};
		}

		var warnUnknownProperties = function (debugID, element) {
			var unknownProps = [];
			for (var key in element.props) {
				var isValid = validateProperty(element.type, key, debugID);
				if (!isValid) {
					unknownProps.push(key);
				}
			}

			var unknownPropString = unknownProps.map(function (prop) {
				return '`' + prop + '`';
			}).join(', ');

			if (unknownProps.length === 1) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
			} else if (unknownProps.length > 1) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
			}
		};

		function handleElement(debugID, element) {
			if (element == null || typeof element.type !== 'string') {
				return;
			}
			if (element.type.indexOf('-') >= 0 || element.props.is) {
				return;
			}
			warnUnknownProperties(debugID, element);
		}

		var ReactDOMUnknownPropertyHook = {
			onBeforeMountComponent: function (debugID, element) {
				handleElement(debugID, element);
			},
			onBeforeUpdateComponent: function (debugID, element) {
				handleElement(debugID, element);
			}
		};

		module.exports = ReactDOMUnknownPropertyHook;
	}).call(this,require('_process'));
},{"./DOMProperty":626,"./EventPluginRegistry":634,"./ReactComponentTreeHook":651,"_process":615,"fbjs/lib/warning":783}],673:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDebugTool
 */

		'use strict';

		var ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');
		var ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');
		var ReactComponentTreeHook = require('./ReactComponentTreeHook');
		var ReactChildrenMutationWarningHook = require('./ReactChildrenMutationWarningHook');
		var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

		var performanceNow = require('fbjs/lib/performanceNow');
		var warning = require('fbjs/lib/warning');

		var hooks = [];
		var didHookThrowForEvent = {};

		function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
			try {
				fn.call(context, arg1, arg2, arg3, arg4, arg5);
			} catch (e) {
				process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
				didHookThrowForEvent[event] = true;
			}
		}

		function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
			for (var i = 0; i < hooks.length; i++) {
				var hook = hooks[i];
				var fn = hook[event];
				if (fn) {
					callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
				}
			}
		}

		var isProfiling = false;
		var flushHistory = [];
		var lifeCycleTimerStack = [];
		var currentFlushNesting = 0;
		var currentFlushMeasurements = null;
		var currentFlushStartTime = null;
		var currentTimerDebugID = null;
		var currentTimerStartTime = null;
		var currentTimerNestedFlushDuration = null;
		var currentTimerType = null;

		var lifeCycleTimerHasWarned = false;

		function clearHistory() {
			ReactComponentTreeHook.purgeUnmountedComponents();
			ReactHostOperationHistoryHook.clearHistory();
		}

		function getTreeSnapshot(registeredIDs) {
			return registeredIDs.reduce(function (tree, id) {
				var ownerID = ReactComponentTreeHook.getOwnerID(id);
				var parentID = ReactComponentTreeHook.getParentID(id);
				tree[id] = {
					displayName: ReactComponentTreeHook.getDisplayName(id),
					text: ReactComponentTreeHook.getText(id),
					updateCount: ReactComponentTreeHook.getUpdateCount(id),
					childIDs: ReactComponentTreeHook.getChildIDs(id),
					// Text nodes don't have owners but this is close enough.
					ownerID: ownerID || ReactComponentTreeHook.getOwnerID(parentID),
					parentID: parentID
				};
				return tree;
			}, {});
		}

		function resetMeasurements() {
			var previousStartTime = currentFlushStartTime;
			var previousMeasurements = currentFlushMeasurements || [];
			var previousOperations = ReactHostOperationHistoryHook.getHistory();

			if (currentFlushNesting === 0) {
				currentFlushStartTime = null;
				currentFlushMeasurements = null;
				clearHistory();
				return;
			}

			if (previousMeasurements.length || previousOperations.length) {
				var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
				flushHistory.push({
					duration: performanceNow() - previousStartTime,
					measurements: previousMeasurements || [],
					operations: previousOperations || [],
					treeSnapshot: getTreeSnapshot(registeredIDs)
				});
			}

			clearHistory();
			currentFlushStartTime = performanceNow();
			currentFlushMeasurements = [];
		}

		function checkDebugID(debugID) {
			var allowRoot = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

			if (allowRoot && debugID === 0) {
				return;
			}
			if (!debugID) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
			}
		}

		function beginLifeCycleTimer(debugID, timerType) {
			if (currentFlushNesting === 0) {
				return;
			}
			if (currentTimerType && !lifeCycleTimerHasWarned) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
				lifeCycleTimerHasWarned = true;
			}
			currentTimerStartTime = performanceNow();
			currentTimerNestedFlushDuration = 0;
			currentTimerDebugID = debugID;
			currentTimerType = timerType;
		}

		function endLifeCycleTimer(debugID, timerType) {
			if (currentFlushNesting === 0) {
				return;
			}
			if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
				lifeCycleTimerHasWarned = true;
			}
			if (isProfiling) {
				currentFlushMeasurements.push({
					timerType: timerType,
					instanceID: debugID,
					duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
				});
			}
			currentTimerStartTime = null;
			currentTimerNestedFlushDuration = null;
			currentTimerDebugID = null;
			currentTimerType = null;
		}

		function pauseCurrentLifeCycleTimer() {
			var currentTimer = {
				startTime: currentTimerStartTime,
				nestedFlushStartTime: performanceNow(),
				debugID: currentTimerDebugID,
				timerType: currentTimerType
			};
			lifeCycleTimerStack.push(currentTimer);
			currentTimerStartTime = null;
			currentTimerNestedFlushDuration = null;
			currentTimerDebugID = null;
			currentTimerType = null;
		}

		function resumeCurrentLifeCycleTimer() {
			var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop();

			var startTime = _lifeCycleTimerStack$.startTime;
			var nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime;
			var debugID = _lifeCycleTimerStack$.debugID;
			var timerType = _lifeCycleTimerStack$.timerType;

			var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
			currentTimerStartTime = startTime;
			currentTimerNestedFlushDuration += nestedFlushDuration;
			currentTimerDebugID = debugID;
			currentTimerType = timerType;
		}

		var ReactDebugTool = {
			addHook: function (hook) {
				hooks.push(hook);
			},
			removeHook: function (hook) {
				for (var i = 0; i < hooks.length; i++) {
					if (hooks[i] === hook) {
						hooks.splice(i, 1);
						i--;
					}
				}
			},
			isProfiling: function () {
				return isProfiling;
			},
			beginProfiling: function () {
				if (isProfiling) {
					return;
				}

				isProfiling = true;
				flushHistory.length = 0;
				resetMeasurements();
				ReactDebugTool.addHook(ReactHostOperationHistoryHook);
			},
			endProfiling: function () {
				if (!isProfiling) {
					return;
				}

				isProfiling = false;
				resetMeasurements();
				ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
			},
			getFlushHistory: function () {
				return flushHistory;
			},
			onBeginFlush: function () {
				currentFlushNesting++;
				resetMeasurements();
				pauseCurrentLifeCycleTimer();
				emitEvent('onBeginFlush');
			},
			onEndFlush: function () {
				resetMeasurements();
				currentFlushNesting--;
				resumeCurrentLifeCycleTimer();
				emitEvent('onEndFlush');
			},
			onBeginLifeCycleTimer: function (debugID, timerType) {
				checkDebugID(debugID);
				emitEvent('onBeginLifeCycleTimer', debugID, timerType);
				beginLifeCycleTimer(debugID, timerType);
			},
			onEndLifeCycleTimer: function (debugID, timerType) {
				checkDebugID(debugID);
				endLifeCycleTimer(debugID, timerType);
				emitEvent('onEndLifeCycleTimer', debugID, timerType);
			},
			onBeginProcessingChildContext: function () {
				emitEvent('onBeginProcessingChildContext');
			},
			onEndProcessingChildContext: function () {
				emitEvent('onEndProcessingChildContext');
			},
			onHostOperation: function (debugID, type, payload) {
				checkDebugID(debugID);
				emitEvent('onHostOperation', debugID, type, payload);
			},
			onSetState: function () {
				emitEvent('onSetState');
			},
			onSetChildren: function (debugID, childDebugIDs) {
				checkDebugID(debugID);
				childDebugIDs.forEach(checkDebugID);
				emitEvent('onSetChildren', debugID, childDebugIDs);
			},
			onBeforeMountComponent: function (debugID, element, parentDebugID) {
				checkDebugID(debugID);
				checkDebugID(parentDebugID, true);
				emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
			},
			onMountComponent: function (debugID) {
				checkDebugID(debugID);
				emitEvent('onMountComponent', debugID);
			},
			onBeforeUpdateComponent: function (debugID, element) {
				checkDebugID(debugID);
				emitEvent('onBeforeUpdateComponent', debugID, element);
			},
			onUpdateComponent: function (debugID) {
				checkDebugID(debugID);
				emitEvent('onUpdateComponent', debugID);
			},
			onBeforeUnmountComponent: function (debugID) {
				checkDebugID(debugID);
				emitEvent('onBeforeUnmountComponent', debugID);
			},
			onUnmountComponent: function (debugID) {
				checkDebugID(debugID);
				emitEvent('onUnmountComponent', debugID);
			},
			onTestEvent: function () {
				emitEvent('onTestEvent');
			}
		};

		// TODO remove these when RN/www gets updated
		ReactDebugTool.addDevtool = ReactDebugTool.addHook;
		ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

		ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
		ReactDebugTool.addHook(ReactComponentTreeHook);
		ReactDebugTool.addHook(ReactChildrenMutationWarningHook);
		var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
		if (/[?&]react_perf\b/.test(url)) {
			ReactDebugTool.beginProfiling();
		}

		module.exports = ReactDebugTool;
	}).call(this,require('_process'));
},{"./ReactChildrenMutationWarningHook":646,"./ReactComponentTreeHook":651,"./ReactHostOperationHistoryHook":684,"./ReactInvalidSetStateWarningHook":689,"_process":615,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/performanceNow":781,"fbjs/lib/warning":783}],674:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

	'use strict';

	var _assign = require('object-assign');

	var ReactUpdates = require('./ReactUpdates');
	var Transaction = require('./Transaction');

	var emptyFunction = require('fbjs/lib/emptyFunction');

	var RESET_BATCHED_UPDATES = {
		initialize: emptyFunction,
		close: function () {
			ReactDefaultBatchingStrategy.isBatchingUpdates = false;
		}
	};

	var FLUSH_BATCHED_UPDATES = {
		initialize: emptyFunction,
		close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
		this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
		getTransactionWrappers: function () {
			return TRANSACTION_WRAPPERS;
		}
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
		isBatchingUpdates: false,

		/**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
		batchedUpdates: function (callback, a, b, c, d, e) {
			var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

			ReactDefaultBatchingStrategy.isBatchingUpdates = true;

			// The code is written this way to avoid extra allocations
			if (alreadyBatchingUpdates) {
				callback(a, b, c, d, e);
			} else {
				transaction.perform(callback, null, a, b, c, d, e);
			}
		}
	};

	module.exports = ReactDefaultBatchingStrategy;
},{"./ReactUpdates":708,"./Transaction":726,"fbjs/lib/emptyFunction":766,"object-assign":784}],675:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

	'use strict';

	var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
	var ChangeEventPlugin = require('./ChangeEventPlugin');
	var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
	var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
	var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
	var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
	var ReactDOMComponent = require('./ReactDOMComponent');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');
	var ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');
	var ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');
	var ReactDOMTextComponent = require('./ReactDOMTextComponent');
	var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
	var ReactEventListener = require('./ReactEventListener');
	var ReactInjection = require('./ReactInjection');
	var ReactReconcileTransaction = require('./ReactReconcileTransaction');
	var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');
	var SelectEventPlugin = require('./SelectEventPlugin');
	var SimpleEventPlugin = require('./SimpleEventPlugin');

	var alreadyInjected = false;

	function inject() {
		if (alreadyInjected) {
			// TODO: This is currently true because these injections are shared between
			// the client and the server package. They should be built independently
			// and not share any injection state. Then this problem will be solved.
			return;
		}
		alreadyInjected = true;

		ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

		/**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
		ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
		ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
		ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

		/**
   * Some important event plugins included by default (without having to require
   * them).
   */
		ReactInjection.EventPluginHub.injectEventPluginsByName({
			SimpleEventPlugin: SimpleEventPlugin,
			EnterLeaveEventPlugin: EnterLeaveEventPlugin,
			ChangeEventPlugin: ChangeEventPlugin,
			SelectEventPlugin: SelectEventPlugin,
			BeforeInputEventPlugin: BeforeInputEventPlugin
		});

		ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

		ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

		ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
		ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

		ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
			return new ReactDOMEmptyComponent(instantiate);
		});

		ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
		ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

		ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
		inject: inject
	};
},{"./BeforeInputEventPlugin":618,"./ChangeEventPlugin":622,"./DefaultEventPluginOrder":629,"./EnterLeaveEventPlugin":631,"./HTMLDOMPropertyConfig":638,"./ReactComponentBrowserEnvironment":649,"./ReactDOMComponent":656,"./ReactDOMComponentTree":658,"./ReactDOMEmptyComponent":660,"./ReactDOMTextComponent":669,"./ReactDOMTreeTraversal":671,"./ReactDefaultBatchingStrategy":674,"./ReactEventListener":681,"./ReactInjection":685,"./ReactReconcileTransaction":702,"./SVGDOMPropertyConfig":710,"./SelectEventPlugin":711,"./SimpleEventPlugin":712}],676:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

		'use strict';

		var _assign = require('object-assign');

		var ReactCurrentOwner = require('./ReactCurrentOwner');

		var warning = require('fbjs/lib/warning');
		var canDefineProperty = require('./canDefineProperty');
		var hasOwnProperty = Object.prototype.hasOwnProperty;

		// The Symbol used to tag the ReactElement type. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

		var RESERVED_PROPS = {
			key: true,
			ref: true,
			__self: true,
			__source: true
		};

		var specialPropKeyWarningShown, specialPropRefWarningShown;

		function hasValidRef(config) {
			if (process.env.NODE_ENV !== 'production') {
				if (hasOwnProperty.call(config, 'ref')) {
					var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
					if (getter && getter.isReactWarning) {
						return false;
					}
				}
			}
			return config.ref !== undefined;
		}

		function hasValidKey(config) {
			if (process.env.NODE_ENV !== 'production') {
				if (hasOwnProperty.call(config, 'key')) {
					var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
					if (getter && getter.isReactWarning) {
						return false;
					}
				}
			}
			return config.key !== undefined;
		}

		function defineKeyPropWarningGetter(props, displayName) {
			var warnAboutAccessingKey = function () {
				if (!specialPropKeyWarningShown) {
					specialPropKeyWarningShown = true;
					process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
				}
			};
			warnAboutAccessingKey.isReactWarning = true;
			Object.defineProperty(props, 'key', {
				get: warnAboutAccessingKey,
				configurable: true
			});
		}

		function defineRefPropWarningGetter(props, displayName) {
			var warnAboutAccessingRef = function () {
				if (!specialPropRefWarningShown) {
					specialPropRefWarningShown = true;
					process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
				}
			};
			warnAboutAccessingRef.isReactWarning = true;
			Object.defineProperty(props, 'ref', {
				get: warnAboutAccessingRef,
				configurable: true
			});
		}

		/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
		var ReactElement = function (type, key, ref, self, source, owner, props) {
			var element = {
				// This tag allow us to uniquely identify this as a React Element
				$$typeof: REACT_ELEMENT_TYPE,

				// Built-in properties that belong on the element
				type: type,
				key: key,
				ref: ref,
				props: props,

				// Record the component responsible for creating this element.
				_owner: owner
			};

			if (process.env.NODE_ENV !== 'production') {
				// The validation flag is currently mutative. We put it on
				// an external backing store so that we can freeze the whole object.
				// This can be replaced with a WeakMap once they are implemented in
				// commonly used development environments.
				element._store = {};
				var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;

				// To make comparing ReactElements easier for testing purposes, we make
				// the validation flag non-enumerable (where possible, which should
				// include every environment we run tests in), so the test framework
				// ignores it.
				if (canDefineProperty) {
					Object.defineProperty(element._store, 'validated', {
						configurable: false,
						enumerable: false,
						writable: true,
						value: false
					});
					// self and source are DEV only properties.
					Object.defineProperty(element, '_self', {
						configurable: false,
						enumerable: false,
						writable: false,
						value: self
					});
					Object.defineProperty(element, '_shadowChildren', {
						configurable: false,
						enumerable: false,
						writable: false,
						value: shadowChildren
					});
					// Two elements created in two different places should be considered
					// equal for testing purposes and therefore we hide it from enumeration.
					Object.defineProperty(element, '_source', {
						configurable: false,
						enumerable: false,
						writable: false,
						value: source
					});
				} else {
					element._store.validated = false;
					element._self = self;
					element._shadowChildren = shadowChildren;
					element._source = source;
				}
				if (Object.freeze) {
					Object.freeze(element.props);
					Object.freeze(element);
				}
			}

			return element;
		};

		/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
		ReactElement.createElement = function (type, config, children) {
			var propName;

			// Reserved names are extracted
			var props = {};

			var key = null;
			var ref = null;
			var self = null;
			var source = null;

			if (config != null) {
				if (hasValidRef(config)) {
					ref = config.ref;
				}
				if (hasValidKey(config)) {
					key = '' + config.key;
				}

				self = config.__self === undefined ? null : config.__self;
				source = config.__source === undefined ? null : config.__source;
				// Remaining properties are added to a new props object
				for (propName in config) {
					if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
						props[propName] = config[propName];
					}
				}
			}

			// Children can be more than one argument, and those are transferred onto
			// the newly allocated props object.
			var childrenLength = arguments.length - 2;
			if (childrenLength === 1) {
				props.children = children;
			} else if (childrenLength > 1) {
				var childArray = Array(childrenLength);
				for (var i = 0; i < childrenLength; i++) {
					childArray[i] = arguments[i + 2];
				}
				props.children = childArray;
			}

			// Resolve default props
			if (type && type.defaultProps) {
				var defaultProps = type.defaultProps;
				for (propName in defaultProps) {
					if (props[propName] === undefined) {
						props[propName] = defaultProps[propName];
					}
				}
			}
			if (process.env.NODE_ENV !== 'production') {
				if (key || ref) {
					if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
						var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
						if (key) {
							defineKeyPropWarningGetter(props, displayName);
						}
						if (ref) {
							defineRefPropWarningGetter(props, displayName);
						}
					}
				}
			}
			return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		};

		/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
		ReactElement.createFactory = function (type) {
			var factory = ReactElement.createElement.bind(null, type);
			// Expose the type on the factory and the prototype so that it can be
			// easily accessed on elements. E.g. `<Foo />.type === Foo`.
			// This should not be named `constructor` since this may not be the function
			// that created the element, and it may not even be a constructor.
			// Legacy hook TODO: Warn if this is accessed
			factory.type = type;
			return factory;
		};

		ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
			var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

			return newElement;
		};

		/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
		ReactElement.cloneElement = function (element, config, children) {
			var propName;

			// Original props are copied
			var props = _assign({}, element.props);

			// Reserved names are extracted
			var key = element.key;
			var ref = element.ref;
			// Self is preserved since the owner is preserved.
			var self = element._self;
			// Source is preserved since cloneElement is unlikely to be targeted by a
			// transpiler, and the original source is probably a better indicator of the
			// true owner.
			var source = element._source;

			// Owner will be preserved, unless ref is overridden
			var owner = element._owner;

			if (config != null) {
				if (hasValidRef(config)) {
					// Silently steal the ref from the parent.
					ref = config.ref;
					owner = ReactCurrentOwner.current;
				}
				if (hasValidKey(config)) {
					key = '' + config.key;
				}

				// Remaining properties override existing props
				var defaultProps;
				if (element.type && element.type.defaultProps) {
					defaultProps = element.type.defaultProps;
				}
				for (propName in config) {
					if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
						if (config[propName] === undefined && defaultProps !== undefined) {
							// Resolve default props
							props[propName] = defaultProps[propName];
						} else {
							props[propName] = config[propName];
						}
					}
				}
			}

			// Children can be more than one argument, and those are transferred onto
			// the newly allocated props object.
			var childrenLength = arguments.length - 2;
			if (childrenLength === 1) {
				props.children = children;
			} else if (childrenLength > 1) {
				var childArray = Array(childrenLength);
				for (var i = 0; i < childrenLength; i++) {
					childArray[i] = arguments[i + 2];
				}
				props.children = childArray;
			}

			return ReactElement(element.type, key, ref, self, source, owner, props);
		};

		/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
		ReactElement.isValidElement = function (object) {
			return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		};

		ReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;

		module.exports = ReactElement;
	}).call(this,require('_process'));
},{"./ReactCurrentOwner":653,"./canDefineProperty":730,"_process":615,"fbjs/lib/warning":783,"object-assign":784}],677:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

		/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

		'use strict';

		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactComponentTreeHook = require('./ReactComponentTreeHook');
		var ReactElement = require('./ReactElement');
		var ReactPropTypeLocations = require('./ReactPropTypeLocations');

		var checkReactTypeSpec = require('./checkReactTypeSpec');

		var canDefineProperty = require('./canDefineProperty');
		var getIteratorFn = require('./getIteratorFn');
		var warning = require('fbjs/lib/warning');

		function getDeclarationErrorAddendum() {
			if (ReactCurrentOwner.current) {
				var name = ReactCurrentOwner.current.getName();
				if (name) {
					return ' Check the render method of `' + name + '`.';
				}
			}
			return '';
		}

		/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
		var ownerHasKeyUseWarning = {};

		function getCurrentComponentErrorInfo(parentType) {
			var info = getDeclarationErrorAddendum();

			if (!info) {
				var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
				if (parentName) {
					info = ' Check the top-level render call using <' + parentName + '>.';
				}
			}
			return info;
		}

		/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
		function validateExplicitKey(element, parentType) {
			if (!element._store || element._store.validated || element.key != null) {
				return;
			}
			element._store.validated = true;

			var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

			var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
			if (memoizer[currentComponentErrorInfo]) {
				return;
			}
			memoizer[currentComponentErrorInfo] = true;

			// Usually the current owner is the offender, but if it accepts children as a
			// property, it may be the creator of the child that's responsible for
			// assigning it a key.
			var childOwner = '';
			if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
				// Give the component that originally created this child.
				childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
			}

			process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
		}

		/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
		function validateChildKeys(node, parentType) {
			if (typeof node !== 'object') {
				return;
			}
			if (Array.isArray(node)) {
				for (var i = 0; i < node.length; i++) {
					var child = node[i];
					if (ReactElement.isValidElement(child)) {
						validateExplicitKey(child, parentType);
					}
				}
			} else if (ReactElement.isValidElement(node)) {
				// This element was passed in a valid location.
				if (node._store) {
					node._store.validated = true;
				}
			} else if (node) {
				var iteratorFn = getIteratorFn(node);
				// Entry iterators provide implicit keys.
				if (iteratorFn) {
					if (iteratorFn !== node.entries) {
						var iterator = iteratorFn.call(node);
						var step;
						while (!(step = iterator.next()).done) {
							if (ReactElement.isValidElement(step.value)) {
								validateExplicitKey(step.value, parentType);
							}
						}
					}
				}
			}
		}

		/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
		function validatePropTypes(element) {
			var componentClass = element.type;
			if (typeof componentClass !== 'function') {
				return;
			}
			var name = componentClass.displayName || componentClass.name;
			if (componentClass.propTypes) {
				checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);
			}
			if (typeof componentClass.getDefaultProps === 'function') {
				process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
			}
		}

		var ReactElementValidator = {

			createElement: function (type, props, children) {
				var validType = typeof type === 'string' || typeof type === 'function';
				// We warn in this case but don't throw. We expect the element creation to
				// succeed and there will likely be errors in render.
				if (!validType) {
					process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
				}

				var element = ReactElement.createElement.apply(this, arguments);

				// The result can be nullish if a mock or a custom function is used.
				// TODO: Drop this when these are no longer allowed as the type argument.
				if (element == null) {
					return element;
				}

				// Skip key warning if the type isn't valid since our key validation logic
				// doesn't expect a non-string/function type and can throw confusing errors.
				// We don't want exception behavior to differ between dev and prod.
				// (Rendering will throw with a helpful message and as soon as the type is
				// fixed, the key warnings will appear.)
				if (validType) {
					for (var i = 2; i < arguments.length; i++) {
						validateChildKeys(arguments[i], type);
					}
				}

				validatePropTypes(element);

				return element;
			},

			createFactory: function (type) {
				var validatedFactory = ReactElementValidator.createElement.bind(null, type);
				// Legacy hook TODO: Warn if this is accessed
				validatedFactory.type = type;

				if (process.env.NODE_ENV !== 'production') {
					if (canDefineProperty) {
						Object.defineProperty(validatedFactory, 'type', {
							enumerable: false,
							get: function () {
								process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
								Object.defineProperty(this, 'type', {
									value: type
								});
								return type;
							}
						});
					}
				}

				return validatedFactory;
			},

			cloneElement: function (element, props, children) {
				var newElement = ReactElement.cloneElement.apply(this, arguments);
				for (var i = 2; i < arguments.length; i++) {
					validateChildKeys(arguments[i], newElement.type);
				}
				validatePropTypes(newElement);
				return newElement;
			}

		};

		module.exports = ReactElementValidator;
	}).call(this,require('_process'));
},{"./ReactComponentTreeHook":651,"./ReactCurrentOwner":653,"./ReactElement":676,"./ReactPropTypeLocations":698,"./canDefineProperty":730,"./checkReactTypeSpec":731,"./getIteratorFn":743,"_process":615,"fbjs/lib/warning":783}],678:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
		injectEmptyComponentFactory: function (factory) {
			emptyComponentFactory = factory;
		}
	};

	var ReactEmptyComponent = {
		create: function (instantiate) {
			return emptyComponentFactory(instantiate);
		}
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;
},{}],679:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 */

		'use strict';

		var caughtError = null;

		/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
		function invokeGuardedCallback(name, func, a, b) {
			try {
				return func(a, b);
			} catch (x) {
				if (caughtError === null) {
					caughtError = x;
				}
				return undefined;
			}
		}

		var ReactErrorUtils = {
			invokeGuardedCallback: invokeGuardedCallback,

			/**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
			invokeGuardedCallbackWithCatch: invokeGuardedCallback,

			/**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
			rethrowCaughtError: function () {
				if (caughtError) {
					var error = caughtError;
					caughtError = null;
					throw error;
				}
			}
		};

		if (process.env.NODE_ENV !== 'production') {
			/**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
			if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
				var fakeNode = document.createElement('react');
				ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
					var boundFunc = func.bind(null, a, b);
					var evtType = 'react-' + name;
					fakeNode.addEventListener(evtType, boundFunc, false);
					var evt = document.createEvent('Event');
					evt.initEvent(evtType, false, false);
					fakeNode.dispatchEvent(evt);
					fakeNode.removeEventListener(evtType, boundFunc, false);
				};
			}
		}

		module.exports = ReactErrorUtils;
	}).call(this,require('_process'));
},{"_process":615}],680:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

	'use strict';

	var EventPluginHub = require('./EventPluginHub');

	function runEventQueueInBatch(events) {
		EventPluginHub.enqueueEvents(events);
		EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

		/**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
		handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
			var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
			runEventQueueInBatch(events);
		}
	};

	module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":633}],681:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 */

	'use strict';

	var _assign = require('object-assign');

	var EventListener = require('fbjs/lib/EventListener');
	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	var PooledClass = require('./PooledClass');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');
	var ReactUpdates = require('./ReactUpdates');

	var getEventTarget = require('./getEventTarget');
	var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

	/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
	function findParent(inst) {
		// TODO: It may be a good idea to cache this to prevent unnecessary DOM
		// traversal, but caching is difficult to do correctly without using a
		// mutation observer to listen for all DOM changes.
		while (inst._hostParent) {
			inst = inst._hostParent;
		}
		var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
		var container = rootNode.parentNode;
		return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
		this.topLevelType = topLevelType;
		this.nativeEvent = nativeEvent;
		this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
		destructor: function () {
			this.topLevelType = null;
			this.nativeEvent = null;
			this.ancestors.length = 0;
		}
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
		var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
		var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

		// Loop through the hierarchy, in case there's any nested components.
		// It's important that we build the array of ancestors before calling any
		// event handlers, because event handlers can modify the DOM, leading to
		// inconsistencies with ReactMount's node cache. See #1105.
		var ancestor = targetInst;
		do {
			bookKeeping.ancestors.push(ancestor);
			ancestor = ancestor && findParent(ancestor);
		} while (ancestor);

		for (var i = 0; i < bookKeeping.ancestors.length; i++) {
			targetInst = bookKeeping.ancestors[i];
			ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
		}
	}

	function scrollValueMonitor(cb) {
		var scrollPosition = getUnboundedScrollPosition(window);
		cb(scrollPosition);
	}

	var ReactEventListener = {
		_enabled: true,
		_handleTopLevel: null,

		WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

		setHandleTopLevel: function (handleTopLevel) {
			ReactEventListener._handleTopLevel = handleTopLevel;
		},

		setEnabled: function (enabled) {
			ReactEventListener._enabled = !!enabled;
		},

		isEnabled: function () {
			return ReactEventListener._enabled;
		},

		/**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
		trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
			var element = handle;
			if (!element) {
				return null;
			}
			return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
		},

		/**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
		trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
			var element = handle;
			if (!element) {
				return null;
			}
			return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
		},

		monitorScrollValue: function (refresh) {
			var callback = scrollValueMonitor.bind(null, refresh);
			EventListener.listen(window, 'scroll', callback);
		},

		dispatchEvent: function (topLevelType, nativeEvent) {
			if (!ReactEventListener._enabled) {
				return;
			}

			var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
			try {
				// Event queue being processed in the same cycle allows
				// `preventDefault`.
				ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
			} finally {
				TopLevelCallbackBookKeeping.release(bookKeeping);
			}
		}
	};

	module.exports = ReactEventListener;
},{"./PooledClass":641,"./ReactDOMComponentTree":658,"./ReactUpdates":708,"./getEventTarget":741,"fbjs/lib/EventListener":759,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/getUnboundedScrollPosition":771,"object-assign":784}],682:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFeatureFlags
 * 
 */

	'use strict';

	var ReactFeatureFlags = {
		// When true, call console.time() before and .timeEnd() after each top-level
		// render (both initial renders and updates). Useful when looking at prod-mode
		// timeline profiles in Chrome, for example.
		logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;
},{}],683:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactHostComponent
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var invariant = require('fbjs/lib/invariant');

		var genericComponentClass = null;
		// This registry keeps track of wrapper classes around host tags.
		var tagToComponentClass = {};
		var textComponentClass = null;

		var ReactHostComponentInjection = {
			// This accepts a class that receives the tag string. This is a catch all
			// that can render any kind of tag.
			injectGenericComponentClass: function (componentClass) {
				genericComponentClass = componentClass;
			},
			// This accepts a text component class that takes the text string to be
			// rendered as props.
			injectTextComponentClass: function (componentClass) {
				textComponentClass = componentClass;
			},
			// This accepts a keyed object with classes as values. Each key represents a
			// tag. That particular tag will use this class instead of the generic one.
			injectComponentClasses: function (componentClasses) {
				_assign(tagToComponentClass, componentClasses);
			}
		};

		/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
		function createInternalComponent(element) {
			!genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
			return new genericComponentClass(element);
		}

		/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
		function createInstanceForText(text) {
			return new textComponentClass(text);
		}

		/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
		function isTextComponent(component) {
			return component instanceof textComponentClass;
		}

		var ReactHostComponent = {
			createInternalComponent: createInternalComponent,
			createInstanceForText: createInstanceForText,
			isTextComponent: isTextComponent,
			injection: ReactHostComponentInjection
		};

		module.exports = ReactHostComponent;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"object-assign":784}],684:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactHostOperationHistoryHook
 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
		onHostOperation: function (debugID, type, payload) {
			history.push({
				instanceID: debugID,
				type: type,
				payload: payload
			});
		},
		clearHistory: function () {
			if (ReactHostOperationHistoryHook._preventClearing) {
				// Should only be used for tests.
				return;
			}

			history = [];
		},
		getHistory: function () {
			return history;
		}
	};

	module.exports = ReactHostOperationHistoryHook;
},{}],685:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

	'use strict';

	var DOMProperty = require('./DOMProperty');
	var EventPluginHub = require('./EventPluginHub');
	var EventPluginUtils = require('./EventPluginUtils');
	var ReactComponentEnvironment = require('./ReactComponentEnvironment');
	var ReactClass = require('./ReactClass');
	var ReactEmptyComponent = require('./ReactEmptyComponent');
	var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
	var ReactHostComponent = require('./ReactHostComponent');
	var ReactUpdates = require('./ReactUpdates');

	var ReactInjection = {
		Component: ReactComponentEnvironment.injection,
		Class: ReactClass.injection,
		DOMProperty: DOMProperty.injection,
		EmptyComponent: ReactEmptyComponent.injection,
		EventPluginHub: EventPluginHub.injection,
		EventPluginUtils: EventPluginUtils.injection,
		EventEmitter: ReactBrowserEventEmitter.injection,
		HostComponent: ReactHostComponent.injection,
		Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;
},{"./DOMProperty":626,"./EventPluginHub":633,"./EventPluginUtils":635,"./ReactBrowserEventEmitter":643,"./ReactClass":647,"./ReactComponentEnvironment":650,"./ReactEmptyComponent":678,"./ReactHostComponent":683,"./ReactUpdates":708}],686:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

	'use strict';

	var ReactDOMSelection = require('./ReactDOMSelection');

	var containsNode = require('fbjs/lib/containsNode');
	var focusNode = require('fbjs/lib/focusNode');
	var getActiveElement = require('fbjs/lib/getActiveElement');

	function isInDocument(node) {
		return containsNode(document.documentElement, node);
	}

	/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
	var ReactInputSelection = {

		hasSelectionCapabilities: function (elem) {
			var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
			return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
		},

		getSelectionInformation: function () {
			var focusedElem = getActiveElement();
			return {
				focusedElem: focusedElem,
				selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
			};
		},

		/**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
		restoreSelection: function (priorSelectionInformation) {
			var curFocusedElem = getActiveElement();
			var priorFocusedElem = priorSelectionInformation.focusedElem;
			var priorSelectionRange = priorSelectionInformation.selectionRange;
			if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
				if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
					ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
				}
				focusNode(priorFocusedElem);
			}
		},

		/**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
		getSelection: function (input) {
			var selection;

			if ('selectionStart' in input) {
				// Modern browser with input or textarea.
				selection = {
					start: input.selectionStart,
					end: input.selectionEnd
				};
			} else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
				// IE8 input.
				var range = document.selection.createRange();
				// There can only be one selection per document in IE, so it must
				// be in our element.
				if (range.parentElement() === input) {
					selection = {
						start: -range.moveStart('character', -input.value.length),
						end: -range.moveEnd('character', -input.value.length)
					};
				}
			} else {
				// Content editable or old IE textarea.
				selection = ReactDOMSelection.getOffsets(input);
			}

			return selection || { start: 0, end: 0 };
		},

		/**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
		setSelection: function (input, offsets) {
			var start = offsets.start;
			var end = offsets.end;
			if (end === undefined) {
				end = start;
			}

			if ('selectionStart' in input) {
				input.selectionStart = start;
				input.selectionEnd = Math.min(end, input.value.length);
			} else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
				var range = input.createTextRange();
				range.collapse(true);
				range.moveStart('character', start);
				range.moveEnd('character', end - start);
				range.select();
			} else {
				ReactDOMSelection.setOffsets(input, offsets);
			}
		}
	};

	module.exports = ReactInputSelection;
},{"./ReactDOMSelection":668,"fbjs/lib/containsNode":763,"fbjs/lib/focusNode":768,"fbjs/lib/getActiveElement":769}],687:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

	'use strict';

	/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

		/**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
		remove: function (key) {
			key._reactInternalInstance = undefined;
		},

		get: function (key) {
			return key._reactInternalInstance;
		},

		has: function (key) {
			return key._reactInternalInstance !== undefined;
		},

		set: function (key, value) {
			key._reactInternalInstance = value;
		}

	};

	module.exports = ReactInstanceMap;
},{}],688:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstrumentation
 */

		'use strict';

		var debugTool = null;

		if (process.env.NODE_ENV !== 'production') {
			var ReactDebugTool = require('./ReactDebugTool');
			debugTool = ReactDebugTool;
		}

		module.exports = { debugTool: debugTool };
	}).call(this,require('_process'));
},{"./ReactDebugTool":673,"_process":615}],689:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInvalidSetStateWarningHook
 */

		'use strict';

		var warning = require('fbjs/lib/warning');

		if (process.env.NODE_ENV !== 'production') {
			var processingChildContext = false;

			var warnInvalidSetState = function () {
				process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
			};
		}

		var ReactInvalidSetStateWarningHook = {
			onBeginProcessingChildContext: function () {
				processingChildContext = true;
			},
			onEndProcessingChildContext: function () {
				processingChildContext = false;
			},
			onSetState: function () {
				warnInvalidSetState();
			}
		};

		module.exports = ReactInvalidSetStateWarningHook;
	}).call(this,require('_process'));
},{"_process":615,"fbjs/lib/warning":783}],690:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

	'use strict';

	var adler32 = require('./adler32');

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
		CHECKSUM_ATTR_NAME: 'data-react-checksum',

		/**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
		addChecksumToMarkup: function (markup) {
			var checksum = adler32(markup);

			// Add checksum (handle both parent tags, comments and self-closing tags)
			if (COMMENT_START.test(markup)) {
				return markup;
			} else {
				return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
			}
		},

		/**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
		canReuseMarkup: function (markup, element) {
			var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
			existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
			var markupChecksum = adler32(markup);
			return markupChecksum === existingChecksum;
		}
	};

	module.exports = ReactMarkupChecksum;
},{"./adler32":729}],691:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var DOMLazyTree = require('./DOMLazyTree');
		var DOMProperty = require('./DOMProperty');
		var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactDOMContainerInfo = require('./ReactDOMContainerInfo');
		var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
		var ReactElement = require('./ReactElement');
		var ReactFeatureFlags = require('./ReactFeatureFlags');
		var ReactInstanceMap = require('./ReactInstanceMap');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var ReactMarkupChecksum = require('./ReactMarkupChecksum');
		var ReactReconciler = require('./ReactReconciler');
		var ReactUpdateQueue = require('./ReactUpdateQueue');
		var ReactUpdates = require('./ReactUpdates');

		var emptyObject = require('fbjs/lib/emptyObject');
		var instantiateReactComponent = require('./instantiateReactComponent');
		var invariant = require('fbjs/lib/invariant');
		var setInnerHTML = require('./setInnerHTML');
		var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
		var warning = require('fbjs/lib/warning');

		var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
		var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

		var ELEMENT_NODE_TYPE = 1;
		var DOC_NODE_TYPE = 9;
		var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

		var instancesByReactRootID = {};

		/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
		function firstDifferenceIndex(string1, string2) {
			var minLen = Math.min(string1.length, string2.length);
			for (var i = 0; i < minLen; i++) {
				if (string1.charAt(i) !== string2.charAt(i)) {
					return i;
				}
			}
			return string1.length === string2.length ? -1 : minLen;
		}

		/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
		function getReactRootElementInContainer(container) {
			if (!container) {
				return null;
			}

			if (container.nodeType === DOC_NODE_TYPE) {
				return container.documentElement;
			} else {
				return container.firstChild;
			}
		}

		function internalGetID(node) {
			// If node is something like a window, document, or text node, none of
			// which support attributes or a .getAttribute method, gracefully return
			// the empty string, as if the attribute were missing.
			return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
		}

		/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
		function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
			var markerName;
			if (ReactFeatureFlags.logTopLevelRenders) {
				var wrappedElement = wrapperInstance._currentElement.props;
				var type = wrappedElement.type;
				markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
				console.time(markerName);
			}

			var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
			);

			if (markerName) {
				console.timeEnd(markerName);
			}

			wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
			ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
		}

		/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
		function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
			var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
				/* useCreateElement */
				!shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
			transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
			ReactUpdates.ReactReconcileTransaction.release(transaction);
		}

		/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
		function unmountComponentFromNode(instance, container, safely) {
			if (process.env.NODE_ENV !== 'production') {
				ReactInstrumentation.debugTool.onBeginFlush();
			}
			ReactReconciler.unmountComponent(instance, safely);
			if (process.env.NODE_ENV !== 'production') {
				ReactInstrumentation.debugTool.onEndFlush();
			}

			if (container.nodeType === DOC_NODE_TYPE) {
				container = container.documentElement;
			}

			// http://jsperf.com/emptying-a-node
			while (container.lastChild) {
				container.removeChild(container.lastChild);
			}
		}

		/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
		function hasNonRootReactChild(container) {
			var rootEl = getReactRootElementInContainer(container);
			if (rootEl) {
				var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
				return !!(inst && inst._hostParent);
			}
		}

		/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
		function nodeIsRenderedByOtherInstance(container) {
			var rootEl = getReactRootElementInContainer(container);
			return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
		}

		/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
		function isValidContainer(node) {
			return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
		}

		/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
		function isReactNode(node) {
			return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
		}

		function getHostRootInstanceInContainer(container) {
			var rootEl = getReactRootElementInContainer(container);
			var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
			return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
		}

		function getTopLevelWrapperInContainer(container) {
			var root = getHostRootInstanceInContainer(container);
			return root ? root._hostContainerInfo._topLevelWrapper : null;
		}

		/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
		var topLevelRootCounter = 1;
		var TopLevelWrapper = function () {
			this.rootID = topLevelRootCounter++;
		};
		TopLevelWrapper.prototype.isReactComponent = {};
		if (process.env.NODE_ENV !== 'production') {
			TopLevelWrapper.displayName = 'TopLevelWrapper';
		}
		TopLevelWrapper.prototype.render = function () {
			// this.props is actually a ReactElement
			return this.props;
		};

		/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
		var ReactMount = {

			TopLevelWrapper: TopLevelWrapper,

			/**
   * Used by devtools. The keys are not important.
   */
			_instancesByReactRootID: instancesByReactRootID,

			/**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
			scrollMonitor: function (container, renderCallback) {
				renderCallback();
			},

			/**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
			_updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
				ReactMount.scrollMonitor(container, function () {
					ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
					if (callback) {
						ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
					}
				});

				return prevComponent;
			},

			/**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
			_renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
				// Various parts of our code (such as ReactCompositeComponent's
				// _renderValidatedComponent) assume that calls to render aren't nested;
				// verify that that's the case.
				process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

				!isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

				ReactBrowserEventEmitter.ensureScrollValueMonitoring();
				var componentInstance = instantiateReactComponent(nextElement, false);

				// The initial render is synchronous but any updates that happen during
				// rendering, in componentWillMount or componentDidMount, will be batched
				// according to the current batching strategy.

				ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

				var wrapperID = componentInstance._instance.rootID;
				instancesByReactRootID[wrapperID] = componentInstance;

				return componentInstance;
			},

			/**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
			renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
				!(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
				return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
			},

			_renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
				ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
				!ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
				// Check if it quacks like an element
					nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

				process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

				var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

				var nextContext;
				if (parentComponent) {
					var parentInst = ReactInstanceMap.get(parentComponent);
					nextContext = parentInst._processChildContext(parentInst._context);
				} else {
					nextContext = emptyObject;
				}

				var prevComponent = getTopLevelWrapperInContainer(container);

				if (prevComponent) {
					var prevWrappedElement = prevComponent._currentElement;
					var prevElement = prevWrappedElement.props;
					if (shouldUpdateReactComponent(prevElement, nextElement)) {
						var publicInst = prevComponent._renderedComponent.getPublicInstance();
						var updatedCallback = callback && function () {
							callback.call(publicInst);
						};
						ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
						return publicInst;
					} else {
						ReactMount.unmountComponentAtNode(container);
					}
				}

				var reactRootElement = getReactRootElementInContainer(container);
				var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
				var containerHasNonRootReactChild = hasNonRootReactChild(container);

				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

					if (!containerHasReactMarkup || reactRootElement.nextSibling) {
						var rootElementSibling = reactRootElement;
						while (rootElementSibling) {
							if (internalGetID(rootElementSibling)) {
								process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
								break;
							}
							rootElementSibling = rootElementSibling.nextSibling;
						}
					}
				}

				var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
				var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
				if (callback) {
					callback.call(component);
				}
				return component;
			},

			/**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
			render: function (nextElement, container, callback) {
				return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
			},

			/**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
			unmountComponentAtNode: function (container) {
				// Various parts of our code (such as ReactCompositeComponent's
				// _renderValidatedComponent) assume that calls to render aren't nested;
				// verify that that's the case. (Strictly speaking, unmounting won't cause a
				// render but we still don't expect to be in a render call here.)
				process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

				!isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

				if (process.env.NODE_ENV !== 'production') {
					process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
				}

				var prevComponent = getTopLevelWrapperInContainer(container);
				if (!prevComponent) {
					// Check if the node being unmounted was rendered by React, but isn't a
					// root node.
					var containerHasNonRootReactChild = hasNonRootReactChild(container);

					// Check if the container itself is a React root node.
					var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

					if (process.env.NODE_ENV !== 'production') {
						process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
					}

					return false;
				}
				delete instancesByReactRootID[prevComponent._instance.rootID];
				ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
				return true;
			},

			_mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
				!isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

				if (shouldReuseMarkup) {
					var rootElement = getReactRootElementInContainer(container);
					if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
						ReactDOMComponentTree.precacheNode(instance, rootElement);
						return;
					} else {
						var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
						rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

						var rootMarkup = rootElement.outerHTML;
						rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

						var normalizedMarkup = markup;
						if (process.env.NODE_ENV !== 'production') {
							// because rootMarkup is retrieved from the DOM, various normalizations
							// will have occurred which will not be present in `markup`. Here,
							// insert markup into a <div> or <iframe> depending on the container
							// type to perform the same normalizations before comparing.
							var normalizer;
							if (container.nodeType === ELEMENT_NODE_TYPE) {
								normalizer = document.createElement('div');
								normalizer.innerHTML = markup;
								normalizedMarkup = normalizer.innerHTML;
							} else {
								normalizer = document.createElement('iframe');
								document.body.appendChild(normalizer);
								normalizer.contentDocument.write(markup);
								normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
								document.body.removeChild(normalizer);
							}
						}

						var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
						var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

						!(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

						if (process.env.NODE_ENV !== 'production') {
							process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
						}
					}
				}

				!(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

				if (transaction.useCreateElement) {
					while (container.lastChild) {
						container.removeChild(container.lastChild);
					}
					DOMLazyTree.insertTreeBefore(container, markup, null);
				} else {
					setInnerHTML(container, markup);
					ReactDOMComponentTree.precacheNode(instance, container.firstChild);
				}

				if (process.env.NODE_ENV !== 'production') {
					var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
					if (hostNode._debugID !== 0) {
						ReactInstrumentation.debugTool.onHostOperation(hostNode._debugID, 'mount', markup.toString());
					}
				}
			}
		};

		module.exports = ReactMount;
	}).call(this,require('_process'));
},{"./DOMLazyTree":624,"./DOMProperty":626,"./ReactBrowserEventEmitter":643,"./ReactCurrentOwner":653,"./ReactDOMComponentTree":658,"./ReactDOMContainerInfo":659,"./ReactDOMFeatureFlags":662,"./ReactElement":676,"./ReactFeatureFlags":682,"./ReactInstanceMap":687,"./ReactInstrumentation":688,"./ReactMarkupChecksum":690,"./ReactReconciler":703,"./ReactUpdateQueue":707,"./ReactUpdates":708,"./instantiateReactComponent":747,"./reactProdInvariant":752,"./setInnerHTML":754,"./shouldUpdateReactComponent":756,"_process":615,"fbjs/lib/emptyObject":767,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],692:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactComponentEnvironment = require('./ReactComponentEnvironment');
		var ReactInstanceMap = require('./ReactInstanceMap');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactReconciler = require('./ReactReconciler');
		var ReactChildReconciler = require('./ReactChildReconciler');

		var emptyFunction = require('fbjs/lib/emptyFunction');
		var flattenChildren = require('./flattenChildren');
		var invariant = require('fbjs/lib/invariant');

		/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
		function makeInsertMarkup(markup, afterNode, toIndex) {
			// NOTE: Null values reduce hidden classes.
			return {
				type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
				content: markup,
				fromIndex: null,
				fromNode: null,
				toIndex: toIndex,
				afterNode: afterNode
			};
		}

		/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
		function makeMove(child, afterNode, toIndex) {
			// NOTE: Null values reduce hidden classes.
			return {
				type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
				content: null,
				fromIndex: child._mountIndex,
				fromNode: ReactReconciler.getHostNode(child),
				toIndex: toIndex,
				afterNode: afterNode
			};
		}

		/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
		function makeRemove(child, node) {
			// NOTE: Null values reduce hidden classes.
			return {
				type: ReactMultiChildUpdateTypes.REMOVE_NODE,
				content: null,
				fromIndex: child._mountIndex,
				fromNode: node,
				toIndex: null,
				afterNode: null
			};
		}

		/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
		function makeSetMarkup(markup) {
			// NOTE: Null values reduce hidden classes.
			return {
				type: ReactMultiChildUpdateTypes.SET_MARKUP,
				content: markup,
				fromIndex: null,
				fromNode: null,
				toIndex: null,
				afterNode: null
			};
		}

		/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
		function makeTextContent(textContent) {
			// NOTE: Null values reduce hidden classes.
			return {
				type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
				content: textContent,
				fromIndex: null,
				fromNode: null,
				toIndex: null,
				afterNode: null
			};
		}

		/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
		function enqueue(queue, update) {
			if (update) {
				queue = queue || [];
				queue.push(update);
			}
			return queue;
		}

		/**
 * Processes any enqueued updates.
 *
 * @private
 */
		function processQueue(inst, updateQueue) {
			ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
		}

		var setChildrenForInstrumentation = emptyFunction;
		if (process.env.NODE_ENV !== 'production') {
			var getDebugID = function (inst) {
				if (!inst._debugID) {
					// Check for ART-like instances. TODO: This is silly/gross.
					var internal;
					if (internal = ReactInstanceMap.get(inst)) {
						inst = internal;
					}
				}
				return inst._debugID;
			};
			setChildrenForInstrumentation = function (children) {
				var debugID = getDebugID(this);
				// TODO: React Native empty components are also multichild.
				// This means they still get into this method but don't have _debugID.
				if (debugID !== 0) {
					ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
						return children[key]._debugID;
					}) : []);
				}
			};
		}

		/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
		var ReactMultiChild = {

			/**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
			Mixin: {

				_reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
					if (process.env.NODE_ENV !== 'production') {
						var selfDebugID = getDebugID(this);
						if (this._currentElement) {
							try {
								ReactCurrentOwner.current = this._currentElement._owner;
								return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
							} finally {
								ReactCurrentOwner.current = null;
							}
						}
					}
					return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
				},

				_reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
					var nextChildren;
					var selfDebugID = 0;
					if (process.env.NODE_ENV !== 'production') {
						selfDebugID = getDebugID(this);
						if (this._currentElement) {
							try {
								ReactCurrentOwner.current = this._currentElement._owner;
								nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
							} finally {
								ReactCurrentOwner.current = null;
							}
							ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
							return nextChildren;
						}
					}
					nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
					ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
					return nextChildren;
				},

				/**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
				mountChildren: function (nestedChildren, transaction, context) {
					var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
					this._renderedChildren = children;

					var mountImages = [];
					var index = 0;
					for (var name in children) {
						if (children.hasOwnProperty(name)) {
							var child = children[name];
							var selfDebugID = 0;
							if (process.env.NODE_ENV !== 'production') {
								selfDebugID = getDebugID(this);
							}
							var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
							child._mountIndex = index++;
							mountImages.push(mountImage);
						}
					}

					if (process.env.NODE_ENV !== 'production') {
						setChildrenForInstrumentation.call(this, children);
					}

					return mountImages;
				},

				/**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
				updateTextContent: function (nextContent) {
					var prevChildren = this._renderedChildren;
					// Remove any rendered children.
					ReactChildReconciler.unmountChildren(prevChildren, false);
					for (var name in prevChildren) {
						if (prevChildren.hasOwnProperty(name)) {
							!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
						}
					}
					// Set new text content.
					var updates = [makeTextContent(nextContent)];
					processQueue(this, updates);
				},

				/**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
				updateMarkup: function (nextMarkup) {
					var prevChildren = this._renderedChildren;
					// Remove any rendered children.
					ReactChildReconciler.unmountChildren(prevChildren, false);
					for (var name in prevChildren) {
						if (prevChildren.hasOwnProperty(name)) {
							!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
						}
					}
					var updates = [makeSetMarkup(nextMarkup)];
					processQueue(this, updates);
				},

				/**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
				updateChildren: function (nextNestedChildrenElements, transaction, context) {
					// Hook used by React ART
					this._updateChildren(nextNestedChildrenElements, transaction, context);
				},

				/**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
				_updateChildren: function (nextNestedChildrenElements, transaction, context) {
					var prevChildren = this._renderedChildren;
					var removedNodes = {};
					var mountImages = [];
					var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
					if (!nextChildren && !prevChildren) {
						return;
					}
					var updates = null;
					var name;
					// `nextIndex` will increment for each child in `nextChildren`, but
					// `lastIndex` will be the last index visited in `prevChildren`.
					var nextIndex = 0;
					var lastIndex = 0;
					// `nextMountIndex` will increment for each newly mounted child.
					var nextMountIndex = 0;
					var lastPlacedNode = null;
					for (name in nextChildren) {
						if (!nextChildren.hasOwnProperty(name)) {
							continue;
						}
						var prevChild = prevChildren && prevChildren[name];
						var nextChild = nextChildren[name];
						if (prevChild === nextChild) {
							updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
							lastIndex = Math.max(prevChild._mountIndex, lastIndex);
							prevChild._mountIndex = nextIndex;
						} else {
							if (prevChild) {
								// Update `lastIndex` before `_mountIndex` gets unset by unmounting.
								lastIndex = Math.max(prevChild._mountIndex, lastIndex);
								// The `removedNodes` loop below will actually remove the child.
							}
							// The child must be instantiated before it's mounted.
							updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
							nextMountIndex++;
						}
						nextIndex++;
						lastPlacedNode = ReactReconciler.getHostNode(nextChild);
					}
					// Remove children that are no longer present.
					for (name in removedNodes) {
						if (removedNodes.hasOwnProperty(name)) {
							updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
						}
					}
					if (updates) {
						processQueue(this, updates);
					}
					this._renderedChildren = nextChildren;

					if (process.env.NODE_ENV !== 'production') {
						setChildrenForInstrumentation.call(this, nextChildren);
					}
				},

				/**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
				unmountChildren: function (safely) {
					var renderedChildren = this._renderedChildren;
					ReactChildReconciler.unmountChildren(renderedChildren, safely);
					this._renderedChildren = null;
				},

				/**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
				moveChild: function (child, afterNode, toIndex, lastIndex) {
					// If the index of `child` is less than `lastIndex`, then it needs to
					// be moved. Otherwise, we do not need to move it because a child will be
					// inserted or moved before `child`.
					if (child._mountIndex < lastIndex) {
						return makeMove(child, afterNode, toIndex);
					}
				},

				/**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
				createChild: function (child, afterNode, mountImage) {
					return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
				},

				/**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
				removeChild: function (child, node) {
					return makeRemove(child, node);
				},

				/**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
				_mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
					child._mountIndex = index;
					return this.createChild(child, afterNode, mountImage);
				},

				/**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
				_unmountChild: function (child, node) {
					var update = this.removeChild(child, node);
					child._mountIndex = null;
					return update;
				}

			}

		};

		module.exports = ReactMultiChild;
	}).call(this,require('_process'));
},{"./ReactChildReconciler":644,"./ReactComponentEnvironment":650,"./ReactCurrentOwner":653,"./ReactInstanceMap":687,"./ReactInstrumentation":688,"./ReactMultiChildUpdateTypes":693,"./ReactReconciler":703,"./flattenChildren":736,"./reactProdInvariant":752,"_process":615,"fbjs/lib/emptyFunction":766,"fbjs/lib/invariant":774}],693:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

	'use strict';

	var keyMirror = require('fbjs/lib/keyMirror');

	/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
	var ReactMultiChildUpdateTypes = keyMirror({
		INSERT_MARKUP: null,
		MOVE_EXISTING: null,
		REMOVE_NODE: null,
		SET_MARKUP: null,
		TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":777}],694:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNodeTypes
 * 
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactElement = require('./ReactElement');

		var invariant = require('fbjs/lib/invariant');

		var ReactNodeTypes = {
			HOST: 0,
			COMPOSITE: 1,
			EMPTY: 2,

			getType: function (node) {
				if (node === null || node === false) {
					return ReactNodeTypes.EMPTY;
				} else if (ReactElement.isValidElement(node)) {
					if (typeof node.type === 'function') {
						return ReactNodeTypes.COMPOSITE;
					} else {
						return ReactNodeTypes.HOST;
					}
				}
				!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
			}
		};

		module.exports = ReactNodeTypes;
	}).call(this,require('_process'));
},{"./ReactElement":676,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],695:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

		'use strict';

		var warning = require('fbjs/lib/warning');

		function warnNoop(publicInstance, callerName) {
			if (process.env.NODE_ENV !== 'production') {
				var constructor = publicInstance.constructor;
				process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
			}
		}

		/**
 * This is the abstract API for an update queue.
 */
		var ReactNoopUpdateQueue = {

			/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
			isMounted: function (publicInstance) {
				return false;
			},

			/**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
			enqueueCallback: function (publicInstance, callback) {},

			/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
			enqueueForceUpdate: function (publicInstance) {
				warnNoop(publicInstance, 'forceUpdate');
			},

			/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
			enqueueReplaceState: function (publicInstance, completeState) {
				warnNoop(publicInstance, 'replaceState');
			},

			/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
			enqueueSetState: function (publicInstance, partialState) {
				warnNoop(publicInstance, 'setState');
			}
		};

		module.exports = ReactNoopUpdateQueue;
	}).call(this,require('_process'));
},{"_process":615,"fbjs/lib/warning":783}],696:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
		var ReactOwner = {

			/**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
			isValidOwner: function (object) {
				return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
			},

			/**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
			addComponentAsRefTo: function (component, ref, owner) {
				!ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
				owner.attachRef(ref, component);
			},

			/**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
			removeComponentAsRefFrom: function (component, ref, owner) {
				!ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
				var ownerPublicInstance = owner.getPublicInstance();
				// Check that `component`'s owner is still alive and that `component` is still the current ref
				// because we do not want to detach the ref if another component stole it.
				if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
					owner.detachRef(ref);
				}
			}

		};

		module.exports = ReactOwner;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],697:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

		'use strict';

		var ReactPropTypeLocationNames = {};

		if (process.env.NODE_ENV !== 'production') {
			ReactPropTypeLocationNames = {
				prop: 'prop',
				context: 'context',
				childContext: 'child context'
			};
		}

		module.exports = ReactPropTypeLocationNames;
	}).call(this,require('_process'));
},{"_process":615}],698:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

	'use strict';

	var keyMirror = require('fbjs/lib/keyMirror');

	var ReactPropTypeLocations = keyMirror({
		prop: null,
		context: null,
		childContext: null
	});

	module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":777}],699:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

		'use strict';

		var ReactElement = require('./ReactElement');
		var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
		var ReactPropTypesSecret = require('./ReactPropTypesSecret');

		var emptyFunction = require('fbjs/lib/emptyFunction');
		var getIteratorFn = require('./getIteratorFn');
		var warning = require('fbjs/lib/warning');

		/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

		var ANONYMOUS = '<<anonymous>>';

		var ReactPropTypes = {
			array: createPrimitiveTypeChecker('array'),
			bool: createPrimitiveTypeChecker('boolean'),
			func: createPrimitiveTypeChecker('function'),
			number: createPrimitiveTypeChecker('number'),
			object: createPrimitiveTypeChecker('object'),
			string: createPrimitiveTypeChecker('string'),
			symbol: createPrimitiveTypeChecker('symbol'),

			any: createAnyTypeChecker(),
			arrayOf: createArrayOfTypeChecker,
			element: createElementTypeChecker(),
			instanceOf: createInstanceTypeChecker,
			node: createNodeChecker(),
			objectOf: createObjectOfTypeChecker,
			oneOf: createEnumTypeChecker,
			oneOfType: createUnionTypeChecker,
			shape: createShapeTypeChecker
		};

		/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
		/*eslint-disable no-self-compare*/
		function is(x, y) {
			// SameValue algorithm
			if (x === y) {
				// Steps 1-5, 7-10
				// Steps 6.b-6.e: +0 != -0
				return x !== 0 || 1 / x === 1 / y;
			} else {
				// Step 6.a: NaN == NaN
				return x !== x && y !== y;
			}
		}
		/*eslint-enable no-self-compare*/

		/**
 * We use an Error-like object for backward compatibility as people may call
 * PropTypes directly and inspect their output. However we don't use real
 * Errors anymore. We don't inspect their stack anyway, and creating them
 * is prohibitively expensive if they are created too often, such as what
 * happens in oneOfType() for any type before the one that matched.
 */
		function PropTypeError(message) {
			this.message = message;
			this.stack = '';
		}
		// Make `instanceof Error` still work for returned errors.
		PropTypeError.prototype = Error.prototype;

		function createChainableTypeChecker(validate) {
			if (process.env.NODE_ENV !== 'production') {
				var manualPropTypeCallCache = {};
			}
			function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
				componentName = componentName || ANONYMOUS;
				propFullName = propFullName || propName;
				if (process.env.NODE_ENV !== 'production') {
					if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
						var cacheKey = componentName + ':' + propName;
						if (!manualPropTypeCallCache[cacheKey]) {
							process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;
							manualPropTypeCallCache[cacheKey] = true;
						}
					}
				}
				if (props[propName] == null) {
					var locationName = ReactPropTypeLocationNames[location];
					if (isRequired) {
						return new PropTypeError('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
					}
					return null;
				} else {
					return validate(props, propName, componentName, location, propFullName);
				}
			}

			var chainedCheckType = checkType.bind(null, false);
			chainedCheckType.isRequired = checkType.bind(null, true);

			return chainedCheckType;
		}

		function createPrimitiveTypeChecker(expectedType) {
			function validate(props, propName, componentName, location, propFullName, secret) {
				var propValue = props[propName];
				var propType = getPropType(propValue);
				if (propType !== expectedType) {
					var locationName = ReactPropTypeLocationNames[location];
					// `propValue` being instance of, say, date/regexp, pass the 'object'
					// check, but we can offer a more precise error message here rather than
					// 'of type `object`'.
					var preciseType = getPreciseType(propValue);

					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function createAnyTypeChecker() {
			return createChainableTypeChecker(emptyFunction.thatReturns(null));
		}

		function createArrayOfTypeChecker(typeChecker) {
			function validate(props, propName, componentName, location, propFullName) {
				if (typeof typeChecker !== 'function') {
					return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
				}
				var propValue = props[propName];
				if (!Array.isArray(propValue)) {
					var locationName = ReactPropTypeLocationNames[location];
					var propType = getPropType(propValue);
					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
				}
				for (var i = 0; i < propValue.length; i++) {
					var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
					if (error instanceof Error) {
						return error;
					}
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function createElementTypeChecker() {
			function validate(props, propName, componentName, location, propFullName) {
				var propValue = props[propName];
				if (!ReactElement.isValidElement(propValue)) {
					var locationName = ReactPropTypeLocationNames[location];
					var propType = getPropType(propValue);
					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function createInstanceTypeChecker(expectedClass) {
			function validate(props, propName, componentName, location, propFullName) {
				if (!(props[propName] instanceof expectedClass)) {
					var locationName = ReactPropTypeLocationNames[location];
					var expectedClassName = expectedClass.name || ANONYMOUS;
					var actualClassName = getClassName(props[propName]);
					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function createEnumTypeChecker(expectedValues) {
			if (!Array.isArray(expectedValues)) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
				return emptyFunction.thatReturnsNull;
			}

			function validate(props, propName, componentName, location, propFullName) {
				var propValue = props[propName];
				for (var i = 0; i < expectedValues.length; i++) {
					if (is(propValue, expectedValues[i])) {
						return null;
					}
				}

				var locationName = ReactPropTypeLocationNames[location];
				var valuesString = JSON.stringify(expectedValues);
				return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
			}
			return createChainableTypeChecker(validate);
		}

		function createObjectOfTypeChecker(typeChecker) {
			function validate(props, propName, componentName, location, propFullName) {
				if (typeof typeChecker !== 'function') {
					return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
				}
				var propValue = props[propName];
				var propType = getPropType(propValue);
				if (propType !== 'object') {
					var locationName = ReactPropTypeLocationNames[location];
					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
				}
				for (var key in propValue) {
					if (propValue.hasOwnProperty(key)) {
						var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
						if (error instanceof Error) {
							return error;
						}
					}
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function createUnionTypeChecker(arrayOfTypeCheckers) {
			if (!Array.isArray(arrayOfTypeCheckers)) {
				process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
				return emptyFunction.thatReturnsNull;
			}

			function validate(props, propName, componentName, location, propFullName) {
				for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
					var checker = arrayOfTypeCheckers[i];
					if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
						return null;
					}
				}

				var locationName = ReactPropTypeLocationNames[location];
				return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
			}
			return createChainableTypeChecker(validate);
		}

		function createNodeChecker() {
			function validate(props, propName, componentName, location, propFullName) {
				if (!isNode(props[propName])) {
					var locationName = ReactPropTypeLocationNames[location];
					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function createShapeTypeChecker(shapeTypes) {
			function validate(props, propName, componentName, location, propFullName) {
				var propValue = props[propName];
				var propType = getPropType(propValue);
				if (propType !== 'object') {
					var locationName = ReactPropTypeLocationNames[location];
					return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
				}
				for (var key in shapeTypes) {
					var checker = shapeTypes[key];
					if (!checker) {
						continue;
					}
					var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
					if (error) {
						return error;
					}
				}
				return null;
			}
			return createChainableTypeChecker(validate);
		}

		function isNode(propValue) {
			switch (typeof propValue) {
			case 'number':
			case 'string':
			case 'undefined':
				return true;
			case 'boolean':
				return !propValue;
			case 'object':
				if (Array.isArray(propValue)) {
					return propValue.every(isNode);
				}
				if (propValue === null || ReactElement.isValidElement(propValue)) {
					return true;
				}

				var iteratorFn = getIteratorFn(propValue);
				if (iteratorFn) {
					var iterator = iteratorFn.call(propValue);
					var step;
					if (iteratorFn !== propValue.entries) {
						while (!(step = iterator.next()).done) {
							if (!isNode(step.value)) {
								return false;
							}
						}
					} else {
						// Iterator will provide entry [k,v] tuples rather than values.
						while (!(step = iterator.next()).done) {
							var entry = step.value;
							if (entry) {
								if (!isNode(entry[1])) {
									return false;
								}
							}
						}
					}
				} else {
					return false;
				}

				return true;
			default:
				return false;
			}
		}

		function isSymbol(propType, propValue) {
			// Native Symbol.
			if (propType === 'symbol') {
				return true;
			}

			// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
			if (propValue['@@toStringTag'] === 'Symbol') {
				return true;
			}

			// Fallback for non-spec compliant Symbols which are polyfilled.
			if (typeof Symbol === 'function' && propValue instanceof Symbol) {
				return true;
			}

			return false;
		}

		// Equivalent of `typeof` but with special handling for array and regexp.
		function getPropType(propValue) {
			var propType = typeof propValue;
			if (Array.isArray(propValue)) {
				return 'array';
			}
			if (propValue instanceof RegExp) {
				// Old webkits (at least until Android 4.0) return 'function' rather than
				// 'object' for typeof a RegExp. We'll normalize this here so that /bla/
				// passes PropTypes.object.
				return 'object';
			}
			if (isSymbol(propType, propValue)) {
				return 'symbol';
			}
			return propType;
		}

		// This handles more types than `getPropType`. Only used for error messages.
		// See `createPrimitiveTypeChecker`.
		function getPreciseType(propValue) {
			var propType = getPropType(propValue);
			if (propType === 'object') {
				if (propValue instanceof Date) {
					return 'date';
				} else if (propValue instanceof RegExp) {
					return 'regexp';
				}
			}
			return propType;
		}

		// Returns class name of the object, if any.
		function getClassName(propValue) {
			if (!propValue.constructor || !propValue.constructor.name) {
				return ANONYMOUS;
			}
			return propValue.constructor.name;
		}

		module.exports = ReactPropTypes;
	}).call(this,require('_process'));
},{"./ReactElement":676,"./ReactPropTypeLocationNames":697,"./ReactPropTypesSecret":700,"./getIteratorFn":743,"_process":615,"fbjs/lib/emptyFunction":766,"fbjs/lib/warning":783}],700:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypesSecret
 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;
},{}],701:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPureComponent
 */

	'use strict';

	var _assign = require('object-assign');

	var ReactComponent = require('./ReactComponent');
	var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

	var emptyObject = require('fbjs/lib/emptyObject');

	/**
 * Base class helpers for the updating state of a component.
 */
	function ReactPureComponent(props, context, updater) {
		// Duplicated from ReactComponent.
		this.props = props;
		this.context = context;
		this.refs = emptyObject;
		// We initialize the default updater but the real one gets injected by the
		// renderer.
		this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;
},{"./ReactComponent":648,"./ReactNoopUpdateQueue":695,"fbjs/lib/emptyObject":767,"object-assign":784}],702:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 */

		'use strict';

		var _assign = require('object-assign');

		var CallbackQueue = require('./CallbackQueue');
		var PooledClass = require('./PooledClass');
		var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
		var ReactInputSelection = require('./ReactInputSelection');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var Transaction = require('./Transaction');
		var ReactUpdateQueue = require('./ReactUpdateQueue');

		/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
		var SELECTION_RESTORATION = {
			/**
   * @return {Selection} Selection information.
   */
			initialize: ReactInputSelection.getSelectionInformation,
			/**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
			close: ReactInputSelection.restoreSelection
		};

		/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
		var EVENT_SUPPRESSION = {
			/**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
			initialize: function () {
				var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
				ReactBrowserEventEmitter.setEnabled(false);
				return currentlyEnabled;
			},

			/**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
			close: function (previouslyEnabled) {
				ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
			}
		};

		/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
		var ON_DOM_READY_QUEUEING = {
			/**
   * Initializes the internal `onDOMReady` queue.
   */
			initialize: function () {
				this.reactMountReady.reset();
			},

			/**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
			close: function () {
				this.reactMountReady.notifyAll();
			}
		};

		/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
		var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

		if (process.env.NODE_ENV !== 'production') {
			TRANSACTION_WRAPPERS.push({
				initialize: ReactInstrumentation.debugTool.onBeginFlush,
				close: ReactInstrumentation.debugTool.onEndFlush
			});
		}

		/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
		function ReactReconcileTransaction(useCreateElement) {
			this.reinitializeTransaction();
			// Only server-side rendering really needs this option (see
			// `ReactServerRendering`), but server-side uses
			// `ReactServerRenderingTransaction` instead. This option is here so that it's
			// accessible and defaults to false when `ReactDOMComponent` and
			// `ReactDOMTextComponent` checks it in `mountComponent`.`
			this.renderToStaticMarkup = false;
			this.reactMountReady = CallbackQueue.getPooled(null);
			this.useCreateElement = useCreateElement;
		}

		var Mixin = {
			/**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
			getTransactionWrappers: function () {
				return TRANSACTION_WRAPPERS;
			},

			/**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
			getReactMountReady: function () {
				return this.reactMountReady;
			},

			/**
   * @return {object} The queue to collect React async events.
   */
			getUpdateQueue: function () {
				return ReactUpdateQueue;
			},

			/**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
			checkpoint: function () {
				// reactMountReady is the our only stateful wrapper
				return this.reactMountReady.checkpoint();
			},

			rollback: function (checkpoint) {
				this.reactMountReady.rollback(checkpoint);
			},

			/**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
			destructor: function () {
				CallbackQueue.release(this.reactMountReady);
				this.reactMountReady = null;
			}
		};

		_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

		PooledClass.addPoolingTo(ReactReconcileTransaction);

		module.exports = ReactReconcileTransaction;
	}).call(this,require('_process'));
},{"./CallbackQueue":621,"./PooledClass":641,"./ReactBrowserEventEmitter":643,"./ReactInputSelection":686,"./ReactInstrumentation":688,"./ReactUpdateQueue":707,"./Transaction":726,"_process":615,"object-assign":784}],703:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

		'use strict';

		var ReactRef = require('./ReactRef');
		var ReactInstrumentation = require('./ReactInstrumentation');

		var warning = require('fbjs/lib/warning');

		/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
		function attachRefs() {
			ReactRef.attachRefs(this, this._currentElement);
		}

		var ReactReconciler = {

			/**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
			mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
			) {
				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
					}
				}
				var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
				if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
					transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
				}
				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
					}
				}
				return markup;
			},

			/**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
			getHostNode: function (internalInstance) {
				return internalInstance.getHostNode();
			},

			/**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
			unmountComponent: function (internalInstance, safely) {
				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
					}
				}
				ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
				internalInstance.unmountComponent(safely);
				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
					}
				}
			},

			/**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
			receiveComponent: function (internalInstance, nextElement, transaction, context) {
				var prevElement = internalInstance._currentElement;

				if (nextElement === prevElement && context === internalInstance._context) {
					// Since elements are immutable after the owner is rendered,
					// we can do a cheap identity compare here to determine if this is a
					// superfluous reconcile. It's possible for state to be mutable but such
					// change should trigger an update of the owner which would recreate
					// the element. We explicitly check for the existence of an owner since
					// it's possible for an element created outside a composite to be
					// deeply mutated and reused.

					// TODO: Bailing out early is just a perf optimization right?
					// TODO: Removing the return statement should affect correctness?
					return;
				}

				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
					}
				}

				var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

				if (refsChanged) {
					ReactRef.detachRefs(internalInstance, prevElement);
				}

				internalInstance.receiveComponent(nextElement, transaction, context);

				if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
					transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
				}

				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
					}
				}
			},

			/**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
			performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
				if (internalInstance._updateBatchNumber !== updateBatchNumber) {
					// The component's enqueued batch number should always be the current
					// batch or the following one.
					process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
					return;
				}
				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
					}
				}
				internalInstance.performUpdateIfNecessary(transaction);
				if (process.env.NODE_ENV !== 'production') {
					if (internalInstance._debugID !== 0) {
						ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
					}
				}
			}

		};

		module.exports = ReactReconciler;
	}).call(this,require('_process'));
},{"./ReactInstrumentation":688,"./ReactRef":704,"_process":615,"fbjs/lib/warning":783}],704:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

	'use strict';

	var ReactOwner = require('./ReactOwner');

	var ReactRef = {};

	function attachRef(ref, component, owner) {
		if (typeof ref === 'function') {
			ref(component.getPublicInstance());
		} else {
			// Legacy ref
			ReactOwner.addComponentAsRefTo(component, ref, owner);
		}
	}

	function detachRef(ref, component, owner) {
		if (typeof ref === 'function') {
			ref(null);
		} else {
			// Legacy ref
			ReactOwner.removeComponentAsRefFrom(component, ref, owner);
		}
	}

	ReactRef.attachRefs = function (instance, element) {
		if (element === null || element === false) {
			return;
		}
		var ref = element.ref;
		if (ref != null) {
			attachRef(ref, instance, element._owner);
		}
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
		// If either the owner or a `ref` has changed, make sure the newest owner
		// has stored a reference to `this`, and the previous owner (if different)
		// has forgotten the reference to `this`. We use the element instead
		// of the public this.props because the post processing cannot determine
		// a ref. The ref conceptually lives on the element.

		// TODO: Should this even be possible? The owner cannot change because
		// it's forbidden by shouldUpdateReactComponent. The ref can change
		// if you swap the keys of but not the refs. Reconsider where this check
		// is made. It probably belongs where the key checking and
		// instantiateReactComponent is done.

		var prevEmpty = prevElement === null || prevElement === false;
		var nextEmpty = nextElement === null || nextElement === false;

		return (
		// This has a few false positives w/r/t empty components.
			prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||
    // If owner changes but we have an unchanged function ref, don't update refs
    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner
		);
	};

	ReactRef.detachRefs = function (instance, element) {
		if (element === null || element === false) {
			return;
		}
		var ref = element.ref;
		if (ref != null) {
			detachRef(ref, instance, element._owner);
		}
	};

	module.exports = ReactRef;
},{"./ReactOwner":696}],705:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 */

		'use strict';

		var _assign = require('object-assign');

		var PooledClass = require('./PooledClass');
		var Transaction = require('./Transaction');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var ReactServerUpdateQueue = require('./ReactServerUpdateQueue');

		/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
		var TRANSACTION_WRAPPERS = [];

		if (process.env.NODE_ENV !== 'production') {
			TRANSACTION_WRAPPERS.push({
				initialize: ReactInstrumentation.debugTool.onBeginFlush,
				close: ReactInstrumentation.debugTool.onEndFlush
			});
		}

		var noopCallbackQueue = {
			enqueue: function () {}
		};

		/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
		function ReactServerRenderingTransaction(renderToStaticMarkup) {
			this.reinitializeTransaction();
			this.renderToStaticMarkup = renderToStaticMarkup;
			this.useCreateElement = false;
			this.updateQueue = new ReactServerUpdateQueue(this);
		}

		var Mixin = {
			/**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
			getTransactionWrappers: function () {
				return TRANSACTION_WRAPPERS;
			},

			/**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
			getReactMountReady: function () {
				return noopCallbackQueue;
			},

			/**
   * @return {object} The queue to collect React async events.
   */
			getUpdateQueue: function () {
				return this.updateQueue;
			},

			/**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
			destructor: function () {},

			checkpoint: function () {},

			rollback: function () {}
		};

		_assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

		PooledClass.addPoolingTo(ReactServerRenderingTransaction);

		module.exports = ReactServerRenderingTransaction;
	}).call(this,require('_process'));
},{"./PooledClass":641,"./ReactInstrumentation":688,"./ReactServerUpdateQueue":706,"./Transaction":726,"_process":615,"object-assign":784}],706:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerUpdateQueue
 * 
 */

		'use strict';

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var ReactUpdateQueue = require('./ReactUpdateQueue');
		var Transaction = require('./Transaction');
		var warning = require('fbjs/lib/warning');

		function warnNoop(publicInstance, callerName) {
			if (process.env.NODE_ENV !== 'production') {
				var constructor = publicInstance.constructor;
				process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
			}
		}

		/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

		var ReactServerUpdateQueue = function () {
			/* :: transaction: Transaction; */

			function ReactServerUpdateQueue(transaction) {
				_classCallCheck(this, ReactServerUpdateQueue);

				this.transaction = transaction;
			}

			/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


			ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
				return false;
			};

			/**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


			ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
				if (this.transaction.isInTransaction()) {
					ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
				}
			};

			/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


			ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
				if (this.transaction.isInTransaction()) {
					ReactUpdateQueue.enqueueForceUpdate(publicInstance);
				} else {
					warnNoop(publicInstance, 'forceUpdate');
				}
			};

			/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


			ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
				if (this.transaction.isInTransaction()) {
					ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
				} else {
					warnNoop(publicInstance, 'replaceState');
				}
			};

			/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


			ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
				if (this.transaction.isInTransaction()) {
					ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
				} else {
					warnNoop(publicInstance, 'setState');
				}
			};

			return ReactServerUpdateQueue;
		}();

		module.exports = ReactServerUpdateQueue;
	}).call(this,require('_process'));
},{"./ReactUpdateQueue":707,"./Transaction":726,"_process":615,"fbjs/lib/warning":783}],707:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactInstanceMap = require('./ReactInstanceMap');
		var ReactInstrumentation = require('./ReactInstrumentation');
		var ReactUpdates = require('./ReactUpdates');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		function enqueueUpdate(internalInstance) {
			ReactUpdates.enqueueUpdate(internalInstance);
		}

		function formatUnexpectedArgument(arg) {
			var type = typeof arg;
			if (type !== 'object') {
				return type;
			}
			var displayName = arg.constructor && arg.constructor.name || type;
			var keys = Object.keys(arg);
			if (keys.length > 0 && keys.length < 20) {
				return displayName + ' (keys: ' + keys.join(', ') + ')';
			}
			return displayName;
		}

		function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
			var internalInstance = ReactInstanceMap.get(publicInstance);
			if (!internalInstance) {
				if (process.env.NODE_ENV !== 'production') {
					var ctor = publicInstance.constructor;
					// Only warn when we have a callerName. Otherwise we should be silent.
					// We're probably calling from enqueueCallback. We don't want to warn
					// there because we already warned for the corresponding lifecycle method.
					process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
				}
				return null;
			}

			if (process.env.NODE_ENV !== 'production') {
				process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
			}

			return internalInstance;
		}

		/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
		var ReactUpdateQueue = {

			/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
			isMounted: function (publicInstance) {
				if (process.env.NODE_ENV !== 'production') {
					var owner = ReactCurrentOwner.current;
					if (owner !== null) {
						process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
						owner._warnedAboutRefsInRender = true;
					}
				}
				var internalInstance = ReactInstanceMap.get(publicInstance);
				if (internalInstance) {
					// During componentWillMount and render this will still be null but after
					// that will always render to something. At least for now. So we can use
					// this hack.
					return !!internalInstance._renderedComponent;
				} else {
					return false;
				}
			},

			/**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
			enqueueCallback: function (publicInstance, callback, callerName) {
				ReactUpdateQueue.validateCallback(callback, callerName);
				var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

				// Previously we would throw an error if we didn't have an internal
				// instance. Since we want to make it a no-op instead, we mirror the same
				// behavior we have in other enqueue* methods.
				// We also need to ignore callbacks in componentWillMount. See
				// enqueueUpdates.
				if (!internalInstance) {
					return null;
				}

				if (internalInstance._pendingCallbacks) {
					internalInstance._pendingCallbacks.push(callback);
				} else {
					internalInstance._pendingCallbacks = [callback];
				}
				// TODO: The callback here is ignored when setState is called from
				// componentWillMount. Either fix it or disallow doing so completely in
				// favor of getInitialState. Alternatively, we can disallow
				// componentWillMount during server-side rendering.
				enqueueUpdate(internalInstance);
			},

			enqueueCallbackInternal: function (internalInstance, callback) {
				if (internalInstance._pendingCallbacks) {
					internalInstance._pendingCallbacks.push(callback);
				} else {
					internalInstance._pendingCallbacks = [callback];
				}
				enqueueUpdate(internalInstance);
			},

			/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
			enqueueForceUpdate: function (publicInstance) {
				var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

				if (!internalInstance) {
					return;
				}

				internalInstance._pendingForceUpdate = true;

				enqueueUpdate(internalInstance);
			},

			/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
			enqueueReplaceState: function (publicInstance, completeState) {
				var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

				if (!internalInstance) {
					return;
				}

				internalInstance._pendingStateQueue = [completeState];
				internalInstance._pendingReplaceState = true;

				enqueueUpdate(internalInstance);
			},

			/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
			enqueueSetState: function (publicInstance, partialState) {
				if (process.env.NODE_ENV !== 'production') {
					ReactInstrumentation.debugTool.onSetState();
					process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
				}

				var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

				if (!internalInstance) {
					return;
				}

				var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
				queue.push(partialState);

				enqueueUpdate(internalInstance);
			},

			enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
				internalInstance._pendingElement = nextElement;
				// TODO: introduce _pendingContext instead of setting it directly.
				internalInstance._context = nextContext;
				enqueueUpdate(internalInstance);
			},

			validateCallback: function (callback, callerName) {
				!(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
			}

		};

		module.exports = ReactUpdateQueue;
	}).call(this,require('_process'));
},{"./ReactCurrentOwner":653,"./ReactInstanceMap":687,"./ReactInstrumentation":688,"./ReactUpdates":708,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],708:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var CallbackQueue = require('./CallbackQueue');
		var PooledClass = require('./PooledClass');
		var ReactFeatureFlags = require('./ReactFeatureFlags');
		var ReactReconciler = require('./ReactReconciler');
		var Transaction = require('./Transaction');

		var invariant = require('fbjs/lib/invariant');

		var dirtyComponents = [];
		var updateBatchNumber = 0;
		var asapCallbackQueue = CallbackQueue.getPooled();
		var asapEnqueued = false;

		var batchingStrategy = null;

		function ensureInjected() {
			!(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
		}

		var NESTED_UPDATES = {
			initialize: function () {
				this.dirtyComponentsLength = dirtyComponents.length;
			},
			close: function () {
				if (this.dirtyComponentsLength !== dirtyComponents.length) {
					// Additional updates were enqueued by componentDidUpdate handlers or
					// similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
					// these new updates so that if A's componentDidUpdate calls setState on
					// B, B will update before the callback A's updater provided when calling
					// setState.
					dirtyComponents.splice(0, this.dirtyComponentsLength);
					flushBatchedUpdates();
				} else {
					dirtyComponents.length = 0;
				}
			}
		};

		var UPDATE_QUEUEING = {
			initialize: function () {
				this.callbackQueue.reset();
			},
			close: function () {
				this.callbackQueue.notifyAll();
			}
		};

		var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

		function ReactUpdatesFlushTransaction() {
			this.reinitializeTransaction();
			this.dirtyComponentsLength = null;
			this.callbackQueue = CallbackQueue.getPooled();
			this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
				/* useCreateElement */true);
		}

		_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
			getTransactionWrappers: function () {
				return TRANSACTION_WRAPPERS;
			},

			destructor: function () {
				this.dirtyComponentsLength = null;
				CallbackQueue.release(this.callbackQueue);
				this.callbackQueue = null;
				ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
				this.reconcileTransaction = null;
			},

			perform: function (method, scope, a) {
				// Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
				// with this transaction's wrappers around it.
				return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
			}
		});

		PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

		function batchedUpdates(callback, a, b, c, d, e) {
			ensureInjected();
			batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
		}

		/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
		function mountOrderComparator(c1, c2) {
			return c1._mountOrder - c2._mountOrder;
		}

		function runBatchedUpdates(transaction) {
			var len = transaction.dirtyComponentsLength;
			!(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

			// Since reconciling a component higher in the owner hierarchy usually (not
			// always -- see shouldComponentUpdate()) will reconcile children, reconcile
			// them before their children by sorting the array.
			dirtyComponents.sort(mountOrderComparator);

			// Any updates enqueued while reconciling must be performed after this entire
			// batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
			// C, B could update twice in a single batch if C's render enqueues an update
			// to B (since B would have already updated, we should skip it, and the only
			// way we can know to do so is by checking the batch counter).
			updateBatchNumber++;

			for (var i = 0; i < len; i++) {
				// If a component is unmounted before pending changes apply, it will still
				// be here, but we assume that it has cleared its _pendingCallbacks and
				// that performUpdateIfNecessary is a noop.
				var component = dirtyComponents[i];

				// If performUpdateIfNecessary happens to enqueue any new updates, we
				// shouldn't execute the callbacks until the next render happens, so
				// stash the callbacks first
				var callbacks = component._pendingCallbacks;
				component._pendingCallbacks = null;

				var markerName;
				if (ReactFeatureFlags.logTopLevelRenders) {
					var namedComponent = component;
					// Duck type TopLevelWrapper. This is probably always true.
					if (component._currentElement.props === component._renderedComponent._currentElement) {
						namedComponent = component._renderedComponent;
					}
					markerName = 'React update: ' + namedComponent.getName();
					console.time(markerName);
				}

				ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

				if (markerName) {
					console.timeEnd(markerName);
				}

				if (callbacks) {
					for (var j = 0; j < callbacks.length; j++) {
						transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
					}
				}
			}
		}

		var flushBatchedUpdates = function () {
			// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
			// array and perform any updates enqueued by mount-ready handlers (i.e.,
			// componentDidUpdate) but we need to check here too in order to catch
			// updates enqueued by setState callbacks and asap calls.
			while (dirtyComponents.length || asapEnqueued) {
				if (dirtyComponents.length) {
					var transaction = ReactUpdatesFlushTransaction.getPooled();
					transaction.perform(runBatchedUpdates, null, transaction);
					ReactUpdatesFlushTransaction.release(transaction);
				}

				if (asapEnqueued) {
					asapEnqueued = false;
					var queue = asapCallbackQueue;
					asapCallbackQueue = CallbackQueue.getPooled();
					queue.notifyAll();
					CallbackQueue.release(queue);
				}
			}
		};

		/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
		function enqueueUpdate(component) {
			ensureInjected();

			// Various parts of our code (such as ReactCompositeComponent's
			// _renderValidatedComponent) assume that calls to render aren't nested;
			// verify that that's the case. (This is called by each top-level update
			// function, like setState, forceUpdate, etc.; creation and
			// destruction of top-level components is guarded in ReactMount.)

			if (!batchingStrategy.isBatchingUpdates) {
				batchingStrategy.batchedUpdates(enqueueUpdate, component);
				return;
			}

			dirtyComponents.push(component);
			if (component._updateBatchNumber == null) {
				component._updateBatchNumber = updateBatchNumber + 1;
			}
		}

		/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
		function asap(callback, context) {
			!batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
			asapCallbackQueue.enqueue(callback, context);
			asapEnqueued = true;
		}

		var ReactUpdatesInjection = {
			injectReconcileTransaction: function (ReconcileTransaction) {
				!ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
				ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
			},

			injectBatchingStrategy: function (_batchingStrategy) {
				!_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
				!(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
				!(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
				batchingStrategy = _batchingStrategy;
			}
		};

		var ReactUpdates = {
			/**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
			ReactReconcileTransaction: null,

			batchedUpdates: batchedUpdates,
			enqueueUpdate: enqueueUpdate,
			flushBatchedUpdates: flushBatchedUpdates,
			injection: ReactUpdatesInjection,
			asap: asap
		};

		module.exports = ReactUpdates;
	}).call(this,require('_process'));
},{"./CallbackQueue":621,"./PooledClass":641,"./ReactFeatureFlags":682,"./ReactReconciler":703,"./Transaction":726,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"object-assign":784}],709:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

	'use strict';

	module.exports = '15.3.2';
},{}],710:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

	'use strict';

	var NS = {
		xlink: 'http://www.w3.org/1999/xlink',
		xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
		accentHeight: 'accent-height',
		accumulate: 0,
		additive: 0,
		alignmentBaseline: 'alignment-baseline',
		allowReorder: 'allowReorder',
		alphabetic: 0,
		amplitude: 0,
		arabicForm: 'arabic-form',
		ascent: 0,
		attributeName: 'attributeName',
		attributeType: 'attributeType',
		autoReverse: 'autoReverse',
		azimuth: 0,
		baseFrequency: 'baseFrequency',
		baseProfile: 'baseProfile',
		baselineShift: 'baseline-shift',
		bbox: 0,
		begin: 0,
		bias: 0,
		by: 0,
		calcMode: 'calcMode',
		capHeight: 'cap-height',
		clip: 0,
		clipPath: 'clip-path',
		clipRule: 'clip-rule',
		clipPathUnits: 'clipPathUnits',
		colorInterpolation: 'color-interpolation',
		colorInterpolationFilters: 'color-interpolation-filters',
		colorProfile: 'color-profile',
		colorRendering: 'color-rendering',
		contentScriptType: 'contentScriptType',
		contentStyleType: 'contentStyleType',
		cursor: 0,
		cx: 0,
		cy: 0,
		d: 0,
		decelerate: 0,
		descent: 0,
		diffuseConstant: 'diffuseConstant',
		direction: 0,
		display: 0,
		divisor: 0,
		dominantBaseline: 'dominant-baseline',
		dur: 0,
		dx: 0,
		dy: 0,
		edgeMode: 'edgeMode',
		elevation: 0,
		enableBackground: 'enable-background',
		end: 0,
		exponent: 0,
		externalResourcesRequired: 'externalResourcesRequired',
		fill: 0,
		fillOpacity: 'fill-opacity',
		fillRule: 'fill-rule',
		filter: 0,
		filterRes: 'filterRes',
		filterUnits: 'filterUnits',
		floodColor: 'flood-color',
		floodOpacity: 'flood-opacity',
		focusable: 0,
		fontFamily: 'font-family',
		fontSize: 'font-size',
		fontSizeAdjust: 'font-size-adjust',
		fontStretch: 'font-stretch',
		fontStyle: 'font-style',
		fontVariant: 'font-variant',
		fontWeight: 'font-weight',
		format: 0,
		from: 0,
		fx: 0,
		fy: 0,
		g1: 0,
		g2: 0,
		glyphName: 'glyph-name',
		glyphOrientationHorizontal: 'glyph-orientation-horizontal',
		glyphOrientationVertical: 'glyph-orientation-vertical',
		glyphRef: 'glyphRef',
		gradientTransform: 'gradientTransform',
		gradientUnits: 'gradientUnits',
		hanging: 0,
		horizAdvX: 'horiz-adv-x',
		horizOriginX: 'horiz-origin-x',
		ideographic: 0,
		imageRendering: 'image-rendering',
		'in': 0,
		in2: 0,
		intercept: 0,
		k: 0,
		k1: 0,
		k2: 0,
		k3: 0,
		k4: 0,
		kernelMatrix: 'kernelMatrix',
		kernelUnitLength: 'kernelUnitLength',
		kerning: 0,
		keyPoints: 'keyPoints',
		keySplines: 'keySplines',
		keyTimes: 'keyTimes',
		lengthAdjust: 'lengthAdjust',
		letterSpacing: 'letter-spacing',
		lightingColor: 'lighting-color',
		limitingConeAngle: 'limitingConeAngle',
		local: 0,
		markerEnd: 'marker-end',
		markerMid: 'marker-mid',
		markerStart: 'marker-start',
		markerHeight: 'markerHeight',
		markerUnits: 'markerUnits',
		markerWidth: 'markerWidth',
		mask: 0,
		maskContentUnits: 'maskContentUnits',
		maskUnits: 'maskUnits',
		mathematical: 0,
		mode: 0,
		numOctaves: 'numOctaves',
		offset: 0,
		opacity: 0,
		operator: 0,
		order: 0,
		orient: 0,
		orientation: 0,
		origin: 0,
		overflow: 0,
		overlinePosition: 'overline-position',
		overlineThickness: 'overline-thickness',
		paintOrder: 'paint-order',
		panose1: 'panose-1',
		pathLength: 'pathLength',
		patternContentUnits: 'patternContentUnits',
		patternTransform: 'patternTransform',
		patternUnits: 'patternUnits',
		pointerEvents: 'pointer-events',
		points: 0,
		pointsAtX: 'pointsAtX',
		pointsAtY: 'pointsAtY',
		pointsAtZ: 'pointsAtZ',
		preserveAlpha: 'preserveAlpha',
		preserveAspectRatio: 'preserveAspectRatio',
		primitiveUnits: 'primitiveUnits',
		r: 0,
		radius: 0,
		refX: 'refX',
		refY: 'refY',
		renderingIntent: 'rendering-intent',
		repeatCount: 'repeatCount',
		repeatDur: 'repeatDur',
		requiredExtensions: 'requiredExtensions',
		requiredFeatures: 'requiredFeatures',
		restart: 0,
		result: 0,
		rotate: 0,
		rx: 0,
		ry: 0,
		scale: 0,
		seed: 0,
		shapeRendering: 'shape-rendering',
		slope: 0,
		spacing: 0,
		specularConstant: 'specularConstant',
		specularExponent: 'specularExponent',
		speed: 0,
		spreadMethod: 'spreadMethod',
		startOffset: 'startOffset',
		stdDeviation: 'stdDeviation',
		stemh: 0,
		stemv: 0,
		stitchTiles: 'stitchTiles',
		stopColor: 'stop-color',
		stopOpacity: 'stop-opacity',
		strikethroughPosition: 'strikethrough-position',
		strikethroughThickness: 'strikethrough-thickness',
		string: 0,
		stroke: 0,
		strokeDasharray: 'stroke-dasharray',
		strokeDashoffset: 'stroke-dashoffset',
		strokeLinecap: 'stroke-linecap',
		strokeLinejoin: 'stroke-linejoin',
		strokeMiterlimit: 'stroke-miterlimit',
		strokeOpacity: 'stroke-opacity',
		strokeWidth: 'stroke-width',
		surfaceScale: 'surfaceScale',
		systemLanguage: 'systemLanguage',
		tableValues: 'tableValues',
		targetX: 'targetX',
		targetY: 'targetY',
		textAnchor: 'text-anchor',
		textDecoration: 'text-decoration',
		textRendering: 'text-rendering',
		textLength: 'textLength',
		to: 0,
		transform: 0,
		u1: 0,
		u2: 0,
		underlinePosition: 'underline-position',
		underlineThickness: 'underline-thickness',
		unicode: 0,
		unicodeBidi: 'unicode-bidi',
		unicodeRange: 'unicode-range',
		unitsPerEm: 'units-per-em',
		vAlphabetic: 'v-alphabetic',
		vHanging: 'v-hanging',
		vIdeographic: 'v-ideographic',
		vMathematical: 'v-mathematical',
		values: 0,
		vectorEffect: 'vector-effect',
		version: 0,
		vertAdvY: 'vert-adv-y',
		vertOriginX: 'vert-origin-x',
		vertOriginY: 'vert-origin-y',
		viewBox: 'viewBox',
		viewTarget: 'viewTarget',
		visibility: 0,
		widths: 0,
		wordSpacing: 'word-spacing',
		writingMode: 'writing-mode',
		x: 0,
		xHeight: 'x-height',
		x1: 0,
		x2: 0,
		xChannelSelector: 'xChannelSelector',
		xlinkActuate: 'xlink:actuate',
		xlinkArcrole: 'xlink:arcrole',
		xlinkHref: 'xlink:href',
		xlinkRole: 'xlink:role',
		xlinkShow: 'xlink:show',
		xlinkTitle: 'xlink:title',
		xlinkType: 'xlink:type',
		xmlBase: 'xml:base',
		xmlns: 0,
		xmlnsXlink: 'xmlns:xlink',
		xmlLang: 'xml:lang',
		xmlSpace: 'xml:space',
		y: 0,
		y1: 0,
		y2: 0,
		yChannelSelector: 'yChannelSelector',
		z: 0,
		zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
		Properties: {},
		DOMAttributeNamespaces: {
			xlinkActuate: NS.xlink,
			xlinkArcrole: NS.xlink,
			xlinkHref: NS.xlink,
			xlinkRole: NS.xlink,
			xlinkShow: NS.xlink,
			xlinkTitle: NS.xlink,
			xlinkType: NS.xlink,
			xmlBase: NS.xml,
			xmlLang: NS.xml,
			xmlSpace: NS.xml
		},
		DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
		SVGDOMPropertyConfig.Properties[key] = 0;
		if (ATTRS[key]) {
			SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
		}
	});

	module.exports = SVGDOMPropertyConfig;
},{}],711:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

	'use strict';

	var EventConstants = require('./EventConstants');
	var EventPropagators = require('./EventPropagators');
	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	var ReactDOMComponentTree = require('./ReactDOMComponentTree');
	var ReactInputSelection = require('./ReactInputSelection');
	var SyntheticEvent = require('./SyntheticEvent');

	var getActiveElement = require('fbjs/lib/getActiveElement');
	var isTextInputElement = require('./isTextInputElement');
	var keyOf = require('fbjs/lib/keyOf');
	var shallowEqual = require('fbjs/lib/shallowEqual');

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
		select: {
			phasedRegistrationNames: {
				bubbled: keyOf({ onSelect: null }),
				captured: keyOf({ onSelectCapture: null })
			},
			dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
		}
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
	function getSelection(node) {
		if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
			return {
				start: node.selectionStart,
				end: node.selectionEnd
			};
		} else if (window.getSelection) {
			var selection = window.getSelection();
			return {
				anchorNode: selection.anchorNode,
				anchorOffset: selection.anchorOffset,
				focusNode: selection.focusNode,
				focusOffset: selection.focusOffset
			};
		} else if (document.selection) {
			var range = document.selection.createRange();
			return {
				parentElement: range.parentElement(),
				text: range.text,
				top: range.boundingTop,
				left: range.boundingLeft
			};
		}
	}

	/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
		// Ensure we have the right element, and that the user is not dragging a
		// selection (this matches native `select` event behavior). In HTML5, select
		// fires only on input and textarea thus if there's no focused element we
		// won't dispatch.
		if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
			return null;
		}

		// Only fire when selection has actually changed.
		var currentSelection = getSelection(activeElement);
		if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
			lastSelection = currentSelection;

			var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

			syntheticEvent.type = 'select';
			syntheticEvent.target = activeElement;

			EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

			return syntheticEvent;
		}

		return null;
	}

	/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
	var SelectEventPlugin = {

		eventTypes: eventTypes,

		extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
			if (!hasListener) {
				return null;
			}

			var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

			switch (topLevelType) {
			// Track the input node that has focus.
			case topLevelTypes.topFocus:
				if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
					activeElement = targetNode;
					activeElementInst = targetInst;
					lastSelection = null;
				}
				break;
			case topLevelTypes.topBlur:
				activeElement = null;
				activeElementInst = null;
				lastSelection = null;
				break;

				// Don't fire the event while the user is dragging. This matches the
				// semantics of the native select event.
			case topLevelTypes.topMouseDown:
				mouseDown = true;
				break;
			case topLevelTypes.topContextMenu:
			case topLevelTypes.topMouseUp:
				mouseDown = false;
				return constructSelectEvent(nativeEvent, nativeEventTarget);

				// Chrome and IE fire non-standard event when selection is changed (and
				// sometimes when it hasn't). IE's event fires out of order with respect
				// to key and input events on deletion, so we discard it.
				//
				// Firefox doesn't support selectionchange, so check selection status
				// after each key entry. The selection changes after keydown and before
				// keyup, but we check on keydown as well in the case of holding down a
				// key, when multiple keydown events are fired but only one keyup is.
				// This is also our approach for IE handling, for the reason above.
			case topLevelTypes.topSelectionChange:
				if (skipSelectionChangeEvent) {
					break;
				}
				// falls through
			case topLevelTypes.topKeyDown:
			case topLevelTypes.topKeyUp:
				return constructSelectEvent(nativeEvent, nativeEventTarget);
			}

			return null;
		},

		didPutListener: function (inst, registrationName, listener) {
			if (registrationName === ON_SELECT_KEY) {
				hasListener = true;
			}
		}
	};

	module.exports = SelectEventPlugin;
},{"./EventConstants":632,"./EventPropagators":636,"./ReactDOMComponentTree":658,"./ReactInputSelection":686,"./SyntheticEvent":717,"./isTextInputElement":749,"fbjs/lib/ExecutionEnvironment":760,"fbjs/lib/getActiveElement":769,"fbjs/lib/keyOf":778,"fbjs/lib/shallowEqual":782}],712:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var EventConstants = require('./EventConstants');
		var EventListener = require('fbjs/lib/EventListener');
		var EventPropagators = require('./EventPropagators');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var SyntheticAnimationEvent = require('./SyntheticAnimationEvent');
		var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
		var SyntheticEvent = require('./SyntheticEvent');
		var SyntheticFocusEvent = require('./SyntheticFocusEvent');
		var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
		var SyntheticMouseEvent = require('./SyntheticMouseEvent');
		var SyntheticDragEvent = require('./SyntheticDragEvent');
		var SyntheticTouchEvent = require('./SyntheticTouchEvent');
		var SyntheticTransitionEvent = require('./SyntheticTransitionEvent');
		var SyntheticUIEvent = require('./SyntheticUIEvent');
		var SyntheticWheelEvent = require('./SyntheticWheelEvent');

		var emptyFunction = require('fbjs/lib/emptyFunction');
		var getEventCharCode = require('./getEventCharCode');
		var invariant = require('fbjs/lib/invariant');
		var keyOf = require('fbjs/lib/keyOf');

		var topLevelTypes = EventConstants.topLevelTypes;

		var eventTypes = {
			abort: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onAbort: true }),
					captured: keyOf({ onAbortCapture: true })
				}
			},
			animationEnd: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onAnimationEnd: true }),
					captured: keyOf({ onAnimationEndCapture: true })
				}
			},
			animationIteration: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onAnimationIteration: true }),
					captured: keyOf({ onAnimationIterationCapture: true })
				}
			},
			animationStart: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onAnimationStart: true }),
					captured: keyOf({ onAnimationStartCapture: true })
				}
			},
			blur: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onBlur: true }),
					captured: keyOf({ onBlurCapture: true })
				}
			},
			canPlay: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onCanPlay: true }),
					captured: keyOf({ onCanPlayCapture: true })
				}
			},
			canPlayThrough: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onCanPlayThrough: true }),
					captured: keyOf({ onCanPlayThroughCapture: true })
				}
			},
			click: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onClick: true }),
					captured: keyOf({ onClickCapture: true })
				}
			},
			contextMenu: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onContextMenu: true }),
					captured: keyOf({ onContextMenuCapture: true })
				}
			},
			copy: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onCopy: true }),
					captured: keyOf({ onCopyCapture: true })
				}
			},
			cut: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onCut: true }),
					captured: keyOf({ onCutCapture: true })
				}
			},
			doubleClick: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDoubleClick: true }),
					captured: keyOf({ onDoubleClickCapture: true })
				}
			},
			drag: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDrag: true }),
					captured: keyOf({ onDragCapture: true })
				}
			},
			dragEnd: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDragEnd: true }),
					captured: keyOf({ onDragEndCapture: true })
				}
			},
			dragEnter: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDragEnter: true }),
					captured: keyOf({ onDragEnterCapture: true })
				}
			},
			dragExit: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDragExit: true }),
					captured: keyOf({ onDragExitCapture: true })
				}
			},
			dragLeave: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDragLeave: true }),
					captured: keyOf({ onDragLeaveCapture: true })
				}
			},
			dragOver: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDragOver: true }),
					captured: keyOf({ onDragOverCapture: true })
				}
			},
			dragStart: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDragStart: true }),
					captured: keyOf({ onDragStartCapture: true })
				}
			},
			drop: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDrop: true }),
					captured: keyOf({ onDropCapture: true })
				}
			},
			durationChange: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onDurationChange: true }),
					captured: keyOf({ onDurationChangeCapture: true })
				}
			},
			emptied: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onEmptied: true }),
					captured: keyOf({ onEmptiedCapture: true })
				}
			},
			encrypted: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onEncrypted: true }),
					captured: keyOf({ onEncryptedCapture: true })
				}
			},
			ended: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onEnded: true }),
					captured: keyOf({ onEndedCapture: true })
				}
			},
			error: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onError: true }),
					captured: keyOf({ onErrorCapture: true })
				}
			},
			focus: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onFocus: true }),
					captured: keyOf({ onFocusCapture: true })
				}
			},
			input: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onInput: true }),
					captured: keyOf({ onInputCapture: true })
				}
			},
			invalid: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onInvalid: true }),
					captured: keyOf({ onInvalidCapture: true })
				}
			},
			keyDown: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onKeyDown: true }),
					captured: keyOf({ onKeyDownCapture: true })
				}
			},
			keyPress: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onKeyPress: true }),
					captured: keyOf({ onKeyPressCapture: true })
				}
			},
			keyUp: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onKeyUp: true }),
					captured: keyOf({ onKeyUpCapture: true })
				}
			},
			load: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onLoad: true }),
					captured: keyOf({ onLoadCapture: true })
				}
			},
			loadedData: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onLoadedData: true }),
					captured: keyOf({ onLoadedDataCapture: true })
				}
			},
			loadedMetadata: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onLoadedMetadata: true }),
					captured: keyOf({ onLoadedMetadataCapture: true })
				}
			},
			loadStart: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onLoadStart: true }),
					captured: keyOf({ onLoadStartCapture: true })
				}
			},
			// Note: We do not allow listening to mouseOver events. Instead, use the
			// onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
			mouseDown: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onMouseDown: true }),
					captured: keyOf({ onMouseDownCapture: true })
				}
			},
			mouseMove: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onMouseMove: true }),
					captured: keyOf({ onMouseMoveCapture: true })
				}
			},
			mouseOut: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onMouseOut: true }),
					captured: keyOf({ onMouseOutCapture: true })
				}
			},
			mouseOver: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onMouseOver: true }),
					captured: keyOf({ onMouseOverCapture: true })
				}
			},
			mouseUp: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onMouseUp: true }),
					captured: keyOf({ onMouseUpCapture: true })
				}
			},
			paste: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onPaste: true }),
					captured: keyOf({ onPasteCapture: true })
				}
			},
			pause: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onPause: true }),
					captured: keyOf({ onPauseCapture: true })
				}
			},
			play: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onPlay: true }),
					captured: keyOf({ onPlayCapture: true })
				}
			},
			playing: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onPlaying: true }),
					captured: keyOf({ onPlayingCapture: true })
				}
			},
			progress: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onProgress: true }),
					captured: keyOf({ onProgressCapture: true })
				}
			},
			rateChange: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onRateChange: true }),
					captured: keyOf({ onRateChangeCapture: true })
				}
			},
			reset: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onReset: true }),
					captured: keyOf({ onResetCapture: true })
				}
			},
			scroll: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onScroll: true }),
					captured: keyOf({ onScrollCapture: true })
				}
			},
			seeked: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onSeeked: true }),
					captured: keyOf({ onSeekedCapture: true })
				}
			},
			seeking: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onSeeking: true }),
					captured: keyOf({ onSeekingCapture: true })
				}
			},
			stalled: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onStalled: true }),
					captured: keyOf({ onStalledCapture: true })
				}
			},
			submit: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onSubmit: true }),
					captured: keyOf({ onSubmitCapture: true })
				}
			},
			suspend: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onSuspend: true }),
					captured: keyOf({ onSuspendCapture: true })
				}
			},
			timeUpdate: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onTimeUpdate: true }),
					captured: keyOf({ onTimeUpdateCapture: true })
				}
			},
			touchCancel: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onTouchCancel: true }),
					captured: keyOf({ onTouchCancelCapture: true })
				}
			},
			touchEnd: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onTouchEnd: true }),
					captured: keyOf({ onTouchEndCapture: true })
				}
			},
			touchMove: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onTouchMove: true }),
					captured: keyOf({ onTouchMoveCapture: true })
				}
			},
			touchStart: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onTouchStart: true }),
					captured: keyOf({ onTouchStartCapture: true })
				}
			},
			transitionEnd: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onTransitionEnd: true }),
					captured: keyOf({ onTransitionEndCapture: true })
				}
			},
			volumeChange: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onVolumeChange: true }),
					captured: keyOf({ onVolumeChangeCapture: true })
				}
			},
			waiting: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onWaiting: true }),
					captured: keyOf({ onWaitingCapture: true })
				}
			},
			wheel: {
				phasedRegistrationNames: {
					bubbled: keyOf({ onWheel: true }),
					captured: keyOf({ onWheelCapture: true })
				}
			}
		};

		var topLevelEventsToDispatchConfig = {
			topAbort: eventTypes.abort,
			topAnimationEnd: eventTypes.animationEnd,
			topAnimationIteration: eventTypes.animationIteration,
			topAnimationStart: eventTypes.animationStart,
			topBlur: eventTypes.blur,
			topCanPlay: eventTypes.canPlay,
			topCanPlayThrough: eventTypes.canPlayThrough,
			topClick: eventTypes.click,
			topContextMenu: eventTypes.contextMenu,
			topCopy: eventTypes.copy,
			topCut: eventTypes.cut,
			topDoubleClick: eventTypes.doubleClick,
			topDrag: eventTypes.drag,
			topDragEnd: eventTypes.dragEnd,
			topDragEnter: eventTypes.dragEnter,
			topDragExit: eventTypes.dragExit,
			topDragLeave: eventTypes.dragLeave,
			topDragOver: eventTypes.dragOver,
			topDragStart: eventTypes.dragStart,
			topDrop: eventTypes.drop,
			topDurationChange: eventTypes.durationChange,
			topEmptied: eventTypes.emptied,
			topEncrypted: eventTypes.encrypted,
			topEnded: eventTypes.ended,
			topError: eventTypes.error,
			topFocus: eventTypes.focus,
			topInput: eventTypes.input,
			topInvalid: eventTypes.invalid,
			topKeyDown: eventTypes.keyDown,
			topKeyPress: eventTypes.keyPress,
			topKeyUp: eventTypes.keyUp,
			topLoad: eventTypes.load,
			topLoadedData: eventTypes.loadedData,
			topLoadedMetadata: eventTypes.loadedMetadata,
			topLoadStart: eventTypes.loadStart,
			topMouseDown: eventTypes.mouseDown,
			topMouseMove: eventTypes.mouseMove,
			topMouseOut: eventTypes.mouseOut,
			topMouseOver: eventTypes.mouseOver,
			topMouseUp: eventTypes.mouseUp,
			topPaste: eventTypes.paste,
			topPause: eventTypes.pause,
			topPlay: eventTypes.play,
			topPlaying: eventTypes.playing,
			topProgress: eventTypes.progress,
			topRateChange: eventTypes.rateChange,
			topReset: eventTypes.reset,
			topScroll: eventTypes.scroll,
			topSeeked: eventTypes.seeked,
			topSeeking: eventTypes.seeking,
			topStalled: eventTypes.stalled,
			topSubmit: eventTypes.submit,
			topSuspend: eventTypes.suspend,
			topTimeUpdate: eventTypes.timeUpdate,
			topTouchCancel: eventTypes.touchCancel,
			topTouchEnd: eventTypes.touchEnd,
			topTouchMove: eventTypes.touchMove,
			topTouchStart: eventTypes.touchStart,
			topTransitionEnd: eventTypes.transitionEnd,
			topVolumeChange: eventTypes.volumeChange,
			topWaiting: eventTypes.waiting,
			topWheel: eventTypes.wheel
		};

		for (var type in topLevelEventsToDispatchConfig) {
			topLevelEventsToDispatchConfig[type].dependencies = [type];
		}

		var ON_CLICK_KEY = keyOf({ onClick: null });
		var onClickListeners = {};

		function getDictionaryKey(inst) {
			// Prevents V8 performance issue:
			// https://github.com/facebook/react/pull/7232
			return '.' + inst._rootNodeID;
		}

		var SimpleEventPlugin = {

			eventTypes: eventTypes,

			extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
				var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
				if (!dispatchConfig) {
					return null;
				}
				var EventConstructor;
				switch (topLevelType) {
				case topLevelTypes.topAbort:
				case topLevelTypes.topCanPlay:
				case topLevelTypes.topCanPlayThrough:
				case topLevelTypes.topDurationChange:
				case topLevelTypes.topEmptied:
				case topLevelTypes.topEncrypted:
				case topLevelTypes.topEnded:
				case topLevelTypes.topError:
				case topLevelTypes.topInput:
				case topLevelTypes.topInvalid:
				case topLevelTypes.topLoad:
				case topLevelTypes.topLoadedData:
				case topLevelTypes.topLoadedMetadata:
				case topLevelTypes.topLoadStart:
				case topLevelTypes.topPause:
				case topLevelTypes.topPlay:
				case topLevelTypes.topPlaying:
				case topLevelTypes.topProgress:
				case topLevelTypes.topRateChange:
				case topLevelTypes.topReset:
				case topLevelTypes.topSeeked:
				case topLevelTypes.topSeeking:
				case topLevelTypes.topStalled:
				case topLevelTypes.topSubmit:
				case topLevelTypes.topSuspend:
				case topLevelTypes.topTimeUpdate:
				case topLevelTypes.topVolumeChange:
				case topLevelTypes.topWaiting:
					// HTML Events
					// @see http://www.w3.org/TR/html5/index.html#events-0
					EventConstructor = SyntheticEvent;
					break;
				case topLevelTypes.topKeyPress:
					// Firefox creates a keypress event for function keys too. This removes
					// the unwanted keypress events. Enter is however both printable and
					// non-printable. One would expect Tab to be as well (but it isn't).
					if (getEventCharCode(nativeEvent) === 0) {
						return null;
					}
					/* falls through */
				case topLevelTypes.topKeyDown:
				case topLevelTypes.topKeyUp:
					EventConstructor = SyntheticKeyboardEvent;
					break;
				case topLevelTypes.topBlur:
				case topLevelTypes.topFocus:
					EventConstructor = SyntheticFocusEvent;
					break;
				case topLevelTypes.topClick:
					// Firefox creates a click event on right mouse clicks. This removes the
					// unwanted click events.
					if (nativeEvent.button === 2) {
						return null;
					}
					/* falls through */
				case topLevelTypes.topContextMenu:
				case topLevelTypes.topDoubleClick:
				case topLevelTypes.topMouseDown:
				case topLevelTypes.topMouseMove:
				case topLevelTypes.topMouseOut:
				case topLevelTypes.topMouseOver:
				case topLevelTypes.topMouseUp:
					EventConstructor = SyntheticMouseEvent;
					break;
				case topLevelTypes.topDrag:
				case topLevelTypes.topDragEnd:
				case topLevelTypes.topDragEnter:
				case topLevelTypes.topDragExit:
				case topLevelTypes.topDragLeave:
				case topLevelTypes.topDragOver:
				case topLevelTypes.topDragStart:
				case topLevelTypes.topDrop:
					EventConstructor = SyntheticDragEvent;
					break;
				case topLevelTypes.topTouchCancel:
				case topLevelTypes.topTouchEnd:
				case topLevelTypes.topTouchMove:
				case topLevelTypes.topTouchStart:
					EventConstructor = SyntheticTouchEvent;
					break;
				case topLevelTypes.topAnimationEnd:
				case topLevelTypes.topAnimationIteration:
				case topLevelTypes.topAnimationStart:
					EventConstructor = SyntheticAnimationEvent;
					break;
				case topLevelTypes.topTransitionEnd:
					EventConstructor = SyntheticTransitionEvent;
					break;
				case topLevelTypes.topScroll:
					EventConstructor = SyntheticUIEvent;
					break;
				case topLevelTypes.topWheel:
					EventConstructor = SyntheticWheelEvent;
					break;
				case topLevelTypes.topCopy:
				case topLevelTypes.topCut:
				case topLevelTypes.topPaste:
					EventConstructor = SyntheticClipboardEvent;
					break;
				}
				!EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
				var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
				EventPropagators.accumulateTwoPhaseDispatches(event);
				return event;
			},

			didPutListener: function (inst, registrationName, listener) {
				// Mobile Safari does not fire properly bubble click events on
				// non-interactive elements, which means delegated click listeners do not
				// fire. The workaround for this bug involves attaching an empty click
				// listener on the target node.
				if (registrationName === ON_CLICK_KEY) {
					var key = getDictionaryKey(inst);
					var node = ReactDOMComponentTree.getNodeFromInstance(inst);
					if (!onClickListeners[key]) {
						onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
					}
				}
			},

			willDeleteListener: function (inst, registrationName) {
				if (registrationName === ON_CLICK_KEY) {
					var key = getDictionaryKey(inst);
					onClickListeners[key].remove();
					delete onClickListeners[key];
				}
			}

		};

		module.exports = SimpleEventPlugin;
	}).call(this,require('_process'));
},{"./EventConstants":632,"./EventPropagators":636,"./ReactDOMComponentTree":658,"./SyntheticAnimationEvent":713,"./SyntheticClipboardEvent":714,"./SyntheticDragEvent":716,"./SyntheticEvent":717,"./SyntheticFocusEvent":718,"./SyntheticKeyboardEvent":720,"./SyntheticMouseEvent":721,"./SyntheticTouchEvent":722,"./SyntheticTransitionEvent":723,"./SyntheticUIEvent":724,"./SyntheticWheelEvent":725,"./getEventCharCode":738,"./reactProdInvariant":752,"_process":615,"fbjs/lib/EventListener":759,"fbjs/lib/emptyFunction":766,"fbjs/lib/invariant":774,"fbjs/lib/keyOf":778}],713:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticAnimationEvent
 */

	'use strict';

	var SyntheticEvent = require('./SyntheticEvent');

	/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
	var AnimationEventInterface = {
		animationName: null,
		elapsedTime: null,
		pseudoElement: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;
},{"./SyntheticEvent":717}],714:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 */

	'use strict';

	var SyntheticEvent = require('./SyntheticEvent');

	/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
	var ClipboardEventInterface = {
		clipboardData: function (event) {
			return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
		}
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":717}],715:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 */

	'use strict';

	var SyntheticEvent = require('./SyntheticEvent');

	/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
	var CompositionEventInterface = {
		data: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":717}],716:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 */

	'use strict';

	var SyntheticMouseEvent = require('./SyntheticMouseEvent');

	/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
	var DragEventInterface = {
		dataTransfer: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":721}],717:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 */

		'use strict';

		var _assign = require('object-assign');

		var PooledClass = require('./PooledClass');

		var emptyFunction = require('fbjs/lib/emptyFunction');
		var warning = require('fbjs/lib/warning');

		var didWarnForAddedNewProperty = false;
		var isProxySupported = typeof Proxy === 'function';

		var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

		/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
		var EventInterface = {
			type: null,
			target: null,
			// currentTarget is set when dispatching; no use in copying it here
			currentTarget: emptyFunction.thatReturnsNull,
			eventPhase: null,
			bubbles: null,
			cancelable: null,
			timeStamp: function (event) {
				return event.timeStamp || Date.now();
			},
			defaultPrevented: null,
			isTrusted: null
		};

		/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
		function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
			if (process.env.NODE_ENV !== 'production') {
				// these have a getter/setter for warnings
				delete this.nativeEvent;
				delete this.preventDefault;
				delete this.stopPropagation;
			}

			this.dispatchConfig = dispatchConfig;
			this._targetInst = targetInst;
			this.nativeEvent = nativeEvent;

			var Interface = this.constructor.Interface;
			for (var propName in Interface) {
				if (!Interface.hasOwnProperty(propName)) {
					continue;
				}
				if (process.env.NODE_ENV !== 'production') {
					delete this[propName]; // this has a getter/setter for warnings
				}
				var normalize = Interface[propName];
				if (normalize) {
					this[propName] = normalize(nativeEvent);
				} else {
					if (propName === 'target') {
						this.target = nativeEventTarget;
					} else {
						this[propName] = nativeEvent[propName];
					}
				}
			}

			var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
			if (defaultPrevented) {
				this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
			} else {
				this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
			}
			this.isPropagationStopped = emptyFunction.thatReturnsFalse;
			return this;
		}

		_assign(SyntheticEvent.prototype, {

			preventDefault: function () {
				this.defaultPrevented = true;
				var event = this.nativeEvent;
				if (!event) {
					return;
				}

				if (event.preventDefault) {
					event.preventDefault();
				} else if (typeof event.returnValue !== 'unknown') {
					// eslint-disable-line valid-typeof
					event.returnValue = false;
				}
				this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
			},

			stopPropagation: function () {
				var event = this.nativeEvent;
				if (!event) {
					return;
				}

				if (event.stopPropagation) {
					event.stopPropagation();
				} else if (typeof event.cancelBubble !== 'unknown') {
					// eslint-disable-line valid-typeof
					// The ChangeEventPlugin registers a "propertychange" event for
					// IE. This event does not support bubbling or cancelling, and
					// any references to cancelBubble throw "Member not found".  A
					// typeof check of "unknown" circumvents this issue (and is also
					// IE specific).
					event.cancelBubble = true;
				}

				this.isPropagationStopped = emptyFunction.thatReturnsTrue;
			},

			/**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
			persist: function () {
				this.isPersistent = emptyFunction.thatReturnsTrue;
			},

			/**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
			isPersistent: emptyFunction.thatReturnsFalse,

			/**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
			destructor: function () {
				var Interface = this.constructor.Interface;
				for (var propName in Interface) {
					if (process.env.NODE_ENV !== 'production') {
						Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
					} else {
						this[propName] = null;
					}
				}
				for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
					this[shouldBeReleasedProperties[i]] = null;
				}
				if (process.env.NODE_ENV !== 'production') {
					Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
					Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
					Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
				}
			}

		});

		SyntheticEvent.Interface = EventInterface;

		if (process.env.NODE_ENV !== 'production') {
			if (isProxySupported) {
				/*eslint-disable no-func-assign */
				SyntheticEvent = new Proxy(SyntheticEvent, {
					construct: function (target, args) {
						return this.apply(target, Object.create(target.prototype), args);
					},
					apply: function (constructor, that, args) {
						return new Proxy(constructor.apply(that, args), {
							set: function (target, prop, value) {
								if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
									process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
									didWarnForAddedNewProperty = true;
								}
								target[prop] = value;
								return true;
							}
						});
					}
				});
				/*eslint-enable no-func-assign */
			}
		}
		/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
		SyntheticEvent.augmentClass = function (Class, Interface) {
			var Super = this;

			var E = function () {};
			E.prototype = Super.prototype;
			var prototype = new E();

			_assign(prototype, Class.prototype);
			Class.prototype = prototype;
			Class.prototype.constructor = Class;

			Class.Interface = _assign({}, Super.Interface, Interface);
			Class.augmentClass = Super.augmentClass;

			PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
		};

		PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

		module.exports = SyntheticEvent;

		/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
		function getPooledWarningPropertyDefinition(propName, getVal) {
			var isFunction = typeof getVal === 'function';
			return {
				configurable: true,
				set: set,
				get: get
			};

			function set(val) {
				var action = isFunction ? 'setting the method' : 'setting the property';
				warn(action, 'This is effectively a no-op');
				return val;
			}

			function get() {
				var action = isFunction ? 'accessing the method' : 'accessing the property';
				var result = isFunction ? 'This is a no-op function' : 'This is set to null';
				warn(action, result);
				return getVal;
			}

			function warn(action, result) {
				var warningCondition = false;
				process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
			}
		}
	}).call(this,require('_process'));
},{"./PooledClass":641,"_process":615,"fbjs/lib/emptyFunction":766,"fbjs/lib/warning":783,"object-assign":784}],718:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 */

	'use strict';

	var SyntheticUIEvent = require('./SyntheticUIEvent');

	/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
	var FocusEventInterface = {
		relatedTarget: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":724}],719:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 */

	'use strict';

	var SyntheticEvent = require('./SyntheticEvent');

	/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
	var InputEventInterface = {
		data: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":717}],720:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 */

	'use strict';

	var SyntheticUIEvent = require('./SyntheticUIEvent');

	var getEventCharCode = require('./getEventCharCode');
	var getEventKey = require('./getEventKey');
	var getEventModifierState = require('./getEventModifierState');

	/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
	var KeyboardEventInterface = {
		key: getEventKey,
		location: null,
		ctrlKey: null,
		shiftKey: null,
		altKey: null,
		metaKey: null,
		repeat: null,
		locale: null,
		getModifierState: getEventModifierState,
		// Legacy Interface
		charCode: function (event) {
			// `charCode` is the result of a KeyPress event and represents the value of
			// the actual printable character.

			// KeyPress is deprecated, but its replacement is not yet final and not
			// implemented in any major browser. Only KeyPress has charCode.
			if (event.type === 'keypress') {
				return getEventCharCode(event);
			}
			return 0;
		},
		keyCode: function (event) {
			// `keyCode` is the result of a KeyDown/Up event and represents the value of
			// physical keyboard key.

			// The actual meaning of the value depends on the users' keyboard layout
			// which cannot be detected. Assuming that it is a US keyboard layout
			// provides a surprisingly accurate mapping for US and European users.
			// Due to this, it is left to the user to implement at this time.
			if (event.type === 'keydown' || event.type === 'keyup') {
				return event.keyCode;
			}
			return 0;
		},
		which: function (event) {
			// `which` is an alias for either `keyCode` or `charCode` depending on the
			// type of the event.
			if (event.type === 'keypress') {
				return getEventCharCode(event);
			}
			if (event.type === 'keydown' || event.type === 'keyup') {
				return event.keyCode;
			}
			return 0;
		}
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":724,"./getEventCharCode":738,"./getEventKey":739,"./getEventModifierState":740}],721:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 */

	'use strict';

	var SyntheticUIEvent = require('./SyntheticUIEvent');
	var ViewportMetrics = require('./ViewportMetrics');

	var getEventModifierState = require('./getEventModifierState');

	/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
	var MouseEventInterface = {
		screenX: null,
		screenY: null,
		clientX: null,
		clientY: null,
		ctrlKey: null,
		shiftKey: null,
		altKey: null,
		metaKey: null,
		getModifierState: getEventModifierState,
		button: function (event) {
			// Webkit, Firefox, IE9+
			// which:  1 2 3
			// button: 0 1 2 (standard)
			var button = event.button;
			if ('which' in event) {
				return button;
			}
			// IE<9
			// which:  undefined
			// button: 0 0 0
			// button: 1 4 2 (onmouseup)
			return button === 2 ? 2 : button === 4 ? 1 : 0;
		},
		buttons: null,
		relatedTarget: function (event) {
			return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
		},
		// "Proprietary" Interface.
		pageX: function (event) {
			return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
		},
		pageY: function (event) {
			return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
		}
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":724,"./ViewportMetrics":727,"./getEventModifierState":740}],722:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 */

	'use strict';

	var SyntheticUIEvent = require('./SyntheticUIEvent');

	var getEventModifierState = require('./getEventModifierState');

	/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
	var TouchEventInterface = {
		touches: null,
		targetTouches: null,
		changedTouches: null,
		altKey: null,
		metaKey: null,
		ctrlKey: null,
		shiftKey: null,
		getModifierState: getEventModifierState
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":724,"./getEventModifierState":740}],723:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTransitionEvent
 */

	'use strict';

	var SyntheticEvent = require('./SyntheticEvent');

	/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
	var TransitionEventInterface = {
		propertyName: null,
		elapsedTime: null,
		pseudoElement: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;
},{"./SyntheticEvent":717}],724:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 */

	'use strict';

	var SyntheticEvent = require('./SyntheticEvent');

	var getEventTarget = require('./getEventTarget');

	/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
	var UIEventInterface = {
		view: function (event) {
			if (event.view) {
				return event.view;
			}

			var target = getEventTarget(event);
			if (target.window === target) {
				// target is a window object
				return target;
			}

			var doc = target.ownerDocument;
			// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
			if (doc) {
				return doc.defaultView || doc.parentWindow;
			} else {
				return window;
			}
		},
		detail: function (event) {
			return event.detail || 0;
		}
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":717,"./getEventTarget":741}],725:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 */

	'use strict';

	var SyntheticMouseEvent = require('./SyntheticMouseEvent');

	/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
	var WheelEventInterface = {
		deltaX: function (event) {
			return 'deltaX' in event ? event.deltaX :
			// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
				'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
		},
		deltaY: function (event) {
			return 'deltaY' in event ? event.deltaY :
			// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
				'wheelDeltaY' in event ? -event.wheelDeltaY :
				// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
					'wheelDelta' in event ? -event.wheelDelta : 0;
		},
		deltaZ: null,

		// Browsers without "deltaMode" is reporting in raw wheel delta where one
		// notch on the scroll is always +/- 120, roughly equivalent to pixels.
		// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
		// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
		deltaMode: null
	};

	/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
		return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":721}],726:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
		var Mixin = {
			/**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
			reinitializeTransaction: function () {
				this.transactionWrappers = this.getTransactionWrappers();
				if (this.wrapperInitData) {
					this.wrapperInitData.length = 0;
				} else {
					this.wrapperInitData = [];
				}
				this._isInTransaction = false;
			},

			_isInTransaction: false,

			/**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
			getTransactionWrappers: null,

			isInTransaction: function () {
				return !!this._isInTransaction;
			},

			/**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
			perform: function (method, scope, a, b, c, d, e, f) {
				this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
				var errorThrown;
				var ret;
				try {
					this._isInTransaction = true;
					// Catching errors makes debugging more difficult, so we start with
					// errorThrown set to true before setting it to false after calling
					// close -- if it's still set to true in the finally block, it means
					// one of these calls threw.
					errorThrown = true;
					this.initializeAll(0);
					ret = method.call(scope, a, b, c, d, e, f);
					errorThrown = false;
				} finally {
					try {
						if (errorThrown) {
							// If `method` throws, prefer to show that stack trace over any thrown
							// by invoking `closeAll`.
							try {
								this.closeAll(0);
							} catch (err) {}
						} else {
							// Since `method` didn't throw, we don't want to silence the exception
							// here.
							this.closeAll(0);
						}
					} finally {
						this._isInTransaction = false;
					}
				}
				return ret;
			},

			initializeAll: function (startIndex) {
				var transactionWrappers = this.transactionWrappers;
				for (var i = startIndex; i < transactionWrappers.length; i++) {
					var wrapper = transactionWrappers[i];
					try {
						// Catching errors makes debugging more difficult, so we start with the
						// OBSERVED_ERROR state before overwriting it with the real return value
						// of initialize -- if it's still set to OBSERVED_ERROR in the finally
						// block, it means wrapper.initialize threw.
						this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
						this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
					} finally {
						if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
							// The initializer for wrapper i threw an error; initialize the
							// remaining wrappers but silence any exceptions from them to ensure
							// that the first error is the one to bubble up.
							try {
								this.initializeAll(i + 1);
							} catch (err) {}
						}
					}
				}
			},

			/**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
			closeAll: function (startIndex) {
				!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
				var transactionWrappers = this.transactionWrappers;
				for (var i = startIndex; i < transactionWrappers.length; i++) {
					var wrapper = transactionWrappers[i];
					var initData = this.wrapperInitData[i];
					var errorThrown;
					try {
						// Catching errors makes debugging more difficult, so we start with
						// errorThrown set to true before setting it to false after calling
						// close -- if it's still set to true in the finally block, it means
						// wrapper.close threw.
						errorThrown = true;
						if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
							wrapper.close.call(this, initData);
						}
						errorThrown = false;
					} finally {
						if (errorThrown) {
							// The closer for wrapper i threw an error; close the remaining
							// wrappers but silence any exceptions from them to ensure that the
							// first error is the one to bubble up.
							try {
								this.closeAll(i + 1);
							} catch (e) {}
						}
					}
				}
				this.wrapperInitData.length = 0;
			}
		};

		var Transaction = {

			Mixin: Mixin,

			/**
   * Token to look for to determine if an error occurred.
   */
			OBSERVED_ERROR: {}

		};

		module.exports = Transaction;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],727:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

	'use strict';

	var ViewportMetrics = {

		currentScrollLeft: 0,

		currentScrollTop: 0,

		refreshScrollValues: function (scrollPosition) {
			ViewportMetrics.currentScrollLeft = scrollPosition.x;
			ViewportMetrics.currentScrollTop = scrollPosition.y;
		}

	};

	module.exports = ViewportMetrics;
},{}],728:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 * 
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var invariant = require('fbjs/lib/invariant');

		/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

		function accumulateInto(current, next) {
			!(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

			if (current == null) {
				return next;
			}

			// Both are not empty. Warning: Never call x.concat(y) when you are not
			// certain that x is an Array (x could be a string with concat method).
			if (Array.isArray(current)) {
				if (Array.isArray(next)) {
					current.push.apply(current, next);
					return current;
				}
				current.push(next);
				return current;
			}

			if (Array.isArray(next)) {
				// A bit too dangerous to mutate `next`.
				return [current].concat(next);
			}

			return [current, next];
		}

		module.exports = accumulateInto;
	}).call(this,require('_process'));
},{"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],729:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 * 
 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
		var a = 1;
		var b = 0;
		var i = 0;
		var l = data.length;
		var m = l & ~0x3;
		while (i < m) {
			var n = Math.min(i + 4096, m);
			for (; i < n; i += 4) {
				b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
			}
			a %= MOD;
			b %= MOD;
		}
		for (; i < l; i++) {
			b += a += data.charCodeAt(i);
		}
		a %= MOD;
		b %= MOD;
		return a | b << 16;
	}

	module.exports = adler32;
},{}],730:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

		'use strict';

		var canDefineProperty = false;
		if (process.env.NODE_ENV !== 'production') {
			try {
				Object.defineProperty({}, 'x', { get: function () {} });
				canDefineProperty = true;
			} catch (x) {
				// IE will fail on defineProperty
			}
		}

		module.exports = canDefineProperty;
	}).call(this,require('_process'));
},{"_process":615}],731:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule checkReactTypeSpec
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
		var ReactPropTypesSecret = require('./ReactPropTypesSecret');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		var ReactComponentTreeHook;

		if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
			// Temporary hack.
			// Inline requires don't work well with Jest:
			// https://github.com/facebook/react/issues/7240
			// Remove the inline requires when we don't need them anymore:
			// https://github.com/facebook/react/pull/7178
			ReactComponentTreeHook = require('./ReactComponentTreeHook');
		}

		var loggedTypeFailures = {};

		/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
		function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
			for (var typeSpecName in typeSpecs) {
				if (typeSpecs.hasOwnProperty(typeSpecName)) {
					var error;
					// Prop type validation may throw. In case they do, we don't want to
					// fail the render phase where it didn't fail before. So we log it.
					// After these have been cleaned up, we'll let them throw.
					try {
						// This is intentionally an invariant that gets caught. It's the same
						// behavior as without this statement except with a better message.
						!(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
						error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
					} catch (ex) {
						error = ex;
					}
					process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
					if (error instanceof Error && !(error.message in loggedTypeFailures)) {
						// Only monitor this failure once because there tends to be a lot of the
						// same error.
						loggedTypeFailures[error.message] = true;

						var componentStackInfo = '';

						if (process.env.NODE_ENV !== 'production') {
							if (!ReactComponentTreeHook) {
								ReactComponentTreeHook = require('./ReactComponentTreeHook');
							}
							if (debugID !== null) {
								componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
							} else if (element !== null) {
								componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
							}
						}

						process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
					}
				}
			}
		}

		module.exports = checkReactTypeSpec;
	}).call(this,require('_process'));
},{"./ReactComponentTreeHook":651,"./ReactPropTypeLocationNames":697,"./ReactPropTypesSecret":700,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],732:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createMicrosoftUnsafeLocalFunction
 */

	/* globals MSApp */

	'use strict';

	/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
		if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
			return function (arg0, arg1, arg2, arg3) {
				MSApp.execUnsafeLocalFunction(function () {
					return func(arg0, arg1, arg2, arg3);
				});
			};
		} else {
			return func;
		}
	};

	module.exports = createMicrosoftUnsafeLocalFunction;
},{}],733:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 */

		'use strict';

		var CSSProperty = require('./CSSProperty');
		var warning = require('fbjs/lib/warning');

		var isUnitlessNumber = CSSProperty.isUnitlessNumber;
		var styleWarnings = {};

		/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
		function dangerousStyleValue(name, value, component) {
			// Note that we've removed escapeTextForBrowser() calls here since the
			// whole string will be escaped when the attribute is injected into
			// the markup. If you provide unsafe user data here they can inject
			// arbitrary CSS which may be problematic (I couldn't repro this):
			// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
			// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
			// This is not an XSS hole but instead a potential CSS injection issue
			// which has lead to a greater discussion about how we're going to
			// trust URLs moving forward. See #2115901

			var isEmpty = value == null || typeof value === 'boolean' || value === '';
			if (isEmpty) {
				return '';
			}

			var isNonNumeric = isNaN(value);
			if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
				return '' + value; // cast to string
			}

			if (typeof value === 'string') {
				if (process.env.NODE_ENV !== 'production') {
					// Allow '0' to pass through without warning. 0 is already special and
					// doesn't require units, so we don't need to warn about it.
					if (component && value !== '0') {
						var owner = component._currentElement._owner;
						var ownerName = owner ? owner.getName() : null;
						if (ownerName && !styleWarnings[ownerName]) {
							styleWarnings[ownerName] = {};
						}
						var warned = false;
						if (ownerName) {
							var warnings = styleWarnings[ownerName];
							warned = warnings[name];
							if (!warned) {
								warnings[name] = true;
							}
						}
						if (!warned) {
							process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
						}
					}
				}
				value = value.trim();
			}
			return value + 'px';
		}

		module.exports = dangerousStyleValue;
	}).call(this,require('_process'));
},{"./CSSProperty":619,"_process":615,"fbjs/lib/warning":783}],734:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @providesModule escapeTextContentForBrowser
 */

	'use strict';

	// code copied and modified from escape-html
	/**
 * Module variables.
 * @private
 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

	function escapeHtml(string) {
		var str = '' + string;
		var match = matchHtmlRegExp.exec(str);

		if (!match) {
			return str;
		}

		var escape;
		var html = '';
		var index = 0;
		var lastIndex = 0;

		for (index = match.index; index < str.length; index++) {
			switch (str.charCodeAt(index)) {
			case 34:
				// "
				escape = '&quot;';
				break;
			case 38:
				// &
				escape = '&amp;';
				break;
			case 39:
				// '
				escape = '&#x27;'; // modified from escape-html; used to be '&#39'
				break;
			case 60:
				// <
				escape = '&lt;';
				break;
			case 62:
				// >
				escape = '&gt;';
				break;
			default:
				continue;
			}

			if (lastIndex !== index) {
				html += str.substring(lastIndex, index);
			}

			lastIndex = index + 1;
			html += escape;
		}

		return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
	function escapeTextContentForBrowser(text) {
		if (typeof text === 'boolean' || typeof text === 'number') {
			// this shortcircuit helps perf for types that we know will never have
			// special characters, especially given that this function is used often
			// for numeric dom ids.
			return '' + text;
		}
		return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;
},{}],735:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactDOMComponentTree = require('./ReactDOMComponentTree');
		var ReactInstanceMap = require('./ReactInstanceMap');

		var getHostComponentFromComposite = require('./getHostComponentFromComposite');
		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
		function findDOMNode(componentOrElement) {
			if (process.env.NODE_ENV !== 'production') {
				var owner = ReactCurrentOwner.current;
				if (owner !== null) {
					process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
					owner._warnedAboutRefsInRender = true;
				}
			}
			if (componentOrElement == null) {
				return null;
			}
			if (componentOrElement.nodeType === 1) {
				return componentOrElement;
			}

			var inst = ReactInstanceMap.get(componentOrElement);
			if (inst) {
				inst = getHostComponentFromComposite(inst);
				return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
			}

			if (typeof componentOrElement.render === 'function') {
				!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
			} else {
				!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
			}
		}

		module.exports = findDOMNode;
	}).call(this,require('_process'));
},{"./ReactCurrentOwner":653,"./ReactDOMComponentTree":658,"./ReactInstanceMap":687,"./getHostComponentFromComposite":742,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],736:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 * 
 */

		'use strict';

		var KeyEscapeUtils = require('./KeyEscapeUtils');
		var traverseAllChildren = require('./traverseAllChildren');
		var warning = require('fbjs/lib/warning');

		var ReactComponentTreeHook;

		if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
			// Temporary hack.
			// Inline requires don't work well with Jest:
			// https://github.com/facebook/react/issues/7240
			// Remove the inline requires when we don't need them anymore:
			// https://github.com/facebook/react/pull/7178
			ReactComponentTreeHook = require('./ReactComponentTreeHook');
		}

		/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
		function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
			// We found a component instance.
			if (traverseContext && typeof traverseContext === 'object') {
				var result = traverseContext;
				var keyUnique = result[name] === undefined;
				if (process.env.NODE_ENV !== 'production') {
					if (!ReactComponentTreeHook) {
						ReactComponentTreeHook = require('./ReactComponentTreeHook');
					}
					if (!keyUnique) {
						process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
					}
				}
				if (keyUnique && child != null) {
					result[name] = child;
				}
			}
		}

		/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
		function flattenChildren(children, selfDebugID) {
			if (children == null) {
				return children;
			}
			var result = {};

			if (process.env.NODE_ENV !== 'production') {
				traverseAllChildren(children, function (traverseContext, child, name) {
					return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
				}, result);
			} else {
				traverseAllChildren(children, flattenSingleChildIntoContext, result);
			}
			return result;
		}

		module.exports = flattenChildren;
	}).call(this,require('_process'));
},{"./KeyEscapeUtils":639,"./ReactComponentTreeHook":651,"./traverseAllChildren":757,"_process":615,"fbjs/lib/warning":783}],737:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 * 
 */

	'use strict';

	/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

	function forEachAccumulated(arr, cb, scope) {
		if (Array.isArray(arr)) {
			arr.forEach(cb, scope);
		} else if (arr) {
			cb.call(scope, arr);
		}
	}

	module.exports = forEachAccumulated;
},{}],738:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 */

	'use strict';

	/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

	function getEventCharCode(nativeEvent) {
		var charCode;
		var keyCode = nativeEvent.keyCode;

		if ('charCode' in nativeEvent) {
			charCode = nativeEvent.charCode;

			// FF does not set `charCode` for the Enter-key, check against `keyCode`.
			if (charCode === 0 && keyCode === 13) {
				charCode = 13;
			}
		} else {
			// IE8 does not implement `charCode`, but `keyCode` has the correct value.
			charCode = keyCode;
		}

		// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
		// Must not discard the (non-)printable Enter-key.
		if (charCode >= 32 || charCode === 13) {
			return charCode;
		}

		return 0;
	}

	module.exports = getEventCharCode;
},{}],739:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 */

	'use strict';

	var getEventCharCode = require('./getEventCharCode');

	/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
	var normalizeKey = {
		'Esc': 'Escape',
		'Spacebar': ' ',
		'Left': 'ArrowLeft',
		'Up': 'ArrowUp',
		'Right': 'ArrowRight',
		'Down': 'ArrowDown',
		'Del': 'Delete',
		'Win': 'OS',
		'Menu': 'ContextMenu',
		'Apps': 'ContextMenu',
		'Scroll': 'ScrollLock',
		'MozPrintableKey': 'Unidentified'
	};

	/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
	var translateToKey = {
		8: 'Backspace',
		9: 'Tab',
		12: 'Clear',
		13: 'Enter',
		16: 'Shift',
		17: 'Control',
		18: 'Alt',
		19: 'Pause',
		20: 'CapsLock',
		27: 'Escape',
		32: ' ',
		33: 'PageUp',
		34: 'PageDown',
		35: 'End',
		36: 'Home',
		37: 'ArrowLeft',
		38: 'ArrowUp',
		39: 'ArrowRight',
		40: 'ArrowDown',
		45: 'Insert',
		46: 'Delete',
		112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
		118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
		144: 'NumLock',
		145: 'ScrollLock',
		224: 'Meta'
	};

	/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
	function getEventKey(nativeEvent) {
		if (nativeEvent.key) {
			// Normalize inconsistent values reported by browsers due to
			// implementations of a working draft specification.

			// FireFox implements `key` but returns `MozPrintableKey` for all
			// printable characters (normalized to `Unidentified`), ignore it.
			var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
			if (key !== 'Unidentified') {
				return key;
			}
		}

		// Browser does not implement `key`, polyfill as much of it as we can.
		if (nativeEvent.type === 'keypress') {
			var charCode = getEventCharCode(nativeEvent);

			// The enter-key is technically both printable and non-printable and can
			// thus be captured by `keypress`, no other non-printable key should.
			return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
		}
		if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
			// While user keyboard layout determines the actual meaning of each
			// `keyCode` value, almost all function keys have a universal value.
			return translateToKey[nativeEvent.keyCode] || 'Unidentified';
		}
		return '';
	}

	module.exports = getEventKey;
},{"./getEventCharCode":738}],740:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 */

	'use strict';

	/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

	var modifierKeyToProp = {
		'Alt': 'altKey',
		'Control': 'ctrlKey',
		'Meta': 'metaKey',
		'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
		var syntheticEvent = this;
		var nativeEvent = syntheticEvent.nativeEvent;
		if (nativeEvent.getModifierState) {
			return nativeEvent.getModifierState(keyArg);
		}
		var keyProp = modifierKeyToProp[keyArg];
		return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
		return modifierStateGetter;
	}

	module.exports = getEventModifierState;
},{}],741:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 */

	'use strict';

	/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

	function getEventTarget(nativeEvent) {
		var target = nativeEvent.target || nativeEvent.srcElement || window;

		// Normalize SVG <use> element events #4963
		if (target.correspondingUseElement) {
			target = target.correspondingUseElement;
		}

		// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
		// @see http://www.quirksmode.org/js/events_properties.html
		return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;
},{}],742:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getHostComponentFromComposite
 */

	'use strict';

	var ReactNodeTypes = require('./ReactNodeTypes');

	function getHostComponentFromComposite(inst) {
		var type;

		while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
			inst = inst._renderedComponent;
		}

		if (type === ReactNodeTypes.HOST) {
			return inst._renderedComponent;
		} else if (type === ReactNodeTypes.EMPTY) {
			return null;
		}
	}

	module.exports = getHostComponentFromComposite;
},{"./ReactNodeTypes":694}],743:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * 
 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
	function getIteratorFn(maybeIterable) {
		var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		if (typeof iteratorFn === 'function') {
			return iteratorFn;
		}
	}

	module.exports = getIteratorFn;
},{}],744:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

	'use strict';

	/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

	function getLeafNode(node) {
		while (node && node.firstChild) {
			node = node.firstChild;
		}
		return node;
	}

	/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
	function getSiblingNode(node) {
		while (node) {
			if (node.nextSibling) {
				return node.nextSibling;
			}
			node = node.parentNode;
		}
	}

	/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
	function getNodeForCharacterOffset(root, offset) {
		var node = getLeafNode(root);
		var nodeStart = 0;
		var nodeEnd = 0;

		while (node) {
			if (node.nodeType === 3) {
				nodeEnd = nodeStart + node.textContent.length;

				if (nodeStart <= offset && nodeEnd >= offset) {
					return {
						node: node,
						offset: offset - nodeStart
					};
				}

				nodeStart = nodeEnd;
			}

			node = getLeafNode(getSiblingNode(node));
		}
	}

	module.exports = getNodeForCharacterOffset;
},{}],745:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

	'use strict';

	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

	var contentKey = null;

	/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
	function getTextContentAccessor() {
		if (!contentKey && ExecutionEnvironment.canUseDOM) {
			// Prefer textContent to innerText because many browsers support both but
			// SVG <text> elements don't support innerText even when <div> does.
			contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
		}
		return contentKey;
	}

	module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":760}],746:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getVendorPrefixedEventName
 */

	'use strict';

	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

	/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
	function makePrefixMap(styleProp, eventName) {
		var prefixes = {};

		prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
		prefixes['Webkit' + styleProp] = 'webkit' + eventName;
		prefixes['Moz' + styleProp] = 'moz' + eventName;
		prefixes['ms' + styleProp] = 'MS' + eventName;
		prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

		return prefixes;
	}

	/**
 * A list of event names to a configurable list of vendor prefixes.
 */
	var vendorPrefixes = {
		animationend: makePrefixMap('Animation', 'AnimationEnd'),
		animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
		animationstart: makePrefixMap('Animation', 'AnimationStart'),
		transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
 * Event names that have already been detected and prefixed (if applicable).
 */
	var prefixedEventNames = {};

	/**
 * Element to check for prefixes on.
 */
	var style = {};

	/**
 * Bootstrap if a DOM exists.
 */
	if (ExecutionEnvironment.canUseDOM) {
		style = document.createElement('div').style;

		// On some platforms, in particular some releases of Android 4.x,
		// the un-prefixed "animation" and "transition" properties are defined on the
		// style object but the events that fire will still be prefixed, so we need
		// to check if the un-prefixed events are usable, and if not remove them from the map.
		if (!('AnimationEvent' in window)) {
			delete vendorPrefixes.animationend.animation;
			delete vendorPrefixes.animationiteration.animation;
			delete vendorPrefixes.animationstart.animation;
		}

		// Same as above
		if (!('TransitionEvent' in window)) {
			delete vendorPrefixes.transitionend.transition;
		}
	}

	/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
	function getVendorPrefixedEventName(eventName) {
		if (prefixedEventNames[eventName]) {
			return prefixedEventNames[eventName];
		} else if (!vendorPrefixes[eventName]) {
			return eventName;
		}

		var prefixMap = vendorPrefixes[eventName];

		for (var styleProp in prefixMap) {
			if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
				return prefixedEventNames[eventName] = prefixMap[styleProp];
			}
		}

		return '';
	}

	module.exports = getVendorPrefixedEventName;
},{"fbjs/lib/ExecutionEnvironment":760}],747:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant'),
			_assign = require('object-assign');

		var ReactCompositeComponent = require('./ReactCompositeComponent');
		var ReactEmptyComponent = require('./ReactEmptyComponent');
		var ReactHostComponent = require('./ReactHostComponent');

		var invariant = require('fbjs/lib/invariant');
		var warning = require('fbjs/lib/warning');

		// To avoid a cyclic dependency, we create the final class in this module
		var ReactCompositeComponentWrapper = function (element) {
			this.construct(element);
		};
		_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
			_instantiateReactComponent: instantiateReactComponent
		});

		function getDeclarationErrorAddendum(owner) {
			if (owner) {
				var name = owner.getName();
				if (name) {
					return ' Check the render method of `' + name + '`.';
				}
			}
			return '';
		}

		/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
		function isInternalComponentType(type) {
			return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
		}

		var nextDebugID = 1;

		/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
		function instantiateReactComponent(node, shouldHaveDebugID) {
			var instance;

			if (node === null || node === false) {
				instance = ReactEmptyComponent.create(instantiateReactComponent);
			} else if (typeof node === 'object') {
				var element = node;
				!(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;

				// Special case string values
				if (typeof element.type === 'string') {
					instance = ReactHostComponent.createInternalComponent(element);
				} else if (isInternalComponentType(element.type)) {
					// This is temporarily available for custom components that are not string
					// representations. I.e. ART. Once those are updated to use the string
					// representation, we can drop this code path.
					instance = new element.type(element);

					// We renamed this. Allow the old name for compat. :(
					if (!instance.getHostNode) {
						instance.getHostNode = instance.getNativeNode;
					}
				} else {
					instance = new ReactCompositeComponentWrapper(element);
				}
			} else if (typeof node === 'string' || typeof node === 'number') {
				instance = ReactHostComponent.createInstanceForText(node);
			} else {
				!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
			}

			if (process.env.NODE_ENV !== 'production') {
				process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
			}

			// These two fields are used by the DOM and ART diffing algorithms
			// respectively. Instead of using expandos on components, we should be
			// storing the state needed by the diffing algorithms elsewhere.
			instance._mountIndex = 0;
			instance._mountImage = null;

			if (process.env.NODE_ENV !== 'production') {
				instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0;
			}

			// Internal instances should fully constructed at this point, so they should
			// not get any new fields added to them at this point.
			if (process.env.NODE_ENV !== 'production') {
				if (Object.preventExtensions) {
					Object.preventExtensions(instance);
				}
			}

			return instance;
		}

		module.exports = instantiateReactComponent;
	}).call(this,require('_process'));
},{"./ReactCompositeComponent":652,"./ReactEmptyComponent":678,"./ReactHostComponent":683,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783,"object-assign":784}],748:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

	'use strict';

	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
		useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
	}

	/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
	function isEventSupported(eventNameSuffix, capture) {
		if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
			return false;
		}

		var eventName = 'on' + eventNameSuffix;
		var isSupported = eventName in document;

		if (!isSupported) {
			var element = document.createElement('div');
			element.setAttribute(eventName, 'return;');
			isSupported = typeof element[eventName] === 'function';
		}

		if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
			// This is the only way to test support for the `wheel` event in IE9+.
			isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
		}

		return isSupported;
	}

	module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":760}],749:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 * 
 */

	'use strict';

	/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

	var supportedInputTypes = {
		'color': true,
		'date': true,
		'datetime': true,
		'datetime-local': true,
		'email': true,
		'month': true,
		'number': true,
		'password': true,
		'range': true,
		'search': true,
		'tel': true,
		'text': true,
		'time': true,
		'url': true,
		'week': true
	};

	function isTextInputElement(elem) {
		var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

		if (nodeName === 'input') {
			return !!supportedInputTypes[elem.type];
		}

		if (nodeName === 'textarea') {
			return true;
		}

		return false;
	}

	module.exports = isTextInputElement;
},{}],750:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactElement = require('./ReactElement');

		var invariant = require('fbjs/lib/invariant');

		/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
		function onlyChild(children) {
			!ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
			return children;
		}

		module.exports = onlyChild;
	}).call(this,require('_process'));
},{"./ReactElement":676,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774}],751:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

	'use strict';

	var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

	/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
	function quoteAttributeValueForBrowser(value) {
		return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":734}],752:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule reactProdInvariant
 * 
 */
	'use strict';

	/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

	function reactProdInvariant(code) {
		var argCount = arguments.length - 1;

		var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

		for (var argIdx = 0; argIdx < argCount; argIdx++) {
			message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
		}

		message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

		var error = new Error(message);
		error.name = 'Invariant Violation';
		error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

		throw error;
	}

	module.exports = reactProdInvariant;
},{}],753:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

	'use strict';

	var ReactMount = require('./ReactMount');

	module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":691}],754:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

	'use strict';

	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	var DOMNamespaces = require('./DOMNamespaces');

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
		// IE does not have innerHTML for SVG nodes, so instead we inject the
		// new markup in a temp node and then move the child nodes across into
		// the target node
		if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
			reusableSVGContainer = reusableSVGContainer || document.createElement('div');
			reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
			var svgNode = reusableSVGContainer.firstChild;
			while (svgNode.firstChild) {
				node.appendChild(svgNode.firstChild);
			}
		} else {
			node.innerHTML = html;
		}
	});

	if (ExecutionEnvironment.canUseDOM) {
		// IE8: When updating a just created node with innerHTML only leading
		// whitespace is removed. When updating an existing node with innerHTML
		// whitespace in root TextNodes is also collapsed.
		// @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

		// Feature detection; only IE8 is known to behave improperly like this.
		var testElement = document.createElement('div');
		testElement.innerHTML = ' ';
		if (testElement.innerHTML === '') {
			setInnerHTML = function (node, html) {
				// Magic theory: IE8 supposedly differentiates between added and updated
				// nodes when processing innerHTML, innerHTML on updated nodes suffers
				// from worse whitespace behavior. Re-adding a node like this triggers
				// the initial and more favorable whitespace behavior.
				// TODO: What to do on a detached node?
				if (node.parentNode) {
					node.parentNode.replaceChild(node, node);
				}

				// We also implement a workaround for non-visible tags disappearing into
				// thin air on IE8, this only happens if there is no visible text
				// in-front of the non-visible tags. Piggyback on the whitespace fix
				// and simply check if any non-visible tags appear in the source.
				if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
					// Recover leading whitespace by temporarily prepending any character.
					// \uFEFF has the potential advantage of being zero-width/invisible.
					// UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
					// in hopes that this is preserved even if "\uFEFF" is transformed to
					// the actual Unicode character (by Babel, for example).
					// https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
					node.innerHTML = String.fromCharCode(0xFEFF) + html;

					// deleteData leaves an empty `TextNode` which offsets the index of all
					// children. Definitely want to avoid this.
					var textNode = node.firstChild;
					if (textNode.data.length === 1) {
						node.removeChild(textNode);
					} else {
						textNode.deleteData(0, 1);
					}
				} else {
					node.innerHTML = html;
				}
			};
		}
		testElement = null;
	}

	module.exports = setInnerHTML;
},{"./DOMNamespaces":625,"./createMicrosoftUnsafeLocalFunction":732,"fbjs/lib/ExecutionEnvironment":760}],755:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

	'use strict';

	var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
	var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
	var setInnerHTML = require('./setInnerHTML');

	/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
	var setTextContent = function (node, text) {
		if (text) {
			var firstChild = node.firstChild;

			if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
				firstChild.nodeValue = text;
				return;
			}
		}
		node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
		if (!('textContent' in document.documentElement)) {
			setTextContent = function (node, text) {
				setInnerHTML(node, escapeTextContentForBrowser(text));
			};
		}
	}

	module.exports = setTextContent;
},{"./escapeTextContentForBrowser":734,"./setInnerHTML":754,"fbjs/lib/ExecutionEnvironment":760}],756:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 */

	'use strict';

	/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
		var prevEmpty = prevElement === null || prevElement === false;
		var nextEmpty = nextElement === null || nextElement === false;
		if (prevEmpty || nextEmpty) {
			return prevEmpty === nextEmpty;
		}

		var prevType = typeof prevElement;
		var nextType = typeof nextElement;
		if (prevType === 'string' || prevType === 'number') {
			return nextType === 'string' || nextType === 'number';
		} else {
			return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
		}
	}

	module.exports = shouldUpdateReactComponent;
},{}],757:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

		'use strict';

		var _prodInvariant = require('./reactProdInvariant');

		var ReactCurrentOwner = require('./ReactCurrentOwner');
		var ReactElement = require('./ReactElement');

		var getIteratorFn = require('./getIteratorFn');
		var invariant = require('fbjs/lib/invariant');
		var KeyEscapeUtils = require('./KeyEscapeUtils');
		var warning = require('fbjs/lib/warning');

		var SEPARATOR = '.';
		var SUBSEPARATOR = ':';

		/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

		var didWarnAboutMaps = false;

		/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
		function getComponentKey(component, index) {
			// Do some typechecking here since we call this blindly. We want to ensure
			// that we don't block potential future ES APIs.
			if (component && typeof component === 'object' && component.key != null) {
				// Explicit key
				return KeyEscapeUtils.escape(component.key);
			}
			// Implicit key determined by the index in the set
			return index.toString(36);
		}

		/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
		function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
			var type = typeof children;

			if (type === 'undefined' || type === 'boolean') {
				// All of the above are perceived as null.
				children = null;
			}

			if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
				callback(traverseContext, children,
					// If it's the only child, treat the name as if it was wrapped in an array
					// so that it's consistent if the number of children grows.
					nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
				return 1;
			}

			var child;
			var nextName;
			var subtreeCount = 0; // Count of children found in the current subtree.
			var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

			if (Array.isArray(children)) {
				for (var i = 0; i < children.length; i++) {
					child = children[i];
					nextName = nextNamePrefix + getComponentKey(child, i);
					subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
				}
			} else {
				var iteratorFn = getIteratorFn(children);
				if (iteratorFn) {
					var iterator = iteratorFn.call(children);
					var step;
					if (iteratorFn !== children.entries) {
						var ii = 0;
						while (!(step = iterator.next()).done) {
							child = step.value;
							nextName = nextNamePrefix + getComponentKey(child, ii++);
							subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
						}
					} else {
						if (process.env.NODE_ENV !== 'production') {
							var mapsAsChildrenAddendum = '';
							if (ReactCurrentOwner.current) {
								var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
								if (mapsAsChildrenOwnerName) {
									mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
								}
							}
							process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
							didWarnAboutMaps = true;
						}
						// Iterator will provide entry [k,v] tuples rather than values.
						while (!(step = iterator.next()).done) {
							var entry = step.value;
							if (entry) {
								child = entry[1];
								nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
								subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
							}
						}
					}
				} else if (type === 'object') {
					var addendum = '';
					if (process.env.NODE_ENV !== 'production') {
						addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
						if (children._isReactElement) {
							addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
						}
						if (ReactCurrentOwner.current) {
							var name = ReactCurrentOwner.current.getName();
							if (name) {
								addendum += ' Check the render method of `' + name + '`.';
							}
						}
					}
					var childrenString = String(children);
					!false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
				}
			}

			return subtreeCount;
		}

		/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
		function traverseAllChildren(children, callback, traverseContext) {
			if (children == null) {
				return 0;
			}

			return traverseAllChildrenImpl(children, '', callback, traverseContext);
		}

		module.exports = traverseAllChildren;
	}).call(this,require('_process'));
},{"./KeyEscapeUtils":639,"./ReactCurrentOwner":653,"./ReactElement":676,"./getIteratorFn":743,"./reactProdInvariant":752,"_process":615,"fbjs/lib/invariant":774,"fbjs/lib/warning":783}],758:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

		'use strict';

		var _assign = require('object-assign');

		var emptyFunction = require('fbjs/lib/emptyFunction');
		var warning = require('fbjs/lib/warning');

		var validateDOMNesting = emptyFunction;

		if (process.env.NODE_ENV !== 'production') {
			// This validation code was written based on the HTML5 parsing spec:
			// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
			//
			// Note: this does not catch all invalid nesting, nor does it try to (as it's
			// not clear what practical benefit doing so provides); instead, we warn only
			// for cases where the parser will give a parse tree differing from what React
			// intended. For example, <b><div></div></b> is invalid but we don't warn
			// because it still parses correctly; we do warn for other cases like nested
			// <p> tags where the beginning of the second element implicitly closes the
			// first, causing a confusing mess.

			// https://html.spec.whatwg.org/multipage/syntax.html#special
			var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

			// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
			var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

				// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
				// TODO: Distinguish by namespace here -- for <title>, including it here
				// errs on the side of fewer warnings
				'foreignObject', 'desc', 'title'];

			// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
			var buttonScopeTags = inScopeTags.concat(['button']);

			// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
			var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

			var emptyAncestorInfo = {
				current: null,

				formTag: null,
				aTagInScope: null,
				buttonTagInScope: null,
				nobrTagInScope: null,
				pTagInButtonScope: null,

				listItemTagAutoclosing: null,
				dlItemTagAutoclosing: null
			};

			var updatedAncestorInfo = function (oldInfo, tag, instance) {
				var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
				var info = { tag: tag, instance: instance };

				if (inScopeTags.indexOf(tag) !== -1) {
					ancestorInfo.aTagInScope = null;
					ancestorInfo.buttonTagInScope = null;
					ancestorInfo.nobrTagInScope = null;
				}
				if (buttonScopeTags.indexOf(tag) !== -1) {
					ancestorInfo.pTagInButtonScope = null;
				}

				// See rules for 'li', 'dd', 'dt' start tags in
				// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
				if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
					ancestorInfo.listItemTagAutoclosing = null;
					ancestorInfo.dlItemTagAutoclosing = null;
				}

				ancestorInfo.current = info;

				if (tag === 'form') {
					ancestorInfo.formTag = info;
				}
				if (tag === 'a') {
					ancestorInfo.aTagInScope = info;
				}
				if (tag === 'button') {
					ancestorInfo.buttonTagInScope = info;
				}
				if (tag === 'nobr') {
					ancestorInfo.nobrTagInScope = info;
				}
				if (tag === 'p') {
					ancestorInfo.pTagInButtonScope = info;
				}
				if (tag === 'li') {
					ancestorInfo.listItemTagAutoclosing = info;
				}
				if (tag === 'dd' || tag === 'dt') {
					ancestorInfo.dlItemTagAutoclosing = info;
				}

				return ancestorInfo;
			};

			/**
   * Returns whether
   */
			var isTagValidWithParent = function (tag, parentTag) {
				// First, let's check if we're in an unusual parsing mode...
				switch (parentTag) {
				// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
				case 'select':
					return tag === 'option' || tag === 'optgroup' || tag === '#text';
				case 'optgroup':
					return tag === 'option' || tag === '#text';
					// Strictly speaking, seeing an <option> doesn't mean we're in a <select>
					// but
				case 'option':
					return tag === '#text';

					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
					// No special behavior since these rules fall back to "in body" mode for
					// all except special table nodes which cause bad parsing behavior anyway.

					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
				case 'tr':
					return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
				case 'tbody':
				case 'thead':
				case 'tfoot':
					return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
				case 'colgroup':
					return tag === 'col' || tag === 'template';

					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
				case 'table':
					return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

					// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
				case 'head':
					return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

					// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
				case 'html':
					return tag === 'head' || tag === 'body';
				case '#document':
					return tag === 'html';
				}

				// Probably in the "in body" parsing mode, so we outlaw only tag combos
				// where the parsing rules cause implicit opens or closes to be added.
				// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
				switch (tag) {
				case 'h1':
				case 'h2':
				case 'h3':
				case 'h4':
				case 'h5':
				case 'h6':
					return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

				case 'rp':
				case 'rt':
					return impliedEndTags.indexOf(parentTag) === -1;

				case 'body':
				case 'caption':
				case 'col':
				case 'colgroup':
				case 'frame':
				case 'head':
				case 'html':
				case 'tbody':
				case 'td':
				case 'tfoot':
				case 'th':
				case 'thead':
				case 'tr':
					// These tags are only valid with a few parents that have special child
					// parsing rules -- if we're down here, then none of those matched and
					// so we allow it only if we don't know what the parent is, as all other
					// cases are invalid.
					return parentTag == null;
				}

				return true;
			};

			/**
   * Returns whether
   */
			var findInvalidAncestorForTag = function (tag, ancestorInfo) {
				switch (tag) {
				case 'address':
				case 'article':
				case 'aside':
				case 'blockquote':
				case 'center':
				case 'details':
				case 'dialog':
				case 'dir':
				case 'div':
				case 'dl':
				case 'fieldset':
				case 'figcaption':
				case 'figure':
				case 'footer':
				case 'header':
				case 'hgroup':
				case 'main':
				case 'menu':
				case 'nav':
				case 'ol':
				case 'p':
				case 'section':
				case 'summary':
				case 'ul':

				case 'pre':
				case 'listing':

				case 'table':

				case 'hr':

				case 'xmp':

				case 'h1':
				case 'h2':
				case 'h3':
				case 'h4':
				case 'h5':
				case 'h6':
					return ancestorInfo.pTagInButtonScope;

				case 'form':
					return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

				case 'li':
					return ancestorInfo.listItemTagAutoclosing;

				case 'dd':
				case 'dt':
					return ancestorInfo.dlItemTagAutoclosing;

				case 'button':
					return ancestorInfo.buttonTagInScope;

				case 'a':
					// Spec says something about storing a list of markers, but it sounds
					// equivalent to this check.
					return ancestorInfo.aTagInScope;

				case 'nobr':
					return ancestorInfo.nobrTagInScope;
				}

				return null;
			};

			/**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
			var findOwnerStack = function (instance) {
				if (!instance) {
					return [];
				}

				var stack = [];
				do {
					stack.push(instance);
				} while (instance = instance._currentElement._owner);
				stack.reverse();
				return stack;
			};

			var didWarn = {};

			validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
				ancestorInfo = ancestorInfo || emptyAncestorInfo;
				var parentInfo = ancestorInfo.current;
				var parentTag = parentInfo && parentInfo.tag;

				if (childText != null) {
					process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
					childTag = '#text';
				}

				var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
				var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
				var problematic = invalidParent || invalidAncestor;

				if (problematic) {
					var ancestorTag = problematic.tag;
					var ancestorInstance = problematic.instance;

					var childOwner = childInstance && childInstance._currentElement._owner;
					var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

					var childOwners = findOwnerStack(childOwner);
					var ancestorOwners = findOwnerStack(ancestorOwner);

					var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
					var i;

					var deepestCommon = -1;
					for (i = 0; i < minStackLen; i++) {
						if (childOwners[i] === ancestorOwners[i]) {
							deepestCommon = i;
						} else {
							break;
						}
					}

					var UNKNOWN = '(unknown)';
					var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
						return inst.getName() || UNKNOWN;
					});
					var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
						return inst.getName() || UNKNOWN;
					});
					var ownerInfo = [].concat(
						// If the parent and child instances have a common owner ancestor, start
						// with that -- otherwise we just start with the parent's owners.
						deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
						// If we're warning about an invalid (non-parent) ancestry, add '...'
						invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

					var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
					if (didWarn[warnKey]) {
						return;
					}
					didWarn[warnKey] = true;

					var tagDisplayName = childTag;
					var whitespaceInfo = '';
					if (childTag === '#text') {
						if (/\S/.test(childText)) {
							tagDisplayName = 'Text nodes';
						} else {
							tagDisplayName = 'Whitespace text nodes';
							whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
						}
					} else {
						tagDisplayName = '<' + childTag + '>';
					}

					if (invalidParent) {
						var info = '';
						if (ancestorTag === 'table' && childTag === 'tr') {
							info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
						}
						process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
					} else {
						process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
					}
				}
			};

			validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

			// For testing
			validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
				ancestorInfo = ancestorInfo || emptyAncestorInfo;
				var parentInfo = ancestorInfo.current;
				var parentTag = parentInfo && parentInfo.tag;
				return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
			};
		}

		module.exports = validateDOMNesting;
	}).call(this,require('_process'));
},{"_process":615,"fbjs/lib/emptyFunction":766,"fbjs/lib/warning":783,"object-assign":784}],759:[function(require,module,exports){
	(function (process){
		'use strict';

		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

		var emptyFunction = require('./emptyFunction');

		/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
		var EventListener = {
			/**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
			listen: function listen(target, eventType, callback) {
				if (target.addEventListener) {
					target.addEventListener(eventType, callback, false);
					return {
						remove: function remove() {
							target.removeEventListener(eventType, callback, false);
						}
					};
				} else if (target.attachEvent) {
					target.attachEvent('on' + eventType, callback);
					return {
						remove: function remove() {
							target.detachEvent('on' + eventType, callback);
						}
					};
				}
			},

			/**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
			capture: function capture(target, eventType, callback) {
				if (target.addEventListener) {
					target.addEventListener(eventType, callback, true);
					return {
						remove: function remove() {
							target.removeEventListener(eventType, callback, true);
						}
					};
				} else {
					if (process.env.NODE_ENV !== 'production') {
						console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
					}
					return {
						remove: emptyFunction
					};
				}
			},

			registerDefault: function registerDefault() {}
		};

		module.exports = EventListener;
	}).call(this,require('_process'));
},{"./emptyFunction":766,"_process":615}],760:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
	var ExecutionEnvironment = {

		canUseDOM: canUseDOM,

		canUseWorkers: typeof Worker !== 'undefined',

		canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

		canUseViewport: canUseDOM && !!window.screen,

		isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;
},{}],761:[function(require,module,exports){
	"use strict";

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	var _hyphenPattern = /-(.)/g;

	/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
	function camelize(string) {
		return string.replace(_hyphenPattern, function (_, character) {
			return character.toUpperCase();
		});
	}

	module.exports = camelize;
},{}],762:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	'use strict';

	var camelize = require('./camelize');

	var msPattern = /^-ms-/;

	/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
	function camelizeStyleName(string) {
		return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;
},{"./camelize":761}],763:[function(require,module,exports){
	'use strict';

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

	var isTextNode = require('./isTextNode');

	/*eslint-disable no-bitwise */

	/**
 * Checks if a given DOM node contains or is another DOM node.
 */
	function containsNode(outerNode, innerNode) {
		if (!outerNode || !innerNode) {
			return false;
		} else if (outerNode === innerNode) {
			return true;
		} else if (isTextNode(outerNode)) {
			return false;
		} else if (isTextNode(innerNode)) {
			return containsNode(outerNode, innerNode.parentNode);
		} else if ('contains' in outerNode) {
			return outerNode.contains(innerNode);
		} else if (outerNode.compareDocumentPosition) {
			return !!(outerNode.compareDocumentPosition(innerNode) & 16);
		} else {
			return false;
		}
	}

	module.exports = containsNode;
},{"./isTextNode":776}],764:[function(require,module,exports){
	(function (process){
		'use strict';

		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

		var invariant = require('./invariant');

		/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
		function toArray(obj) {
			var length = obj.length;

			// Some browsers builtin objects can report typeof 'function' (e.g. NodeList
			// in old versions of Safari).
			!(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

			!(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

			!(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

			!(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

			// Old IE doesn't give collections access to hasOwnProperty. Assume inputs
			// without method will throw during the slice call and skip straight to the
			// fallback.
			if (obj.hasOwnProperty) {
				try {
					return Array.prototype.slice.call(obj);
				} catch (e) {
					// IE < 9 does not support Array#slice on collections objects
				}
			}

			// Fall back to copying key by key. This assumes all keys have a value,
			// so will not preserve sparsely populated inputs.
			var ret = Array(length);
			for (var ii = 0; ii < length; ii++) {
				ret[ii] = obj[ii];
			}
			return ret;
		}

		/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
		function hasArrayNature(obj) {
			return (
			// not null/false
				!!obj && (
				// arrays are objects, NodeLists are functions in Safari
					typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
				// a real array
					Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
			);
		}

		/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
		function createArrayFromMixed(obj) {
			if (!hasArrayNature(obj)) {
				return [obj];
			} else if (Array.isArray(obj)) {
				return obj.slice();
			} else {
				return toArray(obj);
			}
		}

		module.exports = createArrayFromMixed;
	}).call(this,require('_process'));
},{"./invariant":774,"_process":615}],765:[function(require,module,exports){
	(function (process){
		'use strict';

		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

		/*eslint-disable fb-www/unsafe-html*/

		var ExecutionEnvironment = require('./ExecutionEnvironment');

		var createArrayFromMixed = require('./createArrayFromMixed');
		var getMarkupWrap = require('./getMarkupWrap');
		var invariant = require('./invariant');

		/**
 * Dummy container used to render all markup.
 */
		var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

		/**
 * Pattern used by `getNodeName`.
 */
		var nodeNamePattern = /^\s*<(\w+)/;

		/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
		function getNodeName(markup) {
			var nodeNameMatch = markup.match(nodeNamePattern);
			return nodeNameMatch && nodeNameMatch[1].toLowerCase();
		}

		/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
		function createNodesFromMarkup(markup, handleScript) {
			var node = dummyNode;
			!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
			var nodeName = getNodeName(markup);

			var wrap = nodeName && getMarkupWrap(nodeName);
			if (wrap) {
				node.innerHTML = wrap[1] + markup + wrap[2];

				var wrapDepth = wrap[0];
				while (wrapDepth--) {
					node = node.lastChild;
				}
			} else {
				node.innerHTML = markup;
			}

			var scripts = node.getElementsByTagName('script');
			if (scripts.length) {
				!handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
				createArrayFromMixed(scripts).forEach(handleScript);
			}

			var nodes = Array.from(node.childNodes);
			while (node.lastChild) {
				node.removeChild(node.lastChild);
			}
			return nodes;
		}

		module.exports = createNodesFromMarkup;
	}).call(this,require('_process'));
},{"./ExecutionEnvironment":760,"./createArrayFromMixed":764,"./getMarkupWrap":770,"./invariant":774,"_process":615}],766:[function(require,module,exports){
	"use strict";

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

	function makeEmptyFunction(arg) {
		return function () {
			return arg;
		};
	}

	/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
		return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
		return arg;
	};

	module.exports = emptyFunction;
},{}],767:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

		'use strict';

		var emptyObject = {};

		if (process.env.NODE_ENV !== 'production') {
			Object.freeze(emptyObject);
		}

		module.exports = emptyObject;
	}).call(this,require('_process'));
},{"_process":615}],768:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

	'use strict';

	/**
 * @param {DOMElement} node input/textarea to focus
 */

	function focusNode(node) {
		// IE8 can throw "Can't move focus to the control because it is invisible,
		// not enabled, or of a type that does not accept the focus." for all kinds of
		// reasons that are too expensive and fragile to test.
		try {
			node.focus();
		} catch (e) {}
	}

	module.exports = focusNode;
},{}],769:[function(require,module,exports){
	'use strict';

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
	function getActiveElement() /*?DOMElement*/{
		if (typeof document === 'undefined') {
			return null;
		}
		try {
			return document.activeElement || document.body;
		} catch (e) {
			return document.body;
		}
	}

	module.exports = getActiveElement;
},{}],770:[function(require,module,exports){
	(function (process){
		'use strict';

		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

		/*eslint-disable fb-www/unsafe-html */

		var ExecutionEnvironment = require('./ExecutionEnvironment');

		var invariant = require('./invariant');

		/**
 * Dummy container used to detect which wraps are necessary.
 */
		var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

		/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

		var shouldWrap = {};

		var selectWrap = [1, '<select multiple="true">', '</select>'];
		var tableWrap = [1, '<table>', '</table>'];
		var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

		var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

		var markupWrap = {
			'*': [1, '?<div>', '</div>'],

			'area': [1, '<map>', '</map>'],
			'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
			'legend': [1, '<fieldset>', '</fieldset>'],
			'param': [1, '<object>', '</object>'],
			'tr': [2, '<table><tbody>', '</tbody></table>'],

			'optgroup': selectWrap,
			'option': selectWrap,

			'caption': tableWrap,
			'colgroup': tableWrap,
			'tbody': tableWrap,
			'tfoot': tableWrap,
			'thead': tableWrap,

			'td': trWrap,
			'th': trWrap
		};

		// Initialize the SVG elements since we know they'll always need to be wrapped
		// consistently. If they are created inside a <div> they will be initialized in
		// the wrong namespace (and will not display).
		var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
		svgElements.forEach(function (nodeName) {
			markupWrap[nodeName] = svgWrap;
			shouldWrap[nodeName] = true;
		});

		/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
		function getMarkupWrap(nodeName) {
			!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
			if (!markupWrap.hasOwnProperty(nodeName)) {
				nodeName = '*';
			}
			if (!shouldWrap.hasOwnProperty(nodeName)) {
				if (nodeName === '*') {
					dummyNode.innerHTML = '<link />';
				} else {
					dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
				}
				shouldWrap[nodeName] = !dummyNode.firstChild;
			}
			return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
		}

		module.exports = getMarkupWrap;
	}).call(this,require('_process'));
},{"./ExecutionEnvironment":760,"./invariant":774,"_process":615}],771:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	'use strict';

	/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

	function getUnboundedScrollPosition(scrollable) {
		if (scrollable === window) {
			return {
				x: window.pageXOffset || document.documentElement.scrollLeft,
				y: window.pageYOffset || document.documentElement.scrollTop
			};
		}
		return {
			x: scrollable.scrollLeft,
			y: scrollable.scrollTop
		};
	}

	module.exports = getUnboundedScrollPosition;
},{}],772:[function(require,module,exports){
	'use strict';

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	var _uppercasePattern = /([A-Z])/g;

	/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
	function hyphenate(string) {
		return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;
},{}],773:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	'use strict';

	var hyphenate = require('./hyphenate');

	var msPattern = /^ms-/;

	/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
	function hyphenateStyleName(string) {
		return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;
},{"./hyphenate":772}],774:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

		'use strict';

		/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

		function invariant(condition, format, a, b, c, d, e, f) {
			if (process.env.NODE_ENV !== 'production') {
				if (format === undefined) {
					throw new Error('invariant requires an error message argument');
				}
			}

			if (!condition) {
				var error;
				if (format === undefined) {
					error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
				} else {
					var args = [a, b, c, d, e, f];
					var argIndex = 0;
					error = new Error(format.replace(/%s/g, function () {
						return args[argIndex++];
					}));
					error.name = 'Invariant Violation';
				}

				error.framesToPop = 1; // we don't care about invariant's own frame
				throw error;
			}
		}

		module.exports = invariant;
	}).call(this,require('_process'));
},{"_process":615}],775:[function(require,module,exports){
	'use strict';

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
	function isNode(object) {
		return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;
},{}],776:[function(require,module,exports){
	'use strict';

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	var isNode = require('./isNode');

	/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
	function isTextNode(object) {
		return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;
},{"./isNode":775}],777:[function(require,module,exports){
	(function (process){
		/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 */

		'use strict';

		var invariant = require('./invariant');

		/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
		var keyMirror = function keyMirror(obj) {
			var ret = {};
			var key;
			!(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
			for (key in obj) {
				if (!obj.hasOwnProperty(key)) {
					continue;
				}
				ret[key] = key;
			}
			return ret;
		};

		module.exports = keyMirror;
	}).call(this,require('_process'));
},{"./invariant":774,"_process":615}],778:[function(require,module,exports){
	"use strict";

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

	/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
	var keyOf = function keyOf(oneKeyObj) {
		var key;
		for (key in oneKeyObj) {
			if (!oneKeyObj.hasOwnProperty(key)) {
				continue;
			}
			return key;
		}
		return null;
	};

	module.exports = keyOf;
},{}],779:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */

	'use strict';

	/**
 * Memoizes the return value of a function that accepts one string argument.
 */

	function memoizeStringOnly(callback) {
		var cache = {};
		return function (string) {
			if (!cache.hasOwnProperty(string)) {
				cache[string] = callback.call(this, string);
			}
			return cache[string];
		};
	}

	module.exports = memoizeStringOnly;
},{}],780:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	'use strict';

	var ExecutionEnvironment = require('./ExecutionEnvironment');

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
		performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};
},{"./ExecutionEnvironment":760}],781:[function(require,module,exports){
	'use strict';

	/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

	var performance = require('./performance');

	var performanceNow;

	/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
	if (performance.now) {
		performanceNow = function performanceNow() {
			return performance.now();
		};
	} else {
		performanceNow = function performanceNow() {
			return Date.now();
		};
	}

	module.exports = performanceNow;
},{"./performance":780}],782:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
	function is(x, y) {
		// SameValue algorithm
		if (x === y) {
			// Steps 1-5, 7-10
			// Steps 6.b-6.e: +0 != -0
			// Added the nonzero y check to make Flow happy, but it is redundant
			return x !== 0 || y !== 0 || 1 / x === 1 / y;
		} else {
			// Step 6.a: NaN == NaN
			return x !== x && y !== y;
		}
	}

	/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
	function shallowEqual(objA, objB) {
		if (is(objA, objB)) {
			return true;
		}

		if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
			return false;
		}

		var keysA = Object.keys(objA);
		var keysB = Object.keys(objB);

		if (keysA.length !== keysB.length) {
			return false;
		}

		// Test for A's keys different from B.
		for (var i = 0; i < keysA.length; i++) {
			if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
				return false;
			}
		}

		return true;
	}

	module.exports = shallowEqual;
},{}],783:[function(require,module,exports){
	(function (process){
		/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

		'use strict';

		var emptyFunction = require('./emptyFunction');

		/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

		var warning = emptyFunction;

		if (process.env.NODE_ENV !== 'production') {
			(function () {
				var printWarning = function printWarning(format) {
					for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
						args[_key - 1] = arguments[_key];
					}

					var argIndex = 0;
					var message = 'Warning: ' + format.replace(/%s/g, function () {
						return args[argIndex++];
					});
					if (typeof console !== 'undefined') {
						console.error(message);
					}
					try {
						// --- Welcome to debugging React ---
						// This error was thrown as a convenience so that you can use this stack
						// to find the callsite that caused this warning to fire.
						throw new Error(message);
					} catch (x) {}
				};

				warning = function warning(condition, format) {
					if (format === undefined) {
						throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
					}

					if (format.indexOf('Failed Composite propType: ') === 0) {
						return; // Ignore CompositeComponent proptype check.
					}

					if (!condition) {
						for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
							args[_key2 - 2] = arguments[_key2];
						}

						printWarning.apply(undefined, [format].concat(args));
					}
				};
			})();
		}

		module.exports = warning;
	}).call(this,require('_process'));
},{"./emptyFunction":766,"_process":615}],784:[function(require,module,exports){
	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

},{}],785:[function(require,module,exports){
	'use strict';

	module.exports = require('./lib/React');

},{"./lib/React":642}],786:[function(require,module,exports){
	var throttle = require('./throttle');

	/**
 * Debounce execution of a function. Debouncing, unlike throttling,
 * guarantees that a function is only executed a single time, either at the
 * very beginning of a series of calls, or at the very end.
 *
 * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {Boolean}  atBegin       Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
 *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
 *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
 * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                  to `callback` when the debounced-function is executed.
 *
 * @return {Function} A new, debounced function.
 */
	module.exports = function ( delay, atBegin, callback ) {
		return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
	};

},{"./throttle":788}],787:[function(require,module,exports){
	module.exports = {
		throttle: require('./throttle'),
		debounce: require('./debounce')
	};

},{"./debounce":786,"./throttle":788}],788:[function(require,module,exports){
	var $ = require('jquery');

	/**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {Boolean}   noTrailing     Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
 *                                    the internal counter is reset)
 * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                    to `callback` when the throttled-function is executed.
 * @param  {Boolean}   debounceMode   If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
 *                                    schedule `callback` to execute after `delay` ms.
 *
 * @return {Function}  A new, throttled, function.
 */
	module.exports = function ( delay, noTrailing, callback, debounceMode ) {

		// After wrapper has stopped being called, this timeout ensures that
		// `callback` is executed at the proper times in `throttle` and `end`
		// debounce modes.
		var timeoutID;

		// Keep track of the last time `callback` was executed.
		var lastExec = 0;

		// `noTrailing` defaults to falsy.
		if ( typeof(noTrailing) !== 'boolean' ) {
			debounceMode = callback;
			callback = noTrailing;
			noTrailing = undefined;
		}

		// The `wrapper` function encapsulates all of the throttling / debouncing
		// functionality and when executed will limit the rate at which `callback`
		// is executed.
		function wrapper () {

			var self = this;
			var elapsed = Number(new Date()) - lastExec;
			var args = arguments;

			// Execute `callback` and update the `lastExec` timestamp.
			function exec () {
				lastExec = Number(new Date());
				callback.apply(self, args);
			}

			// If `debounceMode` is true (at begin) this is used to clear the flag
			// to allow future `callback` executions.
			function clear () {
				timeoutID = undefined;
			}

			if ( debounceMode && !timeoutID ) {
			// Since `wrapper` is being called for the first time and
			// `debounceMode` is true (at begin), execute `callback`.
				exec();
			}

			// Clear any existing timeout.
			if ( timeoutID ) {
				clearTimeout(timeoutID);
			}

			if ( debounceMode === undefined && elapsed > delay ) {
			// In throttle mode, if `delay` time has been exceeded, execute
			// `callback`.
				exec();

			} else if ( noTrailing !== true ) {
			// In trailing throttle mode, since `delay` time has not been
			// exceeded, schedule `callback` to execute `delay` ms after most
			// recent execution.
			//
			// If `debounceMode` is true (at begin), schedule `clear` to execute
			// after `delay` ms.
			//
			// If `debounceMode` is false (at end), schedule `callback` to
			// execute after `delay` ms.
				timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
			}

		}

		// Set the guid of `wrapper` function to the same of original callback, so
		// it can be removed in jQuery 1.4+ .unbind or .die by using the original
		// callback as a reference.
		if ( $ && $.guid ) {
			wrapper.guid = callback.guid = callback.guid || $.guid++;
		}

		// Return the wrapper function.
		return wrapper;

	};

},{"jquery":114}],789:[function(require,module,exports){
	function E () {
	// Keep this empty so it's easier to inherit from
		// (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
		on: function (name, callback, ctx) {
			var e = this.e || (this.e = {});

			(e[name] || (e[name] = [])).push({
				fn: callback,
				ctx: ctx
			});

			return this;
		},

		once: function (name, callback, ctx) {
			var self = this;
			function listener () {
				self.off(name, listener);
				callback.apply(ctx, arguments);
			}

			listener._ = callback;
			return this.on(name, listener, ctx);
		},

		emit: function (name) {
			var data = [].slice.call(arguments, 1);
			var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
			var i = 0;
			var len = evtArr.length;

			for (i; i < len; i++) {
				evtArr[i].fn.apply(evtArr[i].ctx, data);
			}

			return this;
		},

		off: function (name, callback) {
			var e = this.e || (this.e = {});
			var evts = e[name];
			var liveEvents = [];

			if (evts && callback) {
				for (var i = 0, len = evts.length; i < len; i++) {
					if (evts[i].fn !== callback && evts[i].fn._ !== callback)
						liveEvents.push(evts[i]);
				}
			}

			// Remove event from queue to prevent memory leak
			// Suggested by https://github.com/lazd
			// Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

			(liveEvents.length)
				? e[name] = liveEvents
				: delete e[name];

			return this;
		}
	};

	module.exports = E;

},{}],790:[function(require,module,exports){
/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */
	'use strict';

	(function (root, factory) {
		if (typeof define === 'function' && define.amd) {
			// AMD. Register as an anonymous module.
			define([], factory);
		} else if (typeof exports === 'object') {
			// OldNode. Does not work with strict CommonJS, but
			// only CommonJS-like environments that support module.exports,
			// like OldNode.
			module.exports = factory();
		} else {
			// Browser globals (root is window)
			root.typed = factory();
		}
	}(this, function () {
		// factory function to create a new instance of typed-function
		// TODO: allow passing configuration, types, tests via the factory function
		function create() {
			/**
     * Get a type test function for a specific data type
     * @param {string} name                   Name of a data type like 'number' or 'string'
     * @returns {Function(obj: *) : boolean}  Returns a type testing function.
     *                                        Throws an error for an unknown type.
     */
			function getTypeTest(name) {
				var test;
				for (var i = 0; i < typed.types.length; i++) {
					var entry = typed.types[i];
					if (entry.name === name) {
						test = entry.test;
						break;
					}
				}

				if (!test) {
					var hint;
					for (i = 0; i < typed.types.length; i++) {
						entry = typed.types[i];
						if (entry.name.toLowerCase() == name.toLowerCase()) {
							hint = entry.name;
							break;
						}
					}

					throw new Error('Unknown type "' + name + '"' +
            (hint ? ('. Did you mean "' + hint + '"?') : ''));
				}
				return test;
			}

			/**
     * Retrieve the function name from a set of functions, and check
     * whether the name of all functions match (if given)
     * @param {Array.<function>} fns
     */
			function getName (fns) {
				var name = '';

				for (var i = 0; i < fns.length; i++) {
					var fn = fns[i];

					// merge function name when this is a typed function
					if (fn.signatures && fn.name != '') {
						if (name == '') {
							name = fn.name;
						}
						else if (name != fn.name) {
							var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
							err.data = {
								actual: fn.name,
								expected: name
							};
							throw err;
						}
					}
				}

				return name;
			}

			/**
     * Create an ArgumentsError. Creates messages like:
     *
     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)
     *   Too few arguments (expected: ..., index: ...)
     *   Too many arguments (expected: ..., actual: ...)
     *
     * @param {String} fn         Function name
     * @param {number} argCount   Number of arguments
     * @param {Number} index      Current argument index
     * @param {*} actual          Current argument
     * @param {string} [expected] An optional, comma separated string with
     *                            expected types on given index
     * @extends Error
     */
			function createError(fn, argCount, index, actual, expected) {
				var actualType = getTypeOf(actual);
				var _expected = expected ? expected.split(',') : null;
				var _fn = (fn || 'unnamed');
				var anyType = _expected && contains(_expected, 'any');
				var message;
				var data = {
					fn: fn,
					index: index,
					actual: actual,
					expected: _expected
				};

				if (_expected) {
					if (argCount > index && !anyType) {
						// unexpected type
						message = 'Unexpected type of argument in function ' + _fn +
              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
					}
					else {
						// too few arguments
						message = 'Too few arguments in function ' + _fn +
              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
					}
				}
				else {
					// too many arguments
					message = 'Too many arguments in function ' + _fn +
            ' (expected: ' + index + ', actual: ' + argCount + ')';
				}

				var err = new TypeError(message);
				err.data = data;
				return err;
			}

			/**
     * Collection with function references (local shortcuts to functions)
     * @constructor
     * @param {string} [name='refs']  Optional name for the refs, used to generate
     *                                JavaScript code
     */
			function Refs(name) {
				this.name = name || 'refs';
				this.categories = {};
			}

			/**
     * Add a function reference.
     * @param {Function} fn
     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'
     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'
     */
			Refs.prototype.add = function (fn, category) {
				var cat = category || 'fn';
				if (!this.categories[cat]) this.categories[cat] = [];

				var index = this.categories[cat].indexOf(fn);
				if (index == -1) {
					index = this.categories[cat].length;
					this.categories[cat].push(fn);
				}

				return cat + index;
			};

			/**
     * Create code lines for all function references
     * @returns {string} Returns the code containing all function references
     */
			Refs.prototype.toCode = function () {
				var code = [];
				var path = this.name + '.categories';
				var categories = this.categories;

				for (var cat in categories) {
					if (categories.hasOwnProperty(cat)) {
						var category = categories[cat];

						for (var i = 0; i < category.length; i++) {
							code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
						}
					}
				}

				return code.join('\n');
			};

			/**
     * A function parameter
     * @param {string | string[] | Param} types    A parameter type like 'string',
     *                                             'number | boolean'
     * @param {boolean} [varArgs=false]            Variable arguments if true
     * @constructor
     */
			function Param(types, varArgs) {
				// parse the types, can be a string with types separated by pipe characters |
				if (typeof types === 'string') {
					// parse variable arguments operator (ellipses '...number')
					var _types = types.trim();
					var _varArgs = _types.substr(0, 3) === '...';
					if (_varArgs) {
						_types = _types.substr(3);
					}
					if (_types === '') {
						this.types = ['any'];
					}
					else {
						this.types = _types.split('|');
						for (var i = 0; i < this.types.length; i++) {
							this.types[i] = this.types[i].trim();
						}
					}
				}
				else if (Array.isArray(types)) {
					this.types = types;
				}
				else if (types instanceof Param) {
					return types.clone();
				}
				else {
					throw new Error('String or Array expected');
				}

				// can hold a type to which to convert when handling this parameter
				this.conversions = [];
				// TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)

				// variable arguments
				this.varArgs = _varArgs || varArgs || false;

				// check for any type arguments
				this.anyType = this.types.indexOf('any') !== -1;
			}

			/**
     * Order Params
     * any type ('any') will be ordered last, and object as second last (as other
     * types may be an object as well, like Array).
     *
     * @param {Param} a
     * @param {Param} b
     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
     */
			Param.compare = function (a, b) {
				// TODO: simplify parameter comparison, it's a mess
				if (a.anyType) return 1;
				if (b.anyType) return -1;

				if (contains(a.types, 'Object')) return 1;
				if (contains(b.types, 'Object')) return -1;

				if (a.hasConversions()) {
					if (b.hasConversions()) {
						var i, ac, bc;

						for (i = 0; i < a.conversions.length; i++) {
							if (a.conversions[i] !== undefined) {
								ac = a.conversions[i];
								break;
							}
						}

						for (i = 0; i < b.conversions.length; i++) {
							if (b.conversions[i] !== undefined) {
								bc = b.conversions[i];
								break;
							}
						}

						return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
					}
					else {
						return 1;
					}
				}
				else {
					if (b.hasConversions()) {
						return -1;
					}
					else {
						// both params have no conversions
						var ai, bi;

						for (i = 0; i < typed.types.length; i++) {
							if (typed.types[i].name === a.types[0]) {
								ai = i;
								break;
							}
						}

						for (i = 0; i < typed.types.length; i++) {
							if (typed.types[i].name === b.types[0]) {
								bi = i;
								break;
							}
						}

						return ai - bi;
					}
				}
			};

			/**
     * Test whether this parameters types overlap an other parameters types.
     * @param {Param} other
     * @return {boolean} Returns true when there are conflicting types
     */
			Param.prototype.overlapping = function (other) {
				for (var i = 0; i < this.types.length; i++) {
					if (contains(other.types, this.types[i])) {
						return true;
					}
				}
				return false;
			};

			/**
     * Create a clone of this param
     * @returns {Param} Returns a cloned version of this param
     */
			Param.prototype.clone = function () {
				var param = new Param(this.types.slice(), this.varArgs);
				param.conversions = this.conversions.slice();
				return param;
			};

			/**
     * Test whether this parameter contains conversions
     * @returns {boolean} Returns true if the parameter contains one or
     *                    multiple conversions.
     */
			Param.prototype.hasConversions = function () {
				return this.conversions.length > 0;
			};

			/**
     * Tests whether this parameters contains any of the provided types
     * @param {Object} types  A Map with types, like {'number': true}
     * @returns {boolean}     Returns true when the parameter contains any
     *                        of the provided types
     */
			Param.prototype.contains = function (types) {
				for (var i = 0; i < this.types.length; i++) {
					if (types[this.types[i]]) {
						return true;
					}
				}
				return false;
			};

			/**
     * Return a string representation of this params types, like 'string' or
     * 'number | boolean' or '...number'
     * @param {boolean} [toConversion]   If true, the returned types string
     *                                   contains the types where the parameter
     *                                   will convert to. If false (default)
     *                                   the "from" types are returned
     * @returns {string}
     */
			Param.prototype.toString = function (toConversion) {
				var types = [];
				var keys = {};

				for (var i = 0; i < this.types.length; i++) {
					var conversion = this.conversions[i];
					var type = toConversion && conversion ? conversion.to : this.types[i];
					if (!(type in keys)) {
						keys[type] = true;
						types.push(type);
					}
				}

				return (this.varArgs ? '...' : '') + types.join('|');
			};

			/**
     * A function signature
     * @param {string | string[] | Param[]} params
     *                         Array with the type(s) of each parameter,
     *                         or a comma separated string with types
     * @param {Function} fn    The actual function
     * @constructor
     */
			function Signature(params, fn) {
				var _params;
				if (typeof params === 'string') {
					_params = (params !== '') ? params.split(',') : [];
				}
				else if (Array.isArray(params)) {
					_params = params;
				}
				else {
					throw new Error('string or Array expected');
				}

				this.params = new Array(_params.length);
				for (var i = 0; i < _params.length; i++) {
					var param = new Param(_params[i]);
					this.params[i] = param;
					if (i === _params.length - 1) {
						// the last argument
						this.varArgs = param.varArgs;
					}
					else {
						// non-last argument
						if (param.varArgs) {
							throw new SyntaxError('Unexpected variable arguments operator "..."');
						}
					}
				}

				this.fn = fn;
			}

			/**
     * Create a clone of this signature
     * @returns {Signature} Returns a cloned version of this signature
     */
			Signature.prototype.clone = function () {
				return new Signature(this.params.slice(), this.fn);
			};

			/**
     * Expand a signature: split params with union types in separate signatures
     * For example split a Signature "string | number" into two signatures.
     * @return {Signature[]} Returns an array with signatures (at least one)
     */
			Signature.prototype.expand = function () {
				var signatures = [];

				function recurse(signature, path) {
					if (path.length < signature.params.length) {
						var i, newParam, conversion;

						var param = signature.params[path.length];
						if (param.varArgs) {
							// a variable argument. do not split the types in the parameter
							newParam = param.clone();

							// add conversions to the parameter
							// recurse for all conversions
							for (i = 0; i < typed.conversions.length; i++) {
								conversion = typed.conversions[i];
								if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
									var j = newParam.types.length;
									newParam.types[j] = conversion.from;
									newParam.conversions[j] = conversion;
								}
							}

							recurse(signature, path.concat(newParam));
						}
						else {
							// split each type in the parameter
							for (i = 0; i < param.types.length; i++) {
								recurse(signature, path.concat(new Param(param.types[i])));
							}

							// recurse for all conversions
							for (i = 0; i < typed.conversions.length; i++) {
								conversion = typed.conversions[i];
								if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
									newParam = new Param(conversion.from);
									newParam.conversions[0] = conversion;
									recurse(signature, path.concat(newParam));
								}
							}
						}
					}
					else {
						signatures.push(new Signature(path, signature.fn));
					}
				}

				recurse(this, []);

				return signatures;
			};

			/**
     * Compare two signatures.
     *
     * When two params are equal and contain conversions, they will be sorted
     * by lowest index of the first conversions.
     *
     * @param {Signature} a
     * @param {Signature} b
     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
     */
			Signature.compare = function (a, b) {
				if (a.params.length > b.params.length) return 1;
				if (a.params.length < b.params.length) return -1;

				// count the number of conversions
				var i;
				var len = a.params.length; // a and b have equal amount of params
				var ac = 0;
				var bc = 0;
				for (i = 0; i < len; i++) {
					if (a.params[i].hasConversions()) ac++;
					if (b.params[i].hasConversions()) bc++;
				}

				if (ac > bc) return 1;
				if (ac < bc) return -1;

				// compare the order per parameter
				for (i = 0; i < a.params.length; i++) {
					var cmp = Param.compare(a.params[i], b.params[i]);
					if (cmp !== 0) {
						return cmp;
					}
				}

				return 0;
			};

			/**
     * Test whether any of the signatures parameters has conversions
     * @return {boolean} Returns true when any of the parameters contains
     *                   conversions.
     */
			Signature.prototype.hasConversions = function () {
				for (var i = 0; i < this.params.length; i++) {
					if (this.params[i].hasConversions()) {
						return true;
					}
				}
				return false;
			};

			/**
     * Test whether this signature should be ignored.
     * Checks whether any of the parameters contains a type listed in
     * typed.ignore
     * @return {boolean} Returns true when the signature should be ignored
     */
			Signature.prototype.ignore = function () {
				// create a map with ignored types
				var types = {};
				for (var i = 0; i < typed.ignore.length; i++) {
					types[typed.ignore[i]] = true;
				}

				// test whether any of the parameters contains this type
				for (i = 0; i < this.params.length; i++) {
					if (this.params[i].contains(types)) {
						return true;
					}
				}

				return false;
			};

			/**
     * Generate the code to invoke this signature
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns code
     */
			Signature.prototype.toCode = function (refs, prefix) {
				var code = [];

				var args = new Array(this.params.length);
				for (var i = 0; i < this.params.length; i++) {
					var param = this.params[i];
					var conversion = param.conversions[0];
					if (param.varArgs) {
						args[i] = 'varArgs';
					}
					else if (conversion) {
						args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
					}
					else {
						args[i] = 'arg' + i;
					}
				}

				var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
				if (ref) {
					return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
				}

				return code.join('\n');
			};

			/**
     * Return a string representation of the signature
     * @returns {string}
     */
			Signature.prototype.toString = function () {
				return this.params.join(', ');
			};

			/**
     * A group of signatures with the same parameter on given index
     * @param {Param[]} path
     * @param {Signature} [signature]
     * @param {Node[]} childs
     * @constructor
     */
			function Node(path, signature, childs) {
				this.path = path || [];
				this.param = path[path.length - 1] || null;
				this.signature = signature || null;
				this.childs = childs || [];
			}

			/**
     * Generate code for this group of signatures
     * @param {Refs} refs
     * @param {string} prefix
     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter
     * @returns {string} Returns the code as string
     */
			Node.prototype.toCode = function (refs, prefix, anyType) {
				// TODO: split this function in multiple functions, it's too large
				var code = [];

				if (this.param) {
					var index = this.path.length - 1;
					var conversion = this.param.conversions[0];
					var comment = '// type: ' + (conversion ?
						(conversion.from + ' (convert to ' + conversion.to + ')') :
						this.param);

					// non-root node (path is non-empty)
					if (this.param.varArgs) {
						if (this.param.anyType) {
							// variable arguments with any type
							code.push(prefix + 'if (arguments.length > ' + index + ') {');
							code.push(prefix + '  var varArgs = [];');
							code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
							code.push(prefix + '    varArgs.push(arguments[i]);');
							code.push(prefix + '  }');
							code.push(this.signature.toCode(refs, prefix + '  '));
							code.push(prefix + '}');
						}
						else {
							// variable arguments with a fixed type
							var getTests = function (types, arg) {
								var tests = [];
								for (var i = 0; i < types.length; i++) {
									tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
								}
								return tests.join(' || ');
							}.bind(this);

							var allTypes = this.param.types;
							var exactTypes = [];
							for (var i = 0; i < allTypes.length; i++) {
								if (this.param.conversions[i] === undefined) {
									exactTypes.push(allTypes[i]);
								}
							}

							code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
							code.push(prefix + '  var varArgs = [arg' + index + '];');
							code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
							code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
							code.push(prefix + '      varArgs.push(arguments[i]);');

							for (var i = 0; i < allTypes.length; i++) {
								var conversion_i = this.param.conversions[i];
								if (conversion_i) {
									var test = refs.add(getTypeTest(allTypes[i]), 'test');
									var convert = refs.add(conversion_i.convert, 'convert');
									code.push(prefix + '    }');
									code.push(prefix + '    else if (' + test + '(arguments[i])) {');
									code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
								}
							}
							code.push(prefix + '    } else {');
							code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
							code.push(prefix + '    }');
							code.push(prefix + '  }');
							code.push(this.signature.toCode(refs, prefix + '  '));
							code.push(prefix + '}');
						}
					}
					else {
						if (this.param.anyType) {
							// any type
							code.push(prefix + '// type: any');
							code.push(this._innerCode(refs, prefix, anyType));
						}
						else {
							// regular type
							var type = this.param.types[0];
							var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;

							code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
							code.push(this._innerCode(refs, prefix + '  ', anyType));
							code.push(prefix + '}');
						}
					}
				}
				else {
					// root node (path is empty)
					code.push(this._innerCode(refs, prefix, anyType));
				}

				return code.join('\n');
			};

			/**
     * Generate inner code for this group of signatures.
     * This is a helper function of Node.prototype.toCode
     * @param {Refs} refs
     * @param {string} prefix
     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter
     * @returns {string} Returns the inner code as string
     * @private
     */
			Node.prototype._innerCode = function (refs, prefix, anyType) {
				var code = [];
				var i;

				if (this.signature) {
					code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
					code.push(this.signature.toCode(refs, prefix + '  '));
					code.push(prefix + '}');
				}

				var nextAnyType;
				for (i = 0; i < this.childs.length; i++) {
					if (this.childs[i].param.anyType) {
						nextAnyType = this.childs[i];
						break;
					}
				}

				for (i = 0; i < this.childs.length; i++) {
					code.push(this.childs[i].toCode(refs, prefix, nextAnyType));
				}

				if (anyType && !this.param.anyType) {
					code.push(anyType.toCode(refs, prefix, nextAnyType));
				}

				var exceptions = this._exceptions(refs, prefix);
				if (exceptions) {
					code.push(exceptions);
				}

				return code.join('\n');
			};

			/**
     * Generate code to throw exceptions
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the inner code as string
     * @private
     */
			Node.prototype._exceptions = function (refs, prefix) {
				var index = this.path.length;

				if (this.childs.length === 0) {
					// TODO: can this condition be simplified? (we have a fall-through here)
					return [
						prefix + 'if (arguments.length > ' + index + ') {',
						prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',
						prefix + '}'
					].join('\n');
				}
				else {
					var keys = {};
					var types = [];

					for (var i = 0; i < this.childs.length; i++) {
						var node = this.childs[i];
						if (node.param) {
							for (var j = 0; j < node.param.types.length; j++) {
								var type = node.param.types[j];
								if (!(type in keys) && !node.param.conversions[j]) {
									keys[type] = true;
									types.push(type);
								}
							}
						}
					}

					return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
				}
			};

			/**
     * Split all raw signatures into an array with expanded Signatures
     * @param {Object.<string, Function>} rawSignatures
     * @return {Signature[]} Returns an array with expanded signatures
     */
			function parseSignatures(rawSignatures) {
				// FIXME: need to have deterministic ordering of signatures, do not create via object
				var signature;
				var keys = {};
				var signatures = [];
				var i;

				for (var types in rawSignatures) {
					if (rawSignatures.hasOwnProperty(types)) {
						var fn = rawSignatures[types];
						signature = new Signature(types, fn);

						if (signature.ignore()) {
							continue;
						}

						var expanded = signature.expand();

						for (i = 0; i < expanded.length; i++) {
							var signature_i = expanded[i];
							var key = signature_i.toString();
							var existing = keys[key];
							if (!existing) {
								keys[key] = signature_i;
							}
							else {
								var cmp = Signature.compare(signature_i, existing);
								if (cmp < 0) {
									// override if sorted first
									keys[key] = signature_i;
								}
								else if (cmp === 0) {
									throw new Error('Signature "' + key + '" is defined twice');
								}
								// else: just ignore
							}
						}
					}
				}

				// convert from map to array
				for (key in keys) {
					if (keys.hasOwnProperty(key)) {
						signatures.push(keys[key]);
					}
				}

				// order the signatures
				signatures.sort(function (a, b) {
					return Signature.compare(a, b);
				});

				// filter redundant conversions from signatures with varArgs
				// TODO: simplify this loop or move it to a separate function
				for (i = 0; i < signatures.length; i++) {
					signature = signatures[i];

					if (signature.varArgs) {
						var index = signature.params.length - 1;
						var param = signature.params[index];

						var t = 0;
						while (t < param.types.length) {
							if (param.conversions[t]) {
								var type = param.types[t];

								for (var j = 0; j < signatures.length; j++) {
									var other = signatures[j];
									var p = other.params[index];

									if (other !== signature &&
                    p &&
                    contains(p.types, type) && !p.conversions[index]) {
										// this (conversion) type already exists, remove it
										param.types.splice(t, 1);
										param.conversions.splice(t, 1);
										t--;
										break;
									}
								}
							}
							t++;
						}
					}
				}

				return signatures;
			}

			/**
     * create a map with normalized signatures as key and the function as value
     * @param {Signature[]} signatures   An array with split signatures
     * @return {Object.<string, Function>} Returns a map with normalized
     *                                     signatures as key, and the function
     *                                     as value.
     */
			function mapSignatures(signatures) {
				var normalized = {};

				for (var i = 0; i < signatures.length; i++) {
					var signature = signatures[i];
					if (signature.fn && !signature.hasConversions()) {
						var params = signature.params.join(',');
						normalized[params] = signature.fn;
					}
				}

				return normalized;
			}

			/**
     * Parse signatures recursively in a node tree.
     * @param {Signature[]} signatures  Array with expanded signatures
     * @param {Param[]} path            Traversed path of parameter types
     * @return {Node}                   Returns a node tree
     */
			function parseTree(signatures, path) {
				var i, signature;
				var index = path.length;
				var nodeSignature;

				var filtered = [];
				for (i = 0; i < signatures.length; i++) {
					signature = signatures[i];

					// filter the first signature with the correct number of params
					if (signature.params.length === index && !nodeSignature) {
						nodeSignature = signature;
					}

					if (signature.params[index] != undefined) {
						filtered.push(signature);
					}
				}

				// sort the filtered signatures by param
				filtered.sort(function (a, b) {
					return Param.compare(a.params[index], b.params[index]);
				});

				// recurse over the signatures
				var entries = [];
				for (i = 0; i < filtered.length; i++) {
					signature = filtered[i];
					// group signatures with the same param at current index
					var param = signature.params[index];

					// TODO: replace the next filter loop
					var existing = entries.filter(function (entry) {
						return entry.param.overlapping(param);
					})[0];

					//var existing;
					//for (var j = 0; j < entries.length; j++) {
					//  if (entries[j].param.overlapping(param)) {
					//    existing = entries[j];
					//    break;
					//  }
					//}

					if (existing) {
						if (existing.param.varArgs) {
							throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
						}
						existing.signatures.push(signature);
					}
					else {
						entries.push({
							param: param,
							signatures: [signature]
						});
					}
				}

				// parse the childs
				var childs = new Array(entries.length);
				for (i = 0; i < entries.length; i++) {
					var entry = entries[i];
					childs[i] = parseTree(entry.signatures, path.concat(entry.param));
				}

				return new Node(path, nodeSignature, childs);
			}

			/**
     * Generate an array like ['arg0', 'arg1', 'arg2']
     * @param {number} count Number of arguments to generate
     * @returns {Array} Returns an array with argument names
     */
			function getArgs(count) {
				// create an array with all argument names
				var args = [];
				for (var i = 0; i < count; i++) {
					args[i] = 'arg' + i;
				}

				return args;
			}

			/**
     * Compose a function from sub-functions each handling a single type signature.
     * Signatures:
     *   typed(signature: string, fn: function)
     *   typed(name: string, signature: string, fn: function)
     *   typed(signatures: Object.<string, function>)
     *   typed(name: string, signatures: Object.<string, function>)
     *
     * @param {string | null} name
     * @param {Object.<string, Function>} signatures
     * @return {Function} Returns the typed function
     * @private
     */
			function _typed(name, signatures) {
				var refs = new Refs();

				// parse signatures, expand them
				var _signatures = parseSignatures(signatures);
				if (_signatures.length == 0) {
					throw new Error('No signatures provided');
				}

				// parse signatures into a node tree
				var node = parseTree(_signatures, []);

				//var util = require('util');
				//console.log('ROOT');
				//console.log(util.inspect(node, { depth: null }));

				// generate code for the typed function
				var code = [];
				var _name = name || '';
				var _args = getArgs(maxParams(_signatures));
				code.push('function ' + _name + '(' + _args.join(', ') + ') {');
				code.push('  "use strict";');
				code.push('  var name = \'' + _name + '\';');
				code.push(node.toCode(refs, '  '));
				code.push('}');

				// generate body for the factory function
				var body = [
					refs.toCode(),
					'return ' + code.join('\n')
				].join('\n');

				// evaluate the JavaScript code and attach function references
				var factory = (new Function(refs.name, 'createError', body));
				var fn = factory(refs, createError);

				//console.log('FN\n' + fn.toString()); // TODO: cleanup

				// attach the signatures with sub-functions to the constructed function
				fn.signatures = mapSignatures(_signatures);

				return fn;
			}

			/**
     * Calculate the maximum number of parameters in givens signatures
     * @param {Signature[]} signatures
     * @returns {number} The maximum number of parameters
     */
			function maxParams(signatures) {
				var max = 0;

				for (var i = 0; i < signatures.length; i++) {
					var len = signatures[i].params.length;
					if (len > max) {
						max = len;
					}
				}

				return max;
			}

			/**
     * Get the type of a value
     * @param {*} x
     * @returns {string} Returns a string with the type of value
     */
			function getTypeOf(x) {
				var obj;

				for (var i = 0; i < typed.types.length; i++) {
					var entry = typed.types[i];

					if (entry.name === 'Object') {
						// Array and Date are also Object, so test for Object afterwards
						obj = entry;
					}
					else {
						if (entry.test(x)) return entry.name;
					}
				}

				// at last, test whether an object
				if (obj && obj.test(x)) return obj.name;

				return 'unknown';
			}

			/**
     * Test whether an array contains some entry
     * @param {Array} array
     * @param {*} entry
     * @return {boolean} Returns true if array contains entry, false if not.
     */
			function contains(array, entry) {
				return array.indexOf(entry) !== -1;
			}

			// data type tests
			var types = [
				{ name: 'number',    test: function (x) { return typeof x === 'number'; } },
				{ name: 'string',    test: function (x) { return typeof x === 'string'; } },
				{ name: 'boolean',   test: function (x) { return typeof x === 'boolean'; } },
				{ name: 'Function',  test: function (x) { return typeof x === 'function';} },
				{ name: 'Array',     test: Array.isArray },
				{ name: 'Date',      test: function (x) { return x instanceof Date; } },
				{ name: 'RegExp',    test: function (x) { return x instanceof RegExp; } },
				{ name: 'Object',    test: function (x) { return typeof x === 'object'; } },
				{ name: 'null',      test: function (x) { return x === null; } },
				{ name: 'undefined', test: function (x) { return x === undefined; } }
			];

			// configuration
			var config = {};

			// type conversions. Order is important
			var conversions = [];

			// types to be ignored
			var ignore = [];

			// temporary object for holding types and conversions, for constructing
			// the `typed` function itself
			// TODO: find a more elegant solution for this
			var typed = {
				config: config,
				types: types,
				conversions: conversions,
				ignore: ignore
			};

			/**
     * Construct the typed function itself with various signatures
     *
     * Signatures:
     *
     *   typed(signatures: Object.<string, function>)
     *   typed(name: string, signatures: Object.<string, function>)
     */
			typed = _typed('typed', {
				'Object': function (signatures) {
					var fns = [];
					for (var signature in signatures) {
						if (signatures.hasOwnProperty(signature)) {
							fns.push(signatures[signature]);
						}
					}
					var name = getName(fns);

					return _typed(name, signatures);
				},
				'string, Object': _typed,
				// TODO: add a signature 'Array.<function>'
				'...Function': function (fns) {
					var err;
					var name = getName(fns);
					var signatures = {};

					for (var i = 0; i < fns.length; i++) {
						var fn = fns[i];

						// test whether this is a typed-function
						if (!(typeof fn.signatures === 'object')) {
							err = new TypeError('Function is no typed-function (index: ' + i + ')');
							err.data = {index: i};
							throw err;
						}

						// merge the signatures
						for (var signature in fn.signatures) {
							if (fn.signatures.hasOwnProperty(signature)) {
								if (signatures.hasOwnProperty(signature)) {
									if (fn.signatures[signature] !== signatures[signature]) {
										err = new Error('Signature "' + signature + '" is defined twice');
										err.data = {signature: signature};
										throw err;
									}
									// else: both signatures point to the same function, that's fine
								}
								else {
									signatures[signature] = fn.signatures[signature];
								}
							}
						}
					}

					return _typed(name, signatures);
				}
			});

			/**
     * Find a specific signature from a (composed) typed function, for
     * example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an errror when no signature
     *                                        is found.
     */
			function find (fn, signature) {
				if (!fn.signatures) {
					throw new TypeError('Function is no typed-function');
				}

				// normalize input
				var arr;
				if (typeof signature === 'string') {
					arr = signature.split(',');
					for (var i = 0; i < arr.length; i++) {
						arr[i] = arr[i].trim();
					}
				}
				else if (Array.isArray(signature)) {
					arr = signature;
				}
				else {
					throw new TypeError('String array or a comma separated string expected');
				}

				var str = arr.join(',');

				// find an exact match
				var match = fn.signatures[str];
				if (match) {
					return match;
				}

				// TODO: extend find to match non-exact signatures

				throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
			}

			/**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */
			function convert (value, type) {
				var from = getTypeOf(value);

				// check conversion is needed
				if (type === from) {
					return value;
				}

				for (var i = 0; i < typed.conversions.length; i++) {
					var conversion = typed.conversions[i];
					if (conversion.from === from && conversion.to === type) {
						return conversion.convert(value);
					}
				}

				throw new Error('Cannot convert from ' + from + ' to ' + type);
			}

			// attach types and conversions to the final `typed` function
			typed.config = config;
			typed.types = types;
			typed.conversions = conversions;
			typed.ignore = ignore;
			typed.create = create;
			typed.find = find;
			typed.convert = convert;

			// add a type
			typed.addType = function (type) {
				if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
					throw new TypeError('Object with properties {name: string, test: function} expected');
				}

				typed.types.push(type);
			};

			// add a conversion
			typed.addConversion = function (conversion) {
				if (!conversion
          || typeof conversion.from !== 'string'
          || typeof conversion.to !== 'string'
          || typeof conversion.convert !== 'function') {
					throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
				}

				typed.conversions.push(conversion);
			};

			return typed;
		}

		return create();
	}));

},{}],791:[function(require,module,exports){
	module.exports = function isBuffer(arg) {
		return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
	};
},{}],792:[function(require,module,exports){
	(function (process,global){
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		var formatRegExp = /%[sdj%]/g;
		exports.format = function(f) {
			if (!isString(f)) {
				var objects = [];
				for (var i = 0; i < arguments.length; i++) {
					objects.push(inspect(arguments[i]));
				}
				return objects.join(' ');
			}

			var i = 1;
			var args = arguments;
			var len = args.length;
			var str = String(f).replace(formatRegExp, function(x) {
				if (x === '%%') return '%';
				if (i >= len) return x;
				switch (x) {
				case '%s': return String(args[i++]);
				case '%d': return Number(args[i++]);
				case '%j':
					try {
						return JSON.stringify(args[i++]);
					} catch (_) {
						return '[Circular]';
					}
				default:
					return x;
				}
			});
			for (var x = args[i]; i < len; x = args[++i]) {
				if (isNull(x) || !isObject(x)) {
					str += ' ' + x;
				} else {
					str += ' ' + inspect(x);
				}
			}
			return str;
		};


		// Mark that a method should not be used.
		// Returns a modified function which warns once by default.
		// If --no-deprecation is set, then it is a no-op.
		exports.deprecate = function(fn, msg) {
			// Allow for deprecating things in the process of starting up.
			if (isUndefined(global.process)) {
				return function() {
					return exports.deprecate(fn, msg).apply(this, arguments);
				};
			}

			if (process.noDeprecation === true) {
				return fn;
			}

			var warned = false;
			function deprecated() {
				if (!warned) {
					if (process.throwDeprecation) {
						throw new Error(msg);
					} else if (process.traceDeprecation) {
						console.trace(msg);
					} else {
						console.error(msg);
					}
					warned = true;
				}
				return fn.apply(this, arguments);
			}

			return deprecated;
		};


		var debugs = {};
		var debugEnviron;
		exports.debuglog = function(set) {
			if (isUndefined(debugEnviron))
				debugEnviron = process.env.NODE_DEBUG || '';
			set = set.toUpperCase();
			if (!debugs[set]) {
				if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
					var pid = process.pid;
					debugs[set] = function() {
						var msg = exports.format.apply(exports, arguments);
						console.error('%s %d: %s', set, pid, msg);
					};
				} else {
					debugs[set] = function() {};
				}
			}
			return debugs[set];
		};


		/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
		/* legacy: obj, showHidden, depth, colors*/
		function inspect(obj, opts) {
			// default options
			var ctx = {
				seen: [],
				stylize: stylizeNoColor
			};
			// legacy...
			if (arguments.length >= 3) ctx.depth = arguments[2];
			if (arguments.length >= 4) ctx.colors = arguments[3];
			if (isBoolean(opts)) {
				// legacy...
				ctx.showHidden = opts;
			} else if (opts) {
				// got an "options" object
				exports._extend(ctx, opts);
			}
			// set default options
			if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
			if (isUndefined(ctx.depth)) ctx.depth = 2;
			if (isUndefined(ctx.colors)) ctx.colors = false;
			if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
			if (ctx.colors) ctx.stylize = stylizeWithColor;
			return formatValue(ctx, obj, ctx.depth);
		}
		exports.inspect = inspect;


		// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
		inspect.colors = {
			'bold' : [1, 22],
			'italic' : [3, 23],
			'underline' : [4, 24],
			'inverse' : [7, 27],
			'white' : [37, 39],
			'grey' : [90, 39],
			'black' : [30, 39],
			'blue' : [34, 39],
			'cyan' : [36, 39],
			'green' : [32, 39],
			'magenta' : [35, 39],
			'red' : [31, 39],
			'yellow' : [33, 39]
		};

		// Don't use 'blue' not visible on cmd.exe
		inspect.styles = {
			'special': 'cyan',
			'number': 'yellow',
			'boolean': 'yellow',
			'undefined': 'grey',
			'null': 'bold',
			'string': 'green',
			'date': 'magenta',
			// "name": intentionally not styling
			'regexp': 'red'
		};


		function stylizeWithColor(str, styleType) {
			var style = inspect.styles[styleType];

			if (style) {
				return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
			} else {
				return str;
			}
		}


		function stylizeNoColor(str, styleType) {
			return str;
		}


		function arrayToHash(array) {
			var hash = {};

			array.forEach(function(val, idx) {
				hash[val] = true;
			});

			return hash;
		}


		function formatValue(ctx, value, recurseTimes) {
			// Provide a hook for user-specified inspect functions.
			// Check that value is an object with an inspect function on it
			if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
				var ret = value.inspect(recurseTimes, ctx);
				if (!isString(ret)) {
					ret = formatValue(ctx, ret, recurseTimes);
				}
				return ret;
			}

			// Primitive types cannot have properties
			var primitive = formatPrimitive(ctx, value);
			if (primitive) {
				return primitive;
			}

			// Look up the keys of the object.
			var keys = Object.keys(value);
			var visibleKeys = arrayToHash(keys);

			if (ctx.showHidden) {
				keys = Object.getOwnPropertyNames(value);
			}

			// IE doesn't make error fields non-enumerable
			// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
			if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
				return formatError(value);
			}

			// Some type of object without properties can be shortcutted.
			if (keys.length === 0) {
				if (isFunction(value)) {
					var name = value.name ? ': ' + value.name : '';
					return ctx.stylize('[Function' + name + ']', 'special');
				}
				if (isRegExp(value)) {
					return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
				}
				if (isDate(value)) {
					return ctx.stylize(Date.prototype.toString.call(value), 'date');
				}
				if (isError(value)) {
					return formatError(value);
				}
			}

			var base = '', array = false, braces = ['{', '}'];

			// Make Array say that they are Array
			if (isArray(value)) {
				array = true;
				braces = ['[', ']'];
			}

			// Make functions say that they are functions
			if (isFunction(value)) {
				var n = value.name ? ': ' + value.name : '';
				base = ' [Function' + n + ']';
			}

			// Make RegExps say that they are RegExps
			if (isRegExp(value)) {
				base = ' ' + RegExp.prototype.toString.call(value);
			}

			// Make dates with properties first say the date
			if (isDate(value)) {
				base = ' ' + Date.prototype.toUTCString.call(value);
			}

			// Make error with message first say the error
			if (isError(value)) {
				base = ' ' + formatError(value);
			}

			if (keys.length === 0 && (!array || value.length == 0)) {
				return braces[0] + base + braces[1];
			}

			if (recurseTimes < 0) {
				if (isRegExp(value)) {
					return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
				} else {
					return ctx.stylize('[Object]', 'special');
				}
			}

			ctx.seen.push(value);

			var output;
			if (array) {
				output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
			} else {
				output = keys.map(function(key) {
					return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
				});
			}

			ctx.seen.pop();

			return reduceToSingleString(output, base, braces);
		}


		function formatPrimitive(ctx, value) {
			if (isUndefined(value))
				return ctx.stylize('undefined', 'undefined');
			if (isString(value)) {
				var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
					.replace(/'/g, "\\'")
					.replace(/\\"/g, '"') + '\'';
				return ctx.stylize(simple, 'string');
			}
			if (isNumber(value))
				return ctx.stylize('' + value, 'number');
			if (isBoolean(value))
				return ctx.stylize('' + value, 'boolean');
			// For some reason typeof null is "object", so special case here.
			if (isNull(value))
				return ctx.stylize('null', 'null');
		}


		function formatError(value) {
			return '[' + Error.prototype.toString.call(value) + ']';
		}


		function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
			var output = [];
			for (var i = 0, l = value.length; i < l; ++i) {
				if (hasOwnProperty(value, String(i))) {
					output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
						String(i), true));
				} else {
					output.push('');
				}
			}
			keys.forEach(function(key) {
				if (!key.match(/^\d+$/)) {
					output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
						key, true));
				}
			});
			return output;
		}


		function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
			var name, str, desc;
			desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
			if (desc.get) {
				if (desc.set) {
					str = ctx.stylize('[Getter/Setter]', 'special');
				} else {
					str = ctx.stylize('[Getter]', 'special');
				}
			} else {
				if (desc.set) {
					str = ctx.stylize('[Setter]', 'special');
				}
			}
			if (!hasOwnProperty(visibleKeys, key)) {
				name = '[' + key + ']';
			}
			if (!str) {
				if (ctx.seen.indexOf(desc.value) < 0) {
					if (isNull(recurseTimes)) {
						str = formatValue(ctx, desc.value, null);
					} else {
						str = formatValue(ctx, desc.value, recurseTimes - 1);
					}
					if (str.indexOf('\n') > -1) {
						if (array) {
							str = str.split('\n').map(function(line) {
								return '  ' + line;
							}).join('\n').substr(2);
						} else {
							str = '\n' + str.split('\n').map(function(line) {
								return '   ' + line;
							}).join('\n');
						}
					}
				} else {
					str = ctx.stylize('[Circular]', 'special');
				}
			}
			if (isUndefined(name)) {
				if (array && key.match(/^\d+$/)) {
					return str;
				}
				name = JSON.stringify('' + key);
				if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
					name = name.substr(1, name.length - 2);
					name = ctx.stylize(name, 'name');
				} else {
					name = name.replace(/'/g, "\\'")
						.replace(/\\"/g, '"')
						.replace(/(^"|"$)/g, "'");
					name = ctx.stylize(name, 'string');
				}
			}

			return name + ': ' + str;
		}


		function reduceToSingleString(output, base, braces) {
			var numLinesEst = 0;
			var length = output.reduce(function(prev, cur) {
				numLinesEst++;
				if (cur.indexOf('\n') >= 0) numLinesEst++;
				return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
			}, 0);

			if (length > 60) {
				return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
			}

			return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
		}


		// NOTE: These type checking functions intentionally don't use `instanceof`
		// because it is fragile and can be easily faked with `Object.create()`.
		function isArray(ar) {
			return Array.isArray(ar);
		}
		exports.isArray = isArray;

		function isBoolean(arg) {
			return typeof arg === 'boolean';
		}
		exports.isBoolean = isBoolean;

		function isNull(arg) {
			return arg === null;
		}
		exports.isNull = isNull;

		function isNullOrUndefined(arg) {
			return arg == null;
		}
		exports.isNullOrUndefined = isNullOrUndefined;

		function isNumber(arg) {
			return typeof arg === 'number';
		}
		exports.isNumber = isNumber;

		function isString(arg) {
			return typeof arg === 'string';
		}
		exports.isString = isString;

		function isSymbol(arg) {
			return typeof arg === 'symbol';
		}
		exports.isSymbol = isSymbol;

		function isUndefined(arg) {
			return arg === void 0;
		}
		exports.isUndefined = isUndefined;

		function isRegExp(re) {
			return isObject(re) && objectToString(re) === '[object RegExp]';
		}
		exports.isRegExp = isRegExp;

		function isObject(arg) {
			return typeof arg === 'object' && arg !== null;
		}
		exports.isObject = isObject;

		function isDate(d) {
			return isObject(d) && objectToString(d) === '[object Date]';
		}
		exports.isDate = isDate;

		function isError(e) {
			return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
		}
		exports.isError = isError;

		function isFunction(arg) {
			return typeof arg === 'function';
		}
		exports.isFunction = isFunction;

		function isPrimitive(arg) {
			return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
		}
		exports.isPrimitive = isPrimitive;

		exports.isBuffer = require('./support/isBuffer');

		function objectToString(o) {
			return Object.prototype.toString.call(o);
		}


		function pad(n) {
			return n < 10 ? '0' + n.toString(10) : n.toString(10);
		}


		var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
			'Oct', 'Nov', 'Dec'];

		// 26 Feb 16:19:34
		function timestamp() {
			var d = new Date();
			var time = [pad(d.getHours()),
				pad(d.getMinutes()),
				pad(d.getSeconds())].join(':');
			return [d.getDate(), months[d.getMonth()], time].join(' ');
		}


		// log is just a thin wrapper to console.log that prepends a timestamp
		exports.log = function() {
			console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
		};


		/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
		exports.inherits = require('inherits');

		exports._extend = function(origin, add) {
			// Don't do anything if add isn't an object
			if (!add || !isObject(add)) return origin;

			var keys = Object.keys(add);
			var i = keys.length;
			while (i--) {
				origin[keys[i]] = add[keys[i]];
			}
			return origin;
		};

		function hasOwnProperty(obj, prop) {
			return Object.prototype.hasOwnProperty.call(obj, prop);
		}

	}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{"./support/isBuffer":791,"_process":615,"inherits":113}],793:[function(require,module,exports){
	"use strict";

	var api = require("../webAPI.js");
	var format = require("../format.js");

	module.exports = require("../react/flux/action.js")(function (my, dispatcher) {
		this.load = function (id, data) {

			var apiData = {
				groups: data.groups,
				partitions: data.partitions,
				metrics: data.metrics,
				filters: data.filters,
				apikey: window.apiKey,
				redshift: true,
				numericFormat: true,
				sort: data.sort
			};

			if (apiData.metrics.length > 0) {
				api.post("report", apiData, function (result) {
					if (result === 'error') {
						result = { error: true };
					}
					result.groups = data.groups;
					result.partitions = data.partitions;
					if (!result.error) {
						for (var columnId in result.columns) {
							result.columns[columnId].formatter = format.get(result.columns[columnId]);
						}
						for (var i = 0; i < result.mapping.length; i++) {
							result.mapping[i].formatter = format.get(result.mapping[i]);
						}
					}
					dispatcher.emit("data.data", { id: id, data: result });
				});
			}
		};

		this.reset = function () {
			dispatcher.emit("data.reset");
		};

		this.refresh = function () {
			dispatcher.emit("data.refresh");
		};

		this.downloadData = function (title, data, dataSource) {

			if (!data && dataSource) {
				var headerRow = [];
				dataSource.columnheaders.forEach(function (columnHeader) {
					headerRow.push(dataSource.columns[columnHeader.id].label);
				});
				data = [headerRow];

				/*
   TODO: sort
   var position = dataSource.sorted[0].position
   var direction = dataSource.sorted[0].direction
   dataSource.rows.sort((a, b) => {
   	if (direction == 'asc') {
   			} else {
   		if (a[sortParams.position]) {
   				}
   	}
   })
   console.log('dataSource', dataSource)
   */

				dataSource.rows.forEach(function (row) {
					data.push(row.map(function (value, index) {
						return dataSource.mapping[index].formatter ? dataSource.mapping[index].formatter(value) : value;
					}));
				});
			}

			if (data) {
				var downloadForm = $("#downloadform");
				if (!downloadForm.length) {
					downloadForm = $('<div id="downloadform" style="display: none"><a>download</a>').appendTo("body");
				}
				var d = data.map(function (r) {
					return r.join(",");
				}).join("\r\n");
				var a = $("a", downloadForm);
				a.attr("target", "_blank");
				a.attr("download", title + ".csv");
				a.attr("href", 'data:text/csv;base64,' + btoa(d));
				a[0].click();
			}
		};
	});

},{"../format.js":814,"../react/flux/action.js":818,"../webAPI.js":827}],794:[function(require,module,exports){
	"use strict";

	var api = require("../webAPI.js");

	module.exports = require("../react/flux/action.js")(function (my, dispatcher) {
		this.setFilter = function (group, id, comparison, value, label, checkboxes, api, isRequired, singleValue, isHidden) {
			dispatcher.emit("options.setFilter", {
				group: group || 'default',
				id: id,
				comparison: comparison,
				value: value,
				checkboxes: checkboxes,
				label: label,
				api: api,
				isRequired: isRequired,
				singleValue: singleValue,
				isHidden: isHidden
			});
		};

		this.updateFilter = function (group, filter) {
			filter.group = group || 'default';
			dispatcher.emit("options.setFilter", filter);
		};

		this.deleteFilter = function (group, id) {
			dispatcher.emit("options.deleteFilter", {
				group: group || 'default',
				id: id
			});
		};

		this.setTimeFilter = function (group, value) {
			dispatcher.emit("options.setTimeFilter", {
				group: group || 'default',
				value: value
			});
		};

		this.setTimeBreakdown = function (group, breakdown) {
			dispatcher.emit("options.setTimeBreakdown", {
				group: group || 'default',
				breakdown: breakdown
			});
		};

		this.reset = function (group, breakdown) {
			dispatcher.emit("options.reset");
		};

		this.setLegendToggles = function (group, items) {
			dispatcher.emit("options.setLegendToggles", {
				group: group || 'default',
				items: items
			});
		};

		this.setLegendToggle = function (group, name, status) {
			dispatcher.emit("options.setLegendToggle", {
				group: group || 'default',
				name: name,
				status: status
			});
		};

		this.setColor = function (group, seriesName, color) {
			dispatcher.emit("options.setColor", {
				group: group || 'default',
				color: color,
				seriesName: seriesName
			});
		};

		this.setDefaultColors = function (group, defaultColors) {
			dispatcher.emit("options.setDefaultColors", {
				group: group || 'default',
				defaultColors: defaultColors
			});
		};

		this.setDefaultRefresh = function (group, rate) {
			dispatcher.emit("options.setRefresh", {
				group: group || 'default',
				rate: rate
			});
		};
	});

},{"../react/flux/action.js":818,"../webAPI.js":827}],795:[function(require,module,exports){
	'use strict';

	var base = require("../highcharts.js");

	module.exports = function (element, spec, options, my) {
		my = my || {};
		var that = base(element, $.extend(true, {
			columns: [options.column],
			metrics: [{
				field: options.metric,
				partitions: options.partitions.split(';')
			}],
			highcharts: {
				chart: {
					type: 'column'
				},
				plotOptions: {
					column: {
						stacking: options.stack === true ? 'normal' : null
					}
				}
			}
		}, spec), options, my);

		return that;
	};

},{"../highcharts.js":808}],796:[function(require,module,exports){
	"use strict";

	var base = require("./base.js");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		var chart = {
			metrics: [],
			highcharts: {
				yAxis: [{ opposite: false }, {
					opposite: true
				}]
			}
		};
		chart.metrics[1] = {
			field: options.line,
			highcharts: {
				type: 'line',
				yAxis: 1
			}
		};

		var that = base(element, $.extend(true, chart, spec), options, my);
		return that;
	};

},{"./base.js":795}],797:[function(require,module,exports){
	'use strict';

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var Data = require('../stores/data.js')();
	var DashboardOptions = require('../stores/options.js')();
	var parse_date = require("../../../../lib/parse_date.js").parse_date;
	var ReactDom = require("react-dom");
	var moment = require("moment");

	var timeframes = {
		"hour": {
			id: "hour",
			columns: ["{d_date}.date", "{d_time}.hour24"],
			dimensions: {
				d_date: "d_date",
				d_time: "d_time"
			}
		},
		"day": {
			id: "day",
			columns: ["{d_date}.date"],
			dimensions: {
				d_date: "d_date",
				d_time: "d_time"
			}
		},
		"week": {
			id: "week",
			columns: ["{d_date}.week_ending_date"],
			dimensions: {
				d_date: "d_date",
				d_time: "d_time"
			}
		},
		"month": {
			id: "month",
			columns: ["{d_date}.year_month"],
			dimensions: {
				d_date: "d_date",
				d_time: "d_time"
			}
		},
		"quarter": {
			id: "quarter",
			columns: ["{d_date}.year_quarter"],
			dimensions: {
				d_date: "d_date",
				d_time: "d_time"
			}
		},
		"year": {
			id: "year",
			columns: ["{d_date}.year"],
			dimensions: {
				d_date: "d_date",
				d_time: "d_time"
			}
		}

	};

	function comparison(timeframe, metric, options) {
		var _metric$split = metric.split('|', 2);

		var _metric$split2 = _slicedToArray(_metric$split, 2);

		var metric = _metric$split2[0];
		var modifiers = _metric$split2[1];


		var asOfDate = options.asOf || moment();

		var timeLimit = options.notime ? '' : 'and ' + timeframe.dimensions.d_time + '._id<=@time(' + asOfDate.format('HH:mm:ss');

		var filter = {
			id: timeframe.dimensions.d_date + ".id",
			comparison: 'between',
			value: [],
			fromController: false
		};

		var _parse_date = parse_date('last 0 ' + timeframe.id + ' to date', asOfDate);

		var _parse_date2 = _slicedToArray(_parse_date, 2);

		var currentstart = _parse_date2[0];
		var currentend = _parse_date2[1];

		var _parse_date3 = parse_date('last ' + timeframe.id, asOfDate);

		var _parse_date4 = _slicedToArray(_parse_date3, 2);

		var prevstart = _parse_date4[0];
		var prevend = _parse_date4[1];

		var todayLastPeriod = parse_date('today last ' + timeframe.id, asOfDate);

		currentend = currentend || currentstart;

		filter.value = [prevstart, currentend];

		var metrics = [metric + ('|filter:' + timeframe.dimensions.d_date + '._id between @date(' + currentstart + ') and @date(' + currentend + ')|' + modifiers), metric + ('|filter:' + timeframe.dimensions.d_date + '._id >= @date(' + prevstart + ') and (' + timeframe.dimensions.d_date + '._id < @date(' + todayLastPeriod + ') or (' + timeframe.dimensions.d_date + '._id = @date(' + todayLastPeriod + ') ' + timeLimit + '))|' + modifiers), metric + ('|filter:' + timeframe.dimensions.d_date + '._id between @date(' + prevstart + ') and @date(' + prevend + ')|' + modifiers)];

		return {
			filter: filter,
			metrics: metrics
		};
	}

	module.exports = function (element, chart, options, my) {

		var that = chart || {};

		that.guid = that.guid || Date.now() + Math.random();

		element.data('guid', that.guid);

		my = my || {};

		my.dashboardOptions = DashboardOptions;

		my.graphWatching = null;
		my.optiongroup = options['leo-option-group'] || 'default';

		that.refreshInterval = DashboardOptions.getGroup(my.optiongroup).refreshRate;

		my.context = {};
		element.empty();

		var chartId = chart.chart_id || (chart.advanced && chart.advanced.chart_id ? chart.advanced.chart_id : undefined) || (chart.advanced && chart.advanced.title ? typeof chart.advanced.title == 'string' ? chart.advanced.title : chart.advanced.title.text : undefined);

		if (chartId) {
			element.prop('id', chartId.replace(/[ .:#]/gi, '_'));
		}

		if (chart.type) {
			element.addClass(chart.type);
		}

		var hasColumns = that.columns && that.columns.length > 0;
		var optionsChange = function optionsChange() {

			var optionsGroup = DashboardOptions.getGroup(my.optiongroup);
			my.timeframe = $.extend(true, {}, timeframes[optionsGroup.timebreakdown], {
				periods: 2,
				dimensions: {
					d_date: options.date || "d_date",
					d_time: options.time || "d_time"
				}
			});
			if (!hasColumns && my.timeframe.columns) {
				that.columns = my.timeframe.columns.map(function (col) {
					return col.replace("{d_date}", my.timeframe.dimensions.d_date).replace("{d_time}", my.timeframe.dimensions.d_time);
				});
			}

			var hasTimeFrame = false;
			for (var j = that.filters.length - 1; j >= 0; j--) {
				var filter = that.filters[j];
				if (filter.timeframe || filter.optionsGroup) {
					that.filters.splice(j, 1);
				} else if (filter.id.match(new RegExp('^' + my.timeframe.dimensions.d_date))) {
					hasTimeFrame = true;
				}
			}

			if (optionsGroup.timeframe && !hasTimeFrame) {
				var newFilter = {
					timeframe: true
				};
				newFilter.id = optionsGroup.timeframe.id.replace("{d_date}", my.timeframe.dimensions.d_date).replace("{d_time}", my.timeframe.dimensions.d_time);
				var values = optionsGroup.timeframe.value;
				if (typeof values == 'string') {
					values = [values];
				} else {
					newFilter.comparison = "between";
				}
				for (var i = 0; i < values.length; i++) {
					values[i] = values[i].replace("{d_date}", my.timeframe.dimensions.d_date).replace("{d_time}", my.timeframe.dimensions.d_time).replace("{periods}", my.timeframe.periods - 1);
				}
				newFilter.value = values;
				that.filters.push(newFilter);
			}
			for (var id in optionsGroup.filters) {
				var f = optionsGroup.filters[id];

				var _newFilter = {
					optionsGroup: true
				};
				_newFilter.id = f.id;
				_newFilter.value = f.value;
				_newFilter.isHidden = f.isHidden;

				that.filters.push(_newFilter);
			}
			if (my.optionsChange) {
				my.optionsChange(that);
			}
		};

		DashboardOptions.on("change", function (groupId) {
			if (groupId === my.optiongroup) {
				optionsChange();
				my.graphWatching.stop();
				my.graphWatching = Data.watchGraph(that, function (dataSources) {
					my.dataSources = dataSources;
					var result = my.redraw();
					if (result) {
						ReactDom.render(result, element.get(0));
					}
					that.hideLoading();
				});
			}
		});

		DashboardOptions.on("togglechange", function (group, name, checked) {
			if (group == my.optiongroup) {
				that.toggleLegendItem(name, checked);
			}
		});

		DashboardOptions.on("togglelistchange", function (group, items) {
			if (group == my.optiongroup) {
				for (var i = 0; i < items.legendToggles.length; i++) {
					var toggle = items.legendToggles[i];
					//setTimeout(function() {
					that.toggleLegendItem(toggle.name, toggle.checked);
				//}, 1000)
				}
			}
		});

		that.showLoading = function () {
			element.append($('<div/>').addClass('leo-charts-loading').append('<span>Loading...</span>'));
		};

		that.hideLoading = function () {
			element.find('.leo-charts-loading').remove();
		};

		that.showNeedsFilter = function () {
			element.empty();
			element.append($('<div/>').addClass('leo-charts-loading').append('<span>Select a Filter to Load Data</span>'));
		};

		that.hideNeedsFilter = function () {
			element.find('.leo-charts-loading').remove();
		};

		that.toggleLegendItem = function (name, checked) {};

		that.refresh = function () {
			my.graphWatching.refresh();
		};

		that.start = function () {
			my.graphWatching = Data.watchGraph(that, function (dataSources) {
				my.dataSources = dataSources;
				var result = my.redraw();
				if (result) {
					ReactDom.render(result, element.get(0), function () {
						element.trigger("leo-after-render", [element]);
					});
				} else {
					element.trigger("leo-after-render", [element]);
				}
			});

			Data.on('loading', function (id) {
				if (id === my.graphWatching.id) {
					element.trigger("leo-loading");
					that.showLoading();
				}
			});
			Data.on('loaded', function (id) {
				if (id === my.graphWatching.id) {
					that.hideLoading();
					element.trigger("leo-complete");
				}
			});
			return that;
		};

		that.destroy = function (keepElement) {
			my.graphWatching.stop();
			DashboardOptions.off("change");
			DashboardOptions.off("togglechange");
			DashboardOptions.off("togglelistchange");
			if (keepElement) {
				element.empty();
			} else {
				element.remove();
			}
		};

		my.getComparisonMetrics = comparison;

		my.getMetricValue = function (metricNumber) {
			var result = my.getMetric(metricNumber);
			return result.rows[0][result.metricOffsets[0]];
		};

		my.getMetric = that.getMetric = function (metricNumber) {
			var metric = that.metrics[metricNumber];

			if (typeof metric == 'string') {
				metric = {
					id: metric
				};
			}
			var metricName = metric.id;
			var columns = metric.columns || that.columns || [];

			var partitions = metric.partitions || metric.colors || [];
			var filters = metric.filters || [];

			for (var i in my.dataSources) {
				var dataSource = my.dataSources[i];

				if (!dataSource.error) {
					var hasCorrectGroupings = dataSource.groups.toString() === columns.toString() && dataSource.partitions.toString() === partitions.toString()
				/* &&
    					dataSource.filters.toString() === filters.toString()*/
				;
					if (!hasCorrectGroupings) {
						continue;
					}

					var offset = 0;
					for (var j = 0; j < dataSource.columnheaders.length; j++) {
						if (dataSource.columnheaders[j].type !== "metric") {
							offset++;
						}
					}

					var metricOffsets = [];
					for (var _j = 0; _j < dataSource.mapping.length; _j++) {
						if (dataSource.mapping[_j].id == metric.id) {
							metricOffsets.push(_j);
						}
					}
					if (!metricOffsets.length) {
						continue;
					}

					return {
						metric: metric,
						rows: dataSource.rows || [],
						columns: dataSource.columns || {},
						columnheaders: dataSource.columnheaders || [],
						headers: dataSource.headers || [],
						mapping: dataSource.mapping || [],
						headerMapping: dataSource.headerMapping || [],
						metricOffsets: metricOffsets
					};
				} else {
					return {};
				}
			}
			return {};
		};

		function render() {
			my.graphWatching.stop();
			my.graphWatching = Data.watchGraph(that, function (dataSources) {
				my.dataSources = dataSources;
				element.trigger("leo-before-render");
				var result = my.redraw();
				if (result) {
					ReactDom.render(result, element.get(0), function () {
						element.trigger("leo-after-render", [element]);
					});
				} else {
					element.trigger("leo-after-render", [element]);
				}
				that.hideLoading();
			});
		}

		my.redraw = function () {};

		my.changeChart = that.changeChart = function (newParams, replace, keepFilters) {
			my.graphWatching.stop();
			if (replace) {
				that.columns = [];
				if (!keepFilters) {
					that.filters = [];
				}
				that.metrics = [];
			}
			that.outColumns = []; // NEW - THIS LINE FIXES THE ISSUE WITH DUPLICATING COLUMNS
			if (newParams.sort) {
				that.sort = [];
			}
			that = $.extend(true, that, newParams);
			render();
		};

		my.setFilter = function (filter) {
			var redraw = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

			var existing = that.filters.filter(function (f) {
				return f.id == filter.id;
			})[0];
			if (existing && existing.fromController === false && filter.fromController === true) {
				return;
			}

			that.filters = that.filters.filter(function (f) {
				if (f.id != filter.id) {
					return f;
				}
			});
			that.filters.push({
				id: filter.id,
				value: filter.value,
				comparison: filter.comparison || '=',
				fromController: filter.fromController || false
			});
			if (redraw && my.graphWatching) {
				render();
			}
		};

		element.data('leo', {
			setFilter: my.setFilter,
			changeChart: that.changeChart,
			removeFilter: function removeFilter(filterId) {
				that.filters = that.filters.filter(function (f) {
					if (f.id != filterId) {
						return f;
					}
				});
				render();
			}
		});

		optionsChange();
		return that;
	};

},{"../../../../lib/parse_date.js":2,"../stores/data.js":821,"../stores/options.js":822,"moment":611,"react-dom":616}],798:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");
	var moment = require("moment");
	var format = require("../../format.js");
	var math = require("mathjs");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		//spec.metrics = spec.expression.match(/([a-z_]+\.?[a-z_|:]*)/ig)
		spec.metrics = spec.expression.match(/([^()+*\/\-0-9 ]+[^()+*\/\-]*)/ig);
		spec.metrics = spec.metrics.map(function (metric) {
			return metric.trim();
		});

		var that = base(element, spec, options, my);

		my.resize = function () {
			$('.leo-single-number').each(function () {
				var smallElements = $(this).find('.label, .growth');
				var largeElement = $(this).find('.value');
				smallElements.css({ fontSize: 5 });
				largeElement.css({ fontSize: 10 });
				var parentDiv = $(this);
				var initialHeight = parentDiv.height();
				var initialWidth = parentDiv.width();

				for (var i = 5; i < 144; i += .25) {
					smallElements.css({ fontSize: i });
					largeElement.css({ fontSize: i * 2 });
					if (parentDiv.width() > initialWidth || parentDiv.height() > initialHeight) {
						smallElements.css({ fontSize: --i });
						largeElement.css({ fontSize: i * 2 });
						break;
					}
				}
			});
		};

		that.reflow = function () {
			my.resize();
		};

		$(window).resize(function () {
			my.resize();
		});

		my.redraw = function () {
			var title = options.title || spec.title || spec.label || '',
		    current,
		    currentFormatted,
		    expression = spec.expression;

			spec.metrics.forEach(function (column_id, index) {
				expression = expression.replace(column_id, parseFloat(my.getMetricValue(index)));
			});

			current = math.eval(expression.replace(/\s+/g, ' '));
			currentFormatted = format[spec.format](current, spec.decimals);

			setTimeout(function () {
				my.resize();
			}, 1);

			return React.createElement(
				"div",
				{ className: "leo-single-number" },
				React.createElement(
					"div",
					null,
					React.createElement(
						"div",
						{ className: "label resize" },
						title
					),
					React.createElement(
						"div",
						{ className: "value resize" },
						currentFormatted
					)
				)
			);
		};
		return that;
	};

},{"../../format.js":814,"../base.js":797,"mathjs":118,"moment":611,"react":785}],799:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");
	var moment = require("moment");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		spec = $.extend(true, {}, {
			goal: .2,
			warning: .2,
			metrics: []
		}, spec);

		var timeframe = spec.timeframe;
		var asOf = moment(spec.asof);

		var metric = spec.metric;
		delete spec.metric;
		my.optionsChange = function (that) {
			that.columns = [];
			if (timeframe) {
				my.timeframe.id = timeframe;
			}
			var comparison = my.getComparisonMetrics(my.timeframe, metric, {
				notime: options.notime || !spec.useTime,
				asOf: asOf
			});
			that.metrics = comparison.metrics;

			var skipSetFilter = false;
			that.filters.forEach(function (filter) {
				if (filter.id == comparison.filter.id) {
					skipSetFilter = true;
				}
			});

			if (!skipSetFilter) {
				my.setFilter(comparison.filter, false);
			}
		};

		var that = base(element, spec, options, my);

		my.redraw = function () {
			var column = my.dataSources[0].columns[that.metrics[0]];
			var current = parseFloat(my.getMetricValue(0));
			var prevCompare = parseFloat(my.getMetricValue(1));
			var prev = parseFloat(my.getMetricValue(2));

			var status = "status_good";
			if (current < prevCompare * (1 - that.warning)) {
				status = "status_bad";
			} else if (current < prevCompare) {
				status = "status_warning";
			} else if (current < prevCompare * (1 + that.goal)) {
				status = "status_good";
			} else {
				status = "status_goal";
			}

			if (prevCompare) {
				var growth = (current / prevCompare * 100).toFixed(2) + "%";
			} else {
				var growth = "N/A";
			}

			if (options.title) {
				var title = options.title;
			} else if (spec.label) {
				title = spec.label;
			} else {
				title = column.parent + " " + column.label + " Comparison";
			}

			switch (my.timeframe.id) {
			case 'hour':
				var currentTimespan = asOf.format("Do H");
				var lastTimespan = asOf.subtract(1, "hour").format("Do H");
				break;

			case 'day':
				var currentTimespan = asOf.format("Do");
				var lastTimespan = asOf.subtract(1, "day").format("Do");
				break;

			case 'week':
				var currentTimespan = asOf.format("l");
				var lastTimespan = asOf.subtract(1, "week").endOf('week').format('l');
				break;

			default:
			case 'month':
				var currentTimespan = asOf.format("MMMM YYYY");
				var lastTimespan = asOf.subtract(1, "month").format("MMMM YYYY");
				break;

			case 'quarter':
				var currentTimespan = asOf.format('YYYY \\QQ');
				var lastTimespan = asOf.subtract(1, "quarter").format('YYYY \\QQ');
				break;

			case 'year':
				var currentTimespan = asOf.format("YYYY");
				var lastTimespan = asOf.subtract(1, "year").format("YYYY");
				break;
			}

			var scale = Math.floor(Math.min(Math.min(element.width() / 2, element.height() / 3), 125));

			return React.createElement(
				"section",
				{ key: "graph", className: "leo-comparison " + status + " size-" + Math.floor((scale + 1) / 25), style: { width: scale * 2.5, height: scale * 2.3 } },
				React.createElement(
					"header",
					null,
					title
				),
				React.createElement(
					"div",
					{ className: "align-middle" },
					React.createElement(
						"label",
						null,
						React.createElement(
							"span",
							null,
							column.formatter(current).toString().replace(/\D\d*$/, '')
						),
						React.createElement(
							"small",
							null,
							currentTimespan + ' to date'
						)
					)
				),
				React.createElement(
					"div",
					{ className: "footer" },
					React.createElement(
						"div",
						{ className: "delta" },
						React.createElement(
							"span",
							null,
							growth
						),
						React.createElement(
							"small",
							null,
							"growth %"
						)
					),
					React.createElement(
						"div",
						null,
						React.createElement(
							"span",
							null,
							column.formatter(prevCompare).toString().replace(/\D\d*$/, '')
						),
						React.createElement(
							"small",
							null,
							lastTimespan,
							" to date"
						)
					)
				)
			);
		};

		return that;
	};

},{"../base.js":797,"moment":611,"react":785}],800:[function(require,module,exports){
	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var base = require("../base.js");
	var React = require("react");
	var ReactDOM = require("react-dom");
	var debounce = require('lodash.debounce');
	var Highcharts = require('highcharts');

	var DataAction = require("../../actions/data.js");

	var sort = require("../../../../../lib/report/format/sort.js");

	var IdUtils = require('../../../../js/utils/IdUtils.js');

	module.exports = function (element, spec, options, my) {
		my = my || {};

		spec.advanced = spec.advanced || {};

		if (spec.showTotals) {
			spec.advanced.showTotals = spec.showTotals;
		}

		spec.dimensions = spec.dimensions || [];
		spec.partitions = spec.partitions || [];

		// generate outColumns
		spec.outColumns = spec.dimensions.concat(spec.metrics).map(function (column_id, index, allColumns) {

			if ((typeof column_id === "undefined" ? "undefined" : _typeof(column_id)) == 'object' && column_id.id) {
				column_id = column_id.id;
			}
			var parse = IdUtils.parse(column_id);
			var details = IdUtils.details(column_id);
			var useStar = !!details && details.type != 'dimension' && details.type != 'attribute' && spec.partitions.length > 0;

			spec.advanced = spec.advanced || {};

			var label = '';
			if (parse.label) {
				label = parse.label.toString();
			} else if (!details) {
				label = '-';
			} else {
				if (parse.abs) {
					label += 'ABS ';
				}
				if (parse.rank) {
					label += 'Rank ';
				}
				if (parse.cumulative) {
					label += 'Cumulative ';
				}
				if (parse.percent) {
					label += 'Percent ';
				}
				if (parse.min) {
					label += 'Minimum ';
				}
				if (parse.max) {
					label += 'Maximum ';
				}
				if (parse.avg) {
					label += 'Average ';
				}
				if (label == '') {
					label = details.parent.label + ' ';
				}
				label += details.parent.label === details.label || details.label === 'Id' ? 'Count' : details.label;
			}

			label = (useStar ? '* ' : '') + label;

			return {
				label: label,
				value: column_id + (useStar ? ':*' : ''),
				filter: typeof spec.advanced.inlineFilters != 'undefined' && (spec.advanced.inlineFilters == true || _typeof(spec.advanced.inlineFilters) == 'object' && spec.advanced.inlineFilters.indexOf(column_id) !== -1),
				width: spec.advanced.columnWidths && spec.advanced.columnWidths[index] ? spec.advanced.columnWidths[index] : Math.floor(allColumns.length / 100) + '%'
			};
		});

		var that = base(element, spec, options, my);

		my.redraw = function () {
			return React.createElement(Table, { spec: spec, options: options, data: my.dataSources[0], element: element });
		};

		return that;
	};

	var Table = React.createClass({
		displayName: "Table",


		getInitialState: function getInitialState() {
			var sortBy = false;
			var sortDir = 1;
			if (this.props.spec && this.props.spec.sort && this.props.spec.sort[0]) {
				sortBy = this.props.spec.sort[0].column || this.props.spec.sort[0].column === 0 ? this.props.spec.sort[0].column : sortBy;
				sortDir = this.props.spec.sort[0].direction == 'desc' ? -1 : 1;
			}

			this.props.spec.startDownload = this.exportData;

			return {
				filters: [],
				sortBy: sortBy, //false,
				sortDir: sortDir, //1
				startRow: 0
			};
		},

		componentWillMount: function componentWillMount() {
			this.preProcess();
		},

		componentWillReceiveProps: function componentWillReceiveProps(props) {
			this.preProcess(props);
		},

		componentDidMount: function componentDidMount() {
			var scrolls = $('#leo-dashboard .simple-table-wrapper .table-body:not(.has-scroll-handler)');
			var thisComponent = this;
			scrolls.each(function () {
				$(this).scroll(function () {
					thisComponent.sparkline.doChart($(this));
				}).addClass('has-scroll-handler');
			});

			this.componentDidUpdate();
		},

		componentDidUpdate: function componentDidUpdate() {
			this.adjustScrollFiller();
		},

		filterChange: function filterChange(col, e) {
			var _this = this;

			var filters = this.state.filters;
			filters[col] = e.currentTarget.value;
			this.setState({ filters: filters }, function () {
				_this.preProcess();
			});
		},

		exportData: function exportData(data, columns) {
			var _this2 = this;

			if (!data) {
				data = this.rows;
				columns = this.columns;
			}

			var outColumns = [];
			columns.forEach(function (col, i) {
				if (col.export !== false) {
					col.export.forEach(function (ex, i) {
						outColumns.push(ex);
					});
					if (col.export.length == 0 && col.func) {
						outColumns.push({
							label: col.label,
							func: col.func
						});
					}
				}
			});

			var outRows = [];

			// HEADERS
			var newRow = [];
			outColumns.forEach(function (col, i) {
				newRow.push(col.label);
			});
			outRows.push(newRow);

			var _loop = function _loop(i) {
				row = data[i];

				var newRow = [];
				outColumns.forEach(function (col, i) {
					var v = '';
					if (col.formatter) {
						v = col.formatter(row[col.rowIndex]);
					} else {
						v = col.func(_this2.getValue.bind(_this2, row));
					}
					if (v && v.replace) {
						newRow.push('"' + v.replace(/\"/g, '') + '"');
					} else {
						newRow.push(v);
					}
				});
				outRows.push(newRow);
			};

			for (var i = 0; i < data.length; i++) {
				var row;

				_loop(i);
			}
			DataAction.downloadData("export", outRows);
		},

		sortBy: function sortBy(col, e) {
			this.setState({
				sortBy: col,
				sortDir: col == this.state.sortBy ? -this.state.sortDir : -1
			}, function () {
				var _this3 = this;

				setTimeout(function () {
					var element = ReactDOM.findDOMNode(_this3);
					$(element).trigger('leo-after-sort', [$(element)]);
				}, 500);
			});
		},

		sparkline: {
			start: 0,
			$tds: [],
			fullLen: 0,
			lastcall: 0,
			hasSparkline: false,

			init: function init() {
				var sparkline = this;

				if (!sparkline.hasSparkline) {
					sparkline.hasSparkline = true;

					$('#leo-dashboard').on({
						'leo-after-render': function leoAfterRender(event, element) {
							sparkline.doChart(element);
						},
						'leo-after-sort': function leoAfterSort(event, element) {
							sparkline.doChart(element);
						}
					});

					Highcharts.SparkLine = function (a, b, c) {
						var hasRenderToArg = typeof a === 'string' || a.nodeName,
					    options = arguments[hasRenderToArg ? 1 : 0],
					    defaultOptions = {
								chart: {
									renderTo: options.chart && options.chart.renderTo || this,
									backgroundColor: null,
									borderWidth: 0,
									type: 'area',
									height: 20,
									margin: [0, 0, 0, 0],
									style: {
										overflow: 'visible'
									},
									skipClone: true
								},
								title: {
									text: ''
								},
								credits: {
									enabled: false
								},
								xAxis: {
									labels: {
										enabled: false
									},
									title: {
										text: null
									},
									startOnTick: false,
									endOnTick: false,
									tickPositions: []
								},
								yAxis: {
									endOnTick: false,
									startOnTick: false,
									labels: {
										enabled: false
									},
									title: {
										text: null
									},
									tickPositions: [0]
								},
								legend: {
									enabled: false
								},
								tooltip: {
									backgroundColor: null,
									borderWidth: 0,
									shadow: false,
									useHTML: true,
									hideDelay: 0,
									shared: true,
									padding: 0,
									positioner: function positioner(w, h, point) {
										return {
											x: -5,
											y: -10
										};
									}
								},
								plotOptions: {
									series: {
										animation: false,
										lineWidth: 1,
										shadow: false,
										states: {
											hover: {
												lineWidth: 1
											}
										},
										marker: {
											radius: 1,
											states: {
												hover: {
													radius: 2
												}
											}
										},
										fillOpacity: 0.25
									},
									column: {
										negativeColor: '#910000',
										borderColor: 'silver'
									}
								}
							};

						options = Highcharts.merge(defaultOptions, options);

						return hasRenderToArg ? new Highcharts.Chart(a, options, c) : new Highcharts.Chart(options, b);
					};
				}
			},

			doChart: function doChart(element) {
				var sparkline = this;
				this.start = new Date();
				this.$tds = element.find('span[data-sparkline]');

				var scrollTop = element.parent().scrollTop(),
			    scrollBottom = scrollTop + element.parent().height(),
			    start = 0,
			    end = 0;

				this.$tds.each(function (index) {
					var visiblePoint = $(this).position().top;
					if (visiblePoint <= scrollTop) {
						start = index;
					}
					if (visiblePoint <= scrollBottom) {
						end = index + 1;
					} else {
						return false;
					}
				});

				this.$tds = this.$tds.slice(start, end);
				this.$tds = this.$tds.filter(':not([data-highcharts-chart])');
				this.fullLen = this.$tds.length;

				//if ($.now() - this.lastcall > 5000) {
				sparkline.doChunk(sparkline);
			//}
			},

			doChunk: function doChunk(sparkline) {
				var time = new Date(),
			    i,
			    len = sparkline.$tds.length,
			    $td,
			    stringdata,
			    arr,
			    data,
			    chart;

				for (i = 0; i < len; i++) {
					this.lastcall = $.now();
					$td = $(this.$tds[i]);
					stringdata = $td.data('sparkline');
					arr = stringdata.split('; ');
					data = $.map(arr[0].split(','), parseFloat);
					chart = {};
					if (arr[1]) {
						chart.type = arr[1];
					}
					$td.highcharts('SparkLine', {
						series: [{
							data: data,
							pointStart: 1
						}],
						tooltip: {
							formatter: typeof sparkLineToolTipFormatter == 'function' ? function () {
								return sparkLineToolTipFormatter(this.x, this.y);
							} : null
						},
						chart: chart
					});

					// If the process takes too much time, run a timeout to allow interaction with the browser
					if (new Date() - time > 500) {
						this.$tds.splice(0, i + 1);
						setTimeout(function () {
							sparkline.doChunk(sparkline);
						}, 0);
						break;
					}
				}
			}

		},

		// provide value getter
		getValue: function getValue(row, column) {
			var format = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

			var index = null;
			var matches = void 0;

			if (column.index !== undefined) {
				index = this.colMapping[column.col.id || column.col][column.index];
			} else if (matches = column.match(/^(.*)\:(\d+)$/)) {
				index = this.colMapping[matches[1]][matches[2]];
			} else if (this.colMapping[column]) {
				index = this.colMapping[column][0];
			} else {
				index = -1;
			}

			var c = this.props.data.mapping[index];
			if (format && c && c.formatter) {
				return c.formatter(row[index]);
			} else {
				return row[index];
			}
		},

		colMapping: {},
		rows: [],
		columns: [],

		preProcess: function preProcess(props) {
			var _this4 = this;

			props = props || this.props;

			this.rows = props.data.rows;

			/** **************This should only happen on datasource change instead of every render*********************************** */

			// Map IN columns
			this.colMapping = {};
			if (props.data.mapping) {
				for (var i = 0; i < props.data.mapping.length; i++) {
					if (!(props.data.mapping[i].id in this.colMapping)) {
						this.colMapping[props.data.mapping[i].id] = [];
					}
					this.colMapping[props.data.mapping[i].id].push(i);
				}
			}

			//expand "*"
			var outColumns = [];
			props.spec.outColumns.map(function (col) {
				if (col.value && typeof col.value === 'string' && col.value.match(/\:\*$/)) {
					var value = col.value.replace(/\:\*$/, '');
					for (var j = 0; j < props.data.headers[0].length; j++) {
						var col2 = JSON.parse(JSON.stringify(col));
						col2.label = col2.label.replace('*', props.data.headers[0][j].value);
						col2.value = value + ':' + j;
						outColumns.push(col2);
					}
				} else {
					outColumns.push(col);
				}
			});

			// Map OUT columns
			this.columns = [];
			outColumns.map(function (col, i) {
				var column = {
					col: null,
					export: []
				};

				var colName = false;
				if (col.sparkline) {
					if (typeof col.sparkline === 'string') {
						col.sparkline = [col.sparkline];
					}

					if (col.sparkline.length == 1 && col.sparkline[0].match(/\:\*$/)) {
						var value = col.sparkline[0].replace(/\:\*$/, '');
						col.sparkline = [];
						for (var j = 0; j < props.data.headers[0].length; j++) {
							col.sparkline.push(value + ':' + j);
						}
					}

					column.func = function (values) {
						_this4.sparkline.init();
						return '<span data-sparkline="' + col.sparkline.map(function (query) {
							var value = values(query);
							return value ? value.toString().replace(/[^0-9.-]/g, '') : 0;
						}).join(',') + '"></span>';
					};
				} else if (col.value && typeof col.value === 'function') {
					column.func = col.value;
				} else {
					var colName = col.value;
				}

				if (colName) {
					if (colName.match(/\:\d+$/)) {
						var index = colName.split(/\:/).pop();
						colName = colName.replace(/\:\d+$/, '');
					} else {
						index = 0;
					}
					column.id = colName;
					column.index = index;
					column.col = props.data.columns[colName];
					column.formatter = column.col ? column.col.formatter : function (n) {
						return n;
					};
					column.sort = column.col ? column.col.sort : function (n) {
						return n;
					}; //this.props.data.dimensions[colName].sort;
				} else {
					column.sort = col.sort || {
						type: 'string'
					};
				}
				column.width = col.width || Math.floor(100 / outColumns.length) + '%'; // 60;
				column.className = col.className || '';

				if (column.col) {
					column.type = col.type || column.col.type;
					column.label = col.label || column.col.label;
				} else {
					column.type = col.type;
					column.label = col.label;
				}
				if (column.type === "metric" || column.type === "fact") {
					column.className += " numeric";
				}
				if (col.filter === false) {
					column.filter = false;
				} else {
					column.filter = col.filter || null;
				}

				if (col.sparkline) {
					col.export = false;
				}

				if (col.export === false) {
					column.export = false;
				} else if (col.export || column.id) {
					if (!col.export) {
						col.export = [column.id];
					} else if (!$.isArray(col.export)) {
						col.export = [col.export];
					}
					col.export.forEach(function (ex, i) {
						var e = {};
						if (!ex.label && !ex.value) {
							e.label = column.label;
							e.value = column.id;
						} else {
							e.label = ex.label || column.label;
							e.value = ex.value || column.id;
						}

						var colName = e.value;
						e.formatter = props.data.columns[colName] ? props.data.columns[colName].formatter : function (n) {
							return n;
						};
						var index = 0;
						if (colName.match(/\:\d+$/)) {
							index = colName.split(/\:/).pop();
							colName = colName.replace(/\:\d+$/, '');
						}
						e.rowIndex = _this4.colMapping[colName] ? _this4.colMapping[colName][index] : -1;
						column.export.push(e);
					});
				}

				if (!column.func) {
					column.rowIndex = _this4.colMapping[column.id] ? _this4.colMapping[column.id][column.index] : -1;
				}

				_this4.columns.push(column);
			});

			// Translate IN columns into OUT columns
			this.outRows = [];
			for (var _i = 0; _i < this.rows.length; _i++) {
				var row = this.rows[_i];
				var newRow = [];
				this.columns.forEach(function (column, i) {
					var value = null;
					if (column.func) {
						newRow.push(column.func(_this4.getValue.bind(_this4, row)));
					} else {
						newRow.push(row[column.rowIndex]);
					}
				});
				this.outRows.push(newRow);
			}
		/** ***************************END*********************************** */
		},

		visibleRowCount: 300,
		rowHeight: 24,

		handleScroll: function handleScroll(event) {
			var scrollTop = $(event.currentTarget).scrollTop(),
		    startRow = Math.floor(scrollTop / (this.rowHeight * (this.visibleRowCount / 3))) * (this.visibleRowCount / 3);

			if (startRow != this.state.startRow) {
				this.adjustScrollFiller(startRow);
				this.setState({ startRow: startRow });
			}
		},

		adjustScrollFiller: function adjustScrollFiller(startRow) {
			startRow = startRow || this.state.startRow;
			var $element = $(this.props.element);
			this.rowHeight = $element.find('.top-filler').next().height();
			$element.find('.top-filler').css({ height: this.rowHeight * startRow });
			$element.find('.bottom-filler').css({ height: this.rowHeight * (this.totalRows - startRow - this.visibleRowCount) });
		},

		render: function render() {
			var _this5 = this;

			// Filter this new table
			this.outRows = this.outRows.filter(function (row, i) {
				var matched = true;
				_this5.columns.map(function (column, j) {
					if (column.filter && _this5.state.filters[j] !== undefined && matched) {
						var r = new RegExp(_this5.state.filters[j], 'i');
						if (column.filter === true) {
							matched = String(row[j]).match(r);
						} else {
							matched = column.filter(row, _this5.getValue.bind(_this5, _this5.rows[i]), r);
						}
					}
				});
				return !!matched;
			});

			this.totals = [];
			this.outRows.forEach(function (row, rowNum) {
				_this5.columns.forEach(function (column, i) {
					if (typeof row[i] == 'number') {
						_this5.totals[i] = (typeof _this5.totals[i] == 'undefined' ? 0 : _this5.totals[i]) + parseFloat(0 + row[i]);
					}
				});
			});

			this.totalRows = this.outRows.length;

			var totals = this.totals;

			if (this.props.data.error || this.rows.length == 0) {
				return React.createElement(
					"span",
					null,
					this.props.spec.onEmpty || "No Data"
				);
			}

			var className = '';

			// sort the rows
			var sortBy = this.state.sortBy;
			if (sortBy || sortBy === 0) {
				var mappings = {};
				mappings[sortBy] = this.columns[sortBy];
				if (mappings[sortBy]) {
					this.outRows = this.outRows.sort(sort.getMultiCompare([{
						direction: this.state.sortDir === 1 ? 'asc' : 'desc',
						column: sortBy
					}], mappings));
				}
			}

			return React.createElement(
				"div",
				{ className: "data-table-wrapper" },
				React.createElement(
					"table",
					{ className: className + (this.props.spec.advanced.showTotals ? ' has-totals' : ''), onScroll: this.handleScroll },
					React.createElement(
						"thead",
						null,
						React.createElement(
							"tr",
							{ className: "fixed-spacing" },
							this.columns.map(function (column, i) {
								return React.createElement("td", { key: i, style: { width: column.width }, className: column.className });
							})
						),
						React.createElement(
							"tr",
							{ className: "title text-left" },
							React.createElement(
								"th",
								{ colSpan: this.columns.length },
								React.createElement(
									"span",
									null,
									this.props.options.title || this.props.spec.title || this.props.spec.advanced.title || '',
									" "
								)
							)
						),
						React.createElement(
							"tr",
							{ className: "headers" },
							this.columns.map(function (column, i) {
								return React.createElement(
									"th",
									{ key: i, style: { width: column.width, maxWidth: column.width }, className: column.className + (_this5.state.sortBy == i ? ' active ' : ' ') + column.type, onClick: _this5.sortBy.bind(_this5, i) },
									React.createElement(
										"span",
										{ title: column.label },
										column.label
									),
									React.createElement("i", { className: _this5.state.sortBy == i ? _this5.state.sortDir == 1 ? "icon-up-dir" : "icon-down-dir" : "icon-sort" })
								);
							})
						),
						React.createElement(
							"tr",
							{ className: "filters" },
							this.columns.map(function (column, i) {
								if (column.type != "metric" && column.type != "fact" && !column.className.match('numeric') && column.filter !== false) {
									return React.createElement(
										"th",
										{ key: i, style: { width: column.width, maxWidth: column.width }, className: column.className },
										React.createElement("input", { type: "search", value: _this5.state.filters[i] || '', onChange: _this5.filterChange.bind(_this5, i), className: "filter", placeholder: "Filter " + column.label })
									);
								} else {
									return React.createElement(
										"th",
										{ key: i, style: { width: column.width, maxWidth: column.width }, className: column.className },
										" "
									);
								}
							})
						)
					),
					React.createElement(
						"tbody",
						null,
						React.createElement(
							"tr",
							{ className: "fixed-spacing" },
							this.columns.map(function (column, i) {
								return React.createElement("td", { key: i, style: { width: column.width }, className: column.className });
							})
						),
						React.createElement(
							"tr",
							{ className: "top-filler" },
							React.createElement("td", { colSpan: this.columns.length })
						),
						this.outRows.slice(this.state.startRow, this.state.startRow + this.visibleRowCount).map(function (row, rowNum) {
							return React.createElement(
								"tr",
								{ key: rowNum },
								_this5.columns.map(function (column, i) {
									return React.createElement("td", { key: i, style: { width: column.width, maxWidth: column.width }, className: column.className + ' ' + column.type, dangerouslySetInnerHTML: { __html: column.formatter ? column.formatter(row[i]) : row[i] } });
								})
							);
						}),
						React.createElement(
							"tr",
							{ className: "bottom-filler" },
							React.createElement("td", { colSpan: this.columns.length })
						)
					),
					this.props.spec.advanced.showTotals ? React.createElement(
						"tfoot",
						null,
						React.createElement(
							"tr",
							{ className: "fixed-spacing" },
							this.columns.map(function (column, i) {
								return React.createElement("td", { key: i, style: { width: column.width, maxWidth: column.width }, className: column.className + ' ' + column.type, dangerouslySetInnerHTML: { __html: (column.formatter ? column.formatter(totals[i]) : totals[i]) || '&nbsp;' } });
							})
						)
					) : false
				)
			);
		}
	});

},{"../../../../../lib/report/format/sort.js":3,"../../../../js/utils/IdUtils.js":837,"../../actions/data.js":793,"../base.js":797,"highcharts":107,"lodash.debounce":116,"react":785,"react-dom":616}],801:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");

	var Filters = require('../../../../js/views/report/filters.jsx');
	var ReportFilterActions = require('../../../../js/actions/ReportFilterActions');

	module.exports = function (element, spec, options, my) {
		my = my || {};

		var that = base(element, spec, options, my);

		my.redraw = function () {
			return React.createElement(FilterBar, { spec: spec, options: options, data: my.dataSources[0], element: element });
		};

		return that;
	};

	var FilterBar = React.createClass({
		displayName: "FilterBar",


		getInitialState: function getInitialState() {
			window.dashboardFilters = window.dashboardFilters || [];
			return {
				filters: this.props.spec.filters
			};
		},

		runFilter: function runFilter(filter) {
			var _this = this;

			var filters = filter ? [filter] : this.state.filters;
			var selector = this.props.spec.controller.selector || '*';
			filters.forEach(function (filter, filterIndex) {

				window.dashboardFilters = window.dashboardFilters.filter(function (dashboardFilter) {
					return dashboardFilter.id !== filter.id;
				});

				if (filter.value && filter.value.length > 0) {
					window.dashboardFilters.push(filter);
				}

				$('figure.leo-chart, figure.leo-html').filter(selector).not($(_this)).each(function () {
					if ($(this).leo()) {
						if (filter.value && filter.value.length > 0) {
							$(this).leo().setFilter({
								id: filter.id,
								value: filter.value,
								comparison: filter.comparison,
								fromController: true
							}, filterIndex == filters.length - 1);
						} else {
							$(this).leo().removeFilter(filter.id);
						}
					}
				});
			});
		},

		autoComplete: function autoComplete(filter_id, term, callback) {
			ReportFilterActions.autocomplete2(filter_id, term, callback);
		},

		componentDidMount: function componentDidMount() {
			var _this2 = this;

			$(this.props.element).addClass('is-controller');

			setTimeout(function () {
				_this2.runFilter();
			}, 0);
		},

		render: function render() {
			return React.createElement(
				"div",
				{ className: "filter-bar" },
				React.createElement(Filters, { key: "filters",
					reportFilters: this.state.filters,
					hasRowMetrics: "true",
					addFilter: "false",
					updateFilter: this.runFilter,
					autoComplete: this.autoComplete
				})
			);
		}

	});

},{"../../../../js/actions/ReportFilterActions":829,"../../../../js/views/report/filters.jsx":845,"../base.js":797,"react":785}],802:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");
	var moment = require("moment");
	var configure = { static: { uri: "https://s3-us-west-2.amazonaws.com/cdnleo/" } };
	//require("../leoConfigure.js");

	var DataAction = require("../../actions/data.js");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		if (spec.select) {
			options.select = spec.select;
		} else {
			var select = {
				options: []
			};
			var metrics = [];
			spec.metrics.map(function (metric) {
				if (metric.default) {
					metrics.unshift({ field: metric.id });
				} else {
					metrics.push({ field: metric.id });
				}
				if (metric.label) {
					select.options.push({
						text: metric.label,
						value: metric.id
					});
					if (!select.defaultValue || metric.default) {
						select.defaultValue = metric.id;
					}
				}
			});
			if (select.options.length != 0) {
				options.select = select;
			}
			spec.metrics = metrics;
		}

		spec = $.extend(true, {}, {
			colors: {
				low: 'red',
				high: 'green',
				invalid: '#444'
			},
			zoom: 4,
			mapTypeId: 'roadmap'
			//roadmap displays the default road map view. This is the default map type.
			//satellite displays Google Earth satellite images
			//hybrid displays a mixture of normal and satellite views
			//terrain displays a physical map based on terrain information.
			, center: {
				lat: 39.5,
				lng: -98.35
			},
			startDownload: function startDownload() {
				DataAction.downloadData("export", null, my.dataSources[0]);
			}
		}, spec);

		var that = base(element, spec, options, my);

		var map,
	    countryBorders = 'country.geo.json',
	    stateLevel = false,
	    stats = {},
	    legendBoxes,
	    features = [],
	    max = 0,
	    min = -1,
	    formattedMax = '',
	    formattedMin = '',
	    divisor = 1,
	    RGB = {},
	    stateBorders = {
				'united states': 'us_admin_level_4.geojson' //'gz_2010_us_040_00_20m.json'
				, 'canada': 'canada_admin_level_4.geojson',
				'mexico': 'mexico_admin_level_4.geojson',
				'australia': 'australia_admin_level_4.geojson',
				'united kingdom': 'uk_admin_level_4.geojson',
				'spain': 'spain_admin_level_4.geojson',
				'brazil': 'brazil_admin_level_4.geojson'
			},
	    googleMapWrapper,
	    countryData;

		$.getJSON(configure.static.uri + 'js/maps/' + countryBorders, function (data) {
			countryData = data;

			if (spec.defaultCountry) {
				countryData.features.forEach(function (feature) {
					if (feature.properties.iso_a2 == spec.defaultCountry) {
						stateLevel = feature.properties.name.toLowerCase();
					} else if (feature.properties.iso_a3 == spec.defaultCountry) {
						stateLevel = feature.properties.name.toLowerCase();
					}
					if (feature.properties.name == spec.defaultCountry) {
						stateLevel = feature.properties.name.toLowerCase();
					}
				});
			}
		});

		if (spec.defaultCountry && spec.state) {
			my.setFilter({
				id: spec.country,
				comparison: '=',
				value: spec.defaultCountry
			}, false);
			spec.columns = [spec.state];
		} else {
			spec.columns = [spec.country];
		}

		var colorToRGB = $('<div>');
		$('body').append(colorToRGB);
		for (var i in spec.colors) {
			colorToRGB.css({ color: spec.colors[i] });
			RGB[i] = window.getComputedStyle(colorToRGB[0]).color.split(/[(,)]/).slice(1, 4);
		}
		colorToRGB.remove();

		function initMap() {

			googleMapWrapper = element.find('.google-map-wrapper');

			map = new google.maps.Map(element.find('.google-map')[0], {
				zoom: parseInt(spec.zoom),
				mapTypeId: spec.mapTypeId,
				center: {
					lat: parseFloat(spec.center.lat),
					lng: parseFloat(spec.center.lng)
				}
			});

			features = map.data.addGeoJson(countryData);

			map.data.setStyle(function (feature) {
				var code = _lookup(feature),
			    name = _unify(feature.getProperty('name')),
			    color = 'transparent',
			    strokeWeight = 0,
			    fillOpacity = 0;

				if ((!stateLevel || stateLevel != name) && name != 'antarctica') {
					color = 'rgb(' + RGB.invalid.join(',') + ')';
					fillOpacity = .8;
				}

				if (code && stateLevel != name) {
					var scaleColor = function scaleColor(i) {
						return Math.floor((stats[code].raw - min) / divisor * (RGB.high[i] - RGB.low[i]) + RGB.low[i] * 1);
					};

					color = 'rgb(' + scaleColor(0) + ', ' + scaleColor(1) + ', ' + scaleColor(2) + ')';
					strokeWeight = 1;
					fillOpacity = .8;
				}

				that.hideLoading();

				return {
					visible: color !== 'transparent',
					fillColor: color,
					strokeWeight: strokeWeight,
					fillOpacity: fillOpacity
				};
			});

			if (stateLevel in stateBorders) {
				that.showLoading();
				var mapFile = stateBorders[stateLevel];
				$.getJSON(configure.static.uri + 'js/maps/' + mapFile, function (data) {
					features = map.data.addGeoJson(data);
				});
			}

			legendBoxes = element.find('.legend-boxes');

			legendBoxes.find('.scale-wrapper .min').text(formattedMin);
			legendBoxes.find('.scale-wrapper .max').text(formattedMax);

			legendBoxes.find('.scale-wrapper .scale').css({
				background: 'linear-gradient(90deg, rgb(' + RGB.low.join(',') + '), rgb(' + RGB.high.join(',') + '))'
			});

			map.controls[google.maps.ControlPosition.TOP_LEFT].push(legendBoxes.get(0));

			map.data.addListener('mouseover', function (event) {
				var code = _lookup(event.feature);
				if (code) {
					$('.selected-region label').text(event.feature.getProperty('name') || event.feature.getProperty('NAME'));
					$('.selected-region strong').text(stats[code].formatted);
				}
			});

			map.data.addListener('mouseout', function (event) {
				$('.selected-region label, .selected-region strong').text('');
			});

			map.data.addListener('click', function (event) {
				var code = _lookup(event.feature),
			    name = _unify(event.feature.getProperty('name'));

				if (spec.state && code && name in stateBorders) {
					that.showLoading();
					googleMapWrapper.append($('.legend-boxes'));
					stateLevel = name;
					my.setFilter({
						id: spec.country,
						comparison: '=',
						value: stats[code].code
					}, false);
					my.changeChart({
						columns: [spec.state]
					});
				} else if (stateLevel !== false) {
					that.showLoading();
					googleMapWrapper.append($('.legend-boxes'));
					stateLevel = false;
					my.setFilter({ id: spec.country }, false);
					my.changeChart({
						columns: [spec.country]
					});
				}
			});

			map.addListener('zoom_changed', function () {
				spec.zoom = map.getZoom();
			});

			map.addListener('center_changed', function () {
				var center = map.getCenter();
				spec.center = {
					lat: center.lat(),
					lng: center.lng()
				};
			});
		}

		function _lookup(feature, key) {
			if (!key) {
				if (stateLevel) {
					return _lookup(feature, 'ref') || _lookup(feature, 'ISO3166-2') || _lookup(feature, 'name') || false;
				} else {
					return _lookup(feature, 'iso_a2') || _lookup(feature, 'iso_a3') || _lookup(feature, 'name') || false;
				}
			}
			var temp = (feature.getProperty(key) || '').toLowerCase();
			if (temp in stats) {
				return temp;
			} else {
				return false;
			}
		}

		function _unify(s) {
			if (typeof s == 'undefined') {
				return '';
			}
			var accents = {
				a: 'àáâãäåæ',
				c: 'ç',
				e: 'èéêëæ',
				i: 'ìíîï',
				n: 'ñ',
				o: 'òóôõöø',
				s: 'ß',
				u: 'ùúûü',
				y: 'ÿ'
			};
			s = s.toString().trim().toLowerCase();
			for (var i in accents) {
				var re = new RegExp('[' + accents[i] + ']', 'g');
				s = s.replace(re, i);
			}
			return s;
		}

		function changeMetric(e) {
			that.showLoading();
			googleMapWrapper.append($('.legend-boxes'));
			my.changeChart({ metrics: [{ id: e.currentTarget.value }] });
		}

		my.redraw = function () {

			var results = my.dataSources[0];

			max = 0;
			min = -1;
			formattedMin = formattedMax = '';
			stats = {};

			results.rows.forEach(function (row) {
				var raw = row[1].toString().replace(/,/g, '') * 1,
			    code = _unify(row[0]);

				stats[code] = {
					code: row[0],
					raw: raw,
					formatted: results.mapping[1].formatter(row[1])
				};

				if (raw > max) {
					max = raw;
					formattedMax = stats[code].formatted;
				}

				if (raw < min || min == -1) {
					min = raw;
					formattedMin = stats[code].formatted;
				}
			});

			divisor = max - min;

			setTimeout(initMap, 1000);

			return React.createElement(
				"div",
				{ className: "google-map-wrapper" },
				React.createElement("div", { className: "google-map" }),
				React.createElement(
					"div",
					{ className: "legend-boxes" },
					React.createElement(
						"div",
						{ className: "legend-wrapper legend-box" },
						React.createElement(
							"select",
							{ defaultValue: options.select.defaultValue, className: options.select.options.length < 2 ? 'disabled' : '', onChange: changeMetric },
							options.select.options.map(function (option, index) {
								return React.createElement(
									"option",
									{ key: index, value: option.value },
									option.text
								);
							})
						),
						React.createElement(
							"div",
							{ className: "scale-wrapper" },
							React.createElement("strong", { className: "min" }),
							React.createElement("span", { className: "scale" }),
							React.createElement("strong", { className: "max" })
						)
					),
					React.createElement(
						"div",
						{ className: "selected-region legend-box" },
						React.createElement("label", null),
						React.createElement("strong", null)
					)
				)
			);
		};

		return that;
	};

},{"../../actions/data.js":793,"../base.js":797,"moment":611,"react":785}],803:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");
	var DataAction = require("../../actions/data.js");

	module.exports = function (element, spec, options, my) {

		if (spec.select) {
			options.select = spec.select;
		} else {
			var select = {
				options: []
			};
			var metrics = [];
			spec.metrics.map(function (metric) {
				if (metric.default) {
					metrics.unshift({
						id: metric.id || metric.field,
						partitions: metric.partitions || undefined
					});
				} else {
					metrics.push({
						id: metric.id || metric.field,
						partitions: metric.partitions || undefined
					});
				}
				if (metric.label) {
					select.options.push({
						text: metric.label,
						value: metric.id || metric.field,
						partitions: metric.partitions || undefined
					});
					if (!select.defaultValue || metric.default) {
						select.defaultValue = metric.id || metric.field;
					}
				}
			});
			if (select.options.length != 0) {
				options.select = select;
			}
			spec.metrics = metrics;
		}

		if (spec.sort) {
			options.sorts = spec.sort;
		} else {
			options.sorts = spec.sort = [{
				column: 1,
				direction: 'desc'
			}];
		}

		options = JSON.parse(JSON.stringify(options));

		metrics.map(function (metric, index) {
			if (!select.defaultValue && metric.id == select.defaultValue) {
				options.select.defaultIndex = index;
			}
		});

		if (!spec.controller) {
			element.removeClass('is-controller');
			element.removeClass('is-not-controller');
			element.removeAttr('data-controller-selector');
		} else if (spec.controller && spec.controller.enabled === true) {
			element.addClass('is-controller');
			element.removeClass('is-not-controller');
			element.attr('data-controller-selector', spec.controller.selector);
		} else {
			element.removeClass('is-controller');
			element.addClass('is-not-controller');
			element.removeAttr('data-controller-selector');
		}

		my = my || {};

		spec.columns = spec.dimensions || spec.columns;

		var that = base(element, spec, options, my);

		spec.startDownload = function () {
			DataAction.downloadData("export", null, my.dataSources[0]);
		};

		my.redraw = function () {
			var data = my.getMetric(0),
		    metricOffset = data.metricOffsets[0],
		    column = data.mapping[data.metricOffsets[0]],
		    compareValue = Math.max.apply(Math, data.rows.map(function (row) {
					var rowTotal = 0;
					data.metricOffsets.forEach(function (offset) {
						rowTotal += row[offset];
					});
					row.push(rowTotal);
					return rowTotal;
				}));

			if (spec.sort[0] && spec.sort[0].column != 0) {
				data.rows.sort(function (a, b) {
					var column = a.length - 1;
					if (spec.sort[0].direction == 'asc') {
						if (a[column] < b[column]) {
							return -1;
						}
						if (a[column] > b[column]) {
							return 1;
						}
					} else {
						if (a[column] > b[column]) {
							return -1;
						}
						if (a[column] < b[column]) {
							return 1;
						}
					}
					return 0;
				});
			}

			var colors = my.dashboardOptions.getDefaultColors();

			var dimensionColors = typeof window.leo != 'undefined' && window.leo.charts && window.leo.charts.colors ? window.leo.charts.colors : {};

			return React.createElement(
				"div",
				{ className: "leo-ranked-chart", "data-column_id": spec.columns[0] },
				React.createElement(
					"div",
					null,
					options.select ? React.createElement(
						"select",
						{ defaultValue: options.select.defaultIndex, className: options.select.options.length < 2 ? 'disabled' : '', onChange: function onChange(e) {
							my.changeChart({
								metrics: [{
									id: options.select.options[e.currentTarget.value].value,
									partitions: options.select.options[e.currentTarget.value].partitions
								}],
								sort: [options.sorts[e.currentTarget.selectedIndex || 0] || { column: 1, direction: 'desc' }]
							});
						} },
						options.select.options.map(function (option, index) {
							return React.createElement(
								"option",
								{ key: index, value: index },
								option.text
							);
						})
					) : false
				),
				React.createElement(
					"div",
					{ className: "table-wrapper" },
					React.createElement(
						"table",
						null,
						React.createElement(
							"tbody",
							null,
							data.rows.map(function (row, i) {
								var label = row[0] ? row[0].toString().trim() : " "; //non-breaking space
								var value = row[row.length - 1];
								var percentage = compareValue == 0 ? 0 : value / compareValue;
								return React.createElement(
									"tr",
									{ key: label, onClick: function onClick(e) {
										var target = $(e.currentTarget);
										if (target.is(".active")) {
											target.removeClass("active");
											element.trigger('leo-click', [{ active: false, series: row[0], value: value }]);
										} else {
											target.addClass('active').siblings().removeClass('active');
											element.trigger('leo-click', [{ active: true, series: row[0], value: value }]);
										}
									} },
									React.createElement(
										"td",
										null,
										React.createElement(
											"div",
											null,
											React.createElement(
												"span",
												{ className: percentage < 0 ? 'negative' : '', style: { width: Math.abs(percentage * 100) + "%" } },
												React.createElement(
													"label",
													null,
													label
												),
												data.metricOffsets.map(function (offset, index) {
													var title = data.headers[0][index].value ? data.headers[0][index].value + ': ' + column.formatter(row[offset]) : '';
													var width = Math.abs(row[offset] / row[row.length - 1] * 100) + '%';
													var background = dimensionColors[data.headers[0][index].value] || colors[index % colors.length];
													return React.createElement(
														"b",
														{ key: index, title: title, style: { width: width, background: background } },
														" "
													);
												})
											)
										)
									),
									React.createElement(
										"td",
										null,
										React.createElement(
											"div",
											{ className: "gray-zero" },
											column.formatter(value) || ''
										)
									)
								);
							})
						)
					)
				)
			);
		};
		return that;
	};

},{"../../actions/data.js":793,"../base.js":797,"react":785}],804:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");
	var ReactDOM = require("react-dom");
	var debounce = require('lodash.debounce');
	var Highcharts = require('highcharts');

	var DataAction = require("../../actions/data.js");

	var sort = require("../../../../../lib/report/format/sort.js");

	var SimpleTable;

	module.exports = function (element, spec, options, my) {
		my = my || {};

		spec.dimensions = spec.dimensions || spec.columns;

		var that = base(element, spec, options, my);

		my.redraw = function () {
			var compareValue = null;
			return React.createElement(SimpleTable, { spec: spec, options: options, data: my.dataSources[0], element: element });
		};

		return that;
	};

	var SimpleTable = React.createClass({
		displayName: "SimpleTable",


		getInitialState: function getInitialState() {
			var sortBy = false;
			var sortDir = 1;
			if (this.props.spec && this.props.spec.sort && this.props.spec.sort[0]) {
				sortBy = this.props.spec.sort[0].column || this.props.spec.sort[0].column === 0 ? this.props.spec.sort[0].column : sortBy;
				sortDir = this.props.spec.sort[0].direction == 'desc' ? -1 : 1;
			}

			this.props.spec.startDownload = this.exportData;

			return {
				filters: [],
				sortBy: sortBy, //false,
				sortDir: sortDir, //1
				startRow: 0
			};
		},

		componentWillMount: function componentWillMount() {
			this.preProcess();
		},

		componentWillReceiveProps: function componentWillReceiveProps(props) {
			this.preProcess(props);
		},

		componentDidMount: function componentDidMount() {
			var scrolls = $('#leo-dashboard .simple-table-wrapper .table-body:not(.has-scroll-handler)');
			var thisComponent = this;
			scrolls.each(function () {
				$(this).scroll(function () {
					thisComponent.sparkline.doChart($(this));
				}).addClass('has-scroll-handler');
			});

			this.componentDidUpdate();
		},

		componentDidUpdate: function componentDidUpdate() {
			this.adjustScrollFiller();
		},

		filterChange: function filterChange(col, e) {
			var _this = this;

			var filters = this.state.filters;
			filters[col] = e.currentTarget.value;
			this.setState({ filters: filters }, function () {
				_this.preProcess();
			});
		},

		exportData: function exportData(data, columns) {
			var _this2 = this;

			if (!data) {
				data = this.rows;
				columns = this.columns;
			}

			var outColumns = [];
			columns.forEach(function (col, i) {
				if (col.export !== false) {
					col.export.forEach(function (ex, i) {
						outColumns.push(ex);
					});
					if (col.export.length == 0 && col.func) {
						outColumns.push({
							label: col.label,
							func: col.func
						});
					}
				}
			});

			var outRows = [];

			// HEADERS
			var newRow = [];
			outColumns.forEach(function (col, i) {
				newRow.push(col.label);
			});
			outRows.push(newRow);

			var _loop = function _loop(i) {
				row = data[i];

				var newRow = [];
				outColumns.forEach(function (col, i) {
					var v = '';
					if (col.formatter) {
						v = col.formatter(row[col.rowIndex]);
					} else {
						v = col.func(_this2.getValue.bind(_this2, row));
					}
					if (v && v.replace) {
						newRow.push('"' + v.replace(/\"/g, '') + '"');
					} else {
						newRow.push(v);
					}
				});
				outRows.push(newRow);
			};

			for (var i = 0; i < data.length; i++) {
				var row;

				_loop(i);
			}
			DataAction.downloadData("export", outRows);
		},

		sortBy: function sortBy(col, e) {
			this.setState({
				sortBy: col,
				sortDir: col == this.state.sortBy ? -this.state.sortDir : -1
			}, function () {
				var _this3 = this;

				setTimeout(function () {
					var element = ReactDOM.findDOMNode(_this3);
					$(element).trigger('leo-after-sort', [$(element)]);
				}, 500);
			});
		},

		sparkline: {
			start: 0,
			$tds: [],
			fullLen: 0,
			lastcall: 0,
			hasSparkline: false,

			init: function init() {
				var sparkline = this;

				if (!sparkline.hasSparkline) {
					sparkline.hasSparkline = true;

					$('#leo-dashboard').on({
						'leo-after-render': function leoAfterRender(event, element) {
							sparkline.doChart(element);
						},
						'leo-after-sort': function leoAfterSort(event, element) {
							sparkline.doChart(element);
						}
					});

					Highcharts.SparkLine = function (a, b, c) {
						var hasRenderToArg = typeof a === 'string' || a.nodeName,
					    options = arguments[hasRenderToArg ? 1 : 0],
					    defaultOptions = {
								chart: {
									renderTo: options.chart && options.chart.renderTo || this,
									backgroundColor: null,
									borderWidth: 0,
									type: 'area',
									height: 20,
									margin: [0, 0, 0, 0],
									style: {
										overflow: 'visible'
									},
									skipClone: true
								},
								title: {
									text: ''
								},
								credits: {
									enabled: false
								},
								xAxis: {
									labels: {
										enabled: false
									},
									title: {
										text: null
									},
									startOnTick: false,
									endOnTick: false,
									tickPositions: []
								},
								yAxis: {
									endOnTick: false,
									startOnTick: false,
									labels: {
										enabled: false
									},
									title: {
										text: null
									},
									tickPositions: [0]
								},
								legend: {
									enabled: false
								},
								tooltip: {
									backgroundColor: null,
									borderWidth: 0,
									shadow: false,
									useHTML: true,
									hideDelay: 0,
									shared: true,
									padding: 0,
									positioner: function positioner(w, h, point) {
										return {
											x: -5,
											y: -10
										};
									}
								},
								plotOptions: {
									series: {
										animation: false,
										lineWidth: 1,
										shadow: false,
										states: {
											hover: {
												lineWidth: 1
											}
										},
										marker: {
											radius: 1,
											states: {
												hover: {
													radius: 2
												}
											}
										},
										fillOpacity: 0.25
									},
									column: {
										negativeColor: '#910000',
										borderColor: 'silver'
									}
								}
							};

						options = Highcharts.merge(defaultOptions, options);

						return hasRenderToArg ? new Highcharts.Chart(a, options, c) : new Highcharts.Chart(options, b);
					};
				}
			},

			doChart: function doChart(element) {
				var sparkline = this;
				this.start = new Date();
				this.$tds = element.find('span[data-sparkline]');

				var scrollTop = element.parent().scrollTop(),
			    scrollBottom = scrollTop + element.parent().height(),
			    start = 0,
			    end = 0;

				this.$tds.each(function (index) {
					var visiblePoint = $(this).position().top;
					if (visiblePoint <= scrollTop) {
						start = index;
					}
					if (visiblePoint <= scrollBottom) {
						end = index + 1;
					} else {
						return false;
					}
				});

				this.$tds = this.$tds.slice(start, end);
				this.$tds = this.$tds.filter(':not([data-highcharts-chart])');
				this.fullLen = this.$tds.length;

				//if ($.now() - this.lastcall > 5000) {
				sparkline.doChunk(sparkline);
			//}
			},

			doChunk: function doChunk(sparkline) {
				var time = new Date(),
			    i,
			    len = sparkline.$tds.length,
			    $td,
			    stringdata,
			    arr,
			    data,
			    chart;

				for (i = 0; i < len; i++) {
					this.lastcall = $.now();
					$td = $(this.$tds[i]);
					stringdata = $td.data('sparkline');
					arr = stringdata.split('; ');
					data = $.map(arr[0].split(','), parseFloat);
					chart = {};
					if (arr[1]) {
						chart.type = arr[1];
					}
					$td.highcharts('SparkLine', {
						series: [{
							data: data,
							pointStart: 1
						}],
						tooltip: {
							formatter: typeof sparkLineToolTipFormatter == 'function' ? function () {
								return sparkLineToolTipFormatter(this.x, this.y);
							} : null
						},
						chart: chart
					});

					// If the process takes too much time, run a timeout to allow interaction with the browser
					if (new Date() - time > 500) {
						this.$tds.splice(0, i + 1);
						setTimeout(function () {
							sparkline.doChunk(sparkline);
						}, 0);
						break;
					}
				}
			}

		},

		// provide value getter
		getValue: function getValue(row, column) {
			var format = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

			var index = null;
			var matches = void 0;

			if (column.index !== undefined) {
				index = this.colMapping[column.col.id || column.col][column.index];
			} else if (matches = column.match(/^(.*)\:(\d+)$/)) {
				index = this.colMapping[matches[1]][matches[2]];
			} else if (this.colMapping[column]) {
				index = this.colMapping[column][0];
			} else {
				index = -1;
			}

			var c = this.props.data.mapping[index];
			if (format && c && c.formatter) {
				return c.formatter(row[index]);
			} else {
				return row[index];
			}
		},

		colMapping: {},
		rows: [],
		columns: [],

		preProcess: function preProcess(props) {
			var _this4 = this;

			props = props || this.props;

			this.rows = props.data.rows;
			if (props.spec.onNewData && props.spec.onNewData in window) {
				this.rows = window[props.spec.onNewData](this.rows);
			}

			/** **************This should only happen on datasource change instead of every render*********************************** */

			// Map IN columns
			this.colMapping = {};
			if (props.data.mapping) {
				for (var i = 0; i < props.data.mapping.length; i++) {
					if (!(props.data.mapping[i].id in this.colMapping)) {
						this.colMapping[props.data.mapping[i].id] = [];
					}
					this.colMapping[props.data.mapping[i].id].push(i);
				}
			}

			//expand "*"
			var outColumns = [];
			props.spec.outColumns.map(function (col) {
				if (col.value && typeof col.value === 'string' && col.value.match(/\:\*$/)) {
					var value = col.value.replace(/\:\*$/, '');
					for (var j = 0; j < props.data.headers[0].length; j++) {
						var col2 = JSON.parse(JSON.stringify(col));
						col2.label = col2.label.replace('*', props.data.headers[0][j].value);
						col2.value = value + ':' + j;
						outColumns.push(col2);
					}
				} else {
					outColumns.push(col);
				}
			});

			// Map OUT columns
			this.columns = [];
			outColumns.map(function (col, i) {
				var column = {
					col: null,
					export: []
				};

				var colName = false;
				if (col.sparkline) {
					if (typeof col.sparkline === 'string') {
						col.sparkline = [col.sparkline];
					}

					if (col.sparkline.length == 1 && col.sparkline[0].match(/\:\*$/)) {
						var value = col.sparkline[0].replace(/\:\*$/, '');
						col.sparkline = [];
						for (var j = 0; j < props.data.headers[0].length; j++) {
							col.sparkline.push(value + ':' + j);
						}
					}

					column.func = function (values) {
						_this4.sparkline.init();
						return '<span data-sparkline="' + col.sparkline.map(function (query) {
							var value = values(query);
							return value ? value.toString().replace(/[^0-9.-]/g, '') : 0;
						}).join(',') + '"></span>';
					};
				} else if (col.value && typeof col.value === 'function') {
					column.func = col.value;
				} else {
					var colName = col.value;
				}

				if (colName) {
					if (colName.match(/\:\d+$/)) {
						var index = colName.split(/\:/).pop();
						colName = colName.replace(/\:\d+$/, '');
					} else {
						index = 0;
					}
					column.id = colName;
					column.index = index;
					column.col = props.data.columns[colName];
					column.formatter = column.col ? column.col.formatter : function (n) {
						return n;
					};
					column.sort = column.col ? column.col.sort : function (n) {
						return n;
					}; //this.props.data.dimensions[colName].sort;
				} else {
					column.sort = col.sort || {
						type: 'string'
					};
				}
				column.width = col.width || Math.floor(100 / outColumns.length) + '%'; // 60;
				column.className = col.className || '';

				if (column.col) {
					column.type = col.type || column.col.type;
					column.label = col.label || column.col.label;
				} else {
					column.type = col.type;
					column.label = col.label;
				}
				if (column.type === "metric") {
					column.className += " numeric";
				}
				if (col.filter === false) {
					column.filter = false;
				} else {
					column.filter = col.filter || null;
				}

				if (col.sparkline) {
					col.export = false;
				}

				if (col.export === false) {
					column.export = false;
				} else if (col.export || column.id) {
					if (!col.export) {
						col.export = [column.id];
					} else if (!$.isArray(col.export)) {
						col.export = [col.export];
					}
					col.export.forEach(function (ex, i) {
						var e = {};
						if (!ex.label && !ex.value) {
							e.label = column.label;
							e.value = column.id;
						} else {
							e.label = ex.label || column.label;
							e.value = ex.value || column.id;
						}

						var colName = e.value;
						e.formatter = props.data.columns[colName] ? props.data.columns[colName].formatter : function (n) {
							return n;
						};
						var index = 0;
						if (colName.match(/\:\d+$/)) {
							index = colName.split(/\:/).pop();
							colName = colName.replace(/\:\d+$/, '');
						}
						e.rowIndex = _this4.colMapping[colName] ? _this4.colMapping[colName][index] : -1;
						column.export.push(e);
					});
				}

				if (!column.func) {
					column.rowIndex = _this4.colMapping[column.id] ? _this4.colMapping[column.id][column.index] : -1;
				}

				_this4.columns.push(column);
			});

			// Translate IN columns into OUT columns
			this.outRows = [];
			for (var _i = 0; _i < this.rows.length; _i++) {
				var row = this.rows[_i];
				var newRow = [];
				this.columns.forEach(function (column, i) {
					var value = null;
					if (column.func) {
						newRow.push(column.func(_this4.getValue.bind(_this4, row)));
					} else {
						newRow.push(row[column.rowIndex]);
					}
				});
				this.outRows.push(newRow);
			}

			if (props.spec.onRender && props.spec.onRender in window) {
				this.outRows = window[props.spec.onRender](this.outRows);
			}

		/** ***************************END*********************************** */
		},

		visibleRowCount: 300,
		rowHeight: 24,

		handleScroll: function handleScroll(event) {
			var scrollTop = $(event.currentTarget).scrollTop(),
		    startRow = Math.floor(scrollTop / (this.rowHeight * (this.visibleRowCount / 3))) * (this.visibleRowCount / 3);

			if (startRow != this.state.startRow) {
				this.adjustScrollFiller(startRow);
				this.setState({ startRow: startRow });
			}
		},

		adjustScrollFiller: function adjustScrollFiller(startRow) {
			startRow = startRow || this.state.startRow;
			var $element = $(this.props.element);
			this.rowHeight = $element.find('.top-filler').next().height();
			$element.find('.top-filler').css({ height: this.rowHeight * startRow });
			$element.find('.bottom-filler').css({ height: this.rowHeight * (this.totalRows - startRow - this.visibleRowCount) });
		},

		render: function render() {
			var _this5 = this;

			// Filter this new table
			this.outRows = this.outRows.filter(function (row, i) {
				var matched = true;
				_this5.columns.map(function (column, j) {
					if (column.filter && _this5.state.filters[j] !== undefined && matched) {
						var r = new RegExp(_this5.state.filters[j], 'i');
						if (column.filter === true) {
							matched = String(row[j]).match(r);
						} else {
							matched = column.filter(row, _this5.getValue.bind(_this5, _this5.rows[i]), r);
						}
					}
				});
				return !!matched;
			});

			this.totals = [];
			this.outRows.forEach(function (row, rowNum) {
				_this5.columns.forEach(function (column, i) {
					if (typeof row[i] == 'number') {
						_this5.totals[i] = (typeof _this5.totals[i] == 'undefined' ? 0 : _this5.totals[i]) + parseFloat(0 + row[i]);
					}
				});
			});

			this.totalRows = this.outRows.length;

			var totals = this.totals;
			if (this.props.spec.onTotals && this.props.spec.onTotals in window) {
				totals = window[this.props.spec.onTotals](totals, this.outRows, this.rows);
			}

			if (this.props.data.error || this.rows.length == 0) {
				return React.createElement(
					"span",
					null,
					this.props.spec.onEmpty || "No Data"
				);
			}

			var className = "leo-simpletable";
			if (this.props.spec.style) {
				className += " leo-simpletable-" + this.props.spec.style;
			}

			// sort the rows
			var sortBy = this.state.sortBy;
			if (sortBy || sortBy === 0) {
				var mappings = {};
				mappings[sortBy] = this.columns[sortBy];
				this.outRows = this.outRows.sort(sort.getMultiCompare([{
					direction: this.state.sortDir === 1 ? 'asc' : 'desc',
					column: sortBy
				}], mappings));
			}

			return React.createElement(
				"div",
				{ className: "simple-table-wrapper" },
				React.createElement(
					"table",
					{ className: className },
					React.createElement(
						"thead",
						{ className: "table-head" },
						React.createElement(
							"tr",
							{ className: "fixed-spacing" },
							this.columns.map(function (column, i) {
								return React.createElement("td", { key: i, style: { width: column.width }, className: column.className });
							})
						),
						React.createElement(
							"tr",
							{ className: "title" },
							React.createElement(
								"td",
								{ colSpan: this.columns.length },
								React.createElement("i", { title: "download", className: "icon-download", onClick: this.exportData.bind(this, this.rows, this.columns) }),
								React.createElement(
									"span",
									null,
									this.props.options.title || this.props.spec.title
								)
							)
						),
						React.createElement(
							"tr",
							{ className: "headers" },
							this.columns.map(function (column, i) {
								return React.createElement(
									"td",
									{ key: i, style: { width: column.width, maxWidth: column.width }, className: column.className + (_this5.state.sortBy == i ? ' active' : ''), onClick: _this5.sortBy.bind(_this5, i) },
									React.createElement(
										"span",
										{ title: column.label },
										column.label
									),
									React.createElement("i", { className: _this5.state.sortBy == i ? _this5.state.sortDir == 1 ? "icon-up-dir" : "icon-down-dir" : "icon-sort" })
								);
							})
						),
						React.createElement(
							"tr",
							{ className: "filters" },
							this.columns.map(function (column, i) {
								if (column.type != "metric" && !column.className.match('numeric') && column.filter !== false) {
									return React.createElement(
										"td",
										{ key: i, style: { width: column.width, maxWidth: column.width }, className: column.className },
										React.createElement("input", { type: "search", value: _this5.state.filters[i] || '', onChange: _this5.filterChange.bind(_this5, i), className: "filter", placeholder: "Filter " + column.label })
									);
								} else {
									return React.createElement("td", { key: i, className: column.className });
								}
							})
						)
					)
				),
				React.createElement(
					"section",
					{ className: "table-body" + (this.props.spec.showTotals ? ' has-totals' : ''), onScroll: this.handleScroll },
					React.createElement(
						"table",
						{ className: className },
						React.createElement(
							"tbody",
							null,
							React.createElement(
								"tr",
								{ className: "fixed-spacing" },
								this.columns.map(function (column, i) {
									return React.createElement("td", { key: i, style: { width: column.width }, className: column.className });
								})
							),
							React.createElement(
								"tr",
								{ className: "top-filler" },
								React.createElement("td", null)
							),
							this.outRows.slice(this.state.startRow, this.state.startRow + this.visibleRowCount).map(function (row, rowNum) {
								return React.createElement(
									"tr",
									{ key: rowNum },
									_this5.columns.map(function (column, i) {
										return React.createElement("td", { key: i, style: { width: column.width, maxWidth: column.width }, className: column.className, dangerouslySetInnerHTML: { __html: column.formatter ? column.formatter(row[i]) : row[i] } });
									})
								);
							}),
							React.createElement(
								"tr",
								{ className: "bottom-filler" },
								React.createElement("td", null)
							)
						),
						this.props.spec.showTotals ? React.createElement(
							"tfoot",
							null,
							React.createElement(
								"tr",
								null,
								this.columns.map(function (column, i) {
									return React.createElement("td", { key: i, style: { width: column.width, maxWidth: column.width }, className: column.className, dangerouslySetInnerHTML: { __html: (column.formatter ? column.formatter(totals[i]) : totals[i]) || '&nbsp;' } });
								})
							)
						) : false
					)
				)
			);
		}
	});

},{"../../../../../lib/report/format/sort.js":3,"../../actions/data.js":793,"../base.js":797,"highcharts":107,"lodash.debounce":116,"react":785,"react-dom":616}],805:[function(require,module,exports){
	"use strict";

	var base = require("../base.js");
	var React = require("react");
	var moment = require("moment");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		spec = $.extend(true, {}, {
			metrics: [],
			extraNumbers: {}
		}, spec);

		if (spec.showCents === true) {
			spec.decimals = 2;
		} else if (spec.showCents === false) {
			spec.decimals = 0;
		}

		var timeframe = spec.timeframe || 'year';
		var asOf = moment(spec.asof);

		var metric = spec.metric;
		delete spec.metric;
		my.optionsChange = function (that) {
			that.columns = [];
			if (timeframe) {
				my.timeframe.id = timeframe;
			}
			var singleNumber = my.getComparisonMetrics(my.timeframe, metric, {
				notime: options.notime || !spec.useTime,
				asOf: asOf
			});
			that.metrics = singleNumber.metrics;

			my.setFilter(singleNumber.filter, false);
		};

		var that = base(element, spec, options, my);

		my.resize = function () {
			$('.leo-single-number').each(function () {
				var smallElements = $(this).find('.label, .growth');
				var largeElement = $(this).find('.value');
				smallElements.css({ fontSize: 5 });
				largeElement.css({ fontSize: 10 });
				var parentDiv = $(this);
				var initialHeight = parentDiv.height();
				var initialWidth = parentDiv.width();

				for (var i = 5; i < 144; i += .25) {
					smallElements.css({ fontSize: i });
					largeElement.css({ fontSize: i * 2 });
					if (parentDiv.width() > initialWidth || parentDiv.height() > initialHeight) {
						smallElements.css({ fontSize: --i });
						largeElement.css({ fontSize: i * 2 });
						break;
					}
				}
			});
		};

		that.reflow = function () {
			my.resize();
		};

		$(window).resize(function () {
			my.resize();
		});

		my.redraw = function () {
			var showExtraNumbers = !!spec.growth || spec.extraNumbers.show,
		    asPercent = !!spec.asPercent,
		    column = my.dataSources[0].columns[that.metrics[0]],
		    current = parseFloat(my.getMetricValue(0)),
		    prevCompare = parseFloat(my.getMetricValue(1)),

				//unused: var prev = parseFloat(my.getMetricValue(2)),
				growth = prevCompare ? ((current / prevCompare - 1) * 100).toFixed((asPercent ? spec.decimals : spec.extraNumbers.decimals) || 2) + '%' : 'N/A',
		    currentFormatted = column.formatter(current, (asPercent ? spec.extraNumbers.decimals : spec.decimals) || 0),
		    previousFormatted = column.formatter(prevCompare, (asPercent ? spec.extraNumbers.decimals : spec.decimals) || 0),
		    title = options.title || spec.title || spec.label || column.parent + " " + column.label;

			setTimeout(function () {
				my.resize();
			}, 1);

			return React.createElement(
				"div",
				{ className: "leo-single-number" },
				React.createElement(
					"div",
					null,
					React.createElement(
						"div",
						{ className: "label resize" },
						title
					),
					React.createElement(
						"div",
						{ className: "value resize" },
						asPercent ? growth : currentFormatted
					),
					showExtraNumbers ? React.createElement(
						"div",
						{ className: "growth resize" },
						asPercent ? React.createElement(
							"div",
							null,
							previousFormatted,
							React.createElement(
								"small",
								null,
								spec.extraNumbers.previous || 'previous'
							)
						) : React.createElement(
							"div",
							null,
							spec.extraNumbers.growth || (spec.growth && spec.growth.title ? spec.growth.title : 'growth')
						),
						asPercent ? React.createElement(
							"div",
							null,
							currentFormatted,
							React.createElement(
								"small",
								null,
								spec.extraNumbers.current || 'current'
							)
						) : React.createElement(
							"div",
							null,
							growth
						)
					) : false
				)
			);
		};
		return that;
	};

},{"../base.js":797,"moment":611,"react":785}],806:[function(require,module,exports){
	"use strict";

	var _fixedDataTable = require("fixed-data-table");

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var base = require("../base.js");
	var React = require("react");


	var TextCell = function TextCell(_ref) {
		var rowIndex = _ref.rowIndex;
		var data = _ref.data;
		var col = _ref.col;
		var formatter = _ref.formatter;

		var props = _objectWithoutProperties(_ref, ["rowIndex", "data", "col", "formatter"]);

		return React.createElement(
			_fixedDataTable.Cell,
			props,
			formatter(data[rowIndex][col])
		);
	};

	module.exports = function (element, spec, options, my) {
		my = my || {};
		var that = base(element, spec, options, my);
		element.on('mousewheel DOMMouseScroll', function (e) {
			e.preventDefault();
		});

		my.redraw = function () {
			var compareValue = null;
			var data = my.dataSources[0];

			var columns = [];
			if (data.rowheaders.length) {
				//has partitions
				var groupColumns = [];
				var lastHeader = null;
				for (var i = 0; i < data.headerMapping[1].length; i++) {
					var map = data.headerMapping[0][i];
					if (map === null) {
						//then it is a dimension
						var column = data.columns[data.columnheaders[i].id];
						groupColumns.push(React.createElement(_fixedDataTable.Column, {
							header: React.createElement(
								_fixedDataTable.Cell,
								null,
								column.label
							),
							cell: React.createElement(TextCell, { data: data.rows, col: i, formatter: column.formatter }),
							width: 120,
							fixed: true
						}));
					} else {
						var header = data.headers[0][map];
						if (!lastHeader || header.value !== lastHeader.value) {
							if (lastHeader || groupColumns.length) {
								columns.push(React.createElement(
									_fixedDataTable.ColumnGroup,
									{ fixed: lastHeader === null, header: React.createElement(
										_fixedDataTable.Cell,
										null,
										lastHeader ? lastHeader.value : ''
									) },
									groupColumns
								));
							}
							groupColumns = [];
						}
						lastHeader = header;

						var column = data.columns[data.headers[1][data.headerMapping[1][i]].id];
						groupColumns.push(React.createElement(_fixedDataTable.Column, {
							header: React.createElement(
								_fixedDataTable.Cell,
								{ className: "overflow-ellipsis", title: column.label },
								column.label
							),
							cell: React.createElement(TextCell, { className: "align-right", data: data.rows, col: i, formatter: column.formatter }),
							width: 120
						}));
					}
				}
				if (lastHeader) {
					columns.push(React.createElement(
						_fixedDataTable.ColumnGroup,
						{ header: React.createElement(
							_fixedDataTable.Cell,
							null,
							lastHeader.value
						) },
						groupColumns
					));
				}
			}

			return React.createElement(
				_fixedDataTable.Table,
				{
					rowsCount: data.rows.length,
					width: element.width(),
					maxHeight: element.height(),
					groupHeaderHeight: 25,
					headerHeight: 30,
					rowHeight: 30 },
				columns
			);
		};
		return that;
	};

},{"../base.js":797,"fixed-data-table":60,"react":785}],807:[function(require,module,exports){
	"use strict";

	var base = require("../highcharts.js");
	var Highcharts = require('highcharts');
	var moment = require("moment");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		my.options = $.extend(true, {}, {
			ratios: {
				goal: 0.2,
				warning: -0.2
			}
		}, options);

		var timeframe = spec.timeframe;
		var asOf = moment(spec.asof);

		var metric = spec.metric;
		delete spec.metric;
		my.optionsChange = function (that) {
			that.columns = [];
			if (timeframe) {
				my.timeframe.id = timeframe;
			}
			var comparison = my.getComparisonMetrics(my.timeframe, metric, {
				notime: options.notime || !spec.useTime,
				asOf: asOf
			});

			that.metrics = comparison.metrics;

			var skipSetFilter = false;
			that.filters.forEach(function (filter) {
				if (filter.id == comparison.filter.id) {
					skipSetFilter = true;
				}
			});

			if (!skipSetFilter) {
				my.setFilter(comparison.filter, false);
			}
		};

		var that = base(element, $.extend(true, {
			filters: [],
			highcharts: {
				chart: {
					type: 'solidgauge'
				},
				pane: {
					center: ['50%', '85%'],
					size: parseInt(element.width() * 0.9),
					startAngle: -90,
					endAngle: 90,
					background: {
						backgroundColor: 'transparent',
						innerRadius: '60%',
						outerRadius: '100%',
						shape: 'arc'
					}
				},
				yAxis: {
					lineWidth: 0,
					minorTickInterval: null,
					tickWidth: 0
				},
				plotOptions: {
					solidgauge: {
						dataLabels: {
							y: 5,
							borderWidth: 0,
							useHTML: true
						}
					}
				},
				tooltip: {
					enabled: false
				},
				title: null,
				series: [{
					name: '',
					data: [],
					color: '#55BF3B',
					dataLabels: {
						format: '<div></div>'
					}
				}]
			}
		}, spec), options, my);

		my.redraw = function () {
			var chart = my.chart;

			var current = parseFloat(my.getMetricValue(0));
			var prevCompare = parseFloat(my.getMetricValue(1));
			var prev = parseFloat(my.getMetricValue(2));

			chart.series[0].yAxis.removePlotBand("lower", false);
			chart.series[0].yAxis.removePlotBand("met", false);
			chart.series[0].yAxis.removePlotBand("goal", false);

			var lower = prevCompare * (1 + my.options.ratios.warning);
			var met = prevCompare;
			var goal = prevCompare * (1 + my.options.ratios.goal);

			chart.series[0].yAxis.setExtremes(0, goal, false);
			chart.series[0].yAxis.addPlotBand({
				id: "lower",
				color: 'red',
				from: 0,
				to: lower
			}, false);

			chart.series[0].yAxis.addPlotBand({
				id: "met",
				color: '#DDDF0D',
				from: lower,
				to: met
			}, false);

			chart.series[0].yAxis.addPlotBand({
				id: "goal",
				color: '#55BF3B',
				from: met,
				to: goal
			}, false);

			chart.series[0].setData([current], false);

			if (!spec.label) {
				var column = my.dataSources[0].columns[that.metrics[0]];
				spec.label = column.parent + " " + column.label;
			}

			if (!spec.prior) {
				spec.prior = {};
			}

			if (spec.prior && !spec.prior.title) {
				spec.prior.title = 'Prior Period';
			}

			chart.series[0].update({
				dataLabels: {
					format: '<div style="text-align:center;margin-top:-40%;">' + '<div style="line-height:1em;font-size:25px;color:' + (Highcharts.theme && Highcharts.theme.contrastTextColor || 'black') + '">{y:,2f}</div>' + '<div style="font-size:16px;color:silver">' + spec.label + '</div>' + '<div style="font-size:12px;color:silver;">' + spec.prior.title + ': <span style="color: ' + (Highcharts.theme && Highcharts.theme.contrastTextColor || 'black') + '">' + Highcharts.numberFormat(prevCompare, 2) + '</span></div> ' + '</div>'
				}
			});

			chart.redraw();
		};

		return that;
	};

},{"../highcharts.js":808,"highcharts":107,"moment":611}],808:[function(require,module,exports){
	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var base = require("./base.js");
	//var hs = require('../vendor/highslide/highslide-full.js');
	var chartDetails = require('../views/chartDetails.js');

	var dateSerie = require("./highcharts/serie/date.js");
	var categorySerie = require("./highcharts/serie/category.js");

	var Highcharts = require('highcharts');
	var DataAction = require("../actions/data.js");

	var OptionActions = require("../actions/options.js");

	function parseDetailsString(string, leo) {
		return string.replace(/\$\{series\}/g, leo.series).replace(/\$\{value\}/g, leo.value).replace(/\$\{column\}/g, leo.column);
	}

	module.exports = function (element, chart, options, my) {
		my = my || {};

		if (chart.dimensions && chart.dimensions.length > 1) {
			chart.dimensions = [chart.dimensions[0]];
		}

		if (window.parent.dashboardFilters) {
			chart.filters = chart.filters.concat(window.parent.dashboardFilters.filter(function (dashboardFilter) {
				return !chart.filters.some(function (filter) {
					return dashboardFilter.id == filter.id;
				});
			}));
		}

		var that = base(element, chart, options, my),
	    highcharts;

		that.init = function () {

			chart.startDownload = function () {
				DataAction.downloadData("export", null, my.dataSources[0]);
			};

			highcharts = $.extend(true, {}, {
				chart: {
					events: {
						redraw: function redraw() {
							element.trigger('leo-redraw');
						},
						click: function click(e) {
							var events = $._data(element.get(0), 'events');
							if (events && events['leo-chart-click']) {
								element.trigger("leo-chart-click", [e.chartX, e.chartY, this.plotBox, this.spacing, this.margin]);
							}
						}
					}
				},
				tooltip: {
					valueDecimals: 2
				},
				plotOptions: {
					series: {
						cursor: 'pointer',
						point: {
							events: {
								click: function click(e) {
									if (this.series.type == "pie") {
										var leo = {
											series: this.name,
											value: this.y,
											column: this.series.name
										};
									} else {
										var leo = {
											series: this.series.name,
											value: this.y,
											column: this.category
										};
									}
									var events = $._data(element.get(0), 'events');
									if (events && events['leo-click']) {
										element.trigger("leo-click", [leo, this, e]);
									} else if (events && events['leo-chart-click']) {
										element.trigger("leo-chart-click", [e.chartX, e.chartY, this.series.chart.plotBox, this.series.chart.spacing, this.series.chart.margin]);
									} else {

										var details = options.details || {};
										var headingHTML = details.title || '';

										if (details.tableView) {

											var params = details.tableView.data.params;

											if (params[0] && params[0] == '#') {
												params = encodeURIComponent(params.slice(1));
											} else {
												params = encodeURIComponent(JSON.stringify(params));
											}

											headingHTML += '<a class="leo-tableView icon-table" title="table view" data-params="' + params + '" data-user_clicked="' + encodeURIComponent(JSON.stringify(leo)) + '"></a>';
										}

										if (details.addFilter) {
											var metricData = my.getMetric(0);

											var dataValue = parseDetailsString(details.addFilter.data.value, leo),
										    checkboxes = {};
											for (var i = 0; i < metricData.headers[0].length; i++) {
												var value = metricData.headers[0][i].value;
												checkboxes[value] = value == dataValue;
											}

											headingHTML += '<a class="leo-addFilter icon-filter" title="filter by" data-id="' + details.addFilter.data.id + '" data-value="' + details.addFilter.data.value + '" data-checkboxes="' + encodeURIComponent(JSON.stringify(checkboxes)) + '" data-comparison="' + details.addFilter.data.comparison + '" data-label="' + details.addFilter.data.label + '"></a>';
										}

										chartDetails.htmlExpand(null, {
											pageOrigin: {
												x: e.pageX || e.clientX,
												y: e.pageY || e.clientY
											},
											headingText: parseDetailsString(headingHTML, leo),
											maincontentText: parseDetailsString(details.text || '', leo),
											width: parseInt(details.width),
											height: parseInt(details.height)
										});
									}
								}
							}
						}
					}
				},
				credits: {
					enabled: false
				},
				title: {
					text: options.title || null,
					margin: 5,
					style: {
						color: '#333',
						fontSize: 14
					}
				},
				yAxis: [{}],
				legend: {
				/*align: 'right',
    verticalAlign: 'top',
    layout: 'vertical',
    y: 30,
    padding: 2,
    margin: 4*/
				}
			}, that.highcharts);
		};

		that.init();

		that.build = function () {
			element.highcharts(highcharts);
			my.chart = element.highcharts();
			my.chart.showLoading();
		};

		that.build();

		that.setOptions = function (options) {
			Highcharts.setOptions(options);
		};

		that.showLoading = function () {
			my.chart.showLoading();
		};

		that.hideLoading = function () {
			my.chart.hideLoading();
		};

		that.toggleLegendItem = function (name, checked) {
			name = name.toLowerCase();
			for (var i = 0; i < my.chart.series.length; i++) {
				var series = my.chart.series[i];
				if (series.type == "pie") {
					for (var j = 0; j < series.data.length; j++) {
						var data = series.data[j];
						if (data.name.trim().toLowerCase() == name) {
							if (checked) {
								data.visible = true;
							} else {
								data.visible = false;
							}
							//            			series.update({data: data});
							break;
						}
					}
				} else {
					if (series.name.trim().toLowerCase() == name) {
						if (checked) {
							series.show();
						} else {
							series.hide();
						}
					}
				}
			}
		};

		that.reflow = function () {
			my.chart.reflow();
		};

		my.redraw = function () {

			if (my.dataSources.length > 0) {
				if (!('leo' in window)) {
					window.leo = {};
				}
				window.leo = $.extend(true, window.leo, {
					charts: {
						colors: {}
					}
				});

				Object.keys(my.dataSources[0].columns).forEach(function (columnId) {
					var column = my.dataSources[0].columns[columnId];
					if (column.color && _typeof(column.color) == 'object') {
						window.leo.charts.colors = $.extend(window.leo.charts.colors, column.color);
					}
				});

				if (window.leo.defaultColors) {
					OptionActions.setDefaultColors('default', window.leo.defaultColors);
				}

				for (var color in window.leo.charts.colors) {
					OptionActions.setColor('default', color, window.leo.charts.colors[color]);
				}
			}

			var chart = my.chart;

			var isBar = false;
			var mustRebuild = chart.series.length > 0 && that.metrics.length != chart.series.length;

			/*
  	must rebuild if:
  		is not blank and number is not equal (is one of them bar?)
  		is blank and one of the metric types is bar
  		one has changed (is one of them bar?)
  */
			for (var i = 0; i < that.metrics.length; i++) {
				if (that.metrics[i].highcharts && that.metrics[i].highcharts.type == 'bar') {
					isBar = true;
					if (chart.series.length == 0) {
						mustRebuild = true;
					}
				}
				if (!mustRebuild && chart.series[i] && that.metrics[i].highcharts.type != chart.series[i].type) {
					mustRebuild = true;
				}
			}

			if (mustRebuild) {
				chart.destroy();
				if (isBar) {
					highcharts.chart.type = 'bar';
				} else {
					delete highcharts.chart.type;
				}
				element.highcharts(highcharts);
				my.chart = element.highcharts();
				chart = my.chart;
			}

			//update legend
			if (that.advanced && that.advanced.legend) {
				$.extend(chart.legend.options, that.advanced.legend);
			}

			//update title
			if (that.advanced && that.advanced.title) {
				chart.setTitle(that.advanced.title);
			}

			//update tooltip
			if (that.advanced && that.advanced.tooltip) {
				$.extend(chart.tooltip, that.advanced.tooltip);
			}

			//draw each metric as it's own series
			var seriesMap = [];
			for (var _i = chart.series.length - 1; _i >= 0; _i--) {
				chart.series[_i].remove(false);
			}
			for (var _i2 = chart.axes.length - 1; _i2 >= 0; _i2--) {
				if (chart.axes[_i2].isXAxis == false) {
					chart.axes[_i2].remove(false);
				}
			}

			that.metrics.forEach(function (metric, i) {

				if (metric.highcharts && metric.highcharts.yAxis && !(metric.highcharts.yAxis in chart.yAxis)) {
					chart.addAxis({ opposite: true }, false, false);
				}

				var metricData = my.getMetric(i);

				if (metricData.rows && metricData.rows.length) {
					var yAxisIndex = metric.highcharts && metric.highcharts.yAxis ? metric.highcharts.yAxis : 0;
					if (chart.yAxis && chart.yAxis[yAxisIndex]) {
						chart.yAxis[yAxisIndex].setTitle({ text: metricData.columns[metric.id].label });
						if (metric.id.indexOf('|percent') != -1) {
							chart.yAxis[yAxisIndex].update({ labels: { format: '{value} %' } }, false);
						} else {
							chart.yAxis[yAxisIndex].update({ labels: { format: null } }, false);
						}
					}

					var partitionSort = metric.highcharts && metric.highcharts.sort ? metric.highcharts.sort : { column: 0, direction: 'asc' };

					if (metric.highcharts) {
						delete metric.highcharts.sort;
					}

					var xAxisColumn = metricData.columns[metricData.mapping[0].id];
					var totals = {};
					if (chart.xAxis[0].options.type != 'category' && !(metric.highcharts && metric.highcharts.type === "pie") && dateSerie.isDate(xAxisColumn)) {
						var series = dateSerie.create(metric, metricData, chart, my.dashboardOptions, that.metrics[i].highcharts, totals);
					} else {
						if (i === 0) {
							chart.xAxis[0].setCategories(metricData.rows.map(function (e) {
								return e[0];
							}));
						}
						var series = categorySerie.create(metric, metricData, chart, my.dashboardOptions, that.metrics[i].highcharts, totals);
					}

					//sort partitions
					if (partitionSort.column == 1) {
						series.sort(function (a, b) {
							return totals[a.name] - totals[b.name];
						});
					} else {
					//assuming already sorted by label
					}

					if (partitionSort.direction == 'desc') {
						series.reverse();
					}

					series.forEach(function (serie) {
						chart.addSeries(serie, false);
					});
				}
			});

			//Get rid of any serie that should no longer be there
			var removeSeries = [];
			for (var serie in seriesMap) {
				removeSeries.push(seriesMap[serie]);
			}
			//Gotta remove in reverse order
			removeSeries = removeSeries.sort();
			for (var _i3 = removeSeries.length - 1; _i3 >= 0; _i3--) {
				try {
					chart.series[removeSeries[_i3]].remove(false);
				} catch (e) {
					console.error("Error trying to remove", e);
				}
			}

			chart.redraw();
			chart.reflow();
		};

		return that;
	};

},{"../actions/data.js":793,"../actions/options.js":794,"../views/chartDetails.js":823,"./base.js":797,"./highcharts/serie/category.js":809,"./highcharts/serie/date.js":810,"highcharts":107}],809:[function(require,module,exports){
	"use strict";

	var numeral = require("numeral");

	module.exports = {

		create: function create(metric, metricData, chart, dashboardOptions, highchartSettings, totals) {
			var column = metricData.columns[metric.id];
			var tooltip = {};
			if (column.format == "money") {
				tooltip.valueDecimals = 0;
				tooltip.valuePrefix = numeral.languageData().currency.symbol;
			}

			if (metric.highcharts && metric.highcharts.type === "pie") {
				var data = [];
				tooltip.headerFormat = '<span style="font-size: 10px">{series.name}</span><br/>';
				tooltip.pointFormat = "<span style=\"color:{point.color}\">●</span> {point.name}: <b>{point.y}</b><br/>";
				var serie = $.extend(true, {
					name: metricData.columns[metric.id].label,
					data: data,
					tooltip: tooltip
				}, highchartSettings);

				for (var j = 0; j < metricData.mapping.length; j++) {
					if (metricData.mapping[j].id == metricData.metric.id) {
						var header = metricData.headers[0][metricData.headerMapping[0][j]];
						var _name = "value" in header ? header.value || "N/A" : metricData.columns[header.id].label;
						data.push({
							name: _name,
							color: dashboardOptions.getColor(_name),
							y: metricData.rows[0][j] ? metricData.rows[0][j] : 0
						});
						totals[_name] += parseFloat(metricData.rows[0][j]) || 0;
					}
				}
				return [serie];
			} else {
				var categories = chart.xAxis && chart.xAxis[0] && chart.xAxis[0].categories;
				var categoryMap = {};
				categories.forEach(function (cat, i) {
					categoryMap[cat] = i;
				});
				var series = [];

				for (var _j = 0; _j < metricData.mapping.length; _j++) {
					if (metricData.mapping[_j].id == metricData.metric.id) {
						var header = metricData.headers[0][metricData.headerMapping[0][_j]];
						if (categories) {
							var data = Array.apply(null, Array(categories.length)).map(function () {
								return null;
							});
						} else {
							var data = [];
						}
						var name = "value" in header ? header.value || "N/A" : metricData.columns[header.id].label;
						var serie = $.extend(true, {
							name: name,
							color: dashboardOptions.getColor(name),
							data: data,
							visible: dashboardOptions.isToggleOn(name),
							tooltip: tooltip
						}, highchartSettings);

						for (var k = 0; k < metricData.rows.length; k++) {
							if (categories) {
								data[categoryMap[metricData.rows[k][0]]] = metricData.rows[k][_j] ? metricData.rows[k][_j] : 0;
							} else {
								data.push({
									name: metricData.rows[k][0],
									y: metricData.rows[k][_j] ? metricData.rows[k][_j] : 0
								});
								totals[name] += parseFloat(metricData.rows[k][_j]) || 0;
							}
						}
						series.push(serie);
					}
				}
				return series;
			}
		}
	};

},{"numeral":612}],810:[function(require,module,exports){
	"use strict";

	var moment = require("moment");
	var numeral = require("numeral");

	module.exports = {
		matches: {
			'\\.year$': {
				format: 'YYYY',
				highcharts: {
					type: 'datetime'
				}
			},
			'\\.year_month$': {
				format: 'YYYY MMMM',
				highcharts: {
					type: 'datetime'
				}
			},
			'\\.date$': {
				format: 'YYYY-MM-DD',
				highcharts: {
					type: 'datetime'
				}
			},
			'd_date\\.id$': {
				format: 'YYYY-MM-DD',
				highcharts: {
					type: 'datetime'
				}
			},
			'\\.week_ending_date$': {
				format: 'YYYY-MM-DD',
				highcharts: {
					type: 'datetime',
					//					tickInterval: moment.duration(1, 'week').asMilliseconds(),
					startOfWeek: 6
				}
			}
		},

		isDate: function isDate(column) {
			for (var match in this.matches) {
				var regEx = new RegExp(match);
				if (column.id.match(regEx)) {
					return this.matches[match];
				}
			}
			return false;
		},

		create: function create(metric, metricData, chart, dashboardOptions, highchartSettings, totals) {
			var column = metricData.columns[metric.id];
			var tooltip = {};
			if (column.format == "money") {
				tooltip.valueDecimals = 0;
				tooltip.valuePrefix = numeral.languageData().currency.symbol;
			}

			var dateType = this.isDate(metricData.columns[metricData.mapping[0].id]);
			var series = [];

			for (var j = 0; j < metricData.mapping.length; j++) {
				if (metricData.mapping[j].id == metricData.metric.id) {
					var header = metricData.headers[0][metricData.headerMapping[0][j]];
					var data = [];
					var name = "value" in header ? header.value || "N/A" : metricData.columns[header.id].label;
					var serie = $.extend(true, {
						name: name,
						color: dashboardOptions.getColor(name),
						data: data,
						visible: dashboardOptions.isToggleOn(name),
						tooltip: tooltip
					}, highchartSettings);

					totals[name] = 0;

					for (var k = 0; k < metricData.rows.length; k++) {
						var timestamp = moment(metricData.rows[k][0], dateType.format).valueOf();
						if (!isNaN(timestamp)) {
							data.push([timestamp, metricData.rows[k][j] ? metricData.rows[k][j] : 0]);
							totals[name] += metricData.rows[k][j] || 0;
						}
					}

					data = data.sort(function (a, b) {
						return a[0] - b[0];
					});

					chart.xAxis[0].update(dateType.highcharts);
					series.push(serie);
				}
			}

			return series;
		}
	};

},{"moment":611,"numeral":612}],811:[function(require,module,exports){
	"use strict";

	var base = require("./base.js");
	var handlebars = require("handlebars");
	var format = require("../format.js");

	handlebars.registerHelper('format', function (type, value) {
		return format[type](value);
	});
	handlebars.registerHelper('money', function (value) {
		return format.money(value);
	});

	module.exports = function (element, spec, options, my) {
		my = my || {};
		var templates = [];
		element.find("script[type='text/x-handlebars-template']").each(function (i, e) {
			templates[$(e).data("id")] = handlebars.compile($(e).html());
		});

		var that = base(element, spec, options, my);
		my.context.handlebars = handlebars;
		my.context.templates = templates;

		if (spec.init) {
			spec.init.call(my.context);
		}

		my.redraw = function () {
			var source = my.dataSources[0];
			if (source) {
				var data = {
					columns: source.columns,
					mapping: source.mapping,
					rows: []
				};
				for (var i = 0; i < source.rows.length; i++) {
					var newRow = [];
					var row = source.rows[i];
					for (var j = 0; j < row.length; j++) {
						newRow[source.mapping[j].id] = row[j];
					}
					data.rows.push(newRow);
				}
				var result = spec.draw.call(my.context, data);
				if (result) {
					element.html(result);
				}
			}
		};
		return that;
	};

},{"../format.js":814,"./base.js":797,"handlebars":93}],812:[function(require,module,exports){
	'use strict';

	var base = require("../highcharts.js");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		var that = base(element, $.extend(true, {
			columns: [options.column],
			metrics: [{
				field: options.metric,
				partitions: options.partitions.split(';')
			}],
			highcharts: {
				xAxis: {
					allowDecimals: false
				},
				chart: {
					type: 'line'
				},
				plotOptions: {
					column: {
						stacking: 'normal'
					}
				}
			}
		}, spec), options, my);

		return that;
	};

},{"../highcharts.js":808}],813:[function(require,module,exports){
	'use strict';

	var base = require("./base.js");

	module.exports = function (element, spec, options, my) {
		my = my || {};

		var chart = {
			metrics: [],
			highcharts: {
				yAxis: [{ opposite: false }, {
					opposite: true
				}]
			}
		};
		var piechartWidth = element.width() / 5;
		chart.metrics[1] = {
			field: options.pie,
			partitions: options.partitions.split(';'),
			highcharts: {
				type: 'pie',
				yAxis: 1,
				center: [piechartWidth / 3, piechartWidth / 3],
				size: piechartWidth,
				showInLegend: false,
				dataLabels: {
					enabled: false
				}
			}
		};

		var that = base(element, $.extend(true, chart, spec), options, my);
		return that;
	};

},{"./base.js":812}],814:[function(require,module,exports){
	"use strict";

	var numeral = require("numeral");
	var moment = require("moment");

	function numeralFormat(value, format) {
		if (!value || isNaN(value) || !isFinite(value)) {
			value = 0;
		}
		return numeral(value).format(format);
	}

	module.exports = Object.freeze({
		get: function get(column, numberOnly) {
			if (!column || !column.format) {
				return this.base;
			}
			var type = column.format;
			if (!type && column.type === "metric") {
				type = "int";
			}
			if (type in this) {
				return this[type];
			} else {
				return this.base;
			}
		},
		base: function base(value) {
			return value;
		},
		float: function float(value) {
			var decimals = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

			return numeralFormat(parseFloat(value), '0,0.' + '0'.repeat(decimals));
		},
		money: function money(value) {
			var dollarsOnly = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

			if (!isNaN(parseFloat(dollarsOnly)) && isFinite(dollarsOnly)) {
				return numeralFormat(parseFloat(value), '($0,0.' + '0'.repeat(dollarsOnly) + ')');
			} else if (dollarsOnly) {
				return numeralFormat(parseFloat(value), '($0,0)');
			} else {
				return numeralFormat(parseFloat(value), '($0,0.00)');
			}
		},
		count: function count(value) {
			return numeralFormat(parseInt(value), '0,0');
		},
		countavg: function countavg(value) {
			return numeralFormat(parseFloat(value), '0,0.00');
		},
		int: function int(value) {
			return numeralFormat(parseInt(value), '0,0');
		},
		intavg: function intavg(value) {
			return numeralFormat(parseFloat(value), '0,0.00');
		},
		percent: function percent(value) {
			var decimals = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];

			return numeralFormat(parseFloat(value), '0.' + '0'.repeat(decimals) + '%');
		},
		'duration-s': function durationS(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "seconds").humanize();
		},
		'duration-m': function durationM(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "minutes").humanize();
		},
		'duration-h': function durationH(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "hours").humanize();
		},
		'duration-d': function durationD(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "days").humanize();
		}
	});

},{"moment":611,"numeral":612}],815:[function(require,module,exports){
	'use strict';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var Highcharts = require('highcharts');
	require('highcharts/highcharts-more.js')(Highcharts);
	require('highcharts/highcharts-3d.js')(Highcharts);
	require('highcharts/modules/heatmap')(Highcharts);
	require('highcharts/modules/treemap')(Highcharts);
	require('highcharts/modules/drilldown')(Highcharts);
	require('highcharts/modules/solid-gauge')(Highcharts);
	require('highcharts/modules/no-data-to-display')(Highcharts);

	var OptionActions = require("../actions/options.js");
	var DataActions = require("../actions/data.js");

	var chartTypes = _defineProperty({
		chart: require("../charts/highcharts.js"),
		gauge: require("../charts/gauge/base.js"),
		line: require("../charts/line/base.js"),
		'line-with-piechart': require("../charts/line/piechart.js"),
		bar: require("../charts/bar/base.js"),
		'bar-with-line': require("../charts/bar/line.js"),
		ranked: require("../charts/custom/ranked.js"),
		comparison: require("../charts/custom/comparison.js"),
		single_number: require("../charts/custom/single_number.js"),
		calculated_metric: require("../charts/custom/calculated_metric.js"),
		table: require("../charts/custom/table.js"),
		simpletable: require("../charts/custom/simpletable.js"),
		google_map: require("../charts/custom/google_map.js"),
		html: require("../charts/html.js"),
		filter_bar: require("../charts/custom/filter_bar.js")
	}, 'table', require("../charts/custom/data_table.js"));

	$(function () {
		Highcharts.setOptions({
			global: {
				useUTC: false
			},
			lang: {
				decimalPoint: '.',
				thousandsSep: ','
			}
		});
		$.fn.leo = function () {
			return $(this).data('leo');
		};
		$.fn.inlineStyle = function (prop) {
			return this.prop("style")[$.camelCase(prop)];
		};

		$('#leo-dashboard').on({
			'leo-click': function leoClick(e, leo) {

				var column_id = $(this).find('.leo-ranked-chart').data('column_id');

				var selector = $(this).data('controller-selector') || '*';
				$('figure.leo-chart, figure.leo-html').filter(selector).not($(this)).each(function () {
					if ($(this).leo()) {

						window.dashboardFilters = (window.dashboardFilters || []).filter(function (dashboardFilter) {
							return dashboardFilter.id !== column_id;
						});

						if (leo.active) {
							var filter = {
								id: column_id,
								value: leo.series,
								fromController: true
							};
							$(this).leo().setFilter(filter);
							window.dashboardFilters.push(filter);
						} else {
							$(this).leo().removeFilter(column_id);
						}
					}
				});
			}
		}, 'figure.is-controller, .leo-charts-controller figure');
	});

	exports.runScripts = function () {
		if (!('leo' in window)) {
			window.leo = {};
		}
		window.leo = $.extend(true, window.leo, {
			charts: {
				colors: {}
			}
		});

		if (window.leo.defaultColors) {
			OptionActions.setDefaultColors('default', window.leo.defaultColors);
		}

		for (var color in window.leo.charts.colors) {
			OptionActions.setColor('default', color, window.leo.charts.colors[color]);
		}

		if (window.leo.refreshDefault) {
			OptionActions.setDefaultRefresh('default', window.leo.refreshDefault);
		}
		window.leo.refresh = DataActions.refresh;
	};

	exports.initAll = function (element, filters) {
		var charts = [];
		element.find("figure[class^='leo-'], figure[class*=' leo-'], [class='leo-html']").not(".leo-html figure").each(function (i, figure) {
			charts.push(chartFigure($(this), filters));
		});
		return charts;
	};

	exports.init = function (figure, filters) {
		return chartFigure(figure, filters);
	};

	exports.destroyAll = function (charts) {
		if (charts) {
			charts.forEach(function (chart) {
				if (chart.destroy) {
					chart.destroy();
				}
			});
		}
	};

	function chartFigure(figure, filters) {

		figure = $(figure);

		var data = figure.data();

		var spec = {};

		var specScript = figure.find("script[type^='text/x-leo']");

		if (specScript.length && $.trim(specScript.text()) != '') {
			spec = new Function("return " + specScript.text())();
			if (spec.type !== 'html') {
				figure.attr('data-script', JSON.stringify(specScript.text()));
				specScript.remove();
			}
		}

		if (!spec.type) {
			spec.type = "chart";
		}

		var figcaption = figure.find("figcaption");
		if (figcaption.length) {
			data.title = figcaption.html();
			figcaption.remove();
		}

		var details = figure.find("details");

		var addFilter = details.find('a.leo-addFilter');

		addFilter = addFilter.length != 0 ? { data: addFilter.data() } : false;

		var tableView = details.find('a.leo-tableView');

		tableView = tableView.length != 0 ? { data: tableView.data() } : false;

		var detaultDetails = '<div class="details-table"><div><label>column</label><span>${column}</span></div> <div><label>name</label><span>${series}</span></div> <div><label>value</label><span>${value}</span></div></div>';

		if (details) {
			data.details = {
				width: details.data('width') || 300,
				height: details.data('height') || 200,
				title: details.data('title') || '${series}',
				addFilter: addFilter,
				tableView: tableView,
				text: details.html() || detaultDetails
			};
			details.remove();
		} else {
			data.details = {
				width: 300,
				height: 200,
				title: '${series}',
				text: detaultDetails
			};
		}

		if (figure.find('select').length) {
			data.select = {
				options: []
			};
			figure.find('select option').each(function (index, element) {
				data.select.options.push({
					value: $(element).val(),
					text: $(element).text()
				});
				if ($(element).prop('selected')) {
					data.select.defaultValue = $(element).val();
				}
			});
		}

		if (figure.is(".leo-html")) {
			figure.find('hr.vertical, .hover-menu').remove();
			spec.type = figure.html().indexOf('text/x-leo-chart') != -1 ? "html" : '';
			spec.template = figure.html();
			figure.attr('data-html', figure.html());
		}

		if (!spec.type) {
			return false;
		}

		if (filters) {
			spec.filters = (spec.filters || []).concat(JSON.parse(JSON.stringify(filters)));
		}

		try {
			var chart = chartTypes[spec.type](figure, $.extend(true, {
				columns: [],
				metrics: [],
				filters: [],
				rows: []
			}, spec), data).start();
			figure.addClass("active");
		} catch (e) {
			console.error("Cannot initialize ", figure, e, chart);
			var chart = false;
		}

		return chart;
	}

},{"../actions/data.js":793,"../actions/options.js":794,"../charts/bar/base.js":795,"../charts/bar/line.js":796,"../charts/custom/calculated_metric.js":798,"../charts/custom/comparison.js":799,"../charts/custom/data_table.js":800,"../charts/custom/filter_bar.js":801,"../charts/custom/google_map.js":802,"../charts/custom/ranked.js":803,"../charts/custom/simpletable.js":804,"../charts/custom/single_number.js":805,"../charts/custom/table.js":806,"../charts/gauge/base.js":807,"../charts/highcharts.js":808,"../charts/html.js":811,"../charts/line/base.js":812,"../charts/line/piechart.js":813,"highcharts":107,"highcharts/highcharts-3d.js":105,"highcharts/highcharts-more.js":106,"highcharts/modules/drilldown":108,"highcharts/modules/heatmap":109,"highcharts/modules/no-data-to-display":110,"highcharts/modules/solid-gauge":111,"highcharts/modules/treemap":112}],816:[function(require,module,exports){
	"use strict";

	var numeral = require("numeral");
	var format = require("../format.js");

	var Highcharts = require('highcharts');

	numeral.language('en-gb', {
		delimiters: {
			thousands: ',',
			decimal: '.'
		},
		abbreviations: {
			thousand: 'k',
			million: 'm',
			billion: 'b',
			trillion: 't'
		},
		ordinal: function ordinal(number) {
			var b = number % 10;
			return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
		},
		currency: {
			symbol: '£'
		}
	});

	module.exports = {
		moment: require("moment"),
		parse_date: require("../../../../lib/utils/parse_date.js"),
		numeral: require("numeral"),

		setLocale: function setLocale(locale) {
			var self = this;
			self.locale = locale;
			self.numeral.language(locale);
			var lang = self.numeral.languageData();
			Highcharts.setOptions({
				lang: {
					decimalPoint: lang.delimiters.decimal,
					thousandsSep: lang.delimiters.thousands
				}
			});
		},

		format: {
			money: format.get({ format: "money" }),
			count: format.get({ format: "count" }),
			number: format.get({ format: "int" }),
			percent: format.get({ format: "percent" }),
			percentChange: function percentChange(now, then) {
				return !now || !then ? 'N/A' : format.get({ format: "percent" })((now - then) / then);
			}
		}
	};

},{"../../../../lib/utils/parse_date.js":4,"../format.js":814,"highcharts":107,"moment":611,"numeral":612}],817:[function(require,module,exports){
	"use strict";

	var EventEmitter = require('events').EventEmitter;
	var util = require("util");
	var moment = require("moment");

	module.exports = function (my) {
		var emitter = new EventEmitter();
		var watchers = {};
		var watchCount = {};
		if (!my.onWatch) {
			my.onWatch = {};
		}
		my.on = function (caller, obj) {
			if ((arguments.length <= 2 ? 0 : arguments.length - 2) > 0) {
				var e = obj;
				obj = {};
				obj[e] = arguments.length <= 2 ? undefined : arguments[2];
			}

			for (var e in obj) {
				watchCount[e] = watchCount[e] + 1 || 1;
				emitter.on(e, obj[e]);
				if (watchCount[e] === 1) {
					if (e in my.onWatch && my.onWatch[e].watch) {
						my.onWatch[e].watch(e);
					}
					if ('*' in my.onWatch && my.onWatch['*'].watch) {
						my.onWatch['*'].watch(e);
					}
				}
				if (!(caller in watchers)) {
					watchers[caller] = [];
				}
				watchers[caller].push({ e: e, func: obj[e] });
			}
		};
		my.off = function (caller) {
			var methods = watchers[caller];
			if (methods) {
				for (var i = 0; i < methods.length; i++) {
					removeListener(methods[i].e, methods[i].func);
				}
			}
			watchers[caller] = [];
		};
		function removeListener(e, func) {
			watchCount[e] = watchCount[e] - 1;
			if (watchCount[e] === 0) {
				if (e in my.onWatch && my.onWatch[e].unwatch) {
					my.onWatch[e].unwatch(e);
				}
				if ('*' in my.onWatch && my.onWatch['*'].unwatch) {
					my.onWatch['*'].unwatch(e);
				}
			}
			emitter.removeListener(e, func);
		}

		my.removeListener = removeListener;

		my.emit = function () {
			emitter.emit.apply(emitter, arguments);
		};

		var repeaters = {};
		var repeaterId = 0;
		my.createRepeater = function (time, repeatFunction, stopFunction, params) {
			var id = repeaterId++;
			repeaters[id] = {
				interval: moment.duration(time).as('milliseconds'),
				timeout: null,
				func: repeatFunction,
				stop: stopFunction,
				params: params
			};
			return {
				start: function start() {
					my.repeat(id);
					return this;
				},
				stop: function stop() {
					if (repeaters[id]) {
						if (repeaters[id].timeout) {
							clearTimeout(repeaters[id].timeout);
						}
						if (repeaters[id].stop) {
							repeaters[id].stop();
						}
						delete repeaters[id];
					}
					return this;
				}
			};
		};

		my.repeat = function (id) {
			var repeater = repeaters[id];
			if (repeater) {
				clearTimeout(repeater.timeout); // If it is already schedule to run, we don't want it to anymore as we are going to run it now
				repeater.func(function () {
					repeater.timeout = setTimeout(function () {
						my.repeat(id);
					}, repeater.interval);
				});
			}
		};
		my.onWatched = function (event, watch, unwatch) {
			my.onWatch[event] = {
				watch: watch,
				unwatch: unwatch
			};
		};
		my.onWatchedTimer = function (event, time, repeatFunction, cleanupFunction) {
			var repeater = my.createRepeater(time, repeatFunction, cleanupFunction, { e: event });
			my.onWatch[event] = {
				watch: function watch(e) {
					repeater.start();
				},
				unwatch: function unwatch(e) {
					repeater.stop();
				}
			};
		};
	};

},{"events":9,"moment":611,"util":792}],818:[function(require,module,exports){
	"use strict";

	var util = require("util");
	var dispatcher = require("./dispatcher.js");

	module.exports = function (action) {
		var my = {};

		var that = {};
		action.call(that, my, dispatcher);

		return that;
	};

},{"./dispatcher.js":819,"util":792}],819:[function(require,module,exports){
	"use strict";

	var that = {};
	var my = {};

	require("../emitter.js")(my);

	module.exports = {
		on: my.on.bind(my, 0),
		emit: my.emit
	};

},{"../emitter.js":817}],820:[function(require,module,exports){
	"use strict";

	var dispatcher = require('./dispatcher.js');
	var emitter = require("../emitter.js");
	var util = require("util");

	var version = 0;
	module.exports = function (store) {
		var timers = {};

		var my = {};

		emitter(my);

		var that = {};
		store.call(that, my, dispatcher);

		return function () {
			var out = {};
			for (var i in that) {
				out[i] = that[i];
			}
			out.version = version++;
			out.on = my.on.bind(my, "store-" + out.version);
			out.off = my.off.bind(my, "store-" + out.version);
			return out;
		};
	};

},{"../emitter.js":817,"./dispatcher.js":819,"util":792}],821:[function(require,module,exports){
	"use strict";

	var dataSources = {};
	var sourceId = 1;

	var DataActions = require("../actions/data.js");

	module.exports = require("../react/flux/store.js")(function (my, dispatcher) {
		var reports = [];
		var datas = {};
		var graphSources = {};

		dispatcher.on("data.data", function (e) {
			my.emit(e.id, e.data);
		});

		dispatcher.on("data.reset", function (e) {
			var ids = graphs.map(function (graph) {
				return graph.id;
			});
			graphs = [];
			pruneDataSources();

			ids.map(function (id) {
				my.off(id);
			});
		});

		var repeaters = {};
		my.onWatched("*", function (e) {
			if (e === "loading" || e === "loaded") return;
			var dataSource = dataSources[e];
			//Give other reports time to jump in and be part of this data source
			setTimeout(function () {
				repeaters[e] = my.createRepeater(dataSource.interval, function (done) {
					my.emit("loading", graphSources[e]);
					dataSource.lastLoadRequest = new Date();
					DataActions.load(e, dataSource);
					done();
				}, function () {}).start();
			}, 0);
		}, function (e) {
			if (repeaters[e]) {
				repeaters[e].stop();
			}
		});

		dispatcher.on("data.refresh", function (e) {
			for (var e in repeaters) {
				repeaters[e].start();
			}
		});

		var graphs = [];
		function pruneDataSources() {
			for (var reportId in dataSources) {
				dataSources[reportId].metrics = [];
			}
			for (var i = 0; i < graphs.length; i++) {
				var graph = graphs[i];
				parseGraph(graph);
			}

			for (reportId in dataSources) {
				if (dataSources[reportId].metrics.length === 0) {
					delete dataSources[reportId];
					delete datas[reportId];
				}
			}
		}

		this.watchGraph = function (graph, onUpdate) {
			if (graph.requireControl) {
				var hasControl = false;
				for (var i = 0; i < graph.filters.length; i++) {
					if (graph.filters[i].fromController) {
						hasControl = true;
						break;
					}
				}
				if (!hasControl) {
					graph.showNeedsFilter();
					return {
						id: graph.id,
						refresh: function refresh() {},
						stop: function stop() {}
					};
				} else {
					graph.hideNeedsFilter();
				}
			}

			graph.id = sourceId++;
			graphs.push(graph);
			if (!graph.refreshInterval) {
				graph.refreshInterval = { minutes: 5 };
			}

			var watchIds = parseGraph(graph);

			var newSources = {};

			for (var d in graphSources) {
				if (graphSources[d] !== graph.id) {
					newSources[d] = graphSources[d];
				}
			}

			watchIds.forEach(function (id) {
				newSources[id] = graph.id;
			});

			graphSources = newSources;

			var hasData = function hasData() {
				var hasAllData = true;
				watchIds.forEach(function (watching, i) {
					if (!(watching in datas) || datas[watching].timestamp < dataSources[watching].lastLoadRequest) {
						hasAllData = false;
					}
				});

				if (hasAllData) {
					var data = [];
					watchIds.forEach(function (watching, i) {
						data.push(datas[watching].data);
					});
					my.emit("loaded", graph.id);
					onUpdate(data);
				}
			};

			watchIds.forEach(function (watching, i) {
				my.on(graph.id, watching, function (data, other) {
					datas[watching] = {
						timestamp: new Date(),
						data: data
					};
					hasData();
				});
			});

			hasData();

			return {
				id: graph.id,
				refresh: function refresh() {
					watchIds.forEach(function (watching, i) {
						repeaters[watching].start();
					});
				},
				stop: function stop() {
					for (var i = graphs.length - 1; i >= 0; i--) {
						var g = graphs[i];
						if (g.id === graph.id) {
							graphs.splice(i, 1);
						}
					}
					pruneDataSources();
					my.off(graph.id);
				}
			};
		};
	});

	function parseField(field) {
		var i;
		var fields = {
			metrics: [],
			groups: []
		};
		if (field.fields) {
			for (i = 0; i < field.fields.length; i++) {
				var f = field.fields[i];
				if (f.match(/^d_/) || f.match(/\.dd_/) || f.match(/\|band/)) {
					fields.groups.push(f);
				} else {
					fields.metrics.push(f);
				}
			}
		} else if (Array.isArray(field)) {
			for (i = 0; i < field.length; i++) {
				var f = field[i];
				if (f.match(/^d_/) || f.match(/\.dd_/) || f.match(/\|band/)) {
					fields.groups.push(f);
				} else {
					fields.metrics.push(f);
				}
			}
		} else {
			fields.metrics.push(field);
		}
		return fields;
	}

	function parseGraph(graph) {
		var i, j;
		var dataSourceIds = {};

		var groups = [];
		if (!graph.columns || graph.columns.length === 0) {
			graph.columns = graph.dimensions || [];
		}
		for (i = 0; i < graph.columns.length; i++) {
			groups.push(graph.columns[i]);
		}

		var filters = [];
		for (i = 0; i < graph.filters.length; i++) {
			if (graph.filters[i].value && graph.filters[i].value.length != 0) {
				filters.push(graph.filters[i]);
			}
		}

		var partitions = [];
		if (!graph.partitions) {
			graph.partitions = [];
		}
		for (i = 0; i < graph.partitions.length; i++) {
			partitions.push(graph.partitions[i]);
		}

		if ((!graph.metrics || graph.metrics.length === 0) && graph.series) {
			var metrics = [];
			graph.series.forEach(function (serie) {
				serie.metrics.forEach(function (metric) {
					metrics.push({
						id: metric.id,
						highcharts: serie.highcharts || { type: serie.type }
					});
				});
			});
			graph.metrics = metrics;
		}

		for (i = 0; i < graph.metrics.length; i++) {
			var metric = graph.metrics[i];
			if (typeof metric == 'string') {
				metric = { id: metric };
			} else if (metric.field) {
				metric.id = metric.field;
				delete metric.field;
			}

			//Determine which Groups are needed
			var myGroups = [];
			var myPartitions = [];

			if (metric.highcharts && metric.highcharts.type == 'pie') {
				if (metric.partitions) {
				//IF partitions are set, then use that instead of columns
					metric.columns = [];
				} else {
					metric.partitions = metric.columns;
					metric.columns = [];
				}
			}

			if (metric.columns) {
				myGroups = metric.columns.slice();
			} else {
				myGroups = groups.slice(0);
			}
			if (metric.partitions || metric.colors) {
				var fields = parseField(metric.partitions || metric.colors);
				for (j = 0; j < fields.groups.length; j++) {
					myPartitions.push(fields.groups[j]);
				}
			} else if (partitions.length) {
				myPartitions = partitions.slice(0);
			}

			//Determine which Filters are needed
			var myFilters = filters.slice(0);
			if (metric.filters) {
				for (j = 0; j < metric.filters.length; j++) {
					myFilters.push(metric.filters[j]);
				}
			}

			//Determine which metrics are needed
			var _metrics = [];
			_metrics.push(metric.id || metric.field);

			//Parse the tooltip
			if (metric.tooltip) {
				var fields = parseField(metric.tooltip);
				for (j = 0; j < fields.groups.length; j++) {
					myGroups.push(fields.groups[j]);
				}
				for (j = 0; j < fields.metrics.length; j++) {
					_metrics.push(fields.metrics[j]);
				}
			}

			/* this makes no sense.  why would we parse a label?
  //Parse the label
  if (false && metric.label) {
  	var fields = parseField(metric.label);
  	for(j = 0; j < fields.groups.length; j++) {
  		myGroups.push(fields.groups[j]);
  	}
  	for(j = 0; j < fields.metrics.length; j++) {
  		metrics.push(fields.metrics[j]);
  	}
  }
  */

			//Generate a reportID
			myGroups = myGroups.filter(function (value, index, self) {
				return self.indexOf(value) === index;
			}).sort();
			myPartitions = myPartitions.filter(function (value, index, self) {
				return self.indexOf(value) === index;
			}).sort();
			myFilters = myFilters.map(function (e) {
			//This should likely be more complex, such as ordering the values
			//e.values.sort();????
				return JSON.stringify(e);
			}).filter(function (value, index, self) {
				return self.indexOf(value) === index;
			}).map(function (e) {
				return JSON.parse(e);
			}).sort(function (a, b) {
				return a.id.localeCompare(b.id);
			});

			var reportId = JSON.stringify([myGroups, myPartitions, myFilters]);
			if (!(reportId in dataSources)) {
				dataSources[reportId] = {
					groups: myGroups,
					partitions: myPartitions,
					interval: graph.refreshInterval,
					metrics: [],
					filters: myFilters,
					sort: graph.sort
				};
			}
			dataSourceIds[reportId] = 1;

			var source = dataSources[reportId];
			var m = source.metrics;
			for (j = 0; j < _metrics.length; j++) {
				var _metric = _metrics[j];
				if (m.indexOf(_metric) === -1) {
					m.push(_metrics[j]);
				}
			}
		}

		return Object.keys(dataSourceIds);
	}

},{"../actions/data.js":793,"../react/flux/store.js":820}],822:[function(require,module,exports){
	"use strict";

	var Highcharts = require('highcharts');

	var optionGroups = {};

	function getGroup(group) {
		if (!(group in optionGroups)) {
			optionGroups[group] = $.extend(true, {}, {
				filters: {},
				timeframe: null,
				//        timebreakdown: "month",
				legendToggles: [],
				refreshRate: { minutes: 30 }
			}, optionGroups[group]);
		}
		return optionGroups[group];
	}

	module.exports = require("../react/flux/store.js")(function (my, dispatcher) {
		var _this = this;

		dispatcher.on("options.reset", function (e) {
			optionGroups = {};
		});

		dispatcher.on("options.setFilter", function (e) {
			var group = getGroup(e.group);
			if (e.isRequired && (!e.value || e.value.length == 0)) {
				e.value = ["-99999999"];
			}
			group.filters[e.id] = {
				id: e.id,
				comparison: e.comparison || "in",
				value: e.value,
				checkboxes: e.checkboxes,
				label: e.label,
				api: e.api,
				isRequired: e.isRequired || false,
				singleValue: e.singleValue || false,
				isHidden: e.isHidden
			};
			my.emit("change", e.group, group);
		});

		dispatcher.on("options.deleteFilter", function (e) {
			var group = getGroup(e.group);
			delete group.filters[e.id];
			my.emit("change", e.group, group);
		});

		dispatcher.on("options.setTimeFilter", function (e) {
			var group = getGroup(e.group);
			group.timeframe = { id: "{d_date}.id", value: e.value };
			my.emit("change", e.group, group);
		});

		dispatcher.on("options.setTimeBreakdown", function (e) {
			var group = getGroup(e.group);
			group.timebreakdown = e.breakdown;
			my.emit("change", e.group, group);
		});

		dispatcher.on("options.setLegendToggles", function (e) {
			var group = getGroup(e.group);
			group.legendToggles = e.items;
			for (var i = 0; i < e.items.length; i++) {
				var toggle = e.items[i];
				if (toggle.color) {
					_this.setColor(toggle.name, toggle.color);
				} else {
					toggle.color = _this.getColor(toggle.name);
				}
			}
			my.emit("togglelistchange", e.group, group);
		});

		dispatcher.on("options.setLegendToggle", function (e) {
			var group = getGroup(e.group);
			for (var i = 0; i < group.legendToggles.length; i++) {
				var toggle = group.legendToggles[i];
				if (toggle.name == e.name) {
					toggle.checked = e.status;
					my.emit("togglechange", e.group, toggle.name, toggle.checked);
					break;
				}
			}
		});

		dispatcher.on("options.setColor", function (e) {
			var group = getGroup(e.group);
			_this.setColor(e.seriesName, e.color);
		});

		dispatcher.on("options.setDefaultColors", function (e) {
			var group = getGroup(e.group);
			_this.setDefaultColors(e.defaultColors);
		});

		dispatcher.on("options.setRefresh", function (e) {
			var group = getGroup(e.group);
			group.refreshRate = e.rate;
		});

		this.getGroup = getGroup;

		var colorCount = 0;
		//var colors = Highcharts.getOptions().colors
		var colors = [
			//highchart defaults
			'#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'
			//tango colors
			, '#edd400', '#f57900', '#c17d11', '#73d216', '#3465a4', '#75507b', '#cc0000', '#d3d7cf', '#555753', '#c4a000', '#ce5c00', '#8f5902', '#4e9a06', '#204a87', '#5c3566', '#a40000', '#babdb6', '#2e3436', '#fce94f', '#fcaf3e', '#e9b96e', '#8ae234', '#729fcf', '#ad7fa8', '#ef2929', '#eeeeec', '#888a85'];

		this.setDefaultColors = function (defaultColors) {
			colors = defaultColors;
		};

		this.getDefaultColors = function () {
			return colors;
		};

		var serieColorMap = {};

		this.setColor = function (seriesName, color) {
			serieColorMap[seriesName.trim().toLowerCase()] = color;
		};

		this.getColor = function (seriesName) {
			seriesName = seriesName.toString().toLowerCase();
			if (!(seriesName in serieColorMap)) {
				serieColorMap[seriesName] = colors[colorCount++];
			}
			return serieColorMap[seriesName];
		};

		this.isToggleOn = function (seriesName) {
			var group = arguments.length <= 1 || arguments[1] === undefined ? 'default' : arguments[1];

			var group = getGroup(group);
			var toggleExists = group.legendToggles.map(function (e) {
				return e.name;
			}).indexOf(seriesName);
			if (toggleExists >= 0 && group.legendToggles[toggleExists].checked !== true) {
				return false;
			}
			return true;
		};
	});

},{"../react/flux/store.js":820,"highcharts":107}],823:[function(require,module,exports){
	"use strict";

	if (!chartDetails) {

		var chartDetails = {

			htmlExpand: function htmlExpand(unused, params) {

				/*
   		var details = $('#leoChartDetails');
   		if (details.length == 0) {
   	details = $('<div id="leoChartDetails"></div>');
   	$('body').append(details);
   }
   		details
   	.empty()
   	.append($('<header />').html(params.headingText))
   	.append($('<main />').html(params.maincontentText).css({
   		width: params.width,
   		height: params.height
   	}))
   	.css({
   		left: params.pageOrigin.x,
   		top: params.pageOrigin.y,
   		width: 0,
   		height: 0
   	})
   	.show()
   	.animate({
   		left: params.pageOrigin.x - params.width/2 - 20,
   		top: params.pageOrigin.y - params.height/2 - 35,
   		width: params.width + 20,
   		height: params.height + 50
   	})
   	.bind('mouseleave', function() {
   		$(this).empty().css({left:0,top:0}).hide();
   	})
   */

			}

		};
	}

	module.exports = chartDetails;

},{}],824:[function(require,module,exports){
	"use strict";

	var React = require('react');
	var OptionActions = require("../../actions/options.js");
	var DashboardOptions = require("../../stores/options.js")();

	module.exports = React.createClass({
		displayName: "exports",


		getDefaultProps: function getDefaultProps() {
			return {
				group: 'default'
			};
		},

		componentDidMount: function componentDidMount() {
			var _this = this;

			DashboardOptions.on('togglelistchange', function (e, group) {
				_this.forceUpdate();
			});
			DashboardOptions.on('togglechange', function (e, group) {
				_this.forceUpdate();
			});
		},

		onClick: function onClick(filter) {
			OptionActions.setLegendToggle(this.props.group, filter.name, !filter.checked);
		},

		render: function render() {
			var _this2 = this;

			var legendToggles = DashboardOptions.getGroup(this.props.group).legendToggles;
			return React.createElement(
				"ul",
				null,
				legendToggles.map(function (filter, i) {
					return React.createElement(
						"li",
						{ key: "key" + i, onClick: _this2.onClick.bind(_this2, filter) },
						React.createElement("input", { type: "checkbox", readOnly: true, checked: filter.checked ? 'checked' : false, name: "legendToggles" }),
						React.createElement(
							"label",
							{ style: { color: filter.color } },
							React.createElement(
								"span",
								null,
								filter.name
							)
						)
					);
				})
			);
		}
	});

},{"../../actions/options.js":794,"../../stores/options.js":822,"react":785}],825:[function(require,module,exports){
	"use strict";

	var React = require('react');
	var table = require("../../charts/custom/table.js");

	module.exports = React.createClass({
		displayName: "exports",


		getInitialState: function getInitialState() {
			return {};
		},

		componentWillUnmount: function componentWillUnmount() {
		//this.chart.stop();
		},

		componentDidMount: function componentDidMount() {
			var columns = this.props.params.rowDims;
			var metrics = this.props.params.rowMetrics || this.props.params.columnMetrics;
			var partitions = this.props.params.columnDims;
			var filters = this.props.params.filters;

			var params = $.extend(true, {
				columns: [],
				metrics: [],
				partitions: [],
				filters: []
			}, {
				columns: columns,
				metrics: metrics,
				partitions: partitions,
				filters: filters
			});

			this.chart = table($(this.refs.body), params, { width: 500, height: 200 }).start();
		},

		close: function close() {
			React.unmountComponentAtNode($(this).parent().get(0));
		},

		copyToClipboard: function copyToClipboard() {
		/*
  //The Report Store is in charge of output
  var exportData = ReportStore.exportData(true);
  var copyReportInput = $("#copyReportInput");
  if (!copyReportInput.length) {
  	copyReportInput = $('<textarea id="copyReportInput" type="text" name="copyReportInput"></textarea>').appendTo("body");
  }
  copyReportInput.val(exportData);
  /* */
		},

		downloadTable: function downloadTable() {
		/*
  exportReport: function(a) {	
  //The Report Store is in charge of output
  var exportData = ReportStore.exportData();
  		if (exportData.length > 10000) {
  	var downloadForm = $("#warehouse-downloadform");
  	if(!downloadForm.length) {
  		downloadForm = $('<div id="warehouse-downloadform" style="display: none"><form method="POST" action="/download" /></div>').appendTo("body");
  	}
  	var inputtitle = $('<input type="hidden" name="title" value="Datawarehouse Export.csv"/>');
  	var inputdata = $('<input type="hidden" name="data" />');
  	inputdata.val(exportData);
  	downloadForm.find("form").attr("action", "/download").empty().append(inputtitle).append(inputdata).submit();
  	return true;
  } else {
  	a.attr("download","Datawarehouse Export.csv").attr("href", "data:text/csv;charset=utf-8,\ufeff" + encodeURIComponent(exportData));
  }
  /* */
		},

		render: function render() {
			return React.createElement(
				"div",
				{ className: "dialog-box" },
				React.createElement(
					"header",
					null,
					"Table View",
					React.createElement("i", { className: "close pull-right icon-cancel", onClick: this.close })
				),
				React.createElement("div", { className: "body", ref: "body" }),
				React.createElement(
					"footer",
					null,
					React.createElement(
						"button",
						{ className: "close", type: "button", onClick: this.close },
						"close"
					)
				)
			);
		}
	});

},{"../../charts/custom/table.js":806,"react":785}],826:[function(require,module,exports){
	'use strict';

	var React = require('react');
	var Filter = require('../../../js/views/report/filters/filter.jsx');
	var OptionActions = require("../actions/options.js");
	var DashboardOptions = require("../stores/options.js")();

	module.exports = React.createClass({
		displayName: 'exports',

		getInitialState: function getInitialState() {
			var options = DashboardOptions.getGroup('default');
			return {
				filters: [],
				timefilter: options.timeframe ? options.timeframe.value : null,
				timebreakdown: options.timebreakdown
			};
		},
		componentDidMount: function componentDidMount() {
			var _this = this;

			var onUpdate = function onUpdate() {
				var state = $.extend(true, {}, DashboardOptions.getGroup("default"));
				state.timefilter = state.timeframe ? state.timeframe.value : state.timeframe;
				var oldFilters = state.filters;
				state.filters = [];
				for (var id in oldFilters) {
					state.filters.push(oldFilters[id]);
				}
				_this.setState(state);
			};
			DashboardOptions.on("change", onUpdate);
			onUpdate();
		},
		onTimeBreakdownChange: function onTimeBreakdownChange(filter) {
			OptionActions.setTimeBreakdown('default', filter.value[0]);
		},
		onTimeFrameChange: function onTimeFrameChange(filter) {
			this.state.timefilter = filter.value;
			OptionActions.setTimeFilter('default', filter.value);
		},
		onTimeFrameDelete: function onTimeFrameDelete(filter_id) {
			OptionActions.setTimeFilter('default', '');
		},
		onFilterChange: function onFilterChange(filter) {
			OptionActions.updateFilter("default", filter);
		},
		onFilterDelete: function onFilterDelete(filter_id) {
			OptionActions.deleteFilter("default", filter_id);
		},
		autoComplete: function autoComplete(filter_id, term, callback, api) {
			if (window.leo.autoComplete) {
				window.leo.autoComplete(filter_id, term, callback);
			} else if (api) {
				$.get(api + encodeURIComponent(filter_id) + "/" + encodeURIComponent(term), function (result) {
					callback(result);
				});
			}
		},
		render: function render() {
			var that = this;
			return React.createElement(
				'div',
				null,
				React.createElement(
					'ul',
					{ className: 'leo-filters filters-wrapper active', 'data-leo-group': 'default' },
					this.state.timefilter ? React.createElement(Filter, {
						key: "filter-timeframe",
						ref: "filter-timeframe",
						locked: true,
						className: 'leo-timeframe-period',
						filter: {
							id: 'timeframe.d_date.id',
							comparison: 'between',
							value: this.state.timefilter,
							label: 'Period'
						},
						updateReportFilter: this.onTimeFrameChange,
						removeFilter: this.onTimeFrameDelete
					}) : false,
					this.state.timebreakdown ? React.createElement(Filter, {
						key: "filter-timeframe-breakdown",
						ref: "filter-timeframe-breakdown",
						locked: true,
						className: 'leo-timeframe-view-by',
						filter: {
							id: 'timeframe-visiblity',
							comparison: '=',
							value: this.state.timebreakdown,
							label: 'View By',
							singleChoice: true,
							checkboxes: {
							//"hour": this.state.timebreakdown=="hour",
								"day": this.state.timebreakdown == "day",
								"week": this.state.timebreakdown == "week",
								"month": this.state.timebreakdown == "month",
								"quarter": this.state.timebreakdown == "quarter",
								"year": this.state.timebreakdown == "year"
							}
						},
						updateReportFilter: this.onTimeBreakdownChange
					}) : false,
					this.state.filters.map(function (filter, i) {
						return React.createElement(Filter, {
							key: "filter-" + filter.id,
							ref: "filter-" + filter.id,
							locked: true,
							filter: filter,
							updateReportFilter: that.onFilterChange,
							removeFilter: that.onFilterDelete,
							autoComplete: that.autoComplete
						});
					})
				)
			);
		}
	});

},{"../../../js/views/report/filters/filter.jsx":846,"../actions/options.js":794,"../stores/options.js":822,"react":785}],827:[function(require,module,exports){
	'use strict';

	var moment = require('moment-timezone');

	module.exports = {
		post: function post(command, data, callback) {
			var l = {};
			if (!(typeof leo == 'undefined')) {
				l = leo || {};
			}

			data.timestamp = moment().tz(window.leo && window.leo.timezone ? window.leo.timezone : moment.tz.guess()).format();

			var config;
			if (l.postDefaults == "form") {
				config = { dataType: "json", contentType: "application/x-www-form-urlencoded", dataTransform: function dataTransform(d) {
					return d;
				}, cache: false };
			} else {
				config = $.extend({ dataType: "json", contentType: "application/json", dataTransform: JSON.stringify, cache: false }, l.postDefaults);
			}

			$.ajax({
				type: "post",
				data: config.dataTransform(data),
				cache: config.cache,
				url: window.apiEndpoint + command,
				dataType: config.dataType,
				contentType: config.contentType,
				error: function error(xhr, status, _error) {
					if (xhr.responseText) {
						xhr = xhr.responseText;
						try {
							xhr = JSON.parse(xhr);
						} catch (e) {
							xhr = { error: xhr };
						}
					}
					callback(xhr);
				},
				success: function success(res) {
					if (res.header) {
						callback(res.data);
					} else {
						if (command == 'report') {
							if (window.location.pathname.split('/').pop() == 'chart') {
								localStorage.setItem('VisualExplorer.hash', JSON.stringify(window.location.hash));
							}
						}
						callback(res);
					}
				}
			});
		}
	};

},{"moment-timezone":609}],828:[function(require,module,exports){
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var WebAPI = require('../utils/WebAPI');
	var LeoDispatcher = require('../dispatcher/LeoDispatcher');
	var LeoConstants = require('../constants/LeoConstants');
	var ActionTypes = LeoConstants.ActionTypes;
	var ReportUtils = require('../utils/ReportUtils');
	var ReportStore = require('../stores/ReportStore');
	var ReportFilterStore = require('../stores/ReportFilterStore');

	module.exports = {

		initReport: function initReport(reportData) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.INIT_REPORT,
				reportData: reportData
			});
		},

		repivot: function repivot() {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.REPORT_LOADING
			});

			var columnMetrics = [];
			var columnDims = ReportStore.getPartitions();
			var rowMetrics = ReportStore.getMetrics();
			var rowDims = ReportStore.getDimensions();
			var reportFilters = ReportFilterStore.getReportFilters();
			var sort = ReportStore.getSort();
			var top = ReportStore.getTopLimit();

			if (columnMetrics.length || rowMetrics.length) {

				var columns = columnDims.concat(columnMetrics);
				var rows = rowDims.concat(rowMetrics);

				var dimensions = columnDims.concat(rowDims);

				var apiData = ReportUtils.buildApiData(columns, rows, reportFilters, sort, dimensions, top);
				apiData.showMissingDims = ReportStore.getShowMissingDims();
				WebAPI.post("report", apiData, function (result) {

					//metric partition fix
					if (result.columnheaders) {
						var metricPartitions = [];
						result.columnheaders = result.columnheaders.reduce(function (columnheaders, columnheader) {
							if (columnheader.id.indexOf('!') !== -1) {
								var metricPartition = columnheader.id.split('!')[0];
								if (metricPartitions.indexOf(metricPartition) === -1) {
									metricPartitions.push(metricPartition);
									rows.forEach(function (row) {
										if ((typeof row === 'undefined' ? 'undefined' : _typeof(row)) == 'object') {
											if (row.id == metricPartition) {
												result.columns[metricPartition] = $.extend({}, result.columns[columnheader.id], row);
												columnheader.partitions = row.partitions;
											}
										}
									});
									columnheader.id = metricPartition;
									columnheaders.push(columnheader);
								}
							} else {
								columnheaders.push(columnheader);
							}
							return columnheaders;
						}, []);
					}
					//console.log('result', result)
					/* */

					if (result.filters && result.filters.length < reportFilters.length) {
						result.filters = reportFilters.map(function (filter) {
							for (var i = 0; i < result.filters.length; i++) {
								if (filter.id == result.filters[i].id) {
									return result.filters[i];
								}
							}
							return filter;
						});
					}

					if (Object.keys(result).length == 0) {
						result.error = 'An unknown error occurred';
					}

					LeoDispatcher.handleViewAction({
						type: ActionTypes.REPORT_LOADED,
						reportData: result
					});

					LeoDispatcher.handleViewAction({
						type: ActionTypes.INIT_REPORT_FILTERS,
						reportFilters: result.filters
					});
				});
			} else {

				LeoDispatcher.handleViewAction({
					type: ActionTypes.REPORT_LOADED,
					reportData: {}
				});
			}
		},

		repivotWithDelay: function repivotWithDelay() {
			var thisActionCreator = this;
			setTimeout(function () {
				thisActionCreator.repivot();
			}, 50);
		},

		updateColumnByIndex: function updateColumnByIndex(column_type, from, id, replace, remove_type) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.UPDATE_COLUMN_BY_INDEX,
				column_type: column_type,
				from: from,
				id: id,
				replace: replace,
				remove_type: remove_type
			});
		},

		removeColumnByIndex: function removeColumnByIndex(from, index) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.REMOVE_COLUMN_BY_INDEX,
				from: from,
				index: index
			});
		},

		updateColumn: function updateColumn(column_type, from, id, replace) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.UPDATE_COLUMN,
				column_type: column_type,
				from: from,
				id: id,
				replace: replace
			});
		},

		addDimension: function addDimension(to, position, dimension) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.ADD_DIMENSION,
				to: to,
				position: position,
				dimension: dimension
			});
		},

		removeDimension: function removeDimension(from, dimension) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.REMOVE_DIMENSION,
				from: from,
				dimension: dimension
			});
		},

		addMetric: function addMetric(to, position, metric) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.ADD_METRIC,
				to: to,
				position: position,
				metric: metric
			});
		},

		removeMetric: function removeMetric(from, metric) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.REMOVE_METRIC,
				from: from,
				metric: metric
			});
		},

		removeOtherMetrics: function removeOtherMetrics(index) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.REMOVE_OTHER_METRICS,
				index: index
			});
		},

		updateRowOrder: function updateRowOrder(dimOrder, metricOrder) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.UPDATE_ROW_ORDER,
				dimOrder: dimOrder,
				metricOrder: metricOrder
			});
		},

		updateColumnOrder: function updateColumnOrder(dimOrder, metricOrder) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.UPDATE_COLUMN_ORDER,
				dimOrder: dimOrder,
				metricOrder: metricOrder
			});
		},

		swapSortContainer: function swapSortContainer(from, type, id) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.SWAP_SORT_CONTAINER,
				from: from,
				tabType: type,
				id: id
			});
		},

		swapDimsInSortContainers: function swapDimsInSortContainers() {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.SWAP_DIMS_IN_SORT_CONTAINERS
			});
		},

		swapMetricsInSortContainers: function swapMetricsInSortContainers() {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.SWAP_METRICS_IN_SORT_CONTAINERS
			});
		},

		swapAllSortContainers: function swapAllSortContainers() {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.SWAP_ALL_SORT_CONTAINERS
			});
		},

		updateLimit: function updateLimit(limitAmount) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.UPDATE_LIMIT,
				limitAmount: limitAmount
			});
		},

		sort: function sort(column, order) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.SORT,
				column: column,
				order: order
			});
		}

	};

},{"../constants/LeoConstants":830,"../dispatcher/LeoDispatcher":833,"../stores/ReportFilterStore":835,"../stores/ReportStore":836,"../utils/ReportUtils":838,"../utils/WebAPI":840}],829:[function(require,module,exports){
	'use strict';

	var WebAPI = require('../utils/WebAPI');
	var LeoDispatcher = require('../dispatcher/LeoDispatcher');
	var LeoConstants = require('../constants/LeoConstants');
	var ActionTypes = LeoConstants.ActionTypes;

	var td = require("throttle-debounce");
	var ReportActions = require('./ReportActions');

	module.exports = {

		initReportFilters: function initReportFilters(reportFilters) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.INIT_REPORT_FILTERS,
				reportFilters: reportFilters
			});
		},

		addReportFilter: function addReportFilter(reportFilter) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.ADD_REPORT_FILTER,
				reportFilter: reportFilter
			});
		},

		removeReportFilter: function removeReportFilter(filterId) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.REMOVE_REPORT_FILTER,
				filterId: filterId
			});
		},

		updateReportFilter: function updateReportFilter(filterObject) {

			LeoDispatcher.handleViewAction({
				type: ActionTypes.UPDATE_REPORT_FILTER,
				filterObject: filterObject
			});
		},

		autocomplete: td.throttle(1000, function (field, term, callback) {

			if (arguments.length == 2) {
				callback = term;
				term = field;
				field = "*";
			}

			WebAPI.get("autocomplete/" + field + "/" + encodeURIComponent(term), function (result) {
				callback(result);
			});
		}),
		autocomplete2: function autocomplete2(field, term, callback) {

			if (arguments.length == 2) {
				callback = term;
				term = field;
				field = "*";
			}

			WebAPI.get("autocomplete/" + field + "/" + encodeURIComponent(term), function (result) {
				callback(result);
			});
		},

		search: td.throttle(1000, function (dimension, fields, term, callback) {
			dimension = dimension.replace(/^d_/, '');
			fields = fields || ['*'];
			WebAPI.get("search/" + encodeURIComponent(dimension) + "/" + encodeURIComponent(fields.join(';')) + "/" + encodeURIComponent(term), function (result) {
				callback(result);
			});
		})
	};

},{"../constants/LeoConstants":830,"../dispatcher/LeoDispatcher":833,"../utils/WebAPI":840,"./ReportActions":828,"throttle-debounce":787}],830:[function(require,module,exports){
	'use strict';

	var keyMirror = require('keymirror');

	module.exports = {

		ActionTypes: keyMirror({

			//Report
			INIT_REPORT: null,
			REPORT_LOADING: null,
			REPORT_LOADED: null,
			UPDATE_COLUMN: null,
			UPDATE_COLUMN_BY_INDEX: null,
			ADD_DIMENSION: null,
			REMOVE_DIMENSION: null,
			ADD_METRIC: null,
			REMOVE_METRIC: null,
			REMOVE_OTHER_METRICS: null,
			UPDATE_ROW_ORDER: null,
			UPDATE_COLUMN_ORDER: null,
			SWAP_SORT_CONTAINER: null,
			SWAP_ALL_SORT_CONTAINERS: null,
			SWAP_DIMS_IN_SORT_CONTAINERS: null,
			SWAP_METRICS_IN_SORT_CONTAINERS: null,
			SORT: null,
			UPDATE_LIMIT: null,

			//Report Filters
			INIT_REPORT_FILTERS: null,
			ADD_REPORT_FILTER: null,
			REMOVE_REPORT_FILTER: null,
			UPDATE_REPORT_FILTER: null,
			//UPDATE_REPORT_FILTER_VALUE: null,
			//UPDATE_REPORT_RANGE_FILTER_VALUE: null,
			//UPDATE_REPORT_FILTER_OPERATOR: null,

			//Fields
			INIT_FIELDS: null,
			FIND_QUICK_MATCHES: null,
			FIND_COMMON_DIMENSIONS: null,
			FIND_COMMON_FACTS: null,
			MODIFY_FIELD: null,
			ADD_FIELD: null,
			DELETE_FIELD: null,
			MODIFY_FIELD_DESCRIPTION: null,
			MODIFY_FIELD_LABEL: null

		}),

		PayloadSources: keyMirror({
			SERVER_ACTION: null,
			VIEW_ACTION: null
		})

	};

},{"keymirror":115}],831:[function(require,module,exports){
	'use strict';

	var read_cookie = function read_cookie(name, dfault) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') {
				c = c.substring(1, c.length);
			}if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return dfault;
	};

	var url_params = {};
	try {
		var mysearch = window.parent.location.search.replace("?", "").split("&");
	} catch (e) {
		var mysearch = '';
	}
	for (var i in mysearch) {
		if (mysearch[i] && mysearch[i].split) {
		//fixes a weird bug with a unique value on all objects
			var myParam = mysearch[i].split("=");
			if (myParam.length >= 1) {
				url_params[myParam[0]] = myParam[1];
			}
		}
	}

	module.exports = {
		apiEndpoint: "api/",
		liveVersion: '.1.10.1.',
		apiKey: '' || url_params['key'] || read_cookie('key')
	};

},{}],832:[function(require,module,exports){
	"use strict";

	var numeral = require("numeral");
	var moment = require("moment");

	module.exports = Object.freeze({
		get: function get(column, numberOnly) {
			if (!column || !column.format) {
				return this.base;
			}
			var type = column.format;
			if (!type && column.type === "metric") {
				type = "int";
			}
			if (column.id.match(/\|avg/)) {
				var newType = type + "avg";
				if (newType in this) {
					type = newType;
				}
			}

			if (numberOnly) {
				type = "n" + type;
				if (type in this) {
					return this[type];
				} else {
					return this.base;
				}
			} else {
				if (type in this) {
					return this[type];
				} else {
					return this.base;
				}
			}
		},
		base: function base(value) {
			return value;
		},
		float: function float(value) {
			var float = value / 1000;
			if (isNaN(float)) {
				float = 0;
			}
			return numeral(float).format('0,0.000');
		},
		nfloat: function nfloat(value) {
			var float = value / 1000;
			if (isNaN(float)) {
				float = 0;
			}
			return float;
		},
		money: function money(value) {
			var float = value / 100;
			if (isNaN(float)) {
				float = 0;
			}
			return numeral(float).format('($0,.00)');
		},
		nmoney: function nmoney(value) {
			var float = value / 100;
			if (isNaN(float)) {
				float = 0;
			}
			return float;
		},
		kgint: function kgint(value) {
			return Math.ceil(value / 1000 * 0.453592);
		},
		count: function count(value) {
			return numeral(value).format('0,0');
		},
		countavg: function countavg(value) {
			return numeral(value).format('0,0.00');
		},
		int: function int(value) {
			return numeral(value).format('0,0');
		},
		intavg: function intavg(value) {
			return numeral(value).format('0,0.00');
		},
		npercent: function npercent(value) {
			return value * 100;
		},
		percent: function percent(value) {
			return numeral(value).format('0.0%');
		},
		'duration-s': function durationS(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "seconds").humanize();
		},
		'duration-m': function durationM(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "minutes").humanize();
		},
		'duration-h': function durationH(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "hours").humanize();
		},
		'duration-d': function durationD(value) {
			if (value === null) {
				return null;
			}
			return moment.duration(value, "days").humanize();
		}
	});

},{"moment":611,"numeral":612}],833:[function(require,module,exports){
	'use strict';

	var LeoConstants = require('../constants/LeoConstants');
	var Dispatcher = require('flux').Dispatcher;
	var assign = require('object-assign');

	var PayloadSources = LeoConstants.PayloadSources;

	var LeoDispatcher = assign(new Dispatcher(), {

		/**
 *	@param {object} action
 *	The details of the action, including the action's type and additional data coming from the server.
 */
		handleServerAction: function handleServerAction(action) {

			if (typeof action.type !== 'string') throw new Error('action.type must be a string. Make sure your action exists in constants.');

			var payload = {
				source: PayloadSources.SERVER_ACTION,
				action: action
			};

			this.dispatch(payload);
		},

		/**
 *	@param {object} action
 *	The details of the action, including the action's type and additional data coming from the view.
 */
		handleViewAction: function handleViewAction(action) {

			if (typeof action.type !== 'string') throw new Error('action.type must be a string. Make sure your action exists in constants.');

			var payload = {
				source: PayloadSources.VIEW_ACTION,
				action: action
			};

			this.dispatch(payload);
		}

	});

	module.exports = LeoDispatcher;

},{"../constants/LeoConstants":830,"flux":61,"object-assign":613}],834:[function(require,module,exports){
	'use strict';

	var LeoDispatcher = require('../dispatcher/LeoDispatcher');
	var LeoConstants = require('../constants/LeoConstants');
	var EventEmitter = require('events').EventEmitter;
	var assign = require('object-assign');
	var ActionTypes = LeoConstants.ActionTypes;
	var CHANGE_EVENT = 'change';

	var ReportStore = require('./ReportStore');

	var _dimensions = [];
	var _facts = [];
	var _quickFilters = [];
	var _factColumnLookup = {};
	var _dimensionColumnLookup = {};
	var _matches = [];
	var _commonDimensions = [];
	var _commonFacts = [];
	var _dimsById = {};
	var _autoFilters = {};

	var _columnLookup = {};

	var FieldsStore = assign({}, EventEmitter.prototype, {

		getColumnDetails: function getColumnDetails(id) {
			return _columnLookup[id];
		},

		getFieldDimensions: function getFieldDimensions() {
			return _dimensions;
		},

		getFieldFacts: function getFieldFacts() {
			return _facts;
		},

		getCommonFacts: function getCommonFacts() {
			return _commonFacts;
		},

		getMatches: function getMatches() {
			return _matches;
		},

		getCommonDimensions: function getCommonDimensions() {
			return _commonDimensions;
		},

		deleteCommonDimensions: function deleteCommonDimensions() {
		//Common dimensions and common facts are alwasy going to be deleted together, so take care of both here:
			_commonDimensions = [];
			_commonFacts = [];
			this.emitChange();
		},

		getDimensionColumnLookup: function getDimensionColumnLookup() {
			return _dimensionColumnLookup;
		},

		emitChange: function emitChange() {
			this.emit(CHANGE_EVENT);
		},

		addChangeListener: function addChangeListener(callback) {
			this.on(CHANGE_EVENT, callback);
		},

		removeChangeListener: function removeChangeListener(callback) {
			this.removeListener(CHANGE_EVENT, callback);
		},

		getAutoFilters: function getAutoFilters(fact) {
			return _autoFilters[fact];
		},

		searchFields: function searchFields(which, table, contains) {

			if (table && !contains) {
				if (which == 'dimension' || which == 'both' || which == 'filter') {
					if (table in _dimensionColumnLookup) {
						return _dimensionColumnLookup[table].attributes;
					}
				}

				if (which == 'metric' || which == 'both' || which == 'filter') {
					if (table in _factColumnLookup) {
						return _factColumnLookup[table].metrics;
					}
				}

				if (which == 'fact') {
					if (table in _factColumnLookup) {
						return [{ id: _factColumnLookup[table].id, label: _factColumnLookup[table].label, type: 'fact' }];
					}
				}
			}

			var foundColumns = [],
		    preferredColumns = [];

			contains = contains ? contains.split('|')[0] : false;
			contains = contains ? $.trim(contains).split(' ') : [];

			if (which == 'dimension' || which == 'both' || which == 'filter') {
				var dimensions = _commonDimensions.length > 0 ? _commonDimensions : _dimensions;

				for (var i = 0; i < dimensions.length; i++) {
					var dimension = dimensions[i];

					//make a copy
					var attributes = JSON.parse(JSON.stringify(dimension.attributes));

					if (which == 'filter' && dimension.id && dimension.id.indexOf('d_date') > -1) {
						attributes.unshift({
							id: dimension.id + '.id',
							kind: 'date_range',
							label: 'Date Range',
							parent: {
								id: dimension.id,
								label: dimension.label
							}
						});
					}

					if (dimension.has_outrigger) {
						for (var j = 0; j < dimension.outriggers.length; j++) {
							var outrigger = dimension.outriggers[j];
							if (which == 'filter' && outrigger.id && outrigger.id.indexOf('d_date') > -1) {
								attributes.unshift({
									id: outrigger.id + '.id',
									kind: 'date_range',
									label: 'Date Range',
									parent: {
										id: outrigger.id,
										label: outrigger.label
									}
								});
							}
							for (var k = 0; k < outrigger.attributes.length; k++) {
								attributes.push({
									id: outrigger.attributes[k].id,
									label: outrigger.attributes[k].label,
									parent: {
										id: outrigger.id,
										label: outrigger.label
									}
								});
							}
						}
					}

					for (var j = 0; j < attributes.length; j++) {
						var attribute = attributes[j];
						var passed = contains.every(function (value) {
							return ((attribute.parent.id || dimension.id) + '.' + attribute.id + ' ' + (attribute.parent.label || dimension.label) + ' ' + attribute.label + (attribute.description ? ' ' + attribute.description : '')).toLowerCase().indexOf(value.toLowerCase()) != -1;
						});
						if (passed) {
							if (!attribute.parent) {
								attribute.parent = {
									id: dimension.id,
									label: dimension.label
								};
							}

							if (contains.length > 1 && ((attribute.label + ' ' + (attribute.parent.label || dimension.label)).toLowerCase() == contains.join(' ').toLowerCase() || ((attribute.parent.label || dimension.label) + ' ' + attribute.label).toLowerCase() == contains.join(' ').toLowerCase())) {
								preferredColumns.unshift(attribute);
							} else if (contains.length == 1 && (attribute.parent.label || dimension.label).toLowerCase() == contains[0].toLowerCase()) {
								preferredColumns.push(attribute);
							} else if (table == attribute.parent.id) {
								preferredColumns.push(attribute);
							} else {

								var preferred = contains.length > 1 && contains.some(function (value) {
									return (attribute.parent.label || dimension.label).toLowerCase().indexOf(value.toLowerCase()) != -1 && attribute.label.toLowerCase().indexOf(value.toLowerCase()) != -1;
								});

								if (preferred) {
									preferredColumns.push(attribute);
								} else {
									foundColumns.push(attribute);
								}
							}
						}
					}
				}
			}

			if (which == 'date') {
				var dimensions = _commonDimensions.length > 0 ? _commonDimensions : _dimensions;
				for (var i = 0; i < dimensions.length; i++) {
					var dimension = dimensions[i];
					if (dimension.id && dimension.id.indexOf('d_date') !== -1) {
						var passed = contains.every(function (value) {
							return dimension.label.toLowerCase().indexOf(value.toLowerCase()) != -1;
						});
						if (passed) {
							foundColumns.push({ id: dimension.id, label: dimension.label, type: 'dimension' });
						}
					}
					if (dimension.has_outrigger) {
						for (var j = 0; j < dimension.outriggers.length; j++) {
							var outrigger = dimension.outriggers[j];
							if (outrigger.id && outrigger.id.indexOf('d_date') !== -1) {
								var passed = contains.every(function (value) {
									return outrigger.label.toLowerCase().indexOf(value.toLowerCase()) != -1;
								});
								if (passed) {
									foundColumns.push({ id: outrigger.id, label: outrigger.label, type: 'dimension' });
								}
							}
						}
					}
				}
			}

			if (which == 'metric' || which == 'both' || which == 'filter') {
				for (var i = 0; i < _facts.length; i++) {
					var fact = _facts[i];

					//make a copy
					var metrics = JSON.parse(JSON.stringify(fact.metrics));

					if (which == 'metric') {
						metrics.unshift({
							id: fact.id + '|count',
							type: 'metric',
							label: 'Count',
							kind: 'fact',
							parent: {
								id: fact.id,
								label: fact.label
							}
						});
					}

					for (var j = 0; j < metrics.length; j++) {
						var metric = metrics[j];
						var passed = contains.every(function (value) {
							return (fact.id + '.' + metric.id + ' ' + fact.label + ' ' + metric.label + (metric.description ? ' ' + metric.description : '')).toLowerCase().indexOf(value.toLowerCase()) != -1;
						});
						if (passed && metric.type == 'metric') {
							if (!metric.parent) {
								metric.parent = {
									id: fact.id,
									label: fact.label
								};
							}
							if (table == metric.parent.id) {
								preferredColumns.push(metric); //will never happen, but oh well
							} else {
								var preferred = contains.length > 1 && contains.some(function (value) {
									return fact.label.toLowerCase().indexOf(value.toLowerCase()) != -1 && metric.label.toLowerCase().indexOf(value.toLowerCase()) != -1;
								});
								if (preferred) {
									preferredColumns.push(metric);
								} else {
									foundColumns.push(metric);
								}
							}
						}
					}
				}
			}

			if (which == 'fact') {
				for (var i = 0; i < _facts.length; i++) {
					var fact = _facts[i];

					var passed = contains.every(function (value) {
						return fact.label.toLowerCase().indexOf(value.toLowerCase()) != -1;
					});
					if (passed) {
						foundColumns.push({ id: fact.id, label: fact.label, type: 'fact' });
					}
				}
			}

			return preferredColumns.concat(foundColumns);
		}

	});

	FieldsStore.dispatchToken = LeoDispatcher.register(function (payload) {
		var isVirtual = false;
		var action = payload.action;
		switch (action.type) {
		case ActionTypes.INIT_FIELDS:
			initFields(action.result);
			FieldsStore.emitChange();
			break;

		case ActionTypes.FIND_QUICK_MATCHES:
			findQuickMatches(action.term);
			FieldsStore.emitChange();
			break;

		case ActionTypes.FIND_COMMON_DIMENSIONS:
			var old = JSON.stringify(_commonDimensions);
			findCommonDimensions(action.metrics);
			if (old != JSON.stringify(_commonDimensions)) {
				FieldsStore.emitChange();
			}
			break;

		case ActionTypes.FIND_COMMON_FACTS:
			var old = JSON.stringify(_commonFacts);
			findCommonFacts(action.dims);
			if (old != JSON.stringify(_commonFacts)) {
				FieldsStore.emitChange();
			}
			break;

		case ActionTypes.MODIFY_FIELD:

			var values = action.put;

			switch (action.fieldType) {
			case 'fact':
				var facts = _facts;
				for (var i = 0; i < facts.length; i++) {
					var fact = facts[i];
					if (fact.id == values.id) {
						fact.label = values.label;
						fact.description = values.description;
					}
					facts[i] = fact;
				}
				_facts = facts;
				break;

			case 'metric':
				var facts = _facts;
				for (var i = 0; i < facts.length; i++) {
					var fact = facts[i];
					for (var j = 0; j < fact.metrics.length; j++) {
						var metric = fact.metrics[j];
						if (metric.id == values.id) {
							metric.label = values.label;
							metric.description = values.description;
							metric.format = values.format;
							fact.metrics[j] = metric;
						}
					}
					facts[i] = fact;
				}
				_facts = facts;
				break;

			case 'dimension':
				var dimensions = _dimensions;
				for (var i = 0; i < dimensions.length; i++) {
					var dimension = dimensions[i];
					if (dimension.id == values.id) {
						dimension.label = values.label;
						dimension.description = values.description;
						dimension.format = values.format;
						dimension.sort = values.sort || '';
						dimension.color = values.color || undefined;
					}
					for (var j = 0; j < dimension.attributes.length; j++) {
						var attribute = dimension.attributes[j];
						if (attribute.id == values.id) {
							attribute.label = values.label || '';
							attribute.description = values.description || '';
							attribute.format = values.format || '';
							attribute.sort = values.sort || '';
							attribute.color = values.color || undefined;
							dimension.attributes[j] = attribute;
						}
					}
					dimensions[i] = dimension;
				}
				_dimensions = dimensions;
				break;
			}
			//ReportActions.repivot();
			FieldsStore.emitChange();
			break;

		case ActionTypes.ADD_FIELD:

			var calcs = action.put;
			var type = action.fieldType;

			delete calcs.apikey;
			delete calcs.uid;

			switch (type) {
			default:
			case 'metric':
				var facts = _facts;
				for (var i = 0; i < facts.length; i++) {
					var fact = facts[i];
					for (var id in calcs) {
						if (id == fact.id) {
							var virtual = calcs[id].put;
							fact.metrics.push(virtual);
							isVirtual = true;
						}
					}
					facts[i] = fact;
				}
				_facts = facts;

				break;

			case 'dimension':
				var dimensions = _dimensions;
				dimensions = dimensions.map(function (dimension) {
					for (var id in calcs) {
						if (id.split('.')[0] == dimension.id) {
							dimension.attributes.push(calcs[id].put);
						}
					}
					return dimension;
				});
				_dimensions = dimensions;

				break;
			}

			FieldsStore.emitChange();
			break;

		case ActionTypes.DELETE_FIELD:

			var id = action.id;

			var facts = _facts;
			for (var i = 0; i < facts.length; i++) {
				var fact = facts[i];
				fact.metrics = fact.metrics.filter(function (metric) {
					if (metric.id == id) {
						return false;
					} else if (metric.calculations) {
						metric.calculations = metric.calculations.filter(function (calculation) {
							if (calculation.id == id) {
								return false;
							}
							return true;
						});
					}
					return true;
				});
			}

			var dimensions = _dimensions;
			dimensions = dimensions.map(function (dimension) {
				dimension.attributes = dimension.attributes.filter(function (attribute) {
					return attribute.id != id;
				});
				return dimension;
			});

			FieldsStore.emitChange();

			break;

		default:
		//do nothing
		}
	});

	module.exports = FieldsStore;

	function initFields(result) {

		if (result.errorMessage) {
			LeoKit.alert('Error loading fields: ' + result.errorMessage, 'error');
			return;
		}

		_dimensions = [];
		_facts = [];
		_dimensionColumnLookup = {};

		var outriggerLookup = {};

		$.each(result.dimension, function (i, dim) {

			dim.attributes.sort(function (a, b) {
				if (a.label.toLowerCase() == 'id') return -1;if (b.label.toLowerCase() == 'id') return 1;return a.label.localeCompare(b.label);
			});

			dim.outriggers = [];

			dim.is_date = !!(dim.attributes && dim.attributes[0] && dim.attributes[0].quickFilters);

			_dimensions.push(dim);
			_dimensionColumnLookup[dim.id] = dim;
			_dimsById[dim.id] = dim.label;

			for (var alias in dim.aliases) {
				_dimsById[alias] = dim.aliases[alias];
				if (_dimensionColumnLookup[alias]) {
					continue;
				}

				var newDim = $.extend(true, {}, dim);

				for (var i = 0; i < newDim.attributes.length; i++) {
					newDim.attributes[i].id = alias + "." + newDim.attributes[i].id;
				}

				newDim.label = dim.aliases[alias];
				newDim.id = alias + "." + newDim.id;

				newDim.is_alias = true;

				$.each(newDim.attributes, function (i, attribute) {
					attribute.parent = {
						label: newDim.label,
						id: newDim.id
					};

					_columnLookup[attribute.id] = attribute;
				});

				_dimensionColumnLookup[alias] = newDim;
				_dimensionColumnLookup[newDim.id] = newDim;
				_dimensions.push(newDim);
			}

			$.each(dim.attributes, function (i, attribute) {

				attribute.is_date = dim.is_date;

				attribute.parent = {
					label: dim.label,
					id: dim.id
				};

				_columnLookup[attribute.id] = attribute;

				if (attribute.quickFilters) {
					for (var i = 0; i < attribute.quickFilters.length; i++) {
						_quickFilters.push({
							value: attribute.quickFilters[i],
							match: attribute.quickFilters[i].toLowerCase(),
							attribute: attribute.id
						});
					}
				}
			});
		});

		_dimensions.sort(function (a, b) {
			return a.label.localeCompare(b.label);
		});

		/* outriggers */
		for (var i = 0; i < _dimensions.length; i++) {
			var dimension = _dimensions[i];
			for (var index in dimension.dimensions) {
				if (_dimensionColumnLookup[dimension.dimensions[index]]) {
					var outrigger = JSON.parse(JSON.stringify(_dimensionColumnLookup[dimension.dimensions[index]]));
					outrigger.label = dimension.label + ' ' + outrigger.label;
					outrigger.id = dimension.id + '$' + outrigger.id;
					outrigger.is_outrigger = true;

					var aliases = [];
					for (var j in outrigger.aliases) {
						aliases[dimension.id + '$' + j] = outrigger.aliases[j];
					}
					outrigger.aliases = aliases;

					for (var j = 0; j < outrigger.attributes.length; j++) {
						outrigger.attributes[j].id = dimension.id + '$' + outrigger.attributes[j].id;
						outrigger.attributes[j].parent.label = dimension.label + ' ' + outrigger.attributes[j].parent.label;

						_columnLookup[outrigger.attributes[j].id] = outrigger.attributes[j];
					}

					if (!dimension.outriggers) {
						dimension.outriggers = [];
					}

					dimension.outriggers.push(outrigger);

					dimension.outriggers.sort(function (a, b) {
						return a.label.localeCompare(b.label);
					});

					dimension.has_outrigger = true;

					if (!outriggerLookup[dimension.id]) {
						outriggerLookup[dimension.id] = [];
					}
					outriggerLookup[dimension.id].push(outrigger.id);
					_dimensionColumnLookup[outrigger.id] = outrigger;
				}
			}
		}

		$.each(result.fact, function (i, fact) {
			$.each(fact.dimensions, function (j, dim) {
				if (dim in outriggerLookup) {
					$.each(outriggerLookup[dim], function (k, outrigger) {
						fact.dimensions.push(outrigger);
					});
				}
			});

			$.each(fact.dimensions, function (j, dim) {
				if (_dimensionColumnLookup[dim] && !!_dimensionColumnLookup[dim].laggable) {
					fact.metrics.push({
						calculations: [],
						id: _dimensionColumnLookup[dim].id,
						label: _dimensionColumnLookup[dim].label,
						type: 'lag'
					});
				}
			});

			_autoFilters[fact.id] = fact.autoFilters;

			_facts.push(fact);
			$.each(fact.metrics, function (j, metric) {
				if (metric.type == 'field') {
				//rocksolid fix
					metric.type = 'metric';
				}
				metric.parent = {
					label: fact.label,
					id: fact.id
				};

				_columnLookup[metric.id] = metric;

				_factColumnLookup[metric.id] = fact;
			});

			fact.metrics.sort(function (a, b) {
				if (a.label == a.parent.label) {
					return -1;
				}
				if (b.label == b.parent.label) {
					return 1;
				}
				return a.label.localeCompare(b.label);
			});
		});

		_facts.sort(function (a, b) {
			return a.label.localeCompare(b.label);
		});
	}

	function findQuickMatches(term) {
		_matches = [];

		for (var i = 0; i < _quickFilters.length; i++) {
			if (_quickFilters[i].match.indexOf(term) == 0) {
				_matches.push(_quickFilters[i]);
			}
		}
	}

	function findCommonDimensions(metrics) {
		var metricCount = 0;
		var tempCommon = {};
		for (var i = 0; i < metrics.length; i++) {

			if (typeof metrics[i] == 'string') {
				var metric = metrics[i].split(/(\.[cw]_|\|)/)[0];
				metricCount++;

				if (metric in _factColumnLookup) {
					var dims = _factColumnLookup[metric].dimensions;
					for (var x = 0; x < dims.length; x++) {
						if (!(dims[x] in tempCommon)) {
							tempCommon[dims[x]] = 1;
						} else {
							tempCommon[dims[x]]++;
						}
					}
				} else {
				//Is this a dimension?
					var tmpfacts = findCommonFacts([metric], true);
					metricCount += tmpfacts.length - 1;
					for (var j = 0; j < tmpfacts.length; j++) {
						var dims = _factColumnLookup[tmpfacts[j]].dimensions;
						for (var x = 0; x < dims.length; x++) {
							if (!(dims[x] in tempCommon)) {
								tempCommon[dims[x]] = 1;
							} else {
								tempCommon[dims[x]]++;
							}
						}
					}
				}
			}
		}

		_commonDimensions = [];
		for (var dim in tempCommon) {
			if (tempCommon[dim] >= metricCount) {
				var name = dim.toLowerCase();
				if (name in _dimensionColumnLookup && !_dimensionColumnLookup[name].is_outrigger) {
					_commonDimensions.push(_dimensionColumnLookup[name]);
				}
			}
		}

		_commonDimensions.sort(function (a, b) {
			return a.label.localeCompare(b.label);
		});
	}

	function findCommonFacts(rawmetrics, returnInstead) {
		_commonFacts = [];
		var metrics = [];
		var returnVal = [];
		for (var i in rawmetrics) {
		//var mymetric =
			metrics.push(_dimsById[rawmetrics[i].split(/(\.|\|)/)[0]]);
		}
		for (var i in _facts) {
			var fact = _facts[i];
			var canAdd = true;
			for (var j in metrics) {
				if (fact.dimensions.indexOf(metrics[j]) == -1) canAdd = false;
			}
			if (canAdd) {
				if (!returnInstead) _commonFacts.push(fact);
				returnVal.push(fact.id);
			}
		}
		return returnVal;
	}

},{"../constants/LeoConstants":830,"../dispatcher/LeoDispatcher":833,"./ReportStore":836,"events":9,"object-assign":613}],835:[function(require,module,exports){
	'use strict';

	var LeoDispatcher = require('../dispatcher/LeoDispatcher');
	var LeoConstants = require('../constants/LeoConstants');
	var EventEmitter = require('events').EventEmitter;
	var assign = require('object-assign');
	var ActionTypes = LeoConstants.ActionTypes;
	var CHANGE_EVENT = 'change';

	var FieldsStore = require('./FieldsStore');

	var _reportFilters = [];

	var ReportFilterStore = assign({}, EventEmitter.prototype, {

		updateReportFilter: function updateReportFilter(filterObject) {
			_updateReportFilter(filterObject);
		},

		getReportFilters: function getReportFilters() {
			return _reportFilters;
		},

		emitChange: function emitChange() {
			this.emit(CHANGE_EVENT);
		},

		addChangeListener: function addChangeListener(callback) {
			this.on(CHANGE_EVENT, callback);
		},

		removeChangeListener: function removeChangeListener(callback) {
			this.removeListener(CHANGE_EVENT, callback);
		}

	});

	ReportFilterStore.dispatchToken = LeoDispatcher.register(function (payload) {
		var action = payload.action;
		switch (action.type) {
		case ActionTypes.INIT_REPORT_FILTERS:
			if (action.reportFilters) {
				for (var i = 0; i < action.reportFilters.length; i++) {
					if (!action.reportFilters[i].checkboxes) {
						action.reportFilters[i].checkboxes = [];
					}
					//there can only be one underscore
					for (var j in action.reportFilters[i].checkboxes) {
						if (j.charCodeAt(0) == 95 || j.charCodeAt(0) == 8203) {
							delete action.reportFilters[i].checkboxes[j];
						}
					}
					action.reportFilters[i].checkboxes['_'] = false; //prevent object becoming array
					if (action.reportFilters[i].description) {
						action.reportFilters[i].value = [action.reportFilters[i].description];
						delete action.reportFilters[i].description;
					}
					if (typeof action.reportFilters[i].value == 'string') {
						action.reportFilters[i].value = [action.reportFilters[i].value];
					}
				}
				_reportFilters = action.reportFilters;
			} else {
				_reportFilters = [];
			}
			ReportFilterStore.emitChange();
			break;

		case ActionTypes.ADD_REPORT_FILTER:
			addReportFilter(action.reportFilter);
			ReportFilterStore.emitChange();
			break;

		case ActionTypes.REMOVE_REPORT_FILTER:
			removeReportFilter(action.filterId);
			ReportFilterStore.emitChange();
			break;

		case ActionTypes.UPDATE_REPORT_FILTER:
			_updateReportFilter(action.filterObject);
			ReportFilterStore.emitChange();
			break;

		default:
			//do nothing
			break;
		}
	});

	module.exports = ReportFilterStore;

	function addReportFilter(filter) {

		//When we add filters we need to fill in the missing information
		//that is normally added by the report data. This fills in the labels for the UI.
		var commonDimensions = FieldsStore.getCommonDimensions();

		//for each dimension
		for (var i = 0; i < commonDimensions.length; i++) {

			//for each attribute in the dimension
			for (var j = 0; j < commonDimensions[i].attributes.length; j++) {

				//if the ids match.....assign, break, and set the found flag
				if (commonDimensions[i].attributes[j].id == filter.id) {
					filter.label = commonDimensions[i].attributes[j].label;
					var found = true;
					break;
				}
			}

			if (found) {
				filter.dimension = commonDimensions[i].label;
				break;
			}
		}

		_reportFilters.push(filter);
	}

	function removeReportFilter(filterId) {

		for (var i = 0; i < _reportFilters.length; i++) {
			if (_reportFilters[i].id == filterId) {
				_reportFilters.splice(i, 1);
				break;
			}
		}
	}

	/* add and update together */
	function _updateReportFilter(filterObject) {
		var found = false;

		_reportFilters = _reportFilters.map(function (filter) {
			if (filter.id == filterObject.id) {
				found = true;
				filter.value = filterObject.value;
				if (!Array.isArray(filter.value)) {
					if (filter.value === '') {
						filter.value = [];
					} else {
						filter.value = [filter.value];
					}
				}
				if (filter.value[0] == '') {
					filter.value.shift();
				}
				filter.checkboxes = filterObject.checkboxes;
				if (filterObject.comparison) {
					filter.comparison = filterObject.comparison;
				}
			}

			return filter;
		});

		if (!found) {
			_reportFilters.push(filterObject);
		}
	}

},{"../constants/LeoConstants":830,"../dispatcher/LeoDispatcher":833,"./FieldsStore":834,"events":9,"object-assign":613}],836:[function(require,module,exports){
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var LeoDispatcher = require('../dispatcher/LeoDispatcher');
	var LeoConstants = require('../constants/LeoConstants');
	var EventEmitter = require('events').EventEmitter;
	var assign = require('object-assign');
	var ActionTypes = LeoConstants.ActionTypes;
	var CHANGE_EVENT = 'change';

	var Format = require('../data/format.js');
	var FieldsStore = require('./FieldsStore');
	var ReportFilterStore = require('./ReportFilterStore');

	var _columnDims = [];
	var _columnMetrics = [];
	var _rowDims = [];
	var _rowMetrics = [];
	var _isLocked = false;
	var _isLoading = true;

	var _columnHeaders = [];
	var _columns = [];
	var _headers = [];
	var _rowHeaders = [];
	var _rows = [];
	var _allRows = [];
	var _showMissingDims = [];

	var _sortVars = [];
	var _sorted = {};
	var _limitAmount = 2000;

	var _error = '';

	var _advanced = undefined;
	var _chart_id = undefined;

	var ReportStore = assign({}, EventEmitter.prototype, {

		getLastError: function getLastError() {
			var error = _error;
			_error = '';
			return error;
		},

		getReportData: function getReportData() {
			return {
				columnDims: _columnDims,
				columnMetrics: _columnMetrics,
				rowDims: _rowDims,
				rowMetrics: _rowMetrics,
				locked: _isLocked,
				showMissingDims: _showMissingDims,

				columns: _columns,
				columnheaders: _columnHeaders,
				rowheaders: _rowHeaders,
				headers: _headers,
				rows: _rows
			};
		},

		getPartitions: function getPartitions() {
			return _columnDims;
		},

		getDimensions: function getDimensions() {
			return _rowDims;
		},

		getMetrics: function getMetrics() {
			if (_columnMetrics.length) return _columnMetrics;
			return _rowMetrics;
		},

		getColumnHeaders: function getColumnHeaders() {
			return _columnHeaders;
		},

		getColumns: function getColumns() {
			return _columns;
		},

		getRowHeaders: function getRowHeaders() {
			return _rowHeaders;
		},

		getHeaders: function getHeaders() {
			return _headers;
		},

		getRows: function getRows() {
			return _rows;
		},

		getShowMissingDims: function getShowMissingDims() {
			return _showMissingDims;
		},

		getLockedStatus: function getLockedStatus() {
			return _isLocked;
		},

		getLoadingStatus: function getLoadingStatus() {
			return _isLoading;
		},

		exportData: function exportData(use_tabs) {
			return formatDataForExport(use_tabs);
		},

		emitChange: function emitChange() {
			this.emit(CHANGE_EVENT);
		},

		addChangeListener: function addChangeListener(callback) {
			this.on(CHANGE_EVENT, callback);
		},

		removeChangeListener: function removeChangeListener(callback) {
			this.removeListener(CHANGE_EVENT, callback);
		},

		getSortWithColumnNames: function getSortWithColumnNames() {
			var columns = _rowDims.concat(_rowMetrics);
			if (_sortVars.length) {
				var sort = [];
				for (var i in _sortVars) {
					if (_sortVars[i] && _sortVars[i].column) {
						var columnNum = parseInt(_sortVars[i].column);
						if (columnNum >= _rowDims.length) {
							var columnName = _rowMetrics[(columnNum - _rowDims.length) % _rowMetrics.length]; //sort by metric
						} else {
							var columnName = _rowDims[columnNum];
						}
						sort.push({
							column: columnName,
							direction: _sortVars[i].direction,
							auto: _sortVars[i].auto
						});
					}
				}
				return sort;
			} else {
				return {};
			}
		},

		getSort: function getSort() {
		//delete sort when sorted column is deleted
			_sortVars = _sortVars.filter(function (sort) {
				return typeof sort.column != 'undefined' && !(sort.column >= _rowDims && sort.auto);
			});

			if (_sortVars.length) {
				var existingSorts = _sortVars.map(function (sort) {
					return sort.column;
				});
				var sorts = _sortVars.concat(_rowDims.map(function (id, index) {
					return {
						column: index,
						direction: 'asc',
						auto: true
					};
				}).filter(function (c) {
					return existingSorts.indexOf(c.column) == -1;
				}));
			} else {
				var sorts = _rowDims.map(function (id, index) {
					return {
						column: index,
						direction: 'asc',
						auto: true
					};
				});
			}
			return sorts;
		},

		getSorted: function getSorted() {
			return _sorted;
		},

		getLimit: function getLimit() {
			return _limitAmount || 2000;
		},

		getLimitLabel: function getLimitLabel() {
			if (_sortVars[0]) {
				var sort_column_index = _sortVars[0].column;
				if (sort_column_index < _rowDims.length) {
					var column_id = _rowDims[sort_column_index];
				} else if (_columnDims.length > 0) {
					var column_id = _rowMetrics[(sort_column_index - _rowDims.length) % _rowMetrics.length];
				} else {
					var column_id = _rowMetrics[_rowMetrics.length - 1];
				}
				if ((typeof column_id === 'undefined' ? 'undefined' : _typeof(column_id)) == 'object' && column_id.id) {
					column_id = column_id.id;
				}
				var column = FieldsStore.getColumnDetails((column_id + '|').split('|')[0]);
				return column ? column.parent.label + ' ' + column.label : column_id;
			}
		},

		getTopLimit: function getTopLimit() {
			var field = '';
			var direction = '';
			var filters = [];

			if (_sortVars[0]) {
				direction = _sortVars[0].direction;
				var sort_column_index = _sortVars[0].column;
				if (sort_column_index < _rowDims.length) {
					field = _rowDims[sort_column_index];
				} else if (_columnDims.length > 0) {
					field = _rowMetrics[(sort_column_index - _rowDims.length) % _rowMetrics.length];
					_headers.map(function (headers) {
						if (headers[0].id != field && typeof headers[0].value !== 'undefined') {
							var header = headers[Math.floor((sort_column_index - _rowDims.length) / headers[0].span)] || {};
							filters.push({
								id: header.id,
								value: header.value
							});
						}
					});
				} else {
					field = _rowMetrics[_rowMetrics.length - 1];
				}
			}

			if ((typeof field === 'undefined' ? 'undefined' : _typeof(field)) == 'object' && field.id) {
				field = field.id;
			}

			return {
				limit: this.getLimit(),
				field: field || undefined,
				direction: direction || undefined,
				filters: filters.length == 0 ? undefined : filters
			};
		},

		getChartId: function getChartId() {
			return _chart_id;
		},

		getAdvanced: function getAdvanced() {
			return _advanced;
		},

		setAdvanced: function setAdvanced(advanced) {
			if (advanced.chart_id) {
				_chart_id = advanced.chart_id;
				delete advanced.chart_id;
			}
			_advanced = advanced;
		},

		setData: function setData(data) {
			_rowHeaders = data.rowheaders || [];
			_columns = data.columns || {};
			_columnHeaders = data.columnheaders || [];
			_headers = data.header || [];
			_allRows = data.rows || [];
		}

	});

	ReportStore.dispatchToken = LeoDispatcher.register(function (payload) {
		var action = payload.action;

		switch (action.type) {
		case ActionTypes.INIT_REPORT:
			_isLoading = true;
			assignInitialReportData(action.reportData);
			ReportStore.emitChange();
			break;

		case ActionTypes.REPORT_LOADING:
			_isLoading = true;
			ReportStore.emitChange();
			break;

		case ActionTypes.REPORT_LOADED:
			assignReportData(action.reportData);
			_isLoading = false;
			ReportStore.emitChange();
			break;

		case ActionTypes.UPDATE_COLUMN_BY_INDEX:
			_isLoading = true;
			updateColumnByIndex(action.column_type, action.from, action.id, action.replace, action.remove_type);
			ReportStore.emitChange();
			break;

		case ActionTypes.UPDATE_COLUMN:
			_isLoading = true;
			updateColumn(action.column_type, action.from, action.id, action.replace);
			ReportStore.emitChange();
			break;

		case ActionTypes.ADD_DIMENSION:
			_isLoading = true;
			addDimension(action.to, action.position, action.dimension);
			ReportStore.emitChange();
			break;

		case ActionTypes.REMOVE_DIMENSION:
			_isLoading = true;
			removeDimension(action.from, action.dimension);
			ReportStore.emitChange();
			break;

		case ActionTypes.ADD_METRIC:
			_isLoading = true;
			addMetric(action.to, action.position, action.metric);
			ReportStore.emitChange();
			break;

		case ActionTypes.REMOVE_OTHER_METRICS:
			_isLoading = true;
			removeOtherMetrics(action.index);
			ReportStore.emitChange();
			break;

		case ActionTypes.REMOVE_METRIC:
			_isLoading = true;
			removeMetric(action.from, action.metric);
			ReportStore.emitChange();
			break;

		case ActionTypes.UPDATE_ROW_ORDER:
			_isLoading = true;
			updateRowOrder(action.dimOrder, action.metricOrder);
			ReportStore.emitChange();
			break;

		case ActionTypes.UPDATE_COLUMN_ORDER:
			_isLoading = true;
			updateColumnOrder(action.dimOrder, action.metricOrder);
			ReportStore.emitChange();
			break;

		case ActionTypes.SWAP_SORT_CONTAINER:
			_isLoading = true;
			swapSortContainer(action.from, action.tabType, action.id);
			ReportStore.emitChange();
			break;

		case ActionTypes.SWAP_ALL_SORT_CONTAINERS:
			_isLoading = true;
			swapAllSortContainers();
			ReportStore.emitChange();
			break;

		case ActionTypes.SWAP_DIMS_IN_SORT_CONTAINERS:
			_isLoading = true;
			swapDimsInSortContainers();
			ReportStore.emitChange();
			break;

		case ActionTypes.SWAP_METRICS_IN_SORT_CONTAINERS:
			_isLoading = true;
			swapMetricsInSortContainers();
			ReportStore.emitChange();
			break;

		case ActionTypes.SORT:
			_sortVars = [{
				column: action.column,
				direction: action.order == "desc" ? 'desc' : 'asc'
			}];
			ReportStore.emitChange();
			break;

		case ActionTypes.UPDATE_LIMIT:
			_limitAmount = action.limitAmount;
			ReportStore.emitChange();
			break;

		default:
			//do nothing
			break;
		}
	});

	module.exports = ReportStore;

	function assignInitialReportData(reportData) {
		_columnDims = reportData.columnDims || [];
		_columnMetrics = reportData.columnMetrics || [];
		_rowDims = reportData.rowDims || [];
		_rowMetrics = reportData.rowMetrics || [];
		_isLocked = reportData.locked || false;
		_sortVars = reportData.sort || [];
		_limitAmount = reportData.top ? reportData.top.limit : 2000;
		_showMissingDims = reportData.showMissingDims || [];
		_advanced = reportData.advanced || undefined;

		if (_columnMetrics.length == 0 && _rowMetrics.length == 0) {
			FieldsStore.deleteCommonDimensions();
		}
	}

	function assignReportData(reportData) {

		if (reportData.error || reportData.errorMessage || reportData.name == 'error') {

			_error = reportData.error || reportData.errorMessage || reportData.detail || reportData.routine || 'An unknown error occurred';

			/* attempt to build the headers anyway */

			var columns = {},
		    rowheaders = [],
		    columnheaders = [],
		    headers = [[]];

			_columnDims.forEach(function (partitionId) {
				var partition = FieldsStore.getColumnDetails(partitionId);
				if (partition) {
					columns[partitionId] = {
						id: partition.id,
						label: partition.label,
						type: 'attribute', //partition.type,
						format: partition.format,
						parent: partition.parent.label,
						sort: partition.sort
					};
					columnheaders.push({
						id: partitionId,
						height: 38,
						type: 'attribute' });
				}
			});

			_rowDims.forEach(function (dimensionId) {
				var dimension = FieldsStore.getColumnDetails(dimensionId);
				if (dimension) {
					columns[dimensionId] = {
						id: dimension.id,
						label: dimension.label,
						type: 'attribute', //dimension.type,
						format: dimension.format,
						parent: dimension.parent.label,
						sort: dimension.sort
					};
					rowheaders.push({
						id: dimensionId,
						width: 150,
						type: 'attribute' });
				}
			});

			_rowMetrics.forEach(function (metricId) {
				if (metricId.id) {
					metricId = metricId.id;
				}
				var metric = FieldsStore.getColumnDetails(metricId.split('|')[0]);
				if (metric) {
					columns[metricId] = {
						id: metric.id,
						label: metric.label,
						type: metric.type,
						format: metric.format,
						parent: metric.parent.label,
						sort: metric.sort
					};
					rowheaders.push({
						id: metricId,
						width: 120,
						type: metric.type
					});
					headers[0].push({
						id: metricId,
						span: 1,
						type: metric.type,
						width: 120
					});
				}
			});

			columnheaders.push({
				height: 38,
				type: 'metrics'
			});

			/*
  console.log('columns', columns)
  console.log('rowheaders', rowheaders)
  console.log('columnheaders', columnheaders)
  console.log('headers', headers)
  /* */

			_columnHeaders = columnheaders;
			_columns = columns;
			_headers = headers;
			_rowHeaders = rowheaders;
			_allRows = _rows = [];
			_sorted = {};
		} else {

			//NEED TO REFACTOR THIS
			//IMPORTANT!!! ROWHEADERS AND COLUMNHEADERS COME BACK IN REVERSE TO THE REST OF THE APPLICATION
			_columnHeaders = reportData.rowheaders || [];
			_columns = reportData.columns || {};
			_headers = reportData.headers || [];
			_rowHeaders = reportData.columnheaders || [];
			_rows = reportData.rows || [];
			_allRows = reportData.rows || [];
			_sorted = reportData.sorted || {};
			_limitAmount = reportData.top ? reportData.top.limit : 2000;
			_showMissingDims = reportData.showMissingDims || [];
		}
	}

	function removeFieldByIndex(from, index) {
		var offset = 0;
		if (from == "column") {
			var headers = _columnHeaders;
			if (index >= _columnDims.length) {
				var arr = _columnMetrics;
				offset = _columnDims.length;
				index -= offset;
			} else {
				var arr = _columnDims;
			}
		} else {
			var headers = _rowHeaders;
			if (index >= _rowDims.length) {
				var arr = _rowMetrics;
				offset = _rowDims.length;
				index -= offset;
			} else {
				var arr = _rowDims;
			}
		}

		arr.splice(index, 1);
		headers.splice(offset + index, 1);
		return index;
	}

	function updateColumnByIndex(column_type, from, id, index) {
		var isUpdate = index || index === 0;
		if (isUpdate) {
			index = removeFieldByIndex(from, index);
		} else {
			var index = null;
		}

		switch (column_type) {
		case 'metric':
			addMetric(from, index, id, isUpdate);
			break;

		case 'dimension':
			addDimension(from, index, id, isUpdate);
			break;
		}
	}

	function updateColumn(column_type, from, id, replace) {
		if (replace) {
			var dims = _columnDims.concat(_rowDims);
			if (dims.indexOf(replace) != -1) {
				var position = removeDimension(from, replace, true);
			} else {
				var position = removeMetric(from, replace, true);
			}
		} else {
			var position = null;
		}

		switch (column_type) {
		case 'metric':
			addMetric(from, position, id, !!replace);
			break;

		case 'dimension':
			addDimension(from, position, id, !!replace);
			break;
		}
	}

	function addDimension(to, position, dimension, isUpdate) {

		if (!isUpdate && to == 'row') {
		//if sort column is > # dim increment by 1
			for (var i = 0; i < _sortVars.length; i++) {
				if (_sortVars[i].column >= _rowDims.length) {
					_sortVars[i].column++;
				}
			}
		}

		var parentLabel = null;
		var childLabel = null;

		//Need to front load the column/row headers
		var commonDims = FieldsStore.getCommonDimensions();

		var labels = dimension.substring(2).split('.'); //Skip the "d_" then split the parent.child
		var parent = labels[0]; //Only relevant one to cut down on searching

		//Search through the selection overlay fields and find the corresponding labels for the dimension
		for (var i = 0; i < commonDims.length; i++) {
			if (commonDims[i].label.toLowerCase() == parent.toLowerCase()) {
				parentLabel = commonDims[i].label;

				for (var j = 0; j < commonDims[i].attributes.length; j++) {
					if (commonDims[i].attributes[j].id == dimension) {
						childLabel = commonDims[i].attributes[j].label;
						break;
					}
				}
				break;
			}
		}

		//Assign the dimension and the headers
		if (to == "column") {
			var arr = _columnDims;
			_columnHeaders.push({
				id: dimension,
				width: 150
			});
		} else {
			var arr = _rowDims;
			_rowHeaders.push({
				id: dimension,
				height: 38
			});
		}

		_columns[dimension] = {
			id: dimension,
			label: childLabel,
			parent: parentLabel,
			type: "dimension"
		};

		//add to the corresponding dimension object
		if (position === null) {
			arr.push(dimension);
		} else {
			arr.splice(position, 0, dimension);
		}
	}

	function removeDimension(from, dimension, isUpdate) {

		//find the right dimensions object
		if (from == "column") {
			var arr = _columnDims;
			var headers = _columnHeaders;
		} else {
			var arr = _rowDims;
			var headers = _rowHeaders;
		}

		//find and remove by index
		var index = $.inArray(dimension, arr);

		if (index >= -1) {

			arr.splice(index, 1);

			for (var i = 0; i < headers.length; i++) {
				if (headers[i].id == dimension) {
					headers.splice(i, 1);
					break;
				}
			}

			if (!isUpdate) {
			//if sort column is > index decrement by 1

				_sortVars = _sortVars.filter(function (sortVar, i) {
					if (sortVar.column == index) {
						return false;
					} else if (sortVar.column > index && sortVar.column > 0) {
						sortVar.column--;
					}
				});

			/*
   for(var i=_sortVars.length-1; i>=0; i--) {
   	if (_sortVars[i].column == index) {
   		delete(_sortVars[i]);
   	} else if (_sortVars[i].column > index && _sortVars[i].column > 0) {
   		_sortVars[i].column--;
   	}
   }
   /* */
			}
		}

		return index;
	}

	function addMetric(to, position, metric, isUpdate) {

		//Need to move ALL metrics to one container or the other
		//They can't exist in both!
		if (to == "column") {

			if (_rowMetrics.length > 0) {
				_columnMetrics = $.extend(true, [], _rowMetrics);
				_rowMetrics = [];
			}

			if (position === null) {
				_columnMetrics.push(metric);
			} else {
				_columnMetrics.splice(position, 0, metric);
			}
		} else {

			if (_columnMetrics.length > 0) {
				_rowMetrics = $.extend(true, [], _columnMetrics);
				_columnMetrics = [];
			}

			if (position === null) {
				_rowMetrics.push(metric);
			} else {
				_rowMetrics.splice(position, 0, metric);
			}
		}

		var offset = _rowDims.length;

		//Assign the dimension and the headers
		if (to == "column") {
			if (position === null) {
				_columnHeaders.push({
					id: metric,
					height: 38,
					type: "metric"
				});
			} else {
				_columnHeaders.splice(offset + position, 0, {
					id: metric,
					height: 38,
					type: "metric"
				});
			}
		} else {
			if (position === null) {
				_rowHeaders.push({
					id: metric,
					width: 120,
					type: "metric"
				});
			} else {
				_rowHeaders.splice(offset + position, 0, {
					id: metric,
					width: 120,
					type: "metric"
				});
			}
		}

		//auto filters
		var fact = ((typeof metric === 'undefined' ? 'undefined' : _typeof(metric)) == 'object' ? metric.id : metric).split(/[|.]/)[0];
		//if fact already in table
		for (var i in _columns) {
			if (i.indexOf(fact) == 0) {
				fact = '';
				break;
			}
		}
		var autoFilters = FieldsStore.getAutoFilters(fact);
		if (autoFilters) {
			for (var i = 0; i < autoFilters.length; i++) {
				ReportFilterStore.updateReportFilter(autoFilters[i]);
			}
		}

		//Modify the headers if needed
		//if (!_columns[metric]) {

		//load the column/row header data
		var facts = FieldsStore.getFieldFacts();

		var metricId = typeof metric == 'string' ? metric : metric.id;

		//Depending on the metric, we have to divide it up differently
		//to get down to the same pieces in the facts array
		//Example: f_webship_carrier_activation|count vs. f_webship.quote|sum
		if (metricId.indexOf(".") !== -1) {

			var labels = metricId.substring(2).split('.'); //Skip the "f_" then split the parent.child
			var parent = labels[0];
			var metricSplitOnPipe = metricId.split('|');
		} else {

			var labels = metricId.substring(2).split('|'); //Skip the "f_" then split the parent.child
			var parent = labels[0].replace(/_/g, " ");
			var metricSplitOnPipe = metricId.split('|');
		}

		var parentLabel = null;
		var childLabel = null;

		//Search through the selection overlay fields and find the corresponding labels for the metric
		for (var i = 0; i < facts.length; i++) {

			//FIRST look for parent label
			if (facts[i].label.toLowerCase() == parent.toLowerCase()) {
				parentLabel = facts[i].label;

				for (var j = 0; j < facts[i].metrics.length; j++) {

					//SECOND look for corresponding metric
					if (facts[i].metrics[j].id == metricSplitOnPipe[0]) {

						if (facts[i].metrics[j].calculations) {

							for (var k = 0; k < facts[i].metrics[j].calculations.length; k++) {

								//FINALLY, look for the correct calculation to get the proper child label
								if (facts[i].metrics[j].calculations[k].id == metricSplitOnPipe[1]) {
									childLabel = facts[i].metrics[j].calculations[k].label;
									break;
								}
							}
						}
						break;
					}
				}
				break;
			}
		}

		_columns[metric] = {
			id: metricId,
			label: childLabel,
			parent: parentLabel,
			type: "metric"
		};

	//}
	}

	function removeOtherMetrics(index) {
		if (index < _rowMetrics.length) {
			_rowMetrics = _rowMetrics.splice(index, 1);
		}
	}

	function removeMetric(from, metric, isUpdate) {

		//get the right metrics object
		if (from == "column") {
			var arr = _columnMetrics;
			var headers = _columnHeaders;
		} else {
			var arr = _rowMetrics;
			var headers = _rowHeaders;
		}

		//find and remove by index
		var index = $.inArray(metric, arr);

		if (index >= -1) {

			arr.splice(index, 1);

			for (var i = 0; i < headers.length; i++) {
				if (headers[i].id == metric) {
					headers.splice(i, 1);
					break;
				}
			}

			if (!isUpdate) {
			//if sort column is > index decrement by 1
				for (var i = _sortVars.length - 1; i >= 0; i--) {
					if (_sortVars[i].column == index + _rowDims.length) {
						delete _sortVars[i];
					} else if (_sortVars[i].column > index + _rowDims.length && _sortVars[i].column > 0) {
						_sortVars[i].column--;
					}
				}
			}
		}

		if (!isUpdate) {
		//reset if necessary
			if (arr.length == 0) {
				_columnDims = [];
				_rowDims = [];
				FieldsStore.deleteCommonDimensions();
			}
		}

		return index;
	}

	function updateColumnOrder(dimOrder, metricOrder) {
	/* really IS for columns */
		var newColumnDims = [];
		var newColumnMetrics = [];
		var newColumnHeaders = [];

		dimOrder.map(function (order, index) {
			for (var i = 0; i < _rowHeaders.length; i++) {
				if (i == order) {
					newColumnHeaders.push(_rowHeaders[i]);
				}
			}
			for (var i = 0; i < _rowDims.length; i++) {
				if (i == order) {
					newColumnDims.push(_rowDims[i]);
				}
			}
		});

		var offset = _rowDims.length;

		metricOrder.map(function (order, index) {
			for (var i = 0; i < _rowHeaders.length; i++) {
				if (i == order) {
					newColumnHeaders.push(_rowHeaders[i]);
				}
			}
			for (var i = 0; i < _rowMetrics.length; i++) {
				if (offset + i == order) {
					newColumnMetrics.push(_rowMetrics[i]);
				}
			}
		});

		_rowMetrics = newColumnMetrics;
		_rowDims = newColumnDims;
		_rowHeaders = $.extend(true, {}, newColumnHeaders);
	}

	function updateRowOrder(dimOrder, metricOrder) {
	/* really is for rows */
		var newRowDims = [];
		var newRowMetrics = [];
		var newRowHeaders = [];

		dimOrder.map(function (order, index) {
			for (var i = 0; i < _columnHeaders.length; i++) {
				if (i == order) {
					newRowHeaders.push(_columnHeaders[i]);
				}
			}
			for (var i = 0; i < _columnDims.length; i++) {
				if (i == order) {
					newRowDims.push(_columnDims[i]);
				}
			}
		});

		var offset = _columnDims.length;

		metricOrder.map(function (order, index) {
			for (var i = 0; i < _columnHeaders.length; i++) {
				if (i == order) {
					newRowHeaders.push(_columnHeaders[i]);
				}
			}
			for (var i = 0; i < _columnMetrics.length; i++) {
				if (offset + i == order) {
					newRowMetrics.push(_columnMetrics[i]);
				}
			}
		});

		_columnMetrics = newRowMetrics;
		_columnDims = newRowDims;
		_columnHeaders = $.extend(true, {}, newRowHeaders);
	}

	function swapSortContainer(from, type, id) {
		var sendingArray;
		//Find the correct objects to modify
		//Init calls to add the Id to the correct objects
		if (type == "dimension") {

			if (from == "column") {
				var sendingArray = _columnDims;
				addDimension("row", null, id);
				var headers = _columnHeaders;
			} else {

				//decrease sort
				for (var i = _sortVars.length - 1; i >= 0; i--) {
					if (_sortVars[i].column > 0) {
						_sortVars[i].column--;
					}
				}

				var sendingArray = _rowDims;
				addDimension("column", null, id, true);
				var headers = _rowHeaders;
			}

			//remove from the indexes
			var index = $.inArray(id, sendingArray);
			if (index >= -1) {
				sendingArray.splice(index, 1);
			}

			//remove from the headers
			for (var i = 0; i < headers.length; i++) {
				if (headers[i].id == id) {
					headers.splice(i, 1);
				}
			}
		} else {
		//metric

			if (from == "column") {

				//Remove the "Metrics" stub and add it to the other
				_rowHeaders.splice(_rowHeaders.length - 1, 1);
				_columnHeaders.push({
					type: "metrics",
					height: 38
				});

				//Send all the headers over and remove from it's origin
				for (var i = 0; i < _columnHeaders.length; i++) {
					if (_columnHeaders[i].type == "metric") {
						_rowHeaders.push({
							id: _columnHeaders[i].id,
							width: 120,
							type: "metric"
						});
						_columnHeaders.splice(i, 1);
						i--;
					}
				}

				addMetric("row", null, id);
			} else {

				//Remove the "Metrics" stub and add it to the other
				_columnHeaders.splice(_columnHeaders.length - 1, 1);
				_rowHeaders.push({
					type: "metrics",
					width: 120
				});

				//Send all the headers over and remove from it's origin
				for (var i = 0; i < _rowHeaders.length; i++) {
					if (_rowHeaders[i].type == "metric") {
						_columnHeaders.push({
							id: _rowHeaders[i].id,
							height: 38,
							type: "metric"
						});
						_rowHeaders.splice(i, 1);
						i--;
					}
				}

				addMetric("column", null, id);
			}
		}
	}

	function swapAllSortContainers() {
		var tempColumnDims = $.extend(true, [], _columnDims);
		var tempRowDims = $.extend(true, [], _rowDims);
		var tempColumnMetrics = $.extend(true, [], _columnMetrics);
		var tempRowMetrics = $.extend(true, [], _rowMetrics);

		_columnDims = tempRowDims;
		_rowDims = tempColumnDims;
		_columnMetrics = tempRowMetrics;
		_rowMetrics = tempColumnMetrics;
	}

	function swapDimsInSortContainers() {
		var tempColumnDims = $.extend(true, [], _columnDims);
		var tempRowDims = $.extend(true, [], _rowDims);

		_columnDims = tempRowDims;
		_rowDims = tempColumnDims;
	}

	function swapMetricsInSortContainers() {
		var tempColumnMetrics = $.extend(true, [], _columnMetrics);
		var tempRowMetrics = $.extend(true, [], _rowMetrics);

		_columnMetrics = tempRowMetrics;
		_rowMetrics = tempColumnMetrics;
	}

	function formatDataForExport(use_tabs) {

		var separator = use_tabs ? '\t' : '","';
		var quote = use_tabs ? '' : '"';

		var forceRowFormat = false;
		var dataOffset = 0;
		var rowsResult = [];

		var column_or_row_metrics = [];
		var column_dimensions = [];
		var row_dimensions = [];

		//If the metrics are in the columnHeaders, running horizontally,
		//force the format for the whole row. It's easier. We search for
		//the "metrics" stub in the rowHeaders for simplicity while
		//incrementing the dataOffset
		_rowHeaders.map(function (column, i) {

			if (column.type != "metric") {
			//Increase the row offset for enforcing the format
				dataOffset++;

				//if the a column in the rowHeaders is "metrics", force the format for the whole row
				if (column.type == "metrics") {
					forceRowFormat = true;
				} else {
					column_dimensions.push(_columns[column.id].parent + '.' + _columns[column.id].label);
				}
			} else {
				column_or_row_metrics.push(_columns[column.id].parent + ' ' + _columns[column.id].label);
			}
		});

		_columnHeaders.map(function (row, i) {
			if (row.type != "metric") {
				if (row.type != "metrics") {
					row_dimensions.push(_columns[row.id].parent + '.' + _columns[row.id].label);
				}
			} else {
				column_or_row_metrics.push(_columns[row.id].parent + ' ' + _columns[row.id].label);
			}
		});

		rowsResult.push(column_or_row_metrics.join(' and ') + (column_dimensions.length > 0 ? ' BY: ' + column_dimensions.join(' and ') : '') + (column_dimensions.length > 0 && row_dimensions.length > 0 ? ' and' : '') + (row_dimensions.length > 0 ? ' BY: ' + row_dimensions.join(' and ') : ''));

		var row_2_filters = [];
		var filterData = ReportFilterStore.getReportFilters();

		for (var i = 0; i < filterData.length; i++) {
			row_2_filters.push(filterData[i].dimension + '.' + filterData[i].label + ' ' + (filterData[i].comparison || 'in') + ' ' + filterData[i].value.join(', '));
		}

		rowsResult.push(quote + 'Filtered By: ' + (row_2_filters.length > 0 ? row_2_filters.join(' and ') : '') + quote);

		rowsResult.push(quote + document.location.href.replace(/"/g, '"' + quote) + quote);

		rowsResult.push(' ');

		//for each actual header row, build the csv row
		$.each(_headers, function (rowIndex, headerGroup) {

			//Headers
			//Don't let the starting row offset be less than zero
			var paddedOffset = dataOffset - 1;
			if (paddedOffset === -1) {
				paddedOffset = 0;
			}

			//Pad the left for each column header row
			var row = [];
			for (var i = 0; i < _rowHeaders.length; i++) {
				if (_rowHeaders[i].type == "metrics") {
					if (rowIndex == _headers.length - 1) {
						row.push("Metrics");
					} else {
						row.push("");
					}
				} else {
					if (_rowHeaders[i].type != "metric") {
						if (rowIndex == _headers.length - 1) {
							row.push(_columns[_rowHeaders[i].id].label);
						} else {
							row.push("");
						}
					}
				}
			}

			//Push the header values
			$.each(headerGroup, function (index, header) {
				if (header.type == "metric") {
					row.push(_columns[header.id].label);
				} else {
					if (header.span) {
						for (var i = 0; i < header.span; i++) {
							row.push(header.value);
						}
					} else {
						row.push(header.value);
					}
				}
			});

			//push on to rows
			rowsResult.push(quote + row.join(separator) + quote);
		});

		//This is where we actually build the rows of data, including the row headers
		return rowsResult.join("\n") + "\n" + _allRows.map(function (column, i) {
			return quote + column.join(separator) + quote;
		}).join("\n");
	}

},{"../constants/LeoConstants":830,"../data/format.js":832,"../dispatcher/LeoDispatcher":833,"./FieldsStore":834,"./ReportFilterStore":835,"events":9,"object-assign":613}],837:[function(require,module,exports){
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var FieldsStore = require('../stores/FieldsStore');

	module.exports = {

		_parsed: {},

		reset: function reset() {
			this._parsed = {};
		},

		_check: function _check(parsed) {
			var parsed = parsed || this._parsed;
			if (typeof parsed == 'string') {
				return this.parse(parsed);
			}
			return parsed;
		},

		parse: function parse(id) {
			var parsed = {};
			if (id) {
				if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) == 'object') {
				//parsed = id
					id = id.id;
				//delete parsed.id
				}
				if (id.slice(0, 3) == 'fx(' || id[0] == '(') {
					parsed[id.slice(0, id.lastIndexOf(')') + 1)] = [];
					id = id.slice(id.lastIndexOf(')') + 1);
				}
				var parts = id.split('|');
				for (var i = 0; i < parts.length; i++) {
					if (parts[i] != '') {
						if (parts[i].indexOf('!') != -1) {
							parts[i] = parts[i].split('!')[0];
						}
						var temp = parts[i].split(':');
						var name = temp.shift();
						if ((typeof temp === 'undefined' ? 'undefined' : _typeof(temp)) == 'object' && temp[0] && temp[0].indexOf(';') !== -1) {
							temp = temp[0].split(';');
						}
						parsed[name] = temp; //.join(':')
					}
				}
			}
			this._parsed = parsed;
			//console.log('parsed', id, parsed)
			return parsed;
		},

		raw: function raw(parsed) {
			var parsed = this._check(parsed);
			var prop;for (prop in parsed) {
				break;
			}return prop;
		},

		parent: function parent(parsed) {
			var parsed = this._check(parsed);
			var raw = this.raw(parsed);
			if (raw.lastIndexOf('.') != -1) {
				return raw.slice(0, raw.lastIndexOf('.'));
			}
			return raw;
		},

		type: function type(parsed) {
			var parsed = this._check(parsed);
			var raw = this.raw(parsed);
			if (!raw) {
				return false;
			} else if (parsed['lag']) {
				return 'fact';
			} else if (raw.slice(0, 2) == 'd_') {
				return raw.indexOf('.') == -1 ? 'dimension' : 'attribute';
			} else {
				if (raw.slice(0, 3) == 'fx(' || raw[0] == '(') {
					return 'fx';
				}
				return raw.indexOf('.') == -1 ? 'fact' : 'metric';
			}
		},

		aggregate: function aggregate(parsed) {
			var parsed = this._check(parsed);
			//var aggregates = ['sum', 'avg', 'min', 'max', 'band', 'percent', 'cumulative'];
			var aggregates = ['count', 'unique', 'sum', 'avg', 'min', 'max'];
			for (var i = 0; i < aggregates.length; i++) {
				if (aggregates[i] in parsed) {
					return aggregates[i];
				}
			}
			return false;
		},

		/*
 advanced: function() {
 	var parsed = this._check(parsed);
 	var advances = ['band', 'percent', 'cumulative', 'rank'];
 	for(var i=0;i<advances.length;i++) {
 		if (advances[i] in parsed) {
 			return advances[i];
 		}
 	}
 	return false;
 },
 */

		transforms: function transforms() {
			var parsed = this._check(parsed);
			var all_transforms = ['band', 'percent', 'cumulative', 'rank', 'abs'];
			var transforms = [];
			for (var j in parsed) {
				if (all_transforms.indexOf(j) != -1) {
					var transform = {};
					transform[j] = parsed[j];
					transforms.push(transform);
				}
			}
			return transforms;
		},

		build: function build(parsed, prepend) {
			var parsed = this._check(parsed);
			for (var j in prepend) {
				delete parsed[j];
			}

			if (parsed['label']) {
				var label = parsed['label'];
				delete parsed['label'];
			} else if (prepend && prepend['label']) {
				var label = prepend['label'];
				delete prepend['label'];
			} else {
				var label = false;
			}

			var joined = [];
			for (var i in parsed) {
				if (typeof parsed[i] == 'string' && parsed[i] != '') {
					parsed[i] = [parsed[i]];
				}
				if (i !== 'filter' || parsed[i].length !== 0) {
					joined.push(i + (parsed[i].length > 0 ? ':' + parsed[i].join(':') : ''));
				}
				for (var j in prepend) {
					if (prepend[j]) {
						joined.push(j + ':' + prepend[j]);
					}
					delete prepend[j];
				}
			}

			if (label) {
				joined.push('label:' + label);
			}

			return joined.join('|');
		},

		details: function details(parsed) {
			var parsed = this._check(parsed);
			var raw = this.raw(parsed);
			if (raw) {
				if (raw.indexOf('date._id') > -1) {
					raw = raw.replace('date._id', 'date.id');
				} else if (raw.indexOf('.') === -1) {
					raw += '.id';
				}
				return FieldsStore.getColumnDetails(raw);
			}
			return undefined;
		},

		isDate: function isDate() {
			var parsed = this._check(parsed);
			var raw = this.raw(parsed).toLowerCase();
			return raw.indexOf('date.id') > -1 || raw.indexOf('date._id') > -1 || raw.indexOf('date.date') !== -1;
		}

	};

},{"../stores/FieldsStore":834}],838:[function(require,module,exports){
	'use strict';

	var WebAPI = require('./WebAPI');
	//var PivotUtils = require('./PivotUtils');

	module.exports = Object.freeze({

		/* not used? */
		reportData: function reportData(options, callback) {

			options.sort = options.sort || {};

			var apiData = this.buildApiData(options.columns, options.rows, options.filters, options.sort, options.top);

			WebAPI.post("report", apiData, function (result) {

				callback(null, PivotUtils.transform(options.columns, options.rows, result));
			});
		},

		buildApiData: function buildApiData(columns, rows, filters, sort, dimensions, top) {

			/* columns are rows and rows are columns :( */

			var apiData = {
				metrics: [],
				groups: [],
				filters: [],
				partitions: [],
				redshift: 'useredshift' in window ? window.useredshift : true,
				sort: sort,
				top: top
			};

			for (var i = 0; i < columns.length; i++) {
				var col = columns[i];
				if (col) {
					if (dimensions.indexOf(col) != -1) {
					//if (col.match && !col.match(/\|count$/) && !col.match(/\|percent/) && !col.match(/\|cumulative/) && (col.match(/^d_/) || col.match(/\.dd/))) {
						apiData.partitions.push(columns[i]);
					} else {
						apiData.metrics.push(col);
					}
				}
			}

			for (var i = 0; i < rows.length; i++) {
				var col = rows[i];
				if (col) {
					if (dimensions.indexOf(col) != -1) {
					//if (
					//	(col.match && !col.match(/\|count$/) && !col.match(/\|percent/) && !col.match(/\|cumulative/) && (col.match(/^d_/) || col.match(/\.dd/))) ||
					//	(col.id && !col.match(/\|count$/) && !col.match(/\|percent/) && !col.match(/\|cumulative/) && col.id.match(/^d/))
					//) {
						apiData.groups.push(col);
					} else {
						apiData.metrics.push(col);
					}
				}
			}

			//Fixes a bug with mixed objects in an array
			var metrics = {};
			apiData.metrics.map(function (element, i) {
				metrics[i] = element;
			});
			apiData.metrics = metrics;

			//Fixes a bug with mixed objects in an array
			var groups = {};
			apiData.groups.map(function (element, i) {
				groups[i] = element;
			});
			apiData.groups = groups;

			if (window.parent.dashboardFilters) {
				filters = JSON.parse(JSON.stringify(filters));
				filters = filters.concat(window.parent.dashboardFilters.filter(function (dashboardFilter) {
					return !filters.some(function (filter) {
						return dashboardFilter.id == filter.id;
					});
				}));
			}

			for (var i = 0; i < filters.length; i++) {
				var filter = filters[i];
				var comparison = filter.comparison;

				if ($.isArray(filter.value) && filter.value.length == 0 || filter.value == "") {
					filter.value = "";
				} else {

					// IF the value is or is not an array, make sure we send the correct var
					if ($.isArray(filter.value)) {

						if (comparison == "=") {
							comparison = "in";
						}
						if (comparison == "!=") {
							comparison = "!in";
						}
					} else {

						if (comparison == "in") {
							comparison = "=";
						}
						if (comparison == "!in") {
							comparison = "!=";
						}
					}

					apiData.filters.push({
						id: filter.id,
						comparison: comparison,
						value: filter.value || '',
						checkboxes: filter.checkboxes || ''
					});
				}
			}

			return apiData;
		}

	});

},{"./WebAPI":840}],839:[function(require,module,exports){
	'use strict';

	var ReportActions = require('../actions/ReportActions');
	var ReportStore = require('../stores/ReportStore');

	var ReportFilterActions = require('../actions/ReportFilterActions');
	var ReportFilterStore = require('../stores/ReportFilterStore');

	module.exports = {

		createLinkToReport: function createLinkToReport() {
			return window.location.protocol + '//' + window.location.host + '/builder#' + this.serialize();
		},

		updateWindowHash: function updateWindowHash() {
			window.location.hash = this.serialize();
		},

		serialize: function serialize() {
		//CALL ALL STORES AND SERIALIZE
			return JSON.stringify({
				chart_id: ReportStore.getChartId(),
				partitions: ReportStore.getPartitions(),
				dimensions: ReportStore.getDimensions(),
				metrics: ReportStore.getMetrics(),
				locked: ReportStore.getLockedStatus(),
				filters: ReportFilterStore.getReportFilters(),
				sort: ReportStore.getSort(),
				top: ReportStore.getTopLimit(),
				advanced: ReportStore.getAdvanced(),
				useMysql: !window.useredshift
			});
		},

		deSerialize: function deSerialize() {
		//DESERIALIZE AND DISPATCH TO THE APPROPRIATE STORE
			var input = {};
			if (window.location.hash) {
				try {
					var input = JSON.parse(decodeURI(window.location.hash.slice(1)));
					window.hasHash = true;
				} catch (e) {
					try {
						var input = JSON.parse(window.location.hash.slice(1));
						window.hasHash = true;
					} catch (e) {
						LeoKit.alert('Invalid Request');
						var input = {};
					}
				}
			}

			var inputFilters = input.filters || [];

			input = {
				columnDims: input.columnDims || input.partitions || [],
				//columnMetrics: input.columnMetrics || [],
				rowDims: input.rowDims || input.dimensions || [],
				rowMetrics: input.rowMetrics || input.columnMetrics || input.metrics || [],
				locked: input.locked || false,
				sort: input.sort || [],
				top: input.top,
				advanced: input.advanced || undefined,
				useMysql: input.useMysql
			};

			if (input.columnDims.length == 0) {
				var partitions = false;
				var setAsReportPartition = true;
				input.rowMetrics.forEach(function (metric) {
					if (!partitions) {
						partitions = metric.partitions;
					}
					if (!metric.partitions || JSON.stringify(partitions) != JSON.stringify(metric.partitions)) {
						setAsReportPartition = false;
					}
				});
				if (setAsReportPartition) {
					input.columnDims = partitions;
					input.rowMetrics.map(function (metric) {
						delete metric.partitions;
						return metric;
					});
				}
			}

			ReportActions.initReport(input);

			if (input.useMysql) {
				window.useredshift = false;
			} else {
				window.useredshift = true;
			}

			ReportFilterActions.initReportFilters(inputFilters);
		}

	};

},{"../actions/ReportActions":828,"../actions/ReportFilterActions":829,"../stores/ReportFilterStore":835,"../stores/ReportStore":836}],840:[function(require,module,exports){
	'use strict';

	var moment = require('moment-timezone');

	var credentials = require('../credentials.js');

	var apiEndpoint = credentials.apiEndpoint;
	var apikey = credentials.apiKey;

	var lastUID = {};

	module.exports = {

		getKey: function getKey() {
			return apikey;
		},

		setEndpoint: function setEndpoint(endpoint, key) {
			apiEndpoint = endpoint.replace(/\/*$/, '') + "/";
			apikey = key;
		},

		setKey: function setKey(newkey) {
			apikey = newkey;
		},

		get: function get(command, callback) {
			var sep = command.indexOf("?") === -1 ? "?" : "&";
			lastUID[command] = new Date().valueOf();
			var data = sep + "apikey=" + apikey + "&uid=" + lastUID[command];
			$.get(apiEndpoint + command + data, function (res) {
				if (!res.uid || lastUID[command] != 0 && res.uid >= lastUID[command]) {
					if (res.header) {
						callback(res.data);
					} else {
						callback(res);
					}
					lastUID[command] = 0;
				}
			}, 'json').fail(function (xhr, textStatus, errorThrown) {
				if (lastUID[command] != 0) {
					console.log(xhr.responseText);
				}
			});
		},

		post: function post(command, data, callback) {
			lastUID[command] = new Date().valueOf();
			data.apikey = apikey;
			data.uid = lastUID[command];
			data.timestamp = moment().tz(window.leo && window.leo.timezone ? window.leo.timezone : moment.tz.guess()).format();
			$.ajax({
				type: "post",
				data: JSON.stringify(data),
				cache: false,
				url: apiEndpoint + command,
				dataType: 'json',
				contentType: 'application/json',
				error: function error(xhr, status, _error) {
					if (xhr.responseText) {
						xhr = xhr.responseText;
						try {
							xhr = JSON.parse(xhr);
						} catch (e) {
							xhr = { error: xhr };
						}
					}
					if (lastUID[command] != 0) {
						callback(xhr);
					}
				},
				success: function success(res) {
					if (!res.uid || lastUID[command] != 0 && res.uid >= lastUID[command]) {
						if (res.header) {
							callback(res.data);
						} else {
							if (command == 'report') {
								localStorage.setItem('DataExplorer.hash', JSON.stringify(window.location.hash));
							}
							callback(res);
						}
						lastUID[command] = 0;
					}
				}
			});
		},

		'delete': function _delete(command, callback) {
			var sep = command.indexOf("?") === -1 ? "?" : "&";
			lastUID[command] = new Date().valueOf();
			var data = sep + "apikey=" + apikey + "&uid=" + lastUID[command];
			$.ajax({
				url: apiEndpoint + command + data,
				type: 'DELETE',
				success: function success(res) {
					if (!res.uid || lastUID[command] != 0 && res.uid >= lastUID[command]) {
						if (res.header) {
							callback(res.data);
						} else {
							callback(res);
						}
						lastUID[command] = 0;
					}
				},
				data: {},
				contentType: 'application/json'
			});
		},

		put: function put(command, data, callback) {
			lastUID[command] = new Date().valueOf();
			data.apikey = apikey;
			data.uid = lastUID[command];
			$.ajax({
				url: apiEndpoint + command,
				type: 'PUT',
				data: JSON.stringify(data),
				success: function success(res) {
					if (!res.uid || lastUID[command] != 0 && res.uid >= lastUID[command]) {
						if (res.header) {
							callback(res.data);
						} else {
							callback(res);
						}
						lastUID[command] = 0;
					}
				},
				contentType: 'application/json'
			});
		}

	};

},{"../credentials.js":831,"moment-timezone":609}],841:[function(require,module,exports){
	'use strict';

	var React = require('react');

	var ReportFilterActions = require('../../actions/ReportFilterActions');

	module.exports = React.createClass({
		displayName: 'exports',


		contextTypes: {
			edit_column: React.PropTypes.func
		},

		editColumn: function editColumn() {
			this.context.edit_column(this.props.column);
		},

		render: function render() {
			var column = this.props.column;
			var icon = column.type == 'metric' || column.type == 'fact' ? 'icon-sprite-123' : 'icon-ion-social-buffer-outline';
			var format = column.format || (column.type == 'metric' || column.type == 'fact' ? 'int' : 'string');
			var label = column.label + (column.label == parent.label ? ' Count' : '');
			return React.createElement(
				'aside',
				{ className: 'info-box', 'data-column_id': column.id },
				React.createElement(
					'div',
					null,
					React.createElement(
						'header',
						null,
						React.createElement('i', { className: icon }),
						column.parent ? column.parent.label : ''
					),
					React.createElement(
						'div',
						null,
						React.createElement(
							'strong',
							null,
							label
						),
						' ',
						React.createElement(
							'em',
							null,
							'  |  ' + format
						)
					),
					React.createElement(
						'div',
						null,
						column.description || ''
					),
					React.createElement('div', { ref: 'infoExamples', className: 'info-examples' }),
					this.props.showMore ? React.createElement(
						'div',
						{ className: 'info-more', onClick: this.editColumn },
						React.createElement('i', { className: 'icon-info' }),
						React.createElement(
							'span',
							null,
							' more > '
						)
					) : false
				)
			);
		}
	});

},{"../../actions/ReportFilterActions":829,"react":785}],842:[function(require,module,exports){
	'use strict';

	var React = require('react');

	var FieldsStore = require('../../stores/FieldsStore');
	var ReportActions = require('../../actions/ReportActions');
	var ReportFilterActions = require('../../actions/ReportFilterActions');
	var Serializer = require('../../utils/Serializer');
	var IdUtils = require('../../utils/IdUtils');
	var InfoBox = require('../common/infoBox.jsx');
	//var FieldPicker = require('./fieldPicker.jsx');

	module.exports = React.createClass({
		displayName: 'exports',


		searchResults: [],

		browseResults: [],

		contextTypes: {
			sendToPivot: React.PropTypes.func,
			show_dialog: React.PropTypes.func,
			selected_field: React.PropTypes.object
		},

		getInitialState: function getInitialState() {
			var _this = this;

			var props = this.props.defaults ? this.props.defaults : this.props;

			var browseIndex = -1;
			var searchIndex = -1;
			var parent_id = null;
			var which = '';
			var showFx = false;

			switch (props.action) {
			case 'select_dimension': //select dim for unique
			case 'add_dimension': //add report dimension
			case 'change_dimension': //change chart dimension
			case 'edit_series_dimension': //adding or editing dimension on metric in series on chart
			case 'update_chart_dimension': //adding or editing dimension on chart
			case 'drill_in': //only dimensions
			case 'pick_dimension': //portal
			case 'pick_partition':
				//portal
				var which = 'dimension';
				break;

			case 'pick_fact':
			case 'select_fact':
				which = 'fact';
				break;

			case 'add_fact': //add report metric
			case 'select_metric': //add metric to empty report
			case 'add_series': //
			case 'add_metric_to_series':
				//
				showFx = true;
			case 'edit_series_metric': //
			case 'change_metric': //change report metric

			case 'pick_metric':
				//portal
				var which = 'metric';
				break;

			case 'pick_date':
				var which = 'date';
				break;

			case 'add_filter': //adding filter to report
			case 'pick_filter':
				//portal, metric filter
				var which = 'filter';
				break;

			case 'pick_either':
				var which = 'both';
				break;

			default:
				console.log('props.action undefined', props.action);
				break;
			}

			if (props.id) {
				var parsed = IdUtils.parse(props.id);
				var parent_id = IdUtils.parent();
				this.searchResults = FieldsStore.searchFields(which, parent_id) || [];

				for (var i = 0; i < this.searchResults.length; i++) {
				//if (this.searchResults[i].id == props.id) {
					if (props.id.indexOf(this.searchResults[i].id) != -1) {
						searchIndex = i;
						break;
					}
				}
			}

			this.browseResults = [];

			if (which == 'metric' || which == 'filter' || which == 'both' || which == 'fact') {
				this.browseResults['facts'] = FieldsStore.getCommonFacts();
				if (this.browseResults['facts'].length == 0) {
					this.browseResults['facts'] = FieldsStore.getFieldFacts();
				}
			}

			if (which == 'dimension' || which == 'filter' || which == 'both' || which == 'date') {
				this.browseResults['dimensions'] = FieldsStore.getCommonDimensions();
				if (this.browseResults['dimensions'].length == 0) {
					this.browseResults['dimensions'] = FieldsStore.getFieldDimensions();
				}

				if (which == 'date') {
					this.browseResults['dimensions'] = JSON.parse(JSON.stringify(this.browseResults['dimensions']));
					this.browseResults['dimensions'].forEach(function (dimension) {
						if (dimension.outriggers.length > 0) {
							dimension.outriggers.forEach(function (outrigger) {
								_this.browseResults['dimensions'].push(outrigger);
							});
						}
					});
				}
			}

			return {
				searchText: '',
				searchIndex: searchIndex,
				readyToAdd: [],
				parent_id: parent_id,
				action: props.action || '',
				which: which,
				position: props.position || [],

				chart: this.props.chartTypes ? this.props.chartTypes[Object.keys(this.props.chartTypes)[0]] : '',
				showTree: false,
				browseIndex: browseIndex,
				openBranch: false,

				isCalculatedField: false,
				showFx: showFx
			};
		},

		componentDidMount: function componentDidMount() {
			var thisComponent = this;
			this.refs.searchText.focus();
			this.refs.searchText.selectionStart = this.refs.searchText.value.length;

			setTimeout(function () {
				$('.popup-menu').on('mouseenter', '.leaf, .search-results li', function () {
					if ($(this).hasClass('attribute')) {
					//only dimension attributes for now
						var examples = $(this).find('aside .info-examples');
						if (examples.is(':empty')) {
							var column_id = $(this).find('aside').data('column_id');
							if (column_id.slice(-6) == '|count' || column_id.indexOf('.') == -1) {
								examples.append($('<strong></strong>'));
							} else {
								ReportFilterActions.autocomplete2(column_id, '', function (results) {
									if (results && results.suggestions) {
										examples.append($('<strong>Examples: </strong>'));
										for (var i = 0; i < Math.min(results.suggestions.length, 4); i++) {
											if ($.trim(results.suggestions[i].value) != '') {
												examples.append($('<em></em>').text(results.suggestions[i].value));
											}
										}
									} else {
									//failed, let's not try again
										examples.append($('<strong></strong>'));
									}
								});
							}
						}
					}
					var position = $(this).offset();
					if (thisComponent.props.maskOff) {
						var maskPosition = $(this).closest('.change-column').find('.mask').offset();
						position.left -= maskPosition.left;
						position.top -= maskPosition.top;
					}
					$(this).find('.info-box').css({ left: position.left, top: position.top }).show();
				}).on('mouseleave', '.leaf, .search-results li', function () {
					$(this).find('.info-box').hide();
				});
			}, 0);
		},

		lastFieldSent: null,

		componentDidUpdate: function componentDidUpdate() {
			if (this.state.isCalculatedField) {
				this.refs.calculatedField.focus();
			} else {
				this.refs.searchText.focus();
			}

			var searchResultsWrapper = $(this.refs.searchResultsWrapper);

			var height = searchResultsWrapper.height();
			var scrollTop = searchResultsWrapper.scrollTop();
			var pos = searchResultsWrapper.find('li.hover').position();

			if (pos) {
				if (pos.top < 60) {
					searchResultsWrapper.scrollTop(scrollTop - 60);
				}

				if (pos.top > height) {
					searchResultsWrapper.scrollTop(pos.top - height + scrollTop);
				}

				if (pos.top < 0) {
					searchResultsWrapper.scrollTop(0);
				}
			}

			/*$('.expression-builder').on('click', 'span', function() {
  	$(this).remove();
  })*/

			if (this.context.selected_field) {
				if (this.lastFieldSent != this.context.selected_field._sent) {
					this.lastFieldSent = this.context.selected_field._sent;
					this.fieldSelected(this.context.selected_field);
				}
			}
		},

		componentWillUnmount: function componentWillUnmount() {
			$(document.body).removeClass('column-builder-picking-metric');
		},

		fieldSelected: function fieldSelected(selectedField) {
			if (selectedField.id) {
				$('.column-builder-field-target').append('<span contenteditable="false">' + selectedField.id + '</span>');
			}
		},

		replaceColumn: function replaceColumn(column) {
			var id = column ? column.id : null;
			if (!id) {
				var column = this.state.readyToAdd.shift();
				id = column.id;
			}

			switch (this.state.action) {

			case 'pick_partition':
			case 'pick_metric':
			case 'pick_dimension':
			case 'pick_filter':
			case 'pick_either':
			case 'pick_both':
			case 'pick_fact':
			case 'pick_date':
				this.props.save(this.state.action, column, this.state.readyToAdd, this.state.chart);
				break;

			case 'add_series':
			case 'add_metric_to_series':
			case 'edit_series_metric':
			case 'edit_series_dimension':
			case 'update_chart_dimension':
				this.props.popUpSave(this.state.action, column, this.state.readyToAdd, this.state.chart);
				break;

			case 'add_filter':
				this.props.addReportFilter(column);
				break;

			case 'select_dimension':
				var params = this.props.defaults.params;
				params.id += ':' + column.id;
				this.context.sendToPivot(params);
				break;

			case 'select_metric':
				//add dimension attibute|id...
				var params = this.props.defaults.params;
				this.context.sendToPivot(params);
				//..fall thru to add metric(s)

			case 'change_dimension':
			case 'drill_in':
			case 'add_dimension':
			case 'select_dimension':
			default:

				var where = this.props.where || 'row';
				var drillIns = this.props.drillIns;

				var what = this.state.action == 'drill_in' || this.state.action == 'add_dimension' || this.state.action == 'change_dimension' || this.state.action == 'select_dimension' ? 'dimension' : 'metric';
				id += what == 'dimension' || id.slice(-6) == '|count' || id.slice(0, 3) == 'fx(' || id[0] == '(' ? '' : '|sum';

				if (this.props.drillIn && drillIns) {
					var propsColumnObject = IdUtils.parse(this.props.id);
					if (propsColumnObject.filter) {
						var filter = propsColumnObject.filter.split(/([=<>!]+)/);
						if (filter[2] && filter[2][0] === "'" && filter[2][filter[2].length - 1] === "'") {
							filter[2] = filter[2].slice(1, -1);
						}
						drillIns.push({
							id: filter[0],
							comparison: filter[1],
							value: filter[2]
						});
					}
					this.props.drillIn(drillIns);
					for (var i = 0; i < this.props.drillIns.length; i++) {
						ReportActions.removeDimension('row', this.props.drillIns[i].id);
					}
				}

				if (id != this.props.id) {
					if (typeof this.props.iterator != 'undefined' || what == 'metric') {
						ReportActions.updateColumnByIndex(what, where, id, this.props.iterator);
					} else {
						ReportActions.addDimension(where, null, id);
					}
				}

				for (var i = 0; i < this.state.readyToAdd.length; i++) {
					var ready = this.state.readyToAdd[i];
					if (ready.kind == 'attribute') {
						ReportActions.addDimension(where, null, ready.id);
					} else {
						var ag = ready.id.slice(-6) != '|count' && ready.id.slice(0, 3) != 'fx(' ? '|sum' : '';
						ReportActions.addMetric(where, null, ready.id + ag);
					}
				}

				if (typeof this.props.metricIndex != 'undefined') {
					ReportActions.removeOtherMetrics(this.props.metricIndex);
				}

				this.props.closeChangeColumn();

				setTimeout(function () {
					Serializer.updateWindowHash();
				}, 50);
				break;

			}
		},

		setSearchIndex: function setSearchIndex(index) {
			this.setState({ searchIndex: index });
		},

		setBrowseIndex: function setBrowseIndex(index) {
			this.setState({ browseIndex: index });
		},

		catchSpecialKeys: function catchSpecialKeys(e) {
			switch (e.keyCode) {
			case 27: //esc
			case 9:
				//tab
				e.preventDefault();
				e.stopPropagation();
				break;
			case 40:
				//down
				e.preventDefault();
				e.stopPropagation();
				var searchIndex = ++this.state.searchIndex % this.searchResults.length;
				if (!this.state.isCalculatedField) {
					this.refs.searchText.value = this.searchResults[searchIndex].id;
				}
				this.setState({ searchIndex: searchIndex });
				break;

			case 38:
				//up
				e.preventDefault();
				e.stopPropagation();
				if (this.state.searchIndex == 0) {
					var searchIndex = this.searchResults.length - 1;
				} else {
					var searchIndex = --this.state.searchIndex % this.searchResults.length;
				}
				if (!this.state.isCalculatedField) {
					this.refs.searchText.value = this.searchResults[searchIndex].id;
				}
				this.setState({ searchIndex: searchIndex });
				break;
			}
		},

		searchColumns: function searchColumns(e) {
			e.preventDefault();
			e.stopPropagation();
			switch (e.keyCode) {
			case 40: //down
			case 38:
				//up
				break;

			case 27:
				//esc
				this.props.closeChangeColumn();
				break;

			case 9:
				//tab
				switch (this.state.action) {
				case 'select_fact':
				case 'select_dimension':
					//do nothing
					break;

				default:
					if (this.searchResults > -1 && this.searchResults[this.state.searchIndex]) {
						var readyToAdd = this.state.readyToAdd;
						readyToAdd.push(this.searchResults[this.state.searchIndex]);
						this.setState({ readyToAdd: readyToAdd });
						this.refs.searchText.select();
					}
					break;
				}
				break;

			case 13:
				//enter
				if (this.state.isCalculatedField) {
					this.columnClicked(this.searchResults[this.state.searchIndex]);
				} else {
					if (this.searchResults.length <= this.state.searchIndex || this.refs.searchText.value.indexOf('|') > -1) {
						var column = IdUtils.details(this.refs.searchText.value);
						if (column) {
							column.id = this.refs.searchText.value;
							this.columnClicked(column);
						} else {
							LeoKit.alert('Invalid Column: ' + this.refs.searchText.value);
						}
					} else {
						this.columnClicked(this.searchResults[this.state.searchIndex]);
					}
				}
				break;

			default:
				if (this.state.isCalculatedField) {
					if ($.trim($(this.refs.calculatedField).text()) === '') {
						$(this.refs.calculatedField).empty();
					} else {
						var expression = $(this.refs.calculatedField).clone();
						expression.find('span').replaceWith(' ');
						var searchText = expression.text();

						if (searchText.charCodeAt(0) != 160) {
							$(this.refs.calculatedField).prepend('&nbsp;');
						}
						if (searchText.charCodeAt(searchText.length - 1) != 160) {
							$(this.refs.calculatedField).append('&nbsp;');
						}

						searchText = $.trim(searchText.replace(/[-\s+\/*\()0-9|]+/g, ' '));
						expression = null;
					}
				} else {
					var searchText = this.refs.searchText.value;
				}
				if (searchText != '') {
					this.searchResults = FieldsStore.searchFields(this.state.which, this.state.parent_id, searchText) || [];
				} else if (this.props.id) {
					this.searchResults = FieldsStore.searchFields(this.state.which, this.state.parent_id) || [];
				} else {
					this.searchResults = [];
				}

				this.setState({
					searchText: searchText,
					searchIndex: 0,
					showTree: false
				});
				break;
			}
		},

		removeReady: function removeReady(index) {
			var readyToAdd = this.state.readyToAdd;
			readyToAdd.splice(index, 1);
			this.setState({ readyToAdd: readyToAdd });
		},

		boldSearchText: function boldSearchText(str) {
			if (this.state.searchText != '') {
				var searchTextRegExp = new RegExp(this.state.searchText, "i");
				var rawMarkup = str.replace(searchTextRegExp, '<b>$&</b>');
			} else {
				var rawMarkup = str;
			}

			if (str == 'Date Range') {
				rawMarkup = '<i class="icon-calendar"></i>' + rawMarkup;
			}

			return { __html: rawMarkup };
		},

		showAdvanced: function showAdvanced(fx) {
			switch (this.state.action) {
			case 'add_fact':
				this.context.show_dialog('advanced', { id: this.props.id, editing: 'row', iterator: this.props.iterator, params: this.props.params, fx: fx });
				break;

			default:case 'change_dimension':case 'add_dimension':
				this.context.show_dialog('dimension_advanced', { id: this.props.id, editing: this.props.where || 'row', iterator: this.props.iterator });
				break;
			}
			this.props.closeChangeColumn();
		},

		setChartType: function setChartType(chart) {
			this.setState({
				chart: chart
			});
		},

		toggleTree: function toggleTree(toggle) {
			if (toggle === true || toggle === false) {
				this.setState({ showTree: toggle });
			} else {
				this.setState({ showTree: !this.state.showTree });
			}
		},

		toggleBranch: function toggleBranch(branch) {
			this.setState({ openBranch: this.state.openBranch == branch ? false : branch });
		},

		initFx: function initFx() {

			this.showAdvanced('fx');

		/*
  $(document.body).addClass('column-builder-picking-metric');
  this.setState({ isCalculatedField: true }, function() {
  	$('.expression-builder').empty();
  });
  */
		},

		uninitFx: function uninitFx() {
			$(document.body).removeClass('column-builder-picking-metric');
			this.setState({ isCalculatedField: false });
		},

		columnClicked: function columnClicked(column) {

			var thisComponent = this;
			var calculatedField = this.refs.calculatedField;

			if (this.state.isCalculatedField) {
				var cursorElement = '<span contentEditable="false">' + column.id + (column.id.indexOf('|') == -1 ? '|sum' : '') + '</span>';
				if (thisComponent.state.searchText == '') {
					$(calculatedField).append(cursorElement);
				} else {
					$(calculatedField).contents().each(function (i) {
						if (this.nodeType == 3 && this.textContent.indexOf(thisComponent.state.searchText) != -1) {
							$(this).after(cursorElement, '&nbsp;');
							var re = new RegExp(thisComponent.state.searchText.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "ig");
							$(this).replaceWith($(this).text().replace(re, ''));
						}
					});
				}

				if ($(calculatedField).text().charCodeAt(0) != 160) {
					$(calculatedField).prepend('&nbsp;');
				}
				if ($(calculatedField).text().charCodeAt($(calculatedField).text().length - 1) != 160) {
					$(calculatedField).append('&nbsp;');
				}

				$('.info-box').hide();
				calculatedField.focus();
				var range = document.createRange();
				var sel = window.getSelection();
				sel.removeAllRanges();
				range.setStartAfter(cursorElement);
				sel.addRange(range);

				this.setState({ searchText: '' });
			} else {
				this.replaceColumn(column);
			}
		},

		buildExpression: function buildExpression() {
			var calculatedField = this.refs.calculatedField;
			var expression = $(calculatedField).text().replace(/\s/g, '');
			var column = {
			//format: '',
				id: 'fx(' + expression + ')',
				label: '(' + expression + ')',
				parent: {
					id: '',
					label: 'calculated field'
				},
				type: 'metric'
			};
			this.replaceColumn(column);
			$(document.body).removeClass('column-builder-picking-metric');
		},

		render: function render() {

			var thisComponent = this;

			var searchIndex = thisComponent.state.searchIndex;
			var browseIndex = thisComponent.state.browseIndex;

			var left = this.state.position && this.state.position.left ? this.state.position.left : 0;
			var top = this.state.position && this.state.position.top ? this.state.position.top : 0;
			var addClass = this.props.addClass ? this.props.addClass : '';

			var className = this.state.position.arrow || '';

			var icon = this.state.which == 'metric' ? 'icon-sprite-123' : 'icon-ion-social-buffer-outline';

			switch (this.state.action) {
			case 'add_series':
			case 'add_fact':
			case 'add_metric_to_series':
				var title = 'Add Metric';
				var placeholder = 'Type to add metric...';
				break;

			case 'select_metric':
			case 'pick_metric':
				var title = 'Select Metric';
				var placeholder = 'Type to select metric...';
				break;

			case 'pick_fact':
				var title = 'Select Fact';
				var placeholder = 'Type to select fact...';
				break;

			case 'pick_date':
				var title = 'Select Date';
				var placeholder = 'Type to select delete...';
				break;

			case 'change_metric':
			case 'edit_series_metric':
				var title = 'Change Metric';
				var placeholder = 'Type to select metric...';
				break;

			case 'pick_partition':
			case 'pick_dimension':
				var title = 'Select Dimension';
				var placeholder = 'Type to select dimension...';
				break;

			case 'select_dimension':
			case 'add_dimension':
			case 'edit_series_dimension':
			case 'update_chart_dimension':
				var title = 'Add Dimension';
				var placeholder = 'Type to add dimension...';
				break;

			case 'add_filter':
				var title = 'Add Filter';
				var placeholder = 'Type to select column...';
				break;

			case 'pick_filter':
				var title = 'Select Filter';
				var placeholder = 'Type to select filter...';
				break;

			case 'pick_either':
				var title = "Select column";
				var placeholder = 'Type to select column...';
				break;

			case 'change_dimension':
				var title = 'Change Dimension';
				var placeholder = 'Type to add dimension...';
				break;

			case 'select_dimension':
			default:
				var title = this.props.drillIn ? 'Drill In' : 'Change Dimension';
				var placeholder = this.state.action && this.state.action == 'fact' ? 'Type to add metric...' : 'Type to add dimension...';
				addClass = 'arrow-left-top';
				break;
			}

			var style = {};

			var reportTableContentHeight = $('.report-table-content').height() || $('body').height();

			if (this.props.position && this.props.position.bottom < reportTableContentHeight - this.props.position.bottom - 25) {
				style = { left: left, bottom: this.props.position.bottom };
				className = (className + ' ' + addClass).replace('arrow-left-top', 'arrow-left-bottom').replace('arrow-right-top', 'arrow-right-bottom').replace('arrow-up-right', 'arrow-down-right');
			} else {
				style = { left: left, top: top };
				className += ' ' + addClass;
			}

			if (this.props.position && this.props.position.right < 500) {
				var columnSortableContainerWidth = $('#reportMain .columnSortableContainer').width() * 1.05;
				style.right = this.props.position.right - columnSortableContainerWidth;
				delete style.left;
				className = className.replace('arrow-left-top', 'arrow-right-top').replace('arrow-left-bottom', 'arrow-right-bottom');
			}

			if (this.state.isCalculatedField == true) {
				placeholder = 'Type to add fx...';
			}

			return React.createElement(
				'div',
				{ className: "popup-menu change-column add-shadow " + className, style: style },
				false && this.props.maskOff ? false : React.createElement('div', { className: 'mask', onClick: this.props.closeChangeColumn }),
				React.createElement(
					'div',
					null,
					React.createElement(
						'div',
						{ className: 'controls-wrapper' },
						React.createElement(
							'div',
							null,
							React.createElement('i', { className: icon }),
							React.createElement(
								'span',
								null,
								title
							),
							React.createElement('i', { className: 'icon-cancel pull-right', onClick: this.props.closeChangeColumn }),
							this.state.showFx ? this.state.isCalculatedField ? React.createElement('i', { className: 'icon-sprite-123 pull-right', onClick: this.uninitFx }) : React.createElement('i', { className: 'icon-fx pull-right', onClick: this.initFx }) : false
						),
						this.state.action == 'add_series' && this.props.chartTypes ? React.createElement(
							'div',
							{ className: 'series-type' },
							this.props.chartTypes.map(function (chart, index) {
								return React.createElement(
									'span',
									{ key: index },
									React.createElement('input', { name: 'series_type', type: 'radio', id: "series_type-" + chart, value: chart, defaultChecked: index == 0, onChange: thisComponent.setChartType.bind(null, chart) }),
									React.createElement('label', { htmlFor: "series_type-" + chart, title: chart, className: "icon-chart-" + chart })
								);
							})
						) : false,
						React.createElement(
							'div',
							{ className: 'ready-to-add' },
							this.state.readyToAdd.map(function (ready, index) {
								return React.createElement(
									'div',
									{ className: ready.type, key: index },
									React.createElement('i', { className: 'icon-cancel pull-right', onClick: thisComponent.removeReady.bind(null, index) }),
									React.createElement(
										'div',
										{ className: 'parent-label' },
										ready.parent.label
									),
									React.createElement(
										'div',
										{ className: 'column-label' },
										ready.label
									)
								);
							}),
							this.state.readyToAdd.length > 0 ? React.createElement(
								'p',
								{ className: 'go-button text-right' },
								React.createElement(
									'button',
									{ type: 'button', onClick: this.replaceColumn.bind(null, null) },
									'GO >'
								)
							) : false
						),
						this.state.isCalculatedField ? React.createElement(
							'div',
							null,
							React.createElement('div', { className: 'user-input expression-builder column-builder-field-target', ref: 'calculatedField', placeholder: placeholder, contentEditable: 'true', onKeyDown: this.catchSpecialKeys, onKeyUp: this.searchColumns }),
							React.createElement(
								'p',
								{ className: 'go-button' },
								React.createElement(
									'button',
									{ type: 'button', onClick: this.buildExpression },
									'GO >'
								)
							)
						) : React.createElement('input', { id: 'columnSearchInput', className: 'user-input', ref: 'searchText', placeholder: placeholder, defaultValue: this.props.defaultValue || '', onKeyDown: this.catchSpecialKeys, onKeyUp: this.searchColumns, onClick: this.toggleTree.bind(null, false) }),
						React.createElement('i', { className: this.state.showTree ? "icon-search" : "icon-flow-tree", title: this.state.showTree ? "search" : "browse", onClick: this.toggleTree })
					),
					this.state.showTree ? React.createElement(
						'div',
						{ className: 'browse-results-wrapper', ref: 'browseResultsWrapper' },
						React.createElement(
							'ul',
							{ className: 'browse-results', ref: 'browseResults' },
							Object.keys(thisComponent.browseResults).map(function (column_type, index) {

								switch (column_type) {
								case 'facts':
									var icon = 'icon-sprite-123';
									var parent_type = 'fact';
									var child_type = 'metric';
									break;

								case 'dimensions':
									var icon = 'icon-ion-social-buffer-outline';
									var parent_type = 'dimension';
									var child_type = 'attribute';
									break;
								}

								return React.createElement(
									'li',
									{ key: index },
									React.createElement('i', { className: icon }),
									React.createElement(
										'span',
										{ style: { textTransform: 'capitalize' } },
										column_type
									),
									React.createElement(
										'ul',
										{ className: "bough " + column_type },
										thisComponent.browseResults[column_type].map(function (parent, index) {

											if (thisComponent.state.action === 'pick_date' && !parent.is_date) {
												return false;
											}

											return React.createElement(
												'li',
												{ key: index, className: "branch " + parent_type + (thisComponent.state.openBranch != parent.label ? ' closed' : ''),
													onClick: thisComponent.state.action === 'pick_fact' || thisComponent.state.action === 'pick_date' ? thisComponent.columnClicked.bind(null, parent) : thisComponent.toggleBranch.bind(null, parent.label) },
												React.createElement(
													'div',
													null,
													parent.label
												),
												thisComponent.state.openBranch == parent.label ? React.createElement(
													'ul',
													{ className: "twig " + child_type + "s" },
													parent[child_type + 's'].map(function (column, index) {
														if (column.type == 'lag') {
															return false;
														}
														if (column.label == parent.label) {
														//column.id += '|count';
															column.label += ' Count';
															column.type = 'fact';
														}
														return React.createElement(
															'li',
															{ key: index, className: "leaf " + child_type, onClick: thisComponent.columnClicked.bind(null, column) },
															React.createElement(
																'div',
																null,
																column.label
															),
															React.createElement(InfoBox, { column: column })
														);
													})
												) : false
											);
										})
									)
								);
							})
						)
					) : React.createElement(
						'div',
						{ className: 'search-results-wrapper', ref: 'searchResultsWrapper' },
						React.createElement(
							'ul',
							{ className: 'search-results', ref: 'searchResults' },
							this.searchResults.map(function (column, index) {
								if (index > 100) {
									return false;
								}
								if (column.type == 'lag') {
									return false;
								}

								icon = column.type == 'metric' || column.type == 'fact' ? 'icon-sprite-123' : 'icon-ion-social-buffer-outline';
								var column_type = column.type || 'attribute';

								return React.createElement(
									'li',
									{ key: index, className: column_type + (searchIndex == index ? ' hover' : ''), onClick: thisComponent.columnClicked.bind(null, column), onMouseEnter: thisComponent.setSearchIndex.bind(null, index) },
									React.createElement('label', { dangerouslySetInnerHTML: thisComponent.boldSearchText(column.label) }),
									React.createElement(
										'span',
										{ className: 'text-right' },
										React.createElement('i', { className: icon }),
										React.createElement('span', { dangerouslySetInnerHTML: thisComponent.boldSearchText(column.parent ? column.parent.label : '') })
									),
									React.createElement(InfoBox, { column: column })
								);
							})
						)
					),
					this.state.action == 'change_dimension' || this.state.action == 'add_dimension' || this.state.action == 'add_fact' ? React.createElement(
						'div',
						{ className: 'advanced-link', onClick: this.showAdvanced },
						'Advanced...'
					) : false
				)
			);
		}

	});

},{"../../actions/ReportActions":828,"../../actions/ReportFilterActions":829,"../../stores/FieldsStore":834,"../../utils/IdUtils":837,"../../utils/Serializer":839,"../common/infoBox.jsx":841,"react":785}],843:[function(require,module,exports){
	'use strict';

	var React = require('react');

	var parse_date = require('../../../../../lib/utils/parse_date.js').parse_date;

	module.exports = React.createClass({
		displayName: 'exports',


		contextTypes: {
			show_dialog: React.PropTypes.func,
			close_dialog: React.PropTypes.func
		},

		periods: {
			days: 'Day',
			weeks: 'Week',
			months: 'Month',
			quarters: 'Quarter',
			years: 'Year'
		},

		toDates: {
			'-to-yesterday': 'to date of yesterday', //-to-yesterday
			'-to-date': 'to date of today', //-to-date
			'period': 'to end of period', //
			' plus future': 'no end date' // plus future
		},

		presets: {
			'today': [0, 'days', 'period', true],
			'yesterday': [1, 'days', 'period', false],
			'last 7 days': [7, 'days', 'period', false],
			'last 30 days': [30, 'days', 'period', false],
			'Last week': [1, 'weeks', 'period', false], //duplicated below
			'Last month': [1, 'months', 'period', false], //duplicated below
			'This month-to-yesterday': [0, 'months', '-to-yesterday', true], //duplicated below
			'last 2 months-to-date': [2, 'months', '-to-date', true],

			'this week': [0, 'weeks', 'period', true],
			'this week-to-date': [0, 'weeks', '-to-date', true],
			'this week-to-yesterday': [0, 'weeks', '-to-yesterday', true],

			'this month': [0, 'months', 'period', true],
			'this month-to-date': [0, 'months', '-to-date', true],
			'this month-to-yesterday': [0, 'months', '-to-yesterday', true],

			'this quarter': [0, 'quarters', 'period', true],
			'this quarter-to-date': [0, 'quarters', '-to-date', true],
			'this quarter-to-yesterday': [0, 'quarters', '-to-yesterday', true],

			'this year': [0, 'years', 'period', true],
			'this year-to-date': [0, 'years', '-to-date', true],
			'this year-to-yesterday': [0, 'years', '-to-yesterday', true],

			'last week': [1, 'weeks', 'period', false],
			'last week-to-date': [1, 'weeks', '-to-date', false],
			'last week-to-yesterday': [1, 'weeks', '-to-yesterday', false],

			'last month': [1, 'months', 'period', false],
			'last month-to-date': [1, 'months', '-to-date', false],
			'last month-to-yesterday': [1, 'months', '-to-yesterday', false],

			'last quarter': [1, 'quarters', 'period', false],
			'last quarter-to-date': [1, 'quarters', '-to-date', false],
			'last quarter-to-yesterday': [1, 'quarters', '-to-yesterday', false],

			'last year': [1, 'years', 'period', false],
			'last year-to-date': [1, 'years', '-to-date', false],
			'last year-to-yesterday': [1, 'years', '-to-yesterday', false]

		},

		formatDate: function formatDate(date) {
			function pad(number) {
				return (number < 10 ? '0' : '') + number;
			}
			var date = !date ? new Date() : new Date(date);
			return date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate());
		},

		getInitialState: function getInitialState() {

			var thisComponent = this;

			var state = {
				defaultValue: '',
				custom: true,
				range: false,
				last: 1,
				period: 'days',
				to_date: '',
				current: 0,
				start: null,
				end: null,
				atDateRange: false
			};

			if (this.props.filter.is_metric_filter) {
				state.atDateRange = true;
			}

			if (!this.props.filter.value) {
				state.custom = false;
			} else {
				state.defaultValue = this.props.filter.value.join(' - ').toLowerCase();

				if (state.defaultValue.slice(0, 11) == '@daterange(') {
					if (state.defaultValue.indexOf('-') != -1) {
						state.atDateRange = state.defaultValue.slice(11).split(/[\(\- ]+/);
					} else {
						state.atDateRange = state.defaultValue.split(/[\(\- ]+/);
					}

					if (state.atDateRange[2] && state.atDateRange[2].slice(-1) != 's') {
						state.atDateRange[2] += 's';
					}
				} else if (state.defaultValue in this.presets) {
					state.custom = false;

					state.last = this.presets[state.defaultValue][0];
					state.period = this.presets[state.defaultValue][1];
					state.to_date = this.presets[state.defaultValue][2];
					state.current = this.presets[state.defaultValue][3];
				} else {
					Object.keys(this.presets).map(function (preset) {
						var dates = parse_date(preset).map(function (date) {
							return thisComponent.formatDate(date);
						}).join(' - ');
						if (state.defaultValue == dates) {
							state.custom = false;
						}
					});
				}
			}

			if (state.custom == true) {
				if (this.props.filter.value[0] && this.props.filter.value[0].match(/\d{4}\-\d{2}\-\d{2}/)) {
					state.start = this.props.filter.value[0];
					state.end = this.props.filter.value[1] ? this.props.filter.value[1] : startDate;
					state.range = true;
				} else {
					var defaults = state.defaultValue.split(/[ +]+/g);
					state.last = defaults[1] || 0;
					state.period = defaults[2] || 'days';
					if (defaults[3] && defaults[3].indexOf('current') != -1) {
						state.current = true;
						defaults[3] = defaults[3].substr(defaults[3].indexOf('current') + 7);
					} else {
						state.current = false;
					}
					state.to_date = defaults[3] || 'period';
				}
			}

			return state;
		},

		componentDidMount: function componentDidMount() {
			this.initCalendars();
		},

		componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
			this.initCalendars();
		},

		loading: false,

		initCalendars: function initCalendars() {
			var thisComponent = this;

			//if (this.state.custom && !$('#custom-date-range > div').hasClass('hasDatepicker')) {
			if (!$('#custom-date-range > div').hasClass('hasDatepicker')) {

				$('#custom-date-range').dateRangePicker({
					appendTo: $('#custom-date-range'),
					//setRange: [ this.state.start, this.state.end ],
					firstDay: 0,
					onChange: function onChange() {
						var range = $('#custom-date-range').dateRangePicker('getRange');
						if (range) {
							range.end = range.end || range.start;
							thisComponent.setCustomRange([thisComponent.formatDate(range.start), thisComponent.formatDate(range.end)]);
						}
					}
				});

				if (!this.state.range) {
					if (this.state.atDateRange) {
						var dates = parse_date(this.state.defaultValue);
						$('#custom-date-range').dateRangePicker("setRange", { start: new Date(dates[0]), end: new Date(dates[1] + ' 23:59:59') });
					} else {
						var date = 'Last ' + this.refs.customLast.value + ' ' + this.refs.customPeriod.value + (this.refs.customCurrent.checked ? '+current' : '') + (this.refs.customToDate.value == 'period' ? '' : this.refs.customToDate.value);
						var dates = parse_date(date);
						$('#custom-date-range').dateRangePicker("setRange", { start: new Date(dates[0]), end: new Date(dates[1] + ' 23:59:59') });
					}
				} else {
					$('#custom-date-range').dateRangePicker("setRange", { start: new Date(thisComponent.state.start), end: new Date(thisComponent.state.end + ' 23:59:59') });
				}
			}

			this.loading = true;

			/* fix calendar height */
			if ($(this.refs.presetList).closest('.filter-select').hasClass('flow-up')) {
				var off = $(this.refs.presetList).closest('.filter-wrapper').offset();
				$(this.refs.presetList).css({ maxHeight: off.top - 400 });
			} else {
				var off = $(this.refs.presetList).offset();
				$(this.refs.presetList).css({ maxHeight: 'calc(100vh - ' + Math.max(0, off.top + 20) + 'px)' });
			}
		},

		/*
 toggleCustom: function() {
 	var thisComponent = this;
 
 	if (!this.state.custom) {
 		setTimeout(function() {
 			thisComponent.setCustomTimespan();
 		}, 500)
 	}
 	this.setState({custom:!this.state.custom});
 },
 */

		setRange: function setRange(dates, e) {
			$(this.refs.presetList).find('button').removeClass('active');
			$(e.target).addClass('active');

			if (typeof dates == 'string') {
				dates = [dates];
			}

			this.props.setRange(dates);

			if (this.props.delayedClose) {
				this.props.delayedClose(true);
			}
		},

		setCustomTimespan: function setCustomTimespan() {
			var date = 'Last ' + this.refs.customLast.value + ' ' + this.refs.customPeriod.value + (this.refs.customCurrent.checked ? '+current' : '') + (this.refs.customToDate.value == 'period' ? '' : this.refs.customToDate.value);
			this.props.setRange([date]);

			var test = parse_date(date);
			this.loading = false;
			$('#custom-date-range').dateRangePicker("setRange", { start: new Date(test[0]), end: new Date(test[1] + ' 23:59:59') });
			this.loading = true;
		},

		setCustomRange: function setCustomRange(range) {
			if (this.loading) {
				this.setState({ range: true });
				this.props.setRange(range);
			}
		},

		changedCustom: function changedCustom(which, e) {
			this.setState({ range: false });
			switch (which) {
			case 'last':
				this.refs.customLast.value = Math.abs(parseInt(this.refs.customLast.value));
				this.setState({ last: e.currentTarget.value });
				break;
			case 'period':
				this.setState({ period: e.currentTarget.value });
				break;
			case 'current':
				this.setState({ current: e.currentTarget.checked });
				break;
			case 'to_date':
				this.setState({ to_date: e.currentTarget.value });
				break;
			}
			this.setCustomTimespan();
		},

		changedAtDateRange: function changedAtDateRange(which, e) {
			this.setState({ range: false });
			switch (which) {
			case 'start':
				this.setState({ start: e.currentTarget.value });
				break;
			case 'end':
				this.setState({ end: e.currentTarget.value });
				break;
			case 'periond':
				this.setState({ period: e.currentTarget.value });
				break;
			}
			this.setAtDateRange();
		},

		setAtDateRange: function setAtDateRange() {
			var date = '@daterange(' + this.refs.dateRangeStart.value + (this.refs.dateRangeStart.value && this.refs.dateRangeEnd.value ? '-' : '') + this.refs.dateRangeEnd.value + ' ' + this.refs.dateRangePeriod.value + ' ago)';
			this.props.setRange([date]);
			var dates = parse_date(date);
			this.loading = false;
			$('#custom-date-range').dateRangePicker("setRange", { start: new Date(dates[0]), end: new Date(dates[1] + ' 23:59:59') });
			this.loading = true;
		},

		render: function render() {

			var thisComponent = this;

			String.prototype.capitalize = function () {
				return this.toLowerCase().replace(/\b\w/g, function (m) {
					return m.toUpperCase();
				});
			};

			return React.createElement(
				'div',
				null,
				!this.state.atDateRange ? React.createElement(
					'div',
					{ className: 'range-custom' },
					React.createElement(
						'fieldset',
						{ className: !this.state.range ? 'active' : '' },
						React.createElement(
							'legend',
							null,
							'Custom Timespan'
						),
						React.createElement(
							'div',
							null,
							'Last ',
							React.createElement('input', { ref: 'customLast', className: 'new-styled', type: 'number', min: '0', defaultValue: this.state.last, onChange: this.changedCustom.bind(this, 'last') }),
							React.createElement(
								'select',
								{ ref: 'customPeriod', className: 'new-styled', defaultValue: this.state.period, onChange: this.changedCustom.bind(this, 'period') },
								Object.keys(this.periods).map(function (period, i) {
									return React.createElement(
										'option',
										{ key: i, value: period },
										thisComponent.periods[period]
									);
								})
							)
						),
						React.createElement(
							'div',
							null,
							React.createElement(
								'select',
								{ ref: 'customToDate', className: 'new-styled', defaultValue: this.state.to_date, onChange: this.changedCustom.bind(this, 'to_date') },
								Object.keys(this.toDates).map(function (toDate, i) {
									return React.createElement(
										'option',
										{ key: i, value: toDate },
										thisComponent.toDates[toDate]
									);
								})
							)
						),
						React.createElement(
							'div',
							null,
							React.createElement(
								'label',
								null,
								React.createElement('input', { ref: 'customCurrent', type: 'checkbox', defaultChecked: this.state.current, onChange: this.changedCustom.bind(this, 'current') }),
								' Include current ',
								React.createElement('span', null)
							)
						)
					),
					React.createElement(
						'fieldset',
						{ className: this.state.range ? 'active' : '' },
						React.createElement(
							'legend',
							null,
							'Custom Range'
						),
						React.createElement('div', { id: 'custom-date-range', className: 'calendar' })
					)
				) : React.createElement(
					'div',
					{ className: 'range-custom' },
					React.createElement(
						'fieldset',
						{ className: !this.state.range ? 'active' : '' },
						React.createElement(
							'legend',
							null,
							'Date Range'
						),
						React.createElement(
							'div',
							null,
							React.createElement('input', { ref: 'dateRangeStart', className: 'new-styled', type: 'number', min: '0', defaultValue: this.state.atDateRange[0], onChange: this.changedAtDateRange.bind(this, 'start') }),
							React.createElement(
								'span',
								null,
								' — '
							),
							React.createElement('input', { ref: 'dateRangeEnd', className: 'new-styled', type: 'number', min: '0', defaultValue: this.state.atDateRange[1], onChange: this.changedAtDateRange.bind(this, 'end') }),
							React.createElement(
								'select',
								{ ref: 'dateRangePeriod', className: 'new-styled', defaultValue: this.state.atDateRange[2], onChange: this.changedAtDateRange.bind(this, 'period') },
								Object.keys(this.periods).map(function (period, i) {
									return React.createElement(
										'option',
										{ key: i, value: period },
										period
									);
								})
							),
							React.createElement(
								'span',
								null,
								'ago'
							)
						)
					),
					React.createElement(
						'fieldset',
						{ className: this.state.range ? 'active' : '' },
						React.createElement(
							'legend',
							null,
							'Custom Range'
						),
						React.createElement('div', { id: 'custom-date-range', className: 'calendar' })
					)
				),
				!this.state.atDateRange ? React.createElement(
					'div',
					{ className: 'range-presets' },
					React.createElement(
						'div',
						{ className: 'preset-list', ref: 'presetList' },
						React.createElement(
							'ul',
							null,
							Object.keys(this.presets).map(function (preset, index) {
								var parsed = parse_date(preset);
								var dates = parsed.map(function (date) {
									return thisComponent.formatDate(date);
								}).join(' - ');
								//if (parsed.length == 1) { parsed[1] = parsed[0]; }
								return React.createElement(
									'li',
									{ key: index },
									React.createElement(
										'button',
										{ type: 'button', className: preset.toLowerCase() == thisComponent.state.defaultValue ? 'active' : '', onClick: thisComponent.setRange.bind(thisComponent, preset.capitalize()) },
										preset.capitalize()
									),
									React.createElement(
										'button',
										{ type: 'button', className: dates.toLowerCase() == thisComponent.state.defaultValue ? 'active' : '', onClick: thisComponent.setRange.bind(thisComponent, parsed) },
										dates
									)
								);
							})
						)
					)
				) : false
			);
		}

	});

},{"../../../../../lib/utils/parse_date.js":4,"react":785}],844:[function(require,module,exports){
	'use strict';

	var React = require('react');

	//var parse_date = require('../../../../../lib/utils/parse_date.js').parse_date;
	var DateRangePicker = require('../dialogs/DateRangePicker.jsx');

	module.exports = React.createClass({
		displayName: 'exports',


		operators: ['==', '=', '<>', '!=', '!', '=>', '>=', '=<', '<=', 'between', '><', '>', '<'],

		getInitialState: function getInitialState() {

			var filter = this.props.filter;

			//fix value for dynamic ranges
			if (filter.description) {
				filter.value = [filter.description];
				delete filter.description;
			}

			if (typeof filter.value == 'undefined') {
				filter.value = [];
			}

			//force to array
			if (!Array.isArray(filter.value)) {
				if (filter.value == '') {
					filter.value = [];
				} else {
					filter.value = [filter.value];
				}
			}

			//retro fit
			if (!filter.checkboxes) {
				filter.checkboxes = {};
				for (var i in filter.value) {
					filter.checkboxes[filter.value[i]] = true;
				}
			}

			var comparison = filter.comparison;

			this.autoComplete(filter.id, '');

			return {
				isDateRange: filter.comparison && filter.comparison == 'between',
				isDynamic: filter.value && filter.value[0] && !filter.value[0].toString().match(/\d{4}-\d{2}-\d{2}/),
				isDate: filter.id.toLowerCase().indexOf('date.id') > -1 || filter.id.toLowerCase().indexOf('date._id') > -1 || filter.id.toLowerCase().indexOf('date.date') !== -1,
				singleValue: filter.singleValue,
				showEditor: this.props.editingFilter == filter.id,
				filter: filter,
				searchText: '',
				searchIndex: -1,
				searchResults: [],
				comparison: comparison
			};
		},

		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			if (nextProps.saving == true) {
				this.props.updateReportFilter(this.state.filter);
			}

			var filter = this.state.filter;

			if (!filter.label && nextProps.filter.label) {
				filter.label = nextProps.filter.label;
			}

			if (!filter.dimension && nextProps.filter.dimension) {
				filter.dimension = nextProps.filter.dimension;
			}

			this.setState({ filter: filter });
		},

		componentDidMount: function componentDidMount() {
			this._isMounted = true;
			this.initDatePicker();
			if (this.refs.searchText) {
				this.refs.searchText.select();
			}

			var offset = $(this.refs.filterSelect).offset();
			if (offset.top > window.innerHeight / 2) {
				$(this.refs.filterSelect).addClass('flow-up');
			} else {
				$(this.refs.filterSelect).removeClass('flow-up');
			}
		},

		componentWillUnmount: function componentWillUnmount() {
			this._isMounted = false;
		},

		componentDidUpdate: function componentDidUpdate() {
			this.initDatePicker();

			if (this.refs.searchResultsWrapper) {

				var searchResultsWrapper = $(this.refs.searchResultsWrapper);

				var height = searchResultsWrapper.height();
				var scrollTop = searchResultsWrapper.scrollTop();
				var pos = searchResultsWrapper.find('li.hover').position();

				if (pos) {
					if (pos.top < 90) {
						searchResultsWrapper.scrollTop(scrollTop - 90);
					}

					if (pos.top > height) {
						searchResultsWrapper.scrollTop(pos.top - height + scrollTop);
					}

					if (pos.top < 0) {
						searchResultsWrapper.scrollTop(0);
					}
				}
			}
		},

		initDatePicker: function initDatePicker() {
			var thisComponent = this;
			if (this.state.isDate && !(this.state.isDynamic || this.state.isDateRange)) {
				var values = this.state.filter.value;
				if (this.refs && this.refs.multidatePicker) {
					$(this.refs.multidatePicker).multiDatesPicker({
						dateFormat: "yy-mm-dd",
						defaultDate: values.length > 0 ? values[0] : null,
						addDates: values.length > 0 ? values : null,
						onSelect: function onSelect(date, inst) {
							thisComponent.toggleValue(date);
						}
					});
				}
			}

			if (this.state.showEditor && this.refs.searchText) {
				this.refs.searchText.focus();
			}
		},

		autoComplete: function autoComplete(filter_id, term) {
			var _this = this;

			if (this.props.autoComplete) {
				var thisComponent = this;
				this.props.autoComplete(filter_id, term, function (results) {
					var searchResults = [];
					for (var i = 0; i < results.suggestions.length; i++) {
						var val = results.suggestions[i].value;
						searchResults.push({
							id: results.suggestions[i].value,
							text: val
						});
					}
					if (_this._isMounted) {
						_this.setState({
							searchIndex: -1,
							searchResults: searchResults
						});
					}
				}, this.props.filter.api);
			}
		},

		catchSpecialKeys: function catchSpecialKeys(e) {
			switch (e.keyCode) {
			case 27: //esc
			case 9:
				//tab
				e.preventDefault();
				e.stopPropagation();
				break;

			case 40:
				//down
				this.setState({ searchIndex: ++this.state.searchIndex % this.state.searchResults.length });
				break;

			case 38:
				//up
				if (this.state.searchIndex == 0) {
					this.setState({ searchIndex: this.state.searchResults.length - 1 });
				} else {
					this.setState({ searchIndex: --this.state.searchIndex % this.state.searchResults.length });
				}
				break;
			}
		},

		searchFilter: function searchFilter(e) {
			e.preventDefault();
			e.stopPropagation();

			var thisComponent = this;

			switch (e.keyCode) {
			case 40: //down
			case 38:
				//up
				break;

			case 27:
				//esc
				if (this.props.closeDialog) {
					this.props.closeDialog();
				} else if (this.props.delayedClose) {
					this.props.delayedClose(true);
				}
				break;

			case 9:case 13:
				//tab, enter
				if (this.state.searchIndex == -1 || this.state.searchIndex > this.state.searchResults.length - 1) {
					this.addValue(this.refs.searchText.value);
				} else {
					this.addValue(this.state.searchResults[this.state.searchIndex].id);
				}

				if (e.keyCode == 13) {
					if (this.props.saveFilter) {
						this.props.saveFilter();
					} else if (this.props.delayedClose) {
						this.props.delayedClose(true);
					}
				}
				break;

			default:
				var term = this.refs.searchText.value;
				this.autoComplete(this.state.filter.id, term);
				break;
			}
		},

		setRange: function setRange(values) {
			var filter = this.state.filter;
			filter.value = values;
			filter.comparison = 'between';
			filter.checkboxes = { '_': '' };
			for (var i = 0; i < values.length; i++) {
				filter.checkboxes[values[i]] = true;
			}
			filter.updated = true;
			this.setState({ filter: filter });
		},

		toggleValue: function toggleValue(id) {
			var filter = this.state.filter;
			if (filter.value.indexOf(id) == -1) {
				this.addValue(id);
			} else {
				this.removeValue(id);
			}
		},

		addValue: function addValue(id) {
			var filter = this.state.filter;
			id = $.trim(id);
			for (var i = 0; i < this.operators.length; i++) {
				if (id.slice(0, this.operators[i].length) == this.operators[i]) {
					filter.comparison = this.operators[i];
					switch (filter.comparison) {
					case '==':
						filter.comparison = '=';break;
					case '!':
						filter.comparison = '!=';break;
					}
					id = $.trim(id.slice(this.operators[i].length));
					break;
				}
			}
			if (this.state.singleValue) {
				filter.checkboxes = {};
				filter.value = [];
			}
			if (filter.comparison == 'between') {
				id = id.replace(/\band\b/i, '&');
				var values = id.split(/[ ,&]+/);
				for (var i = 0; i < values.length; i++) {
					filter.checkboxes[values[i]] = true;
				}
				filter.value = values;
			} else {
				if (id != '' && id != '_') {
					filter.checkboxes[id] = true;
					if (filter.value.indexOf(id) == -1) {
						filter.value.push(id);
						filter.value.sort();
					}
				}
			}

			filter.updated = true;
			this.setState({ filter: filter });
			if (this.refs.searchText) {
				this.refs.searchText.select();
			}
			if (this.state.singleValue) {
				this.props.delayedClose(true);
			}
		},

		removeValue: function removeValue(id, e) {
			if (e) {
				e.stopPropagation();
			}

			var filter = this.state.filter;
			delete filter.checkboxes[id];
			var index = filter.value.indexOf(id);
			if (index != -1) {
				filter.value.splice(index, 1);
			}
			filter.updated = true;
			this.setState({ filter: filter });
		},

		toggleCheck: function toggleCheck(id, e) {
			e.stopPropagation();
			var filter = this.state.filter;

			if (filter.singleChoice) {
				filter.value = [id];
				for (var i in filter.checkboxes) {
					filter.checkboxes[i] = false;
				}
				filter.checkboxes[id] = true;
			} else {
				filter.checkboxes[id] = !(filter.checkboxes[id] && filter.checkboxes[id] != 'false');
				var index = filter.value.indexOf(id);
				if (!filter.checkboxes[id]) {
					if (index !== -1) {
						filter.value.splice(index, 1);
					}
				} else {
					if (index === -1) {
						filter.value.push(id);
					}
				}
			}
			filter.updated = true;
			this.setState({ filter: filter });
		},

		setSearchIndex: function setSearchIndex(index) {
			this.setState({ searchIndex: index });
		},

		render: function render() {

			var thisComponent = this;

			var filter = this.state.filter;

			var possibleValues = [];
			for (var value in filter.checkboxes) {
				if (value !== '_') {
				// skip _ which is a placeholder to keep this as an object, not an array
					var checked = filter.checkboxes[value] !== 'false' && filter.checkboxes[value] !== false;
					possibleValues.push({
						value: value,
						checked: checked
					});
				}
			}

			if (!this.state.singleValue) {
				var defaultValue = '';
			} else {
				var defaultValue = (filter.comparison && filter.comparison !== '=' ? filter.comparison + ' ' : '') + filter.value.join();
			}

			return React.createElement(
				'div',
				{ className: 'filter-select', ref: 'filterSelect' },
				this.state.isDate ? this.state.isDynamic || this.state.isDateRange ? React.createElement(DateRangePicker, { filter: filter, setRange: this.setRange, delayedClose: this.props.delayedClose }) : React.createElement(
					'div',
					{ className: 'clear-fix text-center', style: { padding: '10px' } },
					React.createElement('div', { id: 'filter_date_picker_' + filter.id, ref: 'multidatePicker' })
				) : React.createElement(
					'div',
					{ className: 'filter-editing' },
					React.createElement(
						'div',
						{ className: 'filter-selected-values' },
						!this.state.singleValue ? possibleValues.map(function (possible, index) {
							var inputType = thisComponent.props.filter.singleChoice ? 'radio' : 'checkbox';
							return React.createElement(
								'div',
								{ key: index },
								React.createElement(
									'label',
									null,
									React.createElement('input', { type: inputType, name: thisComponent.props.filter.id, defaultChecked: possible.checked, onClick: thisComponent.toggleCheck.bind(null, possible.value) }),
									possible.value
								),
								inputType == 'checkbox' ? React.createElement('i', { className: 'icon-cancel', onClick: thisComponent.removeValue.bind(thisComponent, possible.value) }) : false
							);
						}) : false
					),
					!filter.hideTypeAhead ? React.createElement(
						'div',
						{ className: 'filter-input-box' },
						React.createElement('input', { ref: 'searchText', placeholder: 'Type to Add Value...', defaultValue: defaultValue, onKeyDown: this.catchSpecialKeys, onKeyUp: this.searchFilter })
					) : false,
					React.createElement(
						'ul',
						{ className: 'filter-search-results', ref: 'searchResultsWrapper' },
						this.state.searchResults.map(function (result, index) {
							var className = (filter && filter.value && filter.value.indexOf(result.id) == -1 ? '' : 'selected') + (thisComponent.state.searchIndex == index ? ' hover' : '');
							return React.createElement(
								'li',
								{ key: index, className: className, onMouseEnter: thisComponent.setSearchIndex.bind(null, index), onClick: thisComponent.addValue.bind(null, result.id) },
								result.text
							);
						})
					)
				)
			);
		}

	});

},{"../dialogs/DateRangePicker.jsx":843,"react":785}],845:[function(require,module,exports){
	'use strict';

	var React = require('react');

	var Filter = require('./filters/filter.jsx');

	var ColumnSearch = require('./columnSearch.jsx');

	module.exports = React.createClass({
		displayName: 'exports',


		getInitialState: function getInitialState() {
			return {
				addingFilter: false,
				editingFilter: ''
			};
		},

		updateReportFilter: function updateReportFilter(filter, e) {
			if (e) {
				e.stopPropagation();
			}

			this.setState({
				addingFilter: false,
				editingFilter: ''
			});

			this.props.updateFilter({ id: filter.id, value: filter.value, checkboxes: filter.checkboxes, comparison: filter.comparison });
		},

		addReportFilter: function addReportFilter(column, e) {
			if (e) {
				e.stopPropagation();
			}

			var filter = {
				id: column.id,
				value: [],
				checkboxes: { "_": null },
				label: column.label
			};

			if (column.kind == 'date_range') {
				filter.comparison = 'between';
				filter.value = ['Today'];
			}

			if (column.type == 'metric') {
				filter.fact = column.parent.label;
				filter.singleValue = true;
			} else {
				filter.dimension = column.parent.label;
			}

			this.props.updateFilter(filter);

			this.setState({
				addingFilter: false,
				editingFilter: column.id
			});
		},

		openAddFilter: function openAddFilter(e) {
			if (e) {
				e.stopPropagation();
			}
			this.setState({ addingFilter: true });
		},

		closeAddFilter: function closeAddFilter(e) {
			if (e) {
				e.stopPropagation();
			}
			this.setState({ addingFilter: false });
		},

		editLimit: function editLimit(e) {
			var _this = this;

			this.setState({ editingLimit: true }, function () {
				_this.refs.limitAmount.focus();
				_this.refs.limitAmount.select();
			});
		},

		updateLimit: function updateLimit(e) {
			this.props.updateLimit(e.currentTarget.value);
			this.setState({ editingLimit: false });
		},

		handleLimitKeyDown: function handleLimitKeyDown(e) {
			if (e.keyCode == 13) {
				this.props.updateLimit(e.currentTarget.value);
				this.setState({ editingLimit: false });
			}
		},

		render: function render() {

			var thisComponent = this;

			return React.createElement(
				'div',
				{ className: "filters-wrapper" + (this.props.selectDataExpanded ? ' select-data-expanded' : '') },
				React.createElement(
					'ul',
					null,
					this.props.limitLabel ? React.createElement(
						'li',
						{ className: 'filter-wrapper', onClick: this.editLimit },
						React.createElement(
							'div',
							{ className: 'filter-heading' },
							React.createElement(
								'div',
								{ className: 'filter-name' },
								'Top ',
								this.props.limitLabel
							),
							React.createElement(
								'div',
								{ className: 'filter-text filter-values theme-form' },
								this.state.editingLimit ? React.createElement('input', { ref: 'limitAmount', type: 'text', min: '1', defaultValue: this.props.limit, onBlur: this.updateLimit, onKeyDown: this.handleLimitKeyDown, style: { width: '4em' } }) : React.createElement(
									'div',
									null,
									this.props.limit
								)
							)
						)
					) : false,
					!this.props.reportFilters ? false : this.props.reportFilters.filter(function (f) {
						return !f.isHidden;
					}).map(function (filter, index) {
						return React.createElement(Filter, {
							key: "filter-" + filter.id + "-" + (!Array.isArray(filter.value) ? filter.value : filter.value.join('|')) + '-' + index,
							ref: "filter-" + filter.id,
							locked: thisComponent.props.locked,
							filter: filter,
							reportFilters: thisComponent.props.reportFilters,
							removeFilter: thisComponent.props.removeFilter,
							autoComplete: thisComponent.props.autoComplete,
							updateReportFilter: thisComponent.updateReportFilter,
							editingFilter: thisComponent.state.editingFilter
						});
					}),
					this.props.addFilter != 'false' ? React.createElement(
						'li',
						{ className: 'filter-wrapper' },
						React.createElement(
							'div',
							{ className: 'add-filter align-middle cursor-pointer' },
							React.createElement(
								'div',
								{ onClick: this.openAddFilter },
								React.createElement('i', { className: 'icon-plus-circled' }),
								' ',
								React.createElement(
									'label',
									null,
									'Add Filter'
								)
							),
							this.state.addingFilter ? React.createElement(ColumnSearch, { closeChangeColumn: thisComponent.closeAddFilter, action: 'add_filter', position: { left: 25, top: 50, arrow: 'arrow-up-left' }, addReportFilter: this.addReportFilter }) : false
						)
					) : false
				)
			);
		}

	});

},{"./columnSearch.jsx":842,"./filters/filter.jsx":846,"react":785}],846:[function(require,module,exports){
	'use strict';

	var React = require('react');

	var parse_date = require('../../../../../lib/utils/parse_date.js').parse_date;

	var FilterSelect = require('../dialogs/FilterSelect.jsx');
	var IdUtils = require('../../../utils/IdUtils.js');

	var missingRequired = "-99999999";

	module.exports = React.createClass({
		displayName: 'exports',


		getInitialState: function getInitialState() {

			var filter = this.props.filter;

			//fix value for dynamic ranges
			if (filter.description) {
				filter.value = [filter.description];
				delete filter.description;
			}

			if (filter.isRequired && filter.length === 0) {
				filter.value = [missingRequired];
			}

			//force to array
			if (!Array.isArray(filter.value)) {
				if (filter.value == '') {
					filter.value = [];
				} else {
					filter.value = [filter.value];
				}
			}

			//retro fit
			if (!filter.checkboxes) {
				filter.checkboxes = {};
				for (var i in filter.value) {
					filter.checkboxes[filter.value[i]] = true;
				}
			}

			var comparison = filter.comparison;

			var isDateRange = filter.comparison && filter.comparison == 'between';
			var isDynamic = filter.value && filter.value[0] && !filter.value[0].toString().match(/\d{4}-\d{2}-\d{2}/);
			var isDate = filter.id.toLowerCase().indexOf('date.id') > -1 || filter.id.toLowerCase().indexOf('date._id') > -1 || filter.id.toLowerCase().indexOf('date.date') !== -1;

			if (!isDateRange && isDate && !filter.singleChoice) {
				if (filter.value.length == 0) {
					filter.value.push('today');
				}
				filter.value = filter.value.map(function (value) {
					if (!value.match(/\d{4}-\d{2}-\d{2}/)) {
						var isChecked = filter.checkboxes[value];
						delete filter.checkboxes[value];
						value = parse_date(value)[0];
						filter.checkboxes[value] = isChecked;
					}
					return value;
				});
			}

			return {
				isDateRange: isDateRange,
				//isDynamic: (filter.value && filter.value[0] && !filter.value[0].toString().match(/\d{4}-\d{2}-\d{2}/)),
				isDate: isDate,
				//singleValue: (filter.singleValue),
				updated: false,
				showEditor: this.props.editingFilter == filter.id,
				filter: filter,
				//searchText: '',
				//searchIndex: -1,
				//searchResults: [],
				comparison: comparison
			};
		},

		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			var filter = this.state.filter;

			if (!filter.label && nextProps.filter.label) {
				filter.label = nextProps.filter.label;
			}

			if (!filter.dimension && nextProps.filter.dimension) {
				filter.dimension = nextProps.filter.dimension;
			}

			if (nextProps.filter.checkboxes) {
				filter.checkboxes = $.extend({}, filter.checkboxes, nextProps.filter.checkboxes);
			}

			if (nextProps.filter.value) {
				if (nextProps.filter.value.length == 1 && nextProps.filter.value[0] == '') {
					filter.value = [];
				} else {
					filter.value = nextProps.filter.value;
				}
			}

			this.setState({ filter: filter });
		},

		/*
 closeTimeout: null,
 openTimeout: null,
 
 delayedClose: function(no_delay) {
 	var thisComponent = this;
 
 	if (thisComponent.openTimeout) {
 		clearTimeout(thisComponent.openTimeout);
 		thisComponent.openTimeout = null;
 	}
 
 	this.closeTimeout = setTimeout(function() {
 		if (thisComponent.openTimeout) {
 			clearTimeout(thisComponent.openTimeout);
 			thisComponent.openTimeout = null;
 		}
 
 		var state = thisComponent.state;
 
 		thisComponent.setState({
 			updated: false,
 			showEditor:false
 		});
 
 		if (state.updated || no_delay) {
 			thisComponent.props.updateReportFilter(thisComponent.state.filter);
 		}
 
 		thisComponent.closeTimeout = null;
 	}, (no_delay == true ? 0 : 500));
 },
 
 delayedOpen: function() {
 
 	var thisComponent = this;
 
 	if (thisComponent.closeTimeout) {
 		clearTimeout(thisComponent.closeTimeout);
 		thisComponent.closeTimeout = null;
 	}
 
 	this.openTimeout = setTimeout(function() {
 		if (thisComponent.closeTimeout) {
 			clearTimeout(thisComponent.closeTimeout);
 			thisComponent.closeTimeout = null;
 		}
 		thisComponent.setState({showEditor:true});
 		thisComponent.openTimeout = null;
 	}, 200);
 },*/

		close: function close(e, f) {
			if (e && e !== true) {
				e.stopPropagation();
			}

			if (this.state.filter.updated) {
				delete this.state.filter.updated;
				if (this.state.filter.value.length == 0 && this.state.filter.isRequired) {
					this.state.filter.value = [missingRequired];
				}
				this.props.updateReportFilter(this.state.filter);
			}

			this.setState({
				updated: false,
				showEditor: false
			});
		},

		open: function open(e) {
			this.setState({ showEditor: true });
		},

		render: function render() {

			var thisComponent = this;

			var filter = this.state.filter;

			var filterName = (filter.fact || filter.dimension || '') + ' ' + (filter.label ? filter.label : ' ');

			if (filterName.trim() == '') {
				var details = IdUtils.details(filter.id);
				if (details) {
					filterName = details.parent.label + ' ' + details.label;
				}
			}

			var display = "";
			if (filter.isRequired && filter.value[0] == missingRequired) {
				display = React.createElement(
					'em',
					null,
					'none'
				);
			} else if (filter.value.length > 0) {
				display = filter.value.join ? filter.value.join(this.state.isDateRange ? ' - ' : ', ') : filter.value;
			} else {
				display = React.createElement(
					'em',
					null,
					'All'
				);
			}

			return React.createElement(
				'li',
				{ ref: 'filter', className: "filter-wrapper" + (this.state.showEditor ? ' active' : '') + " " + (this.props.className || '') },
				this.state.showEditor ? React.createElement('div', { className: 'mask', onClick: this.close }) : false,
				React.createElement(
					'div',
					{ className: 'filter-heading', onClick: this.state.showEditor ? this.close : this.open },
					this.props.removeFilter ? React.createElement('i', { className: 'icon-cancel pull-right', onClick: this.props.removeFilter.bind(null, filter.id) }) : false,
					React.createElement(
						'div',
						{ className: 'filter-name' },
						filterName
					),
					React.createElement(
						'div',
						{ className: 'filter-text filter-values' },
						!this.state.isDate && filter.comparison && filter.comparison != '=' && filter.comparison != 'in' ? filter.comparison + ' ' : '',
						display
					)
				),
				this.state.showEditor ? React.createElement(FilterSelect, { filter: filter, removeFilter: this.props.removeFilter, delayedClose: this.close, autoComplete: this.props.autoComplete }) : false
			);
		}

	});

},{"../../../../../lib/utils/parse_date.js":4,"../../../utils/IdUtils.js":837,"../dialogs/FilterSelect.jsx":844,"react":785}],847:[function(require,module,exports){
	'use strict';

	try {
		var moment = require("moment");
	} catch (e) {}

	(function ($, window, undefined) {

		var uniqueId = 0; // used for unique ID generation within multiple plugin instances

		$.widget('leo.dateRangePicker', {
			version: '0.1',

			options: {
				dateFormat: 'yy-mm-dd', // displayed date format. Available formats: http://api.jqueryui.com/datepicker/#utility-formatDate
				altFormat: 'yy-mm-dd', // submitted date format - inside JSON {"start":"...","end":"..."}
				onChange: null, // callback that executes when the date range changes
				appendTo: 'body', // element to append the range picker to
				applyOnRangeSelect: true, //auto-apply when user selects range manually
				datepickerOptions: { // object containing datepicker options. See http://api.jqueryui.com/datepicker/#options
					numberOfMonths: 2,
					minDate: null,
					maxDate: null,
					showWeek: false,
					firstDay: 0
				}
			},

			_create: function _create() {
				this._dateRangePicker = buildDateRangePicker(this.element, this.options);
			},

			_destroy: function _destroy() {
				this._dateRangePicker.destroy();
			},

			_setOptions: function _setOptions(options) {
				this._super(options);
				this._dateRangePicker.enforceOptions();
			},

			setRange: function setRange(range) {
				this._dateRangePicker.setRange(range);
			},

			getRange: function getRange() {
				return this._dateRangePicker.getRange();
			},

			clearRange: function clearRange() {
				this._dateRangePicker.clearRange();
			},

			widget: function widget() {
				return this._dateRangePicker.getContainer();
			}
		});

		/**
  * factory for the multiple month date picker
  *
  * @param {String} classnameContext classname of the parent container
  * @param {Object} options
  */
		function buildCalendar(classnameContext, options, setRange) {
			var $self,
		    range = { start: null, end: null }; // selected range

			function init() {
				$self = $('<div></div>', { 'class': classnameContext + '-calendar ui-widget-content' });

				$self.datepicker($.extend({}, options.datepickerOptions, { beforeShowDay: beforeShowDay, onSelect: onSelectDay }));
				updateAtMidnight();
			}

			function enforceOptions() {
				$self.datepicker('option', $.extend({}, options.datepickerOptions, { beforeShowDay: beforeShowDay, onSelect: onSelectDay }));
			}

			// called when a day is selected
			function onSelectDay(dateText, instance) {
				var dateFormat = options.datepickerOptions.dateFormat || $.datepicker._defaults.dateFormat,
			    selectedDate = $.datepicker.parseDate(dateFormat, dateText);

				if (!range.start || range.end) {
				// start not set, or both already set
					range.start = selectedDate;
					range.end = null;
				} else if (selectedDate < range.start) {
				// start set, but selected date is earlier
					range.end = range.start;
					range.start = selectedDate;
				} else {
					range.end = selectedDate;
				}

				if (options.datepickerOptions.hasOwnProperty('onSelect')) {
					options.datepickerOptions.onSelect(dateText, instance);
				}

				if (options.applyOnRangeSelect) {
					setRange(range);
				}
			}

			// called for each day in the datepicker before it is displayed
			function beforeShowDay(date) {
				var result = [true, // selectable
						range.start && (+date === +range.start || range.end && range.start <= date && date <= range.end) ? 'ui-state-highlight' : '' // class to be added
					],
			    userResult = [true, ''];

				if (options.datepickerOptions.hasOwnProperty('beforeShowDay')) {
					userResult = options.datepickerOptions.beforeShowDay(date);
				}
				return [result[0] && userResult[0], result[1] + ' ' + userResult[1]];
			}

			function updateAtMidnight() {
				setTimeout(function () {
					refresh();
					updateAtMidnight();
				}, moment().endOf('day') - moment());
			}

			function _scrollToRangeStart() {
				if (range.start) {
					$self.datepicker('setDate', range.start);
				}
			}

			function refresh(scroll) {
				$self.datepicker('refresh');
				if (scroll) {
					_scrollToRangeStart();
				}
			}

			function reset() {
				range = { start: null, end: null };
				refresh();
			}

			init();
			return {
				getElement: function getElement() {
					return $self;
				},
				scrollToRangeStart: function scrollToRangeStart() {
					return _scrollToRangeStart();
				},
				getRange: function getRange() {
					return range;
				},
				setRange: function setRange(value, scroll) {
					range = value;refresh(scroll);
				},
				refresh: refresh,
				reset: reset,
				enforceOptions: enforceOptions
			};
		}

		/**
  * factory for the widget
  *
  * @param {jQuery} $originalElement jQuery object containing the input form element used to instantiate this widget instance
  * @param {Object} options
  */
		function buildDateRangePicker($originalElement, options) {
			var classname = 'leo-daterangepicker',
		    $container,
		    // the dropdown
				calendar;

			function init() {
				calendar = buildCalendar(classname, options, setRange);
				render();
				reset();
			}

			function render() {
				$container = calendar.getElement();
				$(options.appendTo).append($container);
			}

			function destroy() {
				$container.remove();
				$originalElement.show();
			}

			// formats a date range as JSON
			function formatRange(range) {
				var dateFormat = options.altFormat,
			    formattedRange = {};
				formattedRange.start = $.datepicker.formatDate(dateFormat, range.start);
				formattedRange.end = $.datepicker.formatDate(dateFormat, range.end);
				return JSON.stringify(formattedRange);
			}

			// parses a date range in JSON format
			function parseRange(text) {
				var dateFormat = options.altFormat,
			    range = null;
				if (text) {
					try {
						range = JSON.parse(text, function (key, value) {
							return key ? $.datepicker.parseDate(dateFormat, value) : value;
						});
					} catch (e) {}
				}
				return range;
			}

			function reset() {
				var range = getRange();
				if (range) {
					calendar.setRange(range);
				} else {
					calendar.reset();
				}
			}

			function setRange(value) {
				var range = value || calendar.getRange();
				if (!range.start) {
					return;
				}
				value && calendar.setRange(range);
				$originalElement.val(formatRange(range)).change();
				if (options.onChange) {
					options.onChange();
				}
			}

			function getRange() {
				return parseRange($originalElement.val());
			}

			function clearRange() {
				calendar.reset();
				$originalElement.val('');
			}

			function killEvent(event) {
				event.preventDefault();
				event.stopPropagation();
			}

			function getContainer() {
				return $container;
			}

			function enforceOptions() {
				calendar.enforceOptions();
				var range = getRange();
			}

			init();
			return {
				destroy: destroy,
				setRange: setRange,
				getRange: getRange,
				clearRange: clearRange,
				reset: reset,
				enforceOptions: enforceOptions,
				getContainer: getContainer
			};
		}
	})(jQuery, window);

},{"moment":611}],848:[function(require,module,exports){
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/*
 * MultiDatesPicker v1.6.3
 * http://multidatespickr.sourceforge.net/
 * 
 * Copyright 2014, Luca Lauretta
 * Dual licensed under the MIT or GPL version 2 licenses.
 */
	(function ($) {
		$.extend($.ui, { multiDatesPicker: { version: "1.6.3" } });

		$.fn.multiDatesPicker = function (method) {
			var mdp_arguments = arguments;
			var ret = this;
			var today_date = new Date();
			var day_zero = new Date(0);
			var mdp_events = {};

			function removeDate(date, type) {
				if (!type) type = 'picked';
				date = dateConvert.call(this, date);
				for (var i = 0; i < this.multiDatesPicker.dates[type].length; i++) {
					if (!methods.compareDates(this.multiDatesPicker.dates[type][i], date)) return this.multiDatesPicker.dates[type].splice(i, 1).pop();
				}
			}
			function removeIndex(index, type) {
				if (!type) type = 'picked';
				return this.multiDatesPicker.dates[type].splice(index, 1).pop();
			}
			function addDate(date, type, no_sort) {
				if (!type) type = 'picked';
				date = dateConvert.call(this, date);

				// @todo: use jQuery UI datepicker method instead
				date.setHours(0);
				date.setMinutes(0);
				date.setSeconds(0);
				date.setMilliseconds(0);

				if (methods.gotDate.call(this, date, type) === false) {
					this.multiDatesPicker.dates[type].push(date);
					if (!no_sort) this.multiDatesPicker.dates[type].sort(methods.compareDates);
				}
			}
			function sortDates(type) {
				if (!type) type = 'picked';
				this.multiDatesPicker.dates[type].sort(methods.compareDates);
			}
			function dateConvert(date, desired_type, date_format) {
				if (!desired_type) desired_type = 'object'; /*
                                               if(!date_format && (typeof date == 'string')) {
                                               date_format = $(this).datepicker('option', 'dateFormat');
                                               if(!date_format) date_format = $.datepicker._defaults.dateFormat;
                                               }
                                               */
				return methods.dateConvert.call(this, date, desired_type, date_format);
			}

			var methods = {
				init: function init(options) {
					var $this = $(this);
					this.multiDatesPicker.changed = false;

					var mdp_events = {
						beforeShow: function beforeShow(input, inst) {
							this.multiDatesPicker.changed = false;
							if (this.multiDatesPicker.originalBeforeShow) this.multiDatesPicker.originalBeforeShow.call(this, input, inst);
						},
						onSelect: function onSelect(dateText, inst) {
							var $this = $(this);
							this.multiDatesPicker.changed = true;

							if (dateText) {
								$this.multiDatesPicker('toggleDate', dateText);
								this.multiDatesPicker.changed = true;
							// @todo: this will be optimized when I'll move methods to the singleton.
							}

							if (this.multiDatesPicker.mode == 'normal' && this.multiDatesPicker.pickableRange) {
								if (this.multiDatesPicker.dates.picked.length > 0) {
									var min_date = this.multiDatesPicker.dates.picked[0],
								    max_date = new Date(min_date.getTime());

									methods.sumDays(max_date, this.multiDatesPicker.pickableRange - 1);

									// counts the number of disabled dates in the range
									if (this.multiDatesPicker.adjustRangeToDisabled) {
										var c_disabled,
									    disabled = this.multiDatesPicker.dates.disabled.slice(0);
										do {
											c_disabled = 0;
											for (var i = 0; i < disabled.length; i++) {
												if (disabled[i].getTime() <= max_date.getTime()) {
													if (min_date.getTime() <= disabled[i].getTime() && disabled[i].getTime() <= max_date.getTime()) {
														c_disabled++;
													}
													disabled.splice(i, 1);
													i--;
												}
											}
											max_date.setDate(max_date.getDate() + c_disabled);
										} while (c_disabled != 0);
									}

									if (this.multiDatesPicker.maxDate && max_date > this.multiDatesPicker.maxDate) max_date = this.multiDatesPicker.maxDate;

									$this.datepicker("option", "minDate", min_date).datepicker("option", "maxDate", max_date);
								} else {
									$this.datepicker("option", "minDate", this.multiDatesPicker.minDate).datepicker("option", "maxDate", this.multiDatesPicker.maxDate);
								}
							}

							if (this.multiDatesPicker.originalOnSelect && dateText) this.multiDatesPicker.originalOnSelect.call(this, dateText, inst);
						},
						beforeShowDay: function beforeShowDay(date) {
							var $this = $(this),
						    gotThisDate = $this.multiDatesPicker('gotDate', date) !== false,
						    isDisabledCalendar = $this.datepicker('option', 'disabled'),
						    isDisabledDate = $this.multiDatesPicker('gotDate', date, 'disabled') !== false,
						    areAllSelected = this.multiDatesPicker.maxPicks <= this.multiDatesPicker.dates.picked.length;

							var bsdReturn = [true, '', null];
							if (this.multiDatesPicker.originalBeforeShowDay) bsdReturn = this.multiDatesPicker.originalBeforeShowDay.call(this, date);

							bsdReturn[1] = gotThisDate ? 'ui-state-highlight' : bsdReturn[1];
							bsdReturn[0] = bsdReturn[0] && !(isDisabledCalendar || isDisabledDate || areAllSelected && !bsdReturn[1]);
							return bsdReturn;
						}
					};

					// value have to be extracted before datepicker is initiated
					if ($this.val()) var inputDates = $this.val();
					this.multiDatesPicker.separator = ', ';

					if (options) {
					// value have to be extracted before datepicker is initiated
					//if(options.altField) var inputDates = $(options.altField).val();
						if (options.separator) this.multiDatesPicker.separator = options.separator;

						this.multiDatesPicker.originalBeforeShow = options.beforeShow;
						this.multiDatesPicker.originalOnSelect = options.onSelect;
						this.multiDatesPicker.originalBeforeShowDay = options.beforeShowDay;
						this.multiDatesPicker.originalOnClose = options.onClose;

						// datepicker init
						$this.datepicker(options);

						this.multiDatesPicker.minDate = $.datepicker._determineDate(this, options.minDate, null);
						this.multiDatesPicker.maxDate = $.datepicker._determineDate(this, options.maxDate, null);
						if (options.addDates) methods.addDates.call(this, options.addDates);

						if (options.addDisabledDates) methods.addDates.call(this, options.addDisabledDates, 'disabled');

						methods.setMode.call(this, options);
					} else {
						$this.datepicker();
					}
					$this.datepicker('option', mdp_events);

					// adds any dates found in the input or alt field
					//				if(inputDates) $this.multiDatesPicker('value', inputDates);

					// generates the new string of added dates
					var inputs_values = $this.multiDatesPicker('value');

					// fills the input field back with all the dates in the calendar
					if (this.tagName == 'INPUT') $this.val(inputs_values);

					// Fixes the altField filled with defaultDate by default
					var altFieldOption = $this.datepicker('option', 'altField');
					if (altFieldOption) $(altFieldOption).val(inputs_values);

					// Updates the calendar view
					$this.datepicker('refresh');
				},
				compareDates: function compareDates(date1, date2) {
					date1 = dateConvert.call(this, date1);
					date2 = dateConvert.call(this, date2);
					// return > 0 means date1 is later than date2 
					// return == 0 means date1 is the same day as date2 
					// return < 0 means date1 is earlier than date2 
					var diff = date1.getFullYear() - date2.getFullYear();
					if (!diff) {
						diff = date1.getMonth() - date2.getMonth();
						if (!diff) diff = date1.getDate() - date2.getDate();
					}
					return diff;
				},
				sumDays: function sumDays(date, n_days) {
					var origDateType = typeof date === 'undefined' ? 'undefined' : _typeof(date);
					obj_date = dateConvert.call(this, date);
					obj_date.setDate(obj_date.getDate() + n_days);
					return dateConvert.call(this, obj_date, origDateType);
				},
				dateConvert: function dateConvert(date, desired_format, dateFormat) {
					var from_format = typeof date === 'undefined' ? 'undefined' : _typeof(date);

					if (from_format == desired_format) {
						if (from_format == 'object') {
							try {
								date.getTime();
							} catch (e) {
								$.error('Received date is in a non supported format!');
								return false;
							}
						}
						return date;
					}

					var $this = $(this);
					if (typeof date == 'undefined') date = new Date(0);

					if (desired_format != 'string' && desired_format != 'object' && desired_format != 'number') $.error('Date format "' + desired_format + '" not supported!');

					if (!dateFormat) {
						dateFormat = $.datepicker._defaults.dateFormat;

						// thanks to bibendus83 -> http://sourceforge.net/tracker/index.php?func=detail&aid=3213174&group_id=358205&atid=1495382
						var dp_dateFormat = $this.datepicker('option', 'dateFormat');
						if (dp_dateFormat) {
							dateFormat = dp_dateFormat;
						}
					}

					// converts to object as a neutral format
					switch (from_format) {
					case 'object':
						break;
					case 'string':
						date = $.datepicker.parseDate(dateFormat, date);break;
					case 'number':
						date = new Date(date);break;
					default:
						$.error('Conversion from "' + desired_format + '" format not allowed on jQuery.multiDatesPicker');
					}
					// then converts to the desired format
					switch (desired_format) {
					case 'object':
						return date;
					case 'string':
						return $.datepicker.formatDate(dateFormat, date);
					case 'number':
						return date.getTime();
					default:
						$.error('Conversion to "' + desired_format + '" format not allowed on jQuery.multiDatesPicker');
					}
					return false;
				},
				gotDate: function gotDate(date, type) {
					if (!type) type = 'picked';
					for (var i = 0; i < this.multiDatesPicker.dates[type].length; i++) {
						if (methods.compareDates.call(this, this.multiDatesPicker.dates[type][i], date) === 0) {
							return i;
						}
					}
					return false;
				},
				value: function value(_value) {
					if (_value && typeof _value == 'string') {
						methods.addDates.call(this, _value.split(this.multiDatesPicker.separator));
					} else {
						var dates = methods.getDates.call(this, 'string');
						return dates.length ? dates.join(this.multiDatesPicker.separator) : "";
					}
				},
				getDates: function getDates(format, type) {
					if (!format) format = 'string';
					if (!type) type = 'picked';
					switch (format) {
					case 'object':
						return this.multiDatesPicker.dates[type];
					case 'string':
					case 'number':
						var o_dates = new Array();
						for (var i in this.multiDatesPicker.dates[type]) {
							o_dates.push(dateConvert.call(this, this.multiDatesPicker.dates[type][i], format));
						}return o_dates;

					default:
						$.error('Format "' + format + '" not supported!');
					}
				},
				addDates: function addDates(dates, type) {
					if (dates.length > 0) {
						if (!type) type = 'picked';
						switch (typeof dates === 'undefined' ? 'undefined' : _typeof(dates)) {
						case 'object':
						case 'array':
							if (dates.length) {
								for (var i = 0; i < dates.length; i++) {
									addDate.call(this, dates[i], type, true);
								}sortDates.call(this, type);
								break;
							} // else does the same as 'string'
						case 'string':
						case 'number':
							addDate.call(this, dates, type);
							break;
						default:
							$.error('Date format "' + (typeof dates === 'undefined' ? 'undefined' : _typeof(dates)) + '" not allowed on jQuery.multiDatesPicker');
						}
					//$(this).datepicker('refresh');
					} else {
						$.error('Empty array of dates received.');
					}
				},
				removeDates: function removeDates(dates, type) {
					if (!type) type = 'picked';
					var removed = [];
					if (Object.prototype.toString.call(dates) === '[object Array]') {
						for (var i in dates.sort(function (a, b) {
							return b - a;
						})) {
							removed.push(removeDate.call(this, dates[i], type));
						}
					} else {
						removed.push(removeDate.call(this, dates, type));
					}
					return removed;
				},
				removeIndexes: function removeIndexes(indexes, type) {
					if (!type) type = 'picked';
					var removed = [];
					if (Object.prototype.toString.call(indexes) === '[object Array]') {
						for (var i in indexes.sort(function (a, b) {
							return b - a;
						})) {
							removed.push(removeIndex.call(this, indexes[i], type));
						}
					} else {
						removed.push(removeIndex.call(this, indexes, type));
					}
					return removed;
				},
				resetDates: function resetDates(type) {
					if (!type) type = 'picked';
					this.multiDatesPicker.dates[type] = [];
				},
				toggleDate: function toggleDate(date, type) {
					if (!type) type = 'picked';

					switch (this.multiDatesPicker.mode) {
					case 'daysRange':
						this.multiDatesPicker.dates[type] = []; // deletes all picked/disabled dates
						var end = this.multiDatesPicker.autoselectRange[1];
						var begin = this.multiDatesPicker.autoselectRange[0];
						if (end < begin) {
							// switch
							end = this.multiDatesPicker.autoselectRange[0];
							begin = this.multiDatesPicker.autoselectRange[1];
						}
						for (var i = begin; i < end; i++) {
							methods.addDates.call(this, methods.sumDays(date, i), type);
						}break;
					default:
						if (methods.gotDate.call(this, date) === false) // adds dates
							methods.addDates.call(this, date, type);else // removes dates
							methods.removeDates.call(this, date, type);
						break;
					}
				},
				setMode: function setMode(options) {
					var $this = $(this);
					var option;
					if (options.mode) {
						this.multiDatesPicker.mode = options.mode;
					}

					switch (this.multiDatesPicker.mode) {
					case 'normal':
						for (option in options) {
							switch (option) {
							case 'maxPicks':
							case 'minPicks':
							case 'pickableRange':
							case 'adjustRangeToDisabled':
								this.multiDatesPicker[option] = options[option];
								break;
								//default: $.error('Option ' + option + ' ignored for mode "'.options.mode.'".');
							}
						}break;
					case 'daysRange':
					case 'weeksRange':
						var mandatory = 1;
						for (option in options) {
							switch (option) {
							case 'autoselectRange':
								mandatory--;
							case 'pickableRange':
							case 'adjustRangeToDisabled':
								this.multiDatesPicker[option] = options[option];
								break;
								//default: $.error('Option ' + option + ' does not exist for setMode on jQuery.multiDatesPicker');
							}
						}if (mandatory > 0) $.error('Some mandatory options not specified!');
						break;
					}

					/*
    if(options.pickableRange) {
    	$this.datepicker("option", "maxDate", options.pickableRange);
    	$this.datepicker("option", "minDate", this.multiDatesPicker.minDate);
    }
    */

					if (mdp_events.onSelect) mdp_events.onSelect();
				},
				destroy: function destroy() {
					this.multiDatesPicker = null;
					$(this).datepicker('destroy');
				}
			};

			this.each(function () {
				var $this = $(this);
				if (!this.multiDatesPicker) {
					this.multiDatesPicker = {
						dates: {
							picked: [],
							disabled: []
						},
						mode: 'normal',
						adjustRangeToDisabled: true
					};
				}

				if (methods[method]) {
					var exec_result = methods[method].apply(this, Array.prototype.slice.call(mdp_arguments, 1));
					switch (method) {
					case 'removeDates':
					case 'removeIndexes':
					case 'resetDates':
					case 'toggleDate':
					case 'addDates':
						var altField = $this.datepicker('option', 'altField');
						// @todo: should use altFormat for altField
						var dates_string = methods.value.call(this);
						if (altField !== undefined && altField != "") {
							$(altField).val(dates_string);
						}
						if (this.tagName == 'INPUT') {
							// for inputs
							$this.val(dates_string);
						}

						$.datepicker._refreshDatepicker(this);
					}
					switch (method) {
					case 'removeDates':
					case 'getDates':
					case 'gotDate':
					case 'sumDays':
					case 'compareDates':
					case 'dateConvert':
					case 'value':
						ret = exec_result;
					}
					return exec_result;
				} else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {
					return methods.init.apply(this, mdp_arguments);
				} else {
					$.error('Method ' + method + ' does not exist on jQuery.multiDatesPicker');
				}
				return false;
			});

			return ret;
		};

		var PROP_NAME = 'multiDatesPicker';
		var dpuuid = new Date().getTime();
		var instActive;

		$.multiDatesPicker = { version: false };
		//$.multiDatesPicker = new MultiDatesPicker(); // singleton instance
		$.multiDatesPicker.initialized = false;
		$.multiDatesPicker.uuid = new Date().getTime();
		$.multiDatesPicker.version = $.ui.multiDatesPicker.version;

		// allows MDP not to hide everytime a date is picked
		$.multiDatesPicker._hideDatepicker = $.datepicker._hideDatepicker;
		$.datepicker._hideDatepicker = function () {
			var target = this._curInst.input[0];
			var mdp = target.multiDatesPicker;
			if (!mdp || this._curInst.inline === false && !mdp.changed) {
				return $.multiDatesPicker._hideDatepicker.apply(this, arguments);
			} else {
				mdp.changed = false;
				$.datepicker._refreshDatepicker(target);
				return;
			}
		};

		// Workaround for #4055
		// Add another global to avoid noConflict issues with inline event handlers
		window['DP_jQuery_' + dpuuid] = $;
	})(jQuery);

},{}]},{},[1])(1);
});
